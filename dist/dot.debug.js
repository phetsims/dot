(function() {

window.phet=window.phet||{}
;
  if ( !window.hasOwnProperty( '_' ) ) {
    throw new Error( 'Underscore/Lodash not found: _' );
  }
// Copyright 2013-2022, University of Colorado Boulder

/*
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

( function() {


  window.assertions = window.assertions || {};
  window.assertions.assertFunction = window.assertions.assertFunction || function( predicate, ...messages ) {
    if ( !predicate ) {

      // don't treat falsey as a message.
      messages = messages.filter( message => !!messages );

      // Log the stack trace to IE.  Just creating an Error is not enough, it has to be caught to get a stack.
      if ( window.navigator && window.navigator.appName === 'Microsoft Internet Explorer' ) {
        messages.push( `stack=\n${new Error().stack}` );
      }

      // Add "Assertion Failed" to the front of the message list
      const assertPrefix = messages.length > 0 ? 'Assertion failed: ' : 'Assertion failed';
      console && console.log && console.log( assertPrefix, ...messages );
      if ( window.phet && phet.chipper && phet.chipper.queryParameters && phet.chipper.queryParameters.debugger ) {
        debugger; // eslint-disable-line no-debugger
      }
      throw new Error( assertPrefix + messages.join( '\n ' ) );
    }
  };

  window.assert = window.assert || null;
  window.assertSlow = window.assertSlow || null;

  window.assertions.enableAssert = function() {
    window.assert = window.assertions.assertFunction;
    window.console && window.console.log && window.console.log( 'enabling assert' );
  };
  window.assertions.disableAssert = function() {
    window.assert = null;
    window.console && window.console.log && window.console.log( 'disabling assert' );
  };

  window.assertions.enableAssertSlow = function() {
    window.assertSlow = window.assertions.assertFunction;
    window.console && window.console.log && window.console.log( 'enabling assertSlow' );
  };
  window.assertions.disableAssertSlow = function() {
    window.assertSlow = null;
    window.console && window.console.log && window.console.log( 'disabling assertSlow' );
  };
} )();

// Copyright 2017-2022, University of Colorado Boulder

/**
 * Utilities for creating and manipulating the unique identifiers assigned to instrumented PhET-iO instances, aka
 * phetioIDs.
 *
 * Many of these functions' jsdoc is rendered and visible publicly to PhET-iO client. Those sections should be
 * marked, see top level comment in Client.js about private vs public documentation
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Sam Reid (PhET Interactive Simulations)
 */
( function() {
  

  // define the phetio global
  window.phetio = window.phetio || {};

  // constants
  const SEPARATOR = '.';
  const GROUP_SEPARATOR = '_';
  const INTER_TERM_SEPARATOR = '-';
  const GENERAL_COMPONENT_NAME = 'general';
  const GLOBAL_COMPONENT_NAME = 'global';
  const HOME_SCREEN_COMPONENT_NAME = 'homeScreen';
  const MODEL_COMPONENT_NAME = 'model';
  const VIEW_COMPONENT_NAME = 'view';
  const COLORS_COMPONENT_NAME = 'colors';
  const CONTROLLER_COMPONENT_NAME = 'controller';
  const SCREEN_COMPONENT_NAME = 'Screen';

  /**
   * Helpful methods for manipulating phetioIDs. Used to minimize the amount of duplicated logic specific to the string
   * structure of the phetioID. Available in the main PhET-iO js import.
   * @namespace
   */
  window.phetio.PhetioIDUtils = {

    // Private Doc: The below jsdoc is public to the PhET-iO API documentation. Change wisely.
    /**
     * Appends a component to an existing phetioID to create a new unique phetioID for the component.
     * @example
     * append( 'myScreen.myControlPanel', 'myComboBox' )
     * -->  'myScreen.myControlPanel.myComboBox'
     * @public
     * @param {string} phetioID - the ID of the PhET-iO element
     * @param {string|string[]} componentNames - the name or list of names to append to the ID
     * @returns {string} - the appended phetioID
     */
    append: function( phetioID, ...componentNames ) {
      componentNames.forEach( componentName => {
        assert && assert( componentName.indexOf( SEPARATOR ) === -1, `separator appears in componentName: ${componentName}` );
        phetioID += SEPARATOR + componentName;
      } );
      return phetioID;
    },

    // Private Doc: The below jsdoc is public to the PhET-iO API documentation. Change wisely.
    /**
     * Given a phetioID for a PhET-iO element, get the part of that ID that pertains to the component (basically the
     * tail piece).
     * @example
     * getComponentName( 'myScreen.myControlPanel.myComboBox' )
     * -->  'myComboBox'
     * @public
     * @param {string} phetioID - the ID of the PhET-iO element
     * @returns {string} - the component name
     */
    getComponentName: function( phetioID ) {
      assert && assert( phetioID.length > 0 );
      const indexOfLastSeparator = phetioID.lastIndexOf( SEPARATOR );
      if ( indexOfLastSeparator === -1 ) {
        return phetioID;
      }
      else {
        return phetioID.substring( indexOfLastSeparator + 1, phetioID.length );
      }
    },

    // Private Doc: The below jsdoc is public to the PhET-iO API documentation. Change wisely.
    /**
     * Given a phetioID for a PhET-iO element, get the phetioID of the parent component.
     * @example
     * getParentID( 'myScreen.myControlPanel.myComboBox' )
     * -->  'myScreen.myControlPanel'
     * @public
     * @param {string} phetioID - the ID of the PhET-iO element
     * @returns {string|null} - the phetioID of the parent, or null if there is no parent
     */
    getParentID: function( phetioID ) {
      const indexOfLastSeparator = phetioID.lastIndexOf( SEPARATOR );
      return indexOfLastSeparator === -1 ? null : phetioID.substring( 0, indexOfLastSeparator );
    },

    // Private Doc: The below jsdoc is public to the PhET-iO API documentation. Change wisely.
    /**
     * Given a phetioID for a instrumented object, get a string that can be used to assign an ID to a DOM element
     * @param {string} phetioID - the ID of the PhET-iO element
     * @returns {string}
     * @public
     */
    getDOMElementID: function( phetioID ) {
      return `phetioID:${phetioID}`;
    },

    // Private Doc: The below jsdoc is public to the PhET-iO API documentation. Change wisely.
    /**
     * Get the screen id from the phetioID.
     * @example
     * getScreenID( 'sim.myScreen.model.property' )
     * --> sim.myScreen
     * getScreenID( 'sim.myScreen' )
     * --> sim.myScreen
     * getScreenID( 'sim.general.activeProperty' )
     * --> null
     * @param {string} phetioID
     * @returns {string|null} - null if there is no screen component name in the phetioID
     */
    getScreenID: function( phetioID ) {
      const screenIDParts = [];
      const phetioIDParts = phetioID.split( SEPARATOR );
      for ( let i = 0; i < phetioIDParts.length; i++ ) {
        const componentPart = phetioIDParts[ i ];
        screenIDParts.push( componentPart );
        const indexOfScreenMarker = componentPart.indexOf( SCREEN_COMPONENT_NAME );
        if ( indexOfScreenMarker > 0 && indexOfScreenMarker + SCREEN_COMPONENT_NAME.length === componentPart.length ) { // endsWith proxy
          return screenIDParts.join( SEPARATOR );
        }
      }
      return null;
    },

    // Private Doc: The below jsdoc is public to the PhET-iO API documentation. Change wisely.
    /**
     * Get the index number from the component name of the component name provided.
     * @param {string} componentName
     * @returns {number}
     * @example
     * getGroupElementIndex( 'particle_1' )
     * --> 1
     * @public
     */
    getGroupElementIndex: function( componentName ) {
      assert && assert( componentName.indexOf( window.phetio.PhetioIDUtils.GROUP_SEPARATOR ) >= 0,
        'component name for phetioID should have group element syntax' );
      return Number( componentName.split( window.phetio.PhetioIDUtils.GROUP_SEPARATOR )[ 1 ] );
    },

    /**
     * Returns true if the potential ancestor is indeed an ancestor of the potential descendant, but not the same phetioID
     * @param {string} potentialAncestorPhetioID
     * @param {string} potentialDescendantPhetioID
     * @returns {boolean}
     * @public
     */
    isAncestor: function( potentialAncestorPhetioID, potentialDescendantPhetioID ) {
      const ancestorComponents = potentialAncestorPhetioID.split( SEPARATOR );
      const descendantComponents = potentialDescendantPhetioID.split( SEPARATOR );
      for ( let i = 0; i < ancestorComponents.length; i++ ) {
        if ( ancestorComponents[ i ] !== descendantComponents[ i ] ) {
          return false;
        }
      }

      // not the same child
      return potentialDescendantPhetioID !== potentialAncestorPhetioID;
    },

    // Private Doc: The below jsdoc is public to the PhET-iO API documentation. Change wisely.
    /**
     * The separator used to piece together a phet-io ID.
     * @type {string}
     * @constant
     * @public
     */
    SEPARATOR: SEPARATOR,

    // Private Doc: The below jsdoc is public to the PhET-iO API documentation. Change wisely.
    /**
     * The separator used to specify the count of a element in a group.
     * @type {string}
     * @constant
     * @public
     */
    GROUP_SEPARATOR: GROUP_SEPARATOR,

    /**
     * The separator used to specify terms in a phetioID that is used by another phetioID. For example:
     *
     * sim.general.view.sim-global-otherID
     *
     * @type {string}
     * @constant
     * @public
     */
    INTER_TERM_SEPARATOR: INTER_TERM_SEPARATOR,

    // Private Doc: The below jsdoc is public to the PhET-iO API documentation. Change wisely.
    /**
     * The component name for the id section that holds phet-io elements general to all simulations.
     * @type {string}
     * @constant
     * @public
     */
    GENERAL_COMPONENT_NAME: GENERAL_COMPONENT_NAME,

    // Private Doc: The below jsdoc is public to the PhET-iO API documentation. Change wisely.
    /**
     * The component name for the id section that holds simulation specific elements that don't belong in a screen.
     * @type {string}
     * @constant
     * @public
     */
    GLOBAL_COMPONENT_NAME: GLOBAL_COMPONENT_NAME,

    // Private Doc: The below jsdoc is public to the PhET-iO API documentation. Change wisely.
    /**
     * The component name for the id section that holds the home screen.
     * @type {string}
     * @constant
     * @public
     */
    HOME_SCREEN_COMPONENT_NAME: HOME_SCREEN_COMPONENT_NAME,

    // Private Doc: The below jsdoc is public to the PhET-iO API documentation. Change wisely.
    /**
     * The component name for an id section that holds model specific elements.
     * @type {string}
     * @constant
     * @public
     */
    MODEL_COMPONENT_NAME: MODEL_COMPONENT_NAME,

    // Private Doc: The below jsdoc is public to the PhET-iO API documentation. Change wisely.
    /**
     * The component name for an id section that holds view specific elements.
     * @type {string}
     * @constant
     * @public
     */
    VIEW_COMPONENT_NAME: VIEW_COMPONENT_NAME,

    // Private Doc: The below jsdoc is public to the PhET-iO API documentation. Change wisely.
    /**
     * The component name for an id section that holds controller specific elements.
     * @type {string}
     * @constant
     * @public
     */
    CONTROLLER_COMPONENT_NAME: CONTROLLER_COMPONENT_NAME,

    /**
     * The component name for a section that holds colors
     * @type {string}
     * @constant
     * @public
     */
    COLORS_COMPONENT_NAME: COLORS_COMPONENT_NAME
  };
} )();
window.assertions.enableAssert();

/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 897:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* module decorator */ module = __webpack_require__.hmd(module);
// Copyright 2020, University of Colorado Boulder

/**
 * Hot module replacement (HMR) enables reloading and replacing a single module within a running, stateful application.
 * The general pattern is to listen for a module replacement and re-run downstream code that uses the module.
 * For example:
 *
 *  // In a constructor
 *  const initializeWavesNode = () => {
 *   this.wavesNode && this.removeChild( this.wavesNode );
 *   this.wavesNode = new WavesNode( model, this.layoutBounds );
 *   this.addChild( this.wavesNode );
 *  };
 *
 *  initializeWavesNode();
 *
 * // Enable hot module replacement for fast iteration
 * isHMR && module.hot.accept( './WavesNode.js', initializeWavesNode );
 *
 * This can be used in concert with `grunt webpack-dev-server` from a simulation directory to launch a server that
 * supports hot module replacement.
 *
 * Note that when using HMR with a model module, you must pass re-instantiated model elements to corresponding view
 * elements, which can be prohibitively difficult. On the other hand, using HMR on a view can be simpler because often a
 * view element only needs to be swapped out in one place (say, replacing a node). Likewise, using HMR for static or
 * utility functions/modules works very well, since no instances need to be swapped out.
 *
 * When running with webpack-dev-server, a global "module" exists, but window.module does not.  In unbuilt mode,
 * neither "module" nor window.module exist.  This code factors out the check for the global "module".
 *
 * Since this code relies on a try/catch block, you probably should blackbox it in chrome dev tools, see
 * https://developer.chrome.com/devtools/docs/blackboxing#how-to-blackbox
 *
 * TODO: Make sure this gets stripped out on builds, see https://github.com/phetsims/chipper/issues/953
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

let isHMR;
try {
  isHMR = module && module.hot;
} catch (e) {
  isHMR = false;
}

// Not namespaced because Namespace relies on this file

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isHMR);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc0hNUiIsIm1vZHVsZSIsImhvdCIsImUiXSwic291cmNlcyI6WyJpc0hNUi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogSG90IG1vZHVsZSByZXBsYWNlbWVudCAoSE1SKSBlbmFibGVzIHJlbG9hZGluZyBhbmQgcmVwbGFjaW5nIGEgc2luZ2xlIG1vZHVsZSB3aXRoaW4gYSBydW5uaW5nLCBzdGF0ZWZ1bCBhcHBsaWNhdGlvbi5cbiAqIFRoZSBnZW5lcmFsIHBhdHRlcm4gaXMgdG8gbGlzdGVuIGZvciBhIG1vZHVsZSByZXBsYWNlbWVudCBhbmQgcmUtcnVuIGRvd25zdHJlYW0gY29kZSB0aGF0IHVzZXMgdGhlIG1vZHVsZS5cbiAqIEZvciBleGFtcGxlOlxuICpcbiAqICAvLyBJbiBhIGNvbnN0cnVjdG9yXG4gKiAgY29uc3QgaW5pdGlhbGl6ZVdhdmVzTm9kZSA9ICgpID0+IHtcbiAqICAgdGhpcy53YXZlc05vZGUgJiYgdGhpcy5yZW1vdmVDaGlsZCggdGhpcy53YXZlc05vZGUgKTtcbiAqICAgdGhpcy53YXZlc05vZGUgPSBuZXcgV2F2ZXNOb2RlKCBtb2RlbCwgdGhpcy5sYXlvdXRCb3VuZHMgKTtcbiAqICAgdGhpcy5hZGRDaGlsZCggdGhpcy53YXZlc05vZGUgKTtcbiAqICB9O1xuICpcbiAqICBpbml0aWFsaXplV2F2ZXNOb2RlKCk7XG4gKlxuICogLy8gRW5hYmxlIGhvdCBtb2R1bGUgcmVwbGFjZW1lbnQgZm9yIGZhc3QgaXRlcmF0aW9uXG4gKiBpc0hNUiAmJiBtb2R1bGUuaG90LmFjY2VwdCggJy4vV2F2ZXNOb2RlLmpzJywgaW5pdGlhbGl6ZVdhdmVzTm9kZSApO1xuICpcbiAqIFRoaXMgY2FuIGJlIHVzZWQgaW4gY29uY2VydCB3aXRoIGBncnVudCB3ZWJwYWNrLWRldi1zZXJ2ZXJgIGZyb20gYSBzaW11bGF0aW9uIGRpcmVjdG9yeSB0byBsYXVuY2ggYSBzZXJ2ZXIgdGhhdFxuICogc3VwcG9ydHMgaG90IG1vZHVsZSByZXBsYWNlbWVudC5cbiAqXG4gKiBOb3RlIHRoYXQgd2hlbiB1c2luZyBITVIgd2l0aCBhIG1vZGVsIG1vZHVsZSwgeW91IG11c3QgcGFzcyByZS1pbnN0YW50aWF0ZWQgbW9kZWwgZWxlbWVudHMgdG8gY29ycmVzcG9uZGluZyB2aWV3XG4gKiBlbGVtZW50cywgd2hpY2ggY2FuIGJlIHByb2hpYml0aXZlbHkgZGlmZmljdWx0LiBPbiB0aGUgb3RoZXIgaGFuZCwgdXNpbmcgSE1SIG9uIGEgdmlldyBjYW4gYmUgc2ltcGxlciBiZWNhdXNlIG9mdGVuIGFcbiAqIHZpZXcgZWxlbWVudCBvbmx5IG5lZWRzIHRvIGJlIHN3YXBwZWQgb3V0IGluIG9uZSBwbGFjZSAoc2F5LCByZXBsYWNpbmcgYSBub2RlKS4gTGlrZXdpc2UsIHVzaW5nIEhNUiBmb3Igc3RhdGljIG9yXG4gKiB1dGlsaXR5IGZ1bmN0aW9ucy9tb2R1bGVzIHdvcmtzIHZlcnkgd2VsbCwgc2luY2Ugbm8gaW5zdGFuY2VzIG5lZWQgdG8gYmUgc3dhcHBlZCBvdXQuXG4gKlxuICogV2hlbiBydW5uaW5nIHdpdGggd2VicGFjay1kZXYtc2VydmVyLCBhIGdsb2JhbCBcIm1vZHVsZVwiIGV4aXN0cywgYnV0IHdpbmRvdy5tb2R1bGUgZG9lcyBub3QuICBJbiB1bmJ1aWx0IG1vZGUsXG4gKiBuZWl0aGVyIFwibW9kdWxlXCIgbm9yIHdpbmRvdy5tb2R1bGUgZXhpc3QuICBUaGlzIGNvZGUgZmFjdG9ycyBvdXQgdGhlIGNoZWNrIGZvciB0aGUgZ2xvYmFsIFwibW9kdWxlXCIuXG4gKlxuICogU2luY2UgdGhpcyBjb2RlIHJlbGllcyBvbiBhIHRyeS9jYXRjaCBibG9jaywgeW91IHByb2JhYmx5IHNob3VsZCBibGFja2JveCBpdCBpbiBjaHJvbWUgZGV2IHRvb2xzLCBzZWVcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZGV2dG9vbHMvZG9jcy9ibGFja2JveGluZyNob3ctdG8tYmxhY2tib3hcbiAqXG4gKiBUT0RPOiBNYWtlIHN1cmUgdGhpcyBnZXRzIHN0cmlwcGVkIG91dCBvbiBidWlsZHMsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY2hpcHBlci9pc3N1ZXMvOTUzXG4gKlxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5sZXQgaXNITVI7XG5cbnRyeSB7XG4gIGlzSE1SID0gbW9kdWxlICYmIG1vZHVsZS5ob3Q7XG59XG5jYXRjaCggZSApIHtcbiAgaXNITVIgPSBmYWxzZTtcbn1cblxuLy8gTm90IG5hbWVzcGFjZWQgYmVjYXVzZSBOYW1lc3BhY2UgcmVsaWVzIG9uIHRoaXMgZmlsZVxuXG5leHBvcnQgZGVmYXVsdCBpc0hNUjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSUEsS0FBSztBQUVULElBQUk7RUFDRkEsS0FBSyxHQUFHQyxNQUFNLElBQUlBLE1BQU0sQ0FBQ0MsR0FBRztBQUM5QixDQUFDLENBQ0QsT0FBT0MsQ0FBQyxFQUFHO0VBQ1RILEtBQUssR0FBRyxLQUFLO0FBQ2Y7O0FBRUE7O0FBRUEsZUFBZUEsS0FBSyJ9

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/harmony module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.hmd = (module) => {
/******/ 			module = Object.create(module);
/******/ 			if (!module.children) module.children = [];
/******/ 			Object.defineProperty(module, 'exports', {
/******/ 				enumerable: true,
/******/ 				set: () => {
/******/ 					throw new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);
/******/ 				}
/******/ 			});
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {

// EXTERNAL MODULE: ../chipper/dist/js/phet-core/js/isHMR.js
var isHMR = __webpack_require__(897);
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/Namespace.js
// Copyright 2015-2023, University of Colorado Boulder

/**
 * @author Jonathan Olson
 * @author Chris Malley (PixelZoom, Inc.)
 */


class Namespace {
  /**
   * @param {string} name
   */
  constructor(name) {
    this.name = name; // @public (read-only)

    if (window.phet) {
      // We already create the chipper namespace, so we just attach to it with the register function.
      if (name === 'chipper') {
        window.phet.chipper.name = 'chipper';
        window.phet.chipper.register = this.register.bind(window.phet.chipper);
        return window.phet.chipper; // eslint-disable-line -- we want to provide the namespace API on something already existing
      } else {
        /* TODO: Ideally we should always assert this, but in PhET-iO wrapper code, multiple built modules define the
           TODO: same namespace, this should be fixed in https://github.com/phetsims/phet-io-wrappers/issues/477 */
        const ignoreAssertion = !_.hasIn(window, 'phet.chipper.brand');
        assert && !ignoreAssertion && assert(!window.phet[name], `namespace ${name} already exists`);
        window.phet[name] = this;
      }
    }
  }

  /**
   * Registers a key-value pair with the namespace.
   *
   * If there are no dots ('.') in the key, it will be assigned to the namespace. For example:
   * - x.register( 'A', A );
   * will set x.A = A.
   *
   * If the key contains one or more dots ('.'), it's treated somewhat like a path expression. For instance, if the
   * following is called:
   * - x.register( 'A.B.C', C );
   * then the register function will navigate to the object x.A.B and add x.A.B.C = C.
   *
   * @param {string} key
   * @param {*} value
   * @returns {*} value, for chaining
   * @public
   */
  register(key, value) {
    // When using hot module replacement, a module will be loaded and initialized twice, and hence its namespace.register
    // function will be called twice.  This should not be an assertion error.

    // If the key isn't compound (doesn't contain '.'), we can just look it up on this namespace
    if (key.indexOf('.') < 0) {
      if (!isHMR/* default */.Z) {
        assert && assert(!this[key], `${key} is already registered for namespace ${this.name}`);
      }
      this[key] = value;
    }
    // Compound (contains '.' at least once). x.register( 'A.B.C', C ) should set x.A.B.C.
    else {
      const keys = key.split('.'); // e.g. [ 'A', 'B', 'C' ]

      // Walk into the namespace, verifying that each level exists. e.g. parent => x.A.B
      let parent = this; // eslint-disable-line consistent-this
      for (let i = 0; i < keys.length - 1; i++) {
        // for all but the last key

        if (!isHMR/* default */.Z) {
          assert && assert(!!parent[keys[i]], `${[this.name].concat(keys.slice(0, i + 1)).join('.')} needs to be defined to register ${key}`);
        }
        parent = parent[keys[i]];
      }

      // Write into the inner namespace, e.g. x.A.B[ 'C' ] = C
      const lastKey = keys[keys.length - 1];
      if (!isHMR/* default */.Z) {
        assert && assert(!parent[lastKey], `${key} is already registered for namespace ${this.name}`);
      }
      parent[lastKey] = value;
    }
    return value;
  }
}
/* harmony default export */ const js_Namespace = (Namespace);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc0hNUiIsIk5hbWVzcGFjZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsIndpbmRvdyIsInBoZXQiLCJjaGlwcGVyIiwicmVnaXN0ZXIiLCJiaW5kIiwiaWdub3JlQXNzZXJ0aW9uIiwiXyIsImhhc0luIiwiYXNzZXJ0Iiwia2V5IiwidmFsdWUiLCJpbmRleE9mIiwia2V5cyIsInNwbGl0IiwicGFyZW50IiwiaSIsImxlbmd0aCIsImNvbmNhdCIsInNsaWNlIiwiam9pbiIsImxhc3RLZXkiXSwic291cmNlcyI6WyJOYW1lc3BhY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvblxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcbiAqL1xuXG5pbXBvcnQgaXNITVIgZnJvbSAnLi9pc0hNUi5qcyc7XG5cbmNsYXNzIE5hbWVzcGFjZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKi9cbiAgY29uc3RydWN0b3IoIG5hbWUgKSB7XG5cbiAgICB0aGlzLm5hbWUgPSBuYW1lOyAvLyBAcHVibGljIChyZWFkLW9ubHkpXG5cbiAgICBpZiAoIHdpbmRvdy5waGV0ICkge1xuICAgICAgLy8gV2UgYWxyZWFkeSBjcmVhdGUgdGhlIGNoaXBwZXIgbmFtZXNwYWNlLCBzbyB3ZSBqdXN0IGF0dGFjaCB0byBpdCB3aXRoIHRoZSByZWdpc3RlciBmdW5jdGlvbi5cbiAgICAgIGlmICggbmFtZSA9PT0gJ2NoaXBwZXInICkge1xuICAgICAgICB3aW5kb3cucGhldC5jaGlwcGVyLm5hbWUgPSAnY2hpcHBlcic7XG4gICAgICAgIHdpbmRvdy5waGV0LmNoaXBwZXIucmVnaXN0ZXIgPSB0aGlzLnJlZ2lzdGVyLmJpbmQoIHdpbmRvdy5waGV0LmNoaXBwZXIgKTtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5waGV0LmNoaXBwZXI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgLS0gd2Ugd2FudCB0byBwcm92aWRlIHRoZSBuYW1lc3BhY2UgQVBJIG9uIHNvbWV0aGluZyBhbHJlYWR5IGV4aXN0aW5nXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLyogVE9ETzogSWRlYWxseSB3ZSBzaG91bGQgYWx3YXlzIGFzc2VydCB0aGlzLCBidXQgaW4gUGhFVC1pTyB3cmFwcGVyIGNvZGUsIG11bHRpcGxlIGJ1aWx0IG1vZHVsZXMgZGVmaW5lIHRoZVxuICAgICAgICAgICBUT0RPOiBzYW1lIG5hbWVzcGFjZSwgdGhpcyBzaG91bGQgYmUgZml4ZWQgaW4gaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3BoZXQtaW8td3JhcHBlcnMvaXNzdWVzLzQ3NyAqL1xuICAgICAgICBjb25zdCBpZ25vcmVBc3NlcnRpb24gPSAhXy5oYXNJbiggd2luZG93LCAncGhldC5jaGlwcGVyLmJyYW5kJyApO1xuICAgICAgICBhc3NlcnQgJiYgIWlnbm9yZUFzc2VydGlvbiAmJiBhc3NlcnQoICF3aW5kb3cucGhldFsgbmFtZSBdLCBgbmFtZXNwYWNlICR7bmFtZX0gYWxyZWFkeSBleGlzdHNgICk7XG4gICAgICAgIHdpbmRvdy5waGV0WyBuYW1lIF0gPSB0aGlzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBrZXktdmFsdWUgcGFpciB3aXRoIHRoZSBuYW1lc3BhY2UuXG4gICAqXG4gICAqIElmIHRoZXJlIGFyZSBubyBkb3RzICgnLicpIGluIHRoZSBrZXksIGl0IHdpbGwgYmUgYXNzaWduZWQgdG8gdGhlIG5hbWVzcGFjZS4gRm9yIGV4YW1wbGU6XG4gICAqIC0geC5yZWdpc3RlciggJ0EnLCBBICk7XG4gICAqIHdpbGwgc2V0IHguQSA9IEEuXG4gICAqXG4gICAqIElmIHRoZSBrZXkgY29udGFpbnMgb25lIG9yIG1vcmUgZG90cyAoJy4nKSwgaXQncyB0cmVhdGVkIHNvbWV3aGF0IGxpa2UgYSBwYXRoIGV4cHJlc3Npb24uIEZvciBpbnN0YW5jZSwgaWYgdGhlXG4gICAqIGZvbGxvd2luZyBpcyBjYWxsZWQ6XG4gICAqIC0geC5yZWdpc3RlciggJ0EuQi5DJywgQyApO1xuICAgKiB0aGVuIHRoZSByZWdpc3RlciBmdW5jdGlvbiB3aWxsIG5hdmlnYXRlIHRvIHRoZSBvYmplY3QgeC5BLkIgYW5kIGFkZCB4LkEuQi5DID0gQy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEByZXR1cm5zIHsqfSB2YWx1ZSwgZm9yIGNoYWluaW5nXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHJlZ2lzdGVyKCBrZXksIHZhbHVlICkge1xuXG4gICAgLy8gV2hlbiB1c2luZyBob3QgbW9kdWxlIHJlcGxhY2VtZW50LCBhIG1vZHVsZSB3aWxsIGJlIGxvYWRlZCBhbmQgaW5pdGlhbGl6ZWQgdHdpY2UsIGFuZCBoZW5jZSBpdHMgbmFtZXNwYWNlLnJlZ2lzdGVyXG4gICAgLy8gZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgdHdpY2UuICBUaGlzIHNob3VsZCBub3QgYmUgYW4gYXNzZXJ0aW9uIGVycm9yLlxuXG4gICAgLy8gSWYgdGhlIGtleSBpc24ndCBjb21wb3VuZCAoZG9lc24ndCBjb250YWluICcuJyksIHdlIGNhbiBqdXN0IGxvb2sgaXQgdXAgb24gdGhpcyBuYW1lc3BhY2VcbiAgICBpZiAoIGtleS5pbmRleE9mKCAnLicgKSA8IDAgKSB7XG4gICAgICBpZiAoICFpc0hNUiApIHtcbiAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCggIXRoaXNbIGtleSBdLCBgJHtrZXl9IGlzIGFscmVhZHkgcmVnaXN0ZXJlZCBmb3IgbmFtZXNwYWNlICR7dGhpcy5uYW1lfWAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXNbIGtleSBdID0gdmFsdWU7XG4gICAgfVxuICAgIC8vIENvbXBvdW5kIChjb250YWlucyAnLicgYXQgbGVhc3Qgb25jZSkuIHgucmVnaXN0ZXIoICdBLkIuQycsIEMgKSBzaG91bGQgc2V0IHguQS5CLkMuXG4gICAgZWxzZSB7XG4gICAgICBjb25zdCBrZXlzID0ga2V5LnNwbGl0KCAnLicgKTsgLy8gZS5nLiBbICdBJywgJ0InLCAnQycgXVxuXG4gICAgICAvLyBXYWxrIGludG8gdGhlIG5hbWVzcGFjZSwgdmVyaWZ5aW5nIHRoYXQgZWFjaCBsZXZlbCBleGlzdHMuIGUuZy4gcGFyZW50ID0+IHguQS5CXG4gICAgICBsZXQgcGFyZW50ID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXRoaXNcbiAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoIC0gMTsgaSsrICkgeyAvLyBmb3IgYWxsIGJ1dCB0aGUgbGFzdCBrZXlcblxuICAgICAgICBpZiAoICFpc0hNUiApIHtcbiAgICAgICAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhIXBhcmVudFsga2V5c1sgaSBdIF0sXG4gICAgICAgICAgICBgJHtbIHRoaXMubmFtZSBdLmNvbmNhdCgga2V5cy5zbGljZSggMCwgaSArIDEgKSApLmpvaW4oICcuJyApfSBuZWVkcyB0byBiZSBkZWZpbmVkIHRvIHJlZ2lzdGVyICR7a2V5fWAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmVudCA9IHBhcmVudFsga2V5c1sgaSBdIF07XG4gICAgICB9XG5cbiAgICAgIC8vIFdyaXRlIGludG8gdGhlIGlubmVyIG5hbWVzcGFjZSwgZS5nLiB4LkEuQlsgJ0MnIF0gPSBDXG4gICAgICBjb25zdCBsYXN0S2V5ID0ga2V5c1sga2V5cy5sZW5ndGggLSAxIF07XG5cbiAgICAgIGlmICggIWlzSE1SICkge1xuICAgICAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhcGFyZW50WyBsYXN0S2V5IF0sIGAke2tleX0gaXMgYWxyZWFkeSByZWdpc3RlcmVkIGZvciBuYW1lc3BhY2UgJHt0aGlzLm5hbWV9YCApO1xuICAgICAgfVxuXG4gICAgICBwYXJlbnRbIGxhc3RLZXkgXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOYW1lc3BhY2U7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sWUFBWTtBQUU5QixNQUFNQyxTQUFTLENBQUM7RUFDZDtBQUNGO0FBQ0E7RUFDRUMsV0FBV0EsQ0FBRUMsSUFBSSxFQUFHO0lBRWxCLElBQUksQ0FBQ0EsSUFBSSxHQUFHQSxJQUFJLENBQUMsQ0FBQzs7SUFFbEIsSUFBS0MsTUFBTSxDQUFDQyxJQUFJLEVBQUc7TUFDakI7TUFDQSxJQUFLRixJQUFJLEtBQUssU0FBUyxFQUFHO1FBQ3hCQyxNQUFNLENBQUNDLElBQUksQ0FBQ0MsT0FBTyxDQUFDSCxJQUFJLEdBQUcsU0FBUztRQUNwQ0MsTUFBTSxDQUFDQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsUUFBUSxHQUFHLElBQUksQ0FBQ0EsUUFBUSxDQUFDQyxJQUFJLENBQUVKLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDQyxPQUFPLENBQUU7UUFDeEUsT0FBT0YsTUFBTSxDQUFDQyxJQUFJLENBQUNDLE9BQU8sQ0FBQyxDQUFDO01BQzlCLENBQUMsTUFDSTtRQUNIO0FBQ1I7UUFDUSxNQUFNRyxlQUFlLEdBQUcsQ0FBQ0MsQ0FBQyxDQUFDQyxLQUFLLENBQUVQLE1BQU0sRUFBRSxvQkFBb0IsQ0FBRTtRQUNoRVEsTUFBTSxJQUFJLENBQUNILGVBQWUsSUFBSUcsTUFBTSxDQUFFLENBQUNSLE1BQU0sQ0FBQ0MsSUFBSSxDQUFFRixJQUFJLENBQUUsRUFBRyxhQUFZQSxJQUFLLGlCQUFnQixDQUFFO1FBQ2hHQyxNQUFNLENBQUNDLElBQUksQ0FBRUYsSUFBSSxDQUFFLEdBQUcsSUFBSTtNQUM1QjtJQUNGO0VBQ0Y7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFSSxRQUFRQSxDQUFFTSxHQUFHLEVBQUVDLEtBQUssRUFBRztJQUVyQjtJQUNBOztJQUVBO0lBQ0EsSUFBS0QsR0FBRyxDQUFDRSxPQUFPLENBQUUsR0FBRyxDQUFFLEdBQUcsQ0FBQyxFQUFHO01BQzVCLElBQUssQ0FBQ2YsS0FBSyxFQUFHO1FBQ1pZLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUMsSUFBSSxDQUFFQyxHQUFHLENBQUUsRUFBRyxHQUFFQSxHQUFJLHdDQUF1QyxJQUFJLENBQUNWLElBQUssRUFBQyxDQUFFO01BQzdGO01BQ0EsSUFBSSxDQUFFVSxHQUFHLENBQUUsR0FBR0MsS0FBSztJQUNyQjtJQUNBO0lBQUEsS0FDSztNQUNILE1BQU1FLElBQUksR0FBR0gsR0FBRyxDQUFDSSxLQUFLLENBQUUsR0FBRyxDQUFFLENBQUMsQ0FBQzs7TUFFL0I7TUFDQSxJQUFJQyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUM7TUFDbkIsS0FBTSxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdILElBQUksQ0FBQ0ksTUFBTSxHQUFHLENBQUMsRUFBRUQsQ0FBQyxFQUFFLEVBQUc7UUFBRTs7UUFFNUMsSUFBSyxDQUFDbkIsS0FBSyxFQUFHO1VBQ1pZLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUMsQ0FBQ00sTUFBTSxDQUFFRixJQUFJLENBQUVHLENBQUMsQ0FBRSxDQUFFLEVBQ3BDLEdBQUUsQ0FBRSxJQUFJLENBQUNoQixJQUFJLENBQUUsQ0FBQ2tCLE1BQU0sQ0FBRUwsSUFBSSxDQUFDTSxLQUFLLENBQUUsQ0FBQyxFQUFFSCxDQUFDLEdBQUcsQ0FBQyxDQUFFLENBQUUsQ0FBQ0ksSUFBSSxDQUFFLEdBQUcsQ0FBRyxvQ0FBbUNWLEdBQUksRUFBQyxDQUFFO1FBQzVHO1FBRUFLLE1BQU0sR0FBR0EsTUFBTSxDQUFFRixJQUFJLENBQUVHLENBQUMsQ0FBRSxDQUFFO01BQzlCOztNQUVBO01BQ0EsTUFBTUssT0FBTyxHQUFHUixJQUFJLENBQUVBLElBQUksQ0FBQ0ksTUFBTSxHQUFHLENBQUMsQ0FBRTtNQUV2QyxJQUFLLENBQUNwQixLQUFLLEVBQUc7UUFDWlksTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQ00sTUFBTSxDQUFFTSxPQUFPLENBQUUsRUFBRyxHQUFFWCxHQUFJLHdDQUF1QyxJQUFJLENBQUNWLElBQUssRUFBQyxDQUFFO01BQ25HO01BRUFlLE1BQU0sQ0FBRU0sT0FBTyxDQUFFLEdBQUdWLEtBQUs7SUFDM0I7SUFFQSxPQUFPQSxLQUFLO0VBQ2Q7QUFDRjtBQUVBLGVBQWViLFNBQVMifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/axon.js
// Copyright 2013-2022, University of Colorado Boulder


/* harmony default export */ const js_axon = (new js_Namespace('axon'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOYW1lc3BhY2UiXSwic291cmNlcyI6WyJheG9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG5cbmltcG9ydCBOYW1lc3BhY2UgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL05hbWVzcGFjZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBOYW1lc3BhY2UoICdheG9uJyApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBR0EsT0FBT0EsU0FBUyxNQUFNLGlDQUFpQztBQUV2RCxlQUFlLElBQUlBLFNBQVMsQ0FBRSxNQUFNLENBQUUifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/TinyEmitter.js
// Copyright 2015-2023, University of Colorado Boulder

/**
 * Lightweight event & listener abstraction for a single event type.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */


// constants
const shuffleListeners = _.hasIn(window, 'phet.chipper.queryParameters') && phet.chipper.queryParameters.shuffleListeners;
// Store the number of listeners from the single TinyEmitter instance that has the most listeners in the whole runtime.
let maxListenerCount = 0;
class TinyEmitter {
  // Not defined usually because of memory usage. If defined, this will be called when the listener count changes,
  // e.g. changeCount( {number} listenersAddedQuantity ), with the number being negative for listeners removed.

  // Only defined when assertions are enabled - to keep track if it has been disposed or not

  // If specified, this will be called before listeners are notified.

  // The listeners that will be called on emit

  // During emit() keep track of iteration progress and guard listeners if mutated during emit()

  constructor(onBeforeNotify) {
    if (onBeforeNotify) {
      this.onBeforeNotify = onBeforeNotify;
    }
    this.listeners = new Set();
    this.emitContexts = [];

    // for production memory concerns; no need to keep this around.
    if (assert) {
      this.isDisposed = false;
    }
  }

  /**
   * Disposes an Emitter. All listeners are removed.
   */
  dispose() {
    this.removeAllListeners();
    if (assert) {
      this.isDisposed = true;
    }
  }

  /**
   * Notify listeners
   */
  emit(...args) {
    assert && assert(!this.isDisposed, 'should not be called if disposed');

    // optional callback, before notifying listeners
    this.onBeforeNotify && this.onBeforeNotify.apply(null, args);

    // Support for a query parameter that shuffles listeners, but bury behind assert so it will be stripped out on build
    // so it won't impact production performance.
    if (assert && shuffleListeners) {
      this.listeners = new Set(_.shuffle(Array.from(this.listeners))); // eslint-disable-line bad-sim-text
    }

    // Notify wired-up listeners, if any
    if (this.listeners.size > 0) {
      const emitContext = {
        index: 0
        // listenerArray: [] // {Array.<function>|undefined} assigned if a mutation is made during emit
      };

      this.emitContexts.push(emitContext);
      for (const listener of this.listeners) {
        listener(...args);
        emitContext.index++;

        // If a listener was added or removed, we cannot continue processing the mutated Set, we must switch to
        // iterate over the guarded array
        if (emitContext.listenerArray) {
          break;
        }
      }

      // If the listeners were guarded during emit, we bailed out on the for..of and continue iterating over the original
      // listeners in order from where we left off.
      if (emitContext.listenerArray) {
        for (let i = emitContext.index; i < emitContext.listenerArray.length; i++) {
          emitContext.listenerArray[i](...args);
        }
      }
      this.emitContexts.pop();
    }
  }

  /**
   * Adds a listener which will be called during emit.
   */
  addListener(listener) {
    assert && assert(!this.isDisposed, 'Cannot add a listener to a disposed TinyEmitter');
    assert && assert(!this.hasListener(listener), 'Cannot add the same listener twice');

    // If a listener is added during an emit(), we must make a copy of the current list of listeners--the newly added
    // listener will be available for the next emit() but not the one in progress.  This is to match behavior with
    // removeListener.
    this.guardListeners();
    this.listeners.add(listener);
    this.changeCount && this.changeCount(1);
    if (assert && window.phet?.chipper?.queryParameters && isFinite(phet.chipper.queryParameters.listenerLimit)) {
      if (maxListenerCount < this.listeners.size) {
        maxListenerCount = this.listeners.size;
        console.log(`Max TinyEmitter listeners: ${maxListenerCount}`);
        assert(maxListenerCount <= phet.chipper.queryParameters.listenerLimit, `listener count of ${maxListenerCount} above ?listenerLimit=${phet.chipper.queryParameters.listenerLimit}`);
      }
    }
  }

  /**
   * Removes a listener
   */
  removeListener(listener) {
    // Throw an error when removing a non-listener (except when the Emitter has already been disposed, see
    // https://github.com/phetsims/sun/issues/394#issuecomment-419998231
    if (assert && !this.isDisposed) {
      assert(this.listeners.has(listener), 'tried to removeListener on something that wasn\'t a listener');
    }
    this.guardListeners();
    this.listeners.delete(listener);
    this.changeCount && this.changeCount(-1);
  }

  /**
   * Removes all the listeners
   */
  removeAllListeners() {
    const size = this.listeners.size;
    this.guardListeners();
    this.listeners.clear();
    this.changeCount && this.changeCount(-size);
  }

  /**
   * If listeners are added/removed while emit() is in progress, we must make a defensive copy of the array of listeners
   * before changing the array, and use it for the rest of the notifications until the emit call has completed.
   */
  guardListeners() {
    for (let i = this.emitContexts.length - 1; i >= 0; i--) {
      // Once we meet a level that was already guarded, we can stop, since all previous levels were already guarded
      if (this.emitContexts[i].listenerArray) {
        break;
      } else {
        // Mark copies as 'guarded' so that it will use the original listeners when emit started and not the modified
        // list.
        this.emitContexts[i].listenerArray = Array.from(this.listeners);
      }
    }
  }

  /**
   * Checks whether a listener is registered with this Emitter
   */
  hasListener(listener) {
    assert && assert(arguments.length === 1, 'Emitter.hasListener should be called with 1 argument');
    return this.listeners.has(listener);
  }

  /**
   * Returns true if there are any listeners.
   */
  hasListeners() {
    assert && assert(arguments.length === 0, 'Emitter.hasListeners should be called without arguments');
    return this.listeners.size > 0;
  }

  /**
   * Returns the number of listeners.
   */
  getListenerCount() {
    return this.listeners.size;
  }

  /**
   * Invokes a callback once for each listener - meant for Property's use
   */
  forEachListener(callback) {
    this.listeners.forEach(callback);
  }
}
js_axon.register('TinyEmitter', TinyEmitter);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/Timer.js
// Copyright 2019-2023, University of Colorado Boulder

/**
 * Timer so that other modules can run timing related code through the simulation's requestAnimationFrame. Use its
 * Emitter interface for adding/removing listeners.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */



class Timer extends TinyEmitter {
  /**
   * Adds a listener to be called back once after the specified time in milliseconds
   * @param listener - called with no arguments
   * @param timeout in milliseconds
   * @returns an internally-wrapped listener which can be removed with clearTimeout
   */
  setTimeout(listener, timeout) {
    // eslint-disable-line bad-sim-text
    let elapsed = 0;
    const callback = dt => {
      elapsed += dt;

      // Convert seconds to ms and see if item has timed out
      if (elapsed * 1000 >= timeout) {
        // make sure that this callback hasn't already been removed by another listener while emit() is in progress
        if (this.hasListener(callback)) {
          listener();
          this.removeListener(callback);
        }
      }
    };
    this.addListener(callback);

    // Return the callback so it can be removed with removeStepListener
    return callback;
  }

  /**
   * Clear a scheduled timeout. If there was no timeout, nothing is done.
   */
  clearTimeout(listener) {
    if (this.hasListener(listener)) {
      this.removeListener(listener);
    }
  }

  /**
   * Adds a listener to be called at specified intervals (in milliseconds)
   * @param listener - called with no arguments
   * @param interval - in milliseconds
   * @returns an internally-wrapped listener which can be removed with clearInterval
   */
  setInterval(listener, interval) {
    // eslint-disable-line bad-sim-text
    let elapsed = 0;
    const callback = dt => {
      elapsed += dt;

      // Convert seconds to ms and see if item has timed out
      while (elapsed * 1000 >= interval && this.hasListener(callback)) {
        listener();
        elapsed = elapsed - interval / 1000.0; // Save the leftover time so it won't accumulate
      }
    };

    this.addListener(callback);

    // Return the callback so it can be removed with removeListener
    return callback;
  }

  /**
   * Clear a scheduled interval. If there was no interval, nothing is done.
   */
  clearInterval(listener) {
    if (this.hasListener(listener)) {
      this.removeListener(listener);
    }
  }

  /**
   * Run a callback on the next frame. This method is largely for clarity.
   */
  runOnNextTick(listener) {
    this.setTimeout(listener, 0);
  }
}
js_axon.register('Timer', Timer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheG9uIiwiVGlueUVtaXR0ZXIiLCJUaW1lciIsInNldFRpbWVvdXQiLCJsaXN0ZW5lciIsInRpbWVvdXQiLCJlbGFwc2VkIiwiY2FsbGJhY2siLCJkdCIsImhhc0xpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJhZGRMaXN0ZW5lciIsImNsZWFyVGltZW91dCIsInNldEludGVydmFsIiwiaW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwicnVuT25OZXh0VGljayIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVGltZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogVGltZXIgc28gdGhhdCBvdGhlciBtb2R1bGVzIGNhbiBydW4gdGltaW5nIHJlbGF0ZWQgY29kZSB0aHJvdWdoIHRoZSBzaW11bGF0aW9uJ3MgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBVc2UgaXRzXG4gKiBFbWl0dGVyIGludGVyZmFjZSBmb3IgYWRkaW5nL3JlbW92aW5nIGxpc3RlbmVycy5cbiAqXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5cbmltcG9ydCBheG9uIGZyb20gJy4vYXhvbi5qcyc7XG5pbXBvcnQgVGlueUVtaXR0ZXIgZnJvbSAnLi9UaW55RW1pdHRlci5qcyc7XG5cbmV4cG9ydCB0eXBlIFRpbWVyTGlzdGVuZXIgPSAoIGR0OiBudW1iZXIgKSA9PiB2b2lkO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaW1lciBleHRlbmRzIFRpbnlFbWl0dGVyPFsgbnVtYmVyIF0+IHtcblxuICAvKipcbiAgICogQWRkcyBhIGxpc3RlbmVyIHRvIGJlIGNhbGxlZCBiYWNrIG9uY2UgYWZ0ZXIgdGhlIHNwZWNpZmllZCB0aW1lIGluIG1pbGxpc2Vjb25kc1xuICAgKiBAcGFyYW0gbGlzdGVuZXIgLSBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHNcbiAgICogQHBhcmFtIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzXG4gICAqIEByZXR1cm5zIGFuIGludGVybmFsbHktd3JhcHBlZCBsaXN0ZW5lciB3aGljaCBjYW4gYmUgcmVtb3ZlZCB3aXRoIGNsZWFyVGltZW91dFxuICAgKi9cbiAgcHVibGljIHNldFRpbWVvdXQoIGxpc3RlbmVyOiAoKSA9PiB2b2lkLCB0aW1lb3V0OiBudW1iZXIgKTogVGltZXJMaXN0ZW5lciB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFkLXNpbS10ZXh0XG4gICAgbGV0IGVsYXBzZWQgPSAwO1xuICAgIGNvbnN0IGNhbGxiYWNrID0gKCBkdDogbnVtYmVyICkgPT4ge1xuICAgICAgZWxhcHNlZCArPSBkdDtcblxuICAgICAgLy8gQ29udmVydCBzZWNvbmRzIHRvIG1zIGFuZCBzZWUgaWYgaXRlbSBoYXMgdGltZWQgb3V0XG4gICAgICBpZiAoIGVsYXBzZWQgKiAxMDAwID49IHRpbWVvdXQgKSB7XG5cbiAgICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgdGhpcyBjYWxsYmFjayBoYXNuJ3QgYWxyZWFkeSBiZWVuIHJlbW92ZWQgYnkgYW5vdGhlciBsaXN0ZW5lciB3aGlsZSBlbWl0KCkgaXMgaW4gcHJvZ3Jlc3NcbiAgICAgICAgaWYgKCB0aGlzLmhhc0xpc3RlbmVyKCBjYWxsYmFjayApICkge1xuICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lciggY2FsbGJhY2sgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5hZGRMaXN0ZW5lciggY2FsbGJhY2sgKTtcblxuICAgIC8vIFJldHVybiB0aGUgY2FsbGJhY2sgc28gaXQgY2FuIGJlIHJlbW92ZWQgd2l0aCByZW1vdmVTdGVwTGlzdGVuZXJcbiAgICByZXR1cm4gY2FsbGJhY2s7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYSBzY2hlZHVsZWQgdGltZW91dC4gSWYgdGhlcmUgd2FzIG5vIHRpbWVvdXQsIG5vdGhpbmcgaXMgZG9uZS5cbiAgICovXG4gIHB1YmxpYyBjbGVhclRpbWVvdXQoIGxpc3RlbmVyOiBUaW1lckxpc3RlbmVyICk6IHZvaWQge1xuICAgIGlmICggdGhpcy5oYXNMaXN0ZW5lciggbGlzdGVuZXIgKSApIHtcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoIGxpc3RlbmVyICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBsaXN0ZW5lciB0byBiZSBjYWxsZWQgYXQgc3BlY2lmaWVkIGludGVydmFscyAoaW4gbWlsbGlzZWNvbmRzKVxuICAgKiBAcGFyYW0gbGlzdGVuZXIgLSBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHNcbiAgICogQHBhcmFtIGludGVydmFsIC0gaW4gbWlsbGlzZWNvbmRzXG4gICAqIEByZXR1cm5zIGFuIGludGVybmFsbHktd3JhcHBlZCBsaXN0ZW5lciB3aGljaCBjYW4gYmUgcmVtb3ZlZCB3aXRoIGNsZWFySW50ZXJ2YWxcbiAgICovXG4gIHB1YmxpYyBzZXRJbnRlcnZhbCggbGlzdGVuZXI6ICgpID0+IHZvaWQsIGludGVydmFsOiBudW1iZXIgKTogVGltZXJMaXN0ZW5lciB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFkLXNpbS10ZXh0XG4gICAgbGV0IGVsYXBzZWQgPSAwO1xuICAgIGNvbnN0IGNhbGxiYWNrID0gKCBkdDogbnVtYmVyICkgPT4ge1xuICAgICAgZWxhcHNlZCArPSBkdDtcblxuICAgICAgLy8gQ29udmVydCBzZWNvbmRzIHRvIG1zIGFuZCBzZWUgaWYgaXRlbSBoYXMgdGltZWQgb3V0XG4gICAgICB3aGlsZSAoIGVsYXBzZWQgKiAxMDAwID49IGludGVydmFsICYmIHRoaXMuaGFzTGlzdGVuZXIoIGNhbGxiYWNrICkgKSB7XG4gICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgIGVsYXBzZWQgPSBlbGFwc2VkIC0gaW50ZXJ2YWwgLyAxMDAwLjA7IC8vIFNhdmUgdGhlIGxlZnRvdmVyIHRpbWUgc28gaXQgd29uJ3QgYWNjdW11bGF0ZVxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5hZGRMaXN0ZW5lciggY2FsbGJhY2sgKTtcblxuICAgIC8vIFJldHVybiB0aGUgY2FsbGJhY2sgc28gaXQgY2FuIGJlIHJlbW92ZWQgd2l0aCByZW1vdmVMaXN0ZW5lclxuICAgIHJldHVybiBjYWxsYmFjaztcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhIHNjaGVkdWxlZCBpbnRlcnZhbC4gSWYgdGhlcmUgd2FzIG5vIGludGVydmFsLCBub3RoaW5nIGlzIGRvbmUuXG4gICAqL1xuICBwdWJsaWMgY2xlYXJJbnRlcnZhbCggbGlzdGVuZXI6IFRpbWVyTGlzdGVuZXIgKTogdm9pZCB7XG4gICAgaWYgKCB0aGlzLmhhc0xpc3RlbmVyKCBsaXN0ZW5lciApICkge1xuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lciggbGlzdGVuZXIgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUnVuIGEgY2FsbGJhY2sgb24gdGhlIG5leHQgZnJhbWUuIFRoaXMgbWV0aG9kIGlzIGxhcmdlbHkgZm9yIGNsYXJpdHkuXG4gICAqL1xuICBwdWJsaWMgcnVuT25OZXh0VGljayggbGlzdGVuZXI6ICgpID0+IHZvaWQgKTogdm9pZCB7XG4gICAgdGhpcy5zZXRUaW1lb3V0KCBsaXN0ZW5lciwgMCApO1xuICB9XG59XG5cbmF4b24ucmVnaXN0ZXIoICdUaW1lcicsIFRpbWVyICk7XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxJQUFJLE1BQU0sV0FBVztBQUM1QixPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBSTFDLGVBQWUsTUFBTUMsS0FBSyxTQUFTRCxXQUFXLENBQWE7RUFFekQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NFLFVBQVVBLENBQUVDLFFBQW9CLEVBQUVDLE9BQWUsRUFBa0I7SUFBRTtJQUMxRSxJQUFJQyxPQUFPLEdBQUcsQ0FBQztJQUNmLE1BQU1DLFFBQVEsR0FBS0MsRUFBVSxJQUFNO01BQ2pDRixPQUFPLElBQUlFLEVBQUU7O01BRWI7TUFDQSxJQUFLRixPQUFPLEdBQUcsSUFBSSxJQUFJRCxPQUFPLEVBQUc7UUFFL0I7UUFDQSxJQUFLLElBQUksQ0FBQ0ksV0FBVyxDQUFFRixRQUFRLENBQUUsRUFBRztVQUNsQ0gsUUFBUSxFQUFFO1VBQ1YsSUFBSSxDQUFDTSxjQUFjLENBQUVILFFBQVEsQ0FBRTtRQUNqQztNQUNGO0lBQ0YsQ0FBQztJQUNELElBQUksQ0FBQ0ksV0FBVyxDQUFFSixRQUFRLENBQUU7O0lBRTVCO0lBQ0EsT0FBT0EsUUFBUTtFQUNqQjs7RUFFQTtBQUNGO0FBQ0E7RUFDU0ssWUFBWUEsQ0FBRVIsUUFBdUIsRUFBUztJQUNuRCxJQUFLLElBQUksQ0FBQ0ssV0FBVyxDQUFFTCxRQUFRLENBQUUsRUFBRztNQUNsQyxJQUFJLENBQUNNLGNBQWMsQ0FBRU4sUUFBUSxDQUFFO0lBQ2pDO0VBQ0Y7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NTLFdBQVdBLENBQUVULFFBQW9CLEVBQUVVLFFBQWdCLEVBQWtCO0lBQUU7SUFDNUUsSUFBSVIsT0FBTyxHQUFHLENBQUM7SUFDZixNQUFNQyxRQUFRLEdBQUtDLEVBQVUsSUFBTTtNQUNqQ0YsT0FBTyxJQUFJRSxFQUFFOztNQUViO01BQ0EsT0FBUUYsT0FBTyxHQUFHLElBQUksSUFBSVEsUUFBUSxJQUFJLElBQUksQ0FBQ0wsV0FBVyxDQUFFRixRQUFRLENBQUUsRUFBRztRQUNuRUgsUUFBUSxFQUFFO1FBQ1ZFLE9BQU8sR0FBR0EsT0FBTyxHQUFHUSxRQUFRLEdBQUcsTUFBTSxDQUFDLENBQUM7TUFDekM7SUFDRixDQUFDOztJQUNELElBQUksQ0FBQ0gsV0FBVyxDQUFFSixRQUFRLENBQUU7O0lBRTVCO0lBQ0EsT0FBT0EsUUFBUTtFQUNqQjs7RUFFQTtBQUNGO0FBQ0E7RUFDU1EsYUFBYUEsQ0FBRVgsUUFBdUIsRUFBUztJQUNwRCxJQUFLLElBQUksQ0FBQ0ssV0FBVyxDQUFFTCxRQUFRLENBQUUsRUFBRztNQUNsQyxJQUFJLENBQUNNLGNBQWMsQ0FBRU4sUUFBUSxDQUFFO0lBQ2pDO0VBQ0Y7O0VBRUE7QUFDRjtBQUNBO0VBQ1NZLGFBQWFBLENBQUVaLFFBQW9CLEVBQVM7SUFDakQsSUFBSSxDQUFDRCxVQUFVLENBQUVDLFFBQVEsRUFBRSxDQUFDLENBQUU7RUFDaEM7QUFDRjtBQUVBSixJQUFJLENBQUNpQixRQUFRLENBQUUsT0FBTyxFQUFFZixLQUFLLENBQUUifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/animationFrameTimer.js
// Copyright 2020-2022, University of Colorado Boulder




// Like stepTimer but runs every frame whether the sim is active or not.
const animationFrameTimer = new Timer();
js_axon.register('animationFrameTimer', animationFrameTimer);
/* harmony default export */ const js_animationFrameTimer = (animationFrameTimer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheG9uIiwiVGltZXIiLCJhbmltYXRpb25GcmFtZVRpbWVyIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJhbmltYXRpb25GcmFtZVRpbWVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG5pbXBvcnQgYXhvbiBmcm9tICcuL2F4b24uanMnO1xuaW1wb3J0IFRpbWVyIGZyb20gJy4vVGltZXIuanMnO1xuXG4vLyBMaWtlIHN0ZXBUaW1lciBidXQgcnVucyBldmVyeSBmcmFtZSB3aGV0aGVyIHRoZSBzaW0gaXMgYWN0aXZlIG9yIG5vdC5cbmNvbnN0IGFuaW1hdGlvbkZyYW1lVGltZXIgPSBuZXcgVGltZXIoKTtcblxuYXhvbi5yZWdpc3RlciggJ2FuaW1hdGlvbkZyYW1lVGltZXInLCBhbmltYXRpb25GcmFtZVRpbWVyICk7XG5leHBvcnQgZGVmYXVsdCBhbmltYXRpb25GcmFtZVRpbWVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsT0FBT0EsSUFBSSxNQUFNLFdBQVc7QUFDNUIsT0FBT0MsS0FBSyxNQUFNLFlBQVk7O0FBRTlCO0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUcsSUFBSUQsS0FBSyxFQUFFO0FBRXZDRCxJQUFJLENBQUNHLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRUQsbUJBQW1CLENBQUU7QUFDM0QsZUFBZUEsbUJBQW1CIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/phetCore.js
// Copyright 2013-2020, University of Colorado Boulder


const phetCore_phetCore = new js_Namespace('phetCore');

// Namespace can't require this file, so we register it as a special case.
phetCore_phetCore.register('Namespace', js_Namespace);
/* harmony default export */ const js_phetCore = (phetCore_phetCore);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOYW1lc3BhY2UiLCJwaGV0Q29yZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsicGhldENvcmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cblxuaW1wb3J0IE5hbWVzcGFjZSBmcm9tICcuL05hbWVzcGFjZS5qcyc7XG5cbmNvbnN0IHBoZXRDb3JlID0gbmV3IE5hbWVzcGFjZSggJ3BoZXRDb3JlJyApO1xuXG4vLyBOYW1lc3BhY2UgY2FuJ3QgcmVxdWlyZSB0aGlzIGZpbGUsIHNvIHdlIHJlZ2lzdGVyIGl0IGFzIGEgc3BlY2lhbCBjYXNlLlxucGhldENvcmUucmVnaXN0ZXIoICdOYW1lc3BhY2UnLCBOYW1lc3BhY2UgKTtcblxuZXhwb3J0IGRlZmF1bHQgcGhldENvcmU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFHQSxPQUFPQSxTQUFTLE1BQU0sZ0JBQWdCO0FBRXRDLE1BQU1DLFFBQVEsR0FBRyxJQUFJRCxTQUFTLENBQUUsVUFBVSxDQUFFOztBQUU1QztBQUNBQyxRQUFRLENBQUNDLFFBQVEsQ0FBRSxXQUFXLEVBQUVGLFNBQVMsQ0FBRTtBQUUzQyxlQUFlQyxRQUFRIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/merge.js
// Copyright 2019-2022, University of Colorado Boulder

/**
 * Like Lodash's _.merge, this will recursively merge nested options objects provided that the keys end in 'Options'
 * (case sensitive) and they are pure object literals.
 * That is, they must be defined by `... = { ... }` or `somePropOptions: { ... }`.
 * Non object literals (arrays, functions, and inherited types) or anything with an extra prototype will all throw
 * assertion errors if passed in as an arg or as a value to a `*Options` field.
 *
 * @author Michael Barlow (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */


// constants
const OPTIONS_SUFFIX = 'Options';

// Function overloading is described in https://www.tutorialsteacher.com/typescript/function-overloading

/**
 * @param  {Object} target - the object literal that will have keys set to it
 * @param  {...<Object|null>} sources
 */
function merge(target, ...sources) {
  assert && assertIsMergeable(target);
  assert && assert(target !== null, 'target should not be null'); // assertIsMergeable supports null
  assert && assert(sources.length > 0, 'at least one source expected');
  _.each(sources, source => {
    if (source) {
      assert && assertIsMergeable(source);
      for (const property in source) {
        // Providing a value of undefined in the target doesn't override the default, see https://github.com/phetsims/phet-core/issues/111
        if (source.hasOwnProperty(property) && source[property] !== undefined) {
          const sourceProperty = source[property];

          // Recurse on keys that end with 'Options', but not on keys named 'Options'.
          if (_.endsWith(property, OPTIONS_SUFFIX) && property !== OPTIONS_SUFFIX) {
            // *Options property value cannot be undefined, if truthy, it we be validated with assertIsMergeable via recursion.
            assert && assert(sourceProperty !== undefined, 'nested *Options should not be undefined');
            target[property] = merge(target[property] || {}, sourceProperty);
          } else {
            target[property] = sourceProperty;
          }
        }
      }
    }
  });
  return target;
}

/**
 * TODO: can we remove assertIsMergeable? https://github.com/phetsims/chipper/issues/1128
 * Asserts that the object is compatible with merge. That is, it's a POJSO.
 * This function must be called like: assert && assertIsMergeable( arg );
 */
function assertIsMergeable(object) {
  assert && assert(object === null || object && typeof object === 'object' && Object.getPrototypeOf(object) === Object.prototype, 'object is not compatible with merge');
  if (object !== null) {
    // ensure that options keys are not ES5 setters or getters
    Object.keys(object).forEach(prop => {
      const ownPropertyDescriptor = Object.getOwnPropertyDescriptor(object, prop);
      assert && assert(!ownPropertyDescriptor.hasOwnProperty('set'), 'cannot use merge with an object that has a setter');
      assert && assert(!ownPropertyDescriptor.hasOwnProperty('get'), 'cannot use merge with an object that has a getter');
    });
  }
}
js_phetCore.register('merge', merge);
/* harmony default export */ const js_merge = (merge);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsIk9QVElPTlNfU1VGRklYIiwibWVyZ2UiLCJ0YXJnZXQiLCJzb3VyY2VzIiwiYXNzZXJ0IiwiYXNzZXJ0SXNNZXJnZWFibGUiLCJsZW5ndGgiLCJfIiwiZWFjaCIsInNvdXJjZSIsInByb3BlcnR5IiwiaGFzT3duUHJvcGVydHkiLCJ1bmRlZmluZWQiLCJzb3VyY2VQcm9wZXJ0eSIsImVuZHNXaXRoIiwib2JqZWN0IiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJrZXlzIiwiZm9yRWFjaCIsInByb3AiLCJvd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIm1lcmdlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIExpa2UgTG9kYXNoJ3MgXy5tZXJnZSwgdGhpcyB3aWxsIHJlY3Vyc2l2ZWx5IG1lcmdlIG5lc3RlZCBvcHRpb25zIG9iamVjdHMgcHJvdmlkZWQgdGhhdCB0aGUga2V5cyBlbmQgaW4gJ09wdGlvbnMnXG4gKiAoY2FzZSBzZW5zaXRpdmUpIGFuZCB0aGV5IGFyZSBwdXJlIG9iamVjdCBsaXRlcmFscy5cbiAqIFRoYXQgaXMsIHRoZXkgbXVzdCBiZSBkZWZpbmVkIGJ5IGAuLi4gPSB7IC4uLiB9YCBvciBgc29tZVByb3BPcHRpb25zOiB7IC4uLiB9YC5cbiAqIE5vbiBvYmplY3QgbGl0ZXJhbHMgKGFycmF5cywgZnVuY3Rpb25zLCBhbmQgaW5oZXJpdGVkIHR5cGVzKSBvciBhbnl0aGluZyB3aXRoIGFuIGV4dHJhIHByb3RvdHlwZSB3aWxsIGFsbCB0aHJvd1xuICogYXNzZXJ0aW9uIGVycm9ycyBpZiBwYXNzZWQgaW4gYXMgYW4gYXJnIG9yIGFzIGEgdmFsdWUgdG8gYSBgKk9wdGlvbnNgIGZpZWxkLlxuICpcbiAqIEBhdXRob3IgTWljaGFlbCBCYXJsb3cgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKi9cblxuaW1wb3J0IHBoZXRDb3JlIGZyb20gJy4vcGhldENvcmUuanMnO1xuaW1wb3J0IEludGVudGlvbmFsQW55IGZyb20gJy4vdHlwZXMvSW50ZW50aW9uYWxBbnkuanMnO1xuXG4vLyBjb25zdGFudHNcbmNvbnN0IE9QVElPTlNfU1VGRklYID0gJ09wdGlvbnMnO1xuXG4vLyBGdW5jdGlvbiBvdmVybG9hZGluZyBpcyBkZXNjcmliZWQgaW4gaHR0cHM6Ly93d3cudHV0b3JpYWxzdGVhY2hlci5jb20vdHlwZXNjcmlwdC9mdW5jdGlvbi1vdmVybG9hZGluZ1xuZnVuY3Rpb24gbWVyZ2U8QSwgQj4oIGE6IEEsIGI6IEIgKTogQSAmIEI7XG5mdW5jdGlvbiBtZXJnZTxBLCBCLCBDPiggYTogQSwgYjogQiwgYzogQyApOiBBICYgQiAmIEM7XG5mdW5jdGlvbiBtZXJnZTxBLCBCLCBDLCBEPiggYTogQSwgYjogQiwgYzogQywgZDogRCApOiBBICYgQiAmIEMgJiBEO1xuZnVuY3Rpb24gbWVyZ2U8QSwgQiwgQywgRCwgRT4oIGE6IEEsIGI6IEIsIGM6IEMsIGQ6IEQsIGU6IEUgKTogQSAmIEIgJiBDICYgRCAmIEU7XG5cbi8qKlxuICogQHBhcmFtICB7T2JqZWN0fSB0YXJnZXQgLSB0aGUgb2JqZWN0IGxpdGVyYWwgdGhhdCB3aWxsIGhhdmUga2V5cyBzZXQgdG8gaXRcbiAqIEBwYXJhbSAgey4uLjxPYmplY3R8bnVsbD59IHNvdXJjZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoIHRhcmdldDogSW50ZW50aW9uYWxBbnksIC4uLnNvdXJjZXM6IEludGVudGlvbmFsQW55W10gKTogSW50ZW50aW9uYWxBbnkge1xuICBhc3NlcnQgJiYgYXNzZXJ0SXNNZXJnZWFibGUoIHRhcmdldCApO1xuICBhc3NlcnQgJiYgYXNzZXJ0KCB0YXJnZXQgIT09IG51bGwsICd0YXJnZXQgc2hvdWxkIG5vdCBiZSBudWxsJyApOyAvLyBhc3NlcnRJc01lcmdlYWJsZSBzdXBwb3J0cyBudWxsXG4gIGFzc2VydCAmJiBhc3NlcnQoIHNvdXJjZXMubGVuZ3RoID4gMCwgJ2F0IGxlYXN0IG9uZSBzb3VyY2UgZXhwZWN0ZWQnICk7XG5cbiAgXy5lYWNoKCBzb3VyY2VzLCBzb3VyY2UgPT4ge1xuICAgIGlmICggc291cmNlICkge1xuICAgICAgYXNzZXJ0ICYmIGFzc2VydElzTWVyZ2VhYmxlKCBzb3VyY2UgKTtcbiAgICAgIGZvciAoIGNvbnN0IHByb3BlcnR5IGluIHNvdXJjZSApIHtcblxuICAgICAgICAvLyBQcm92aWRpbmcgYSB2YWx1ZSBvZiB1bmRlZmluZWQgaW4gdGhlIHRhcmdldCBkb2Vzbid0IG92ZXJyaWRlIHRoZSBkZWZhdWx0LCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3BoZXQtY29yZS9pc3N1ZXMvMTExXG4gICAgICAgIGlmICggc291cmNlLmhhc093blByb3BlcnR5KCBwcm9wZXJ0eSApICYmIHNvdXJjZVsgcHJvcGVydHkgXSAhPT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgIGNvbnN0IHNvdXJjZVByb3BlcnR5ID0gc291cmNlWyBwcm9wZXJ0eSBdO1xuXG4gICAgICAgICAgLy8gUmVjdXJzZSBvbiBrZXlzIHRoYXQgZW5kIHdpdGggJ09wdGlvbnMnLCBidXQgbm90IG9uIGtleXMgbmFtZWQgJ09wdGlvbnMnLlxuICAgICAgICAgIGlmICggXy5lbmRzV2l0aCggcHJvcGVydHksIE9QVElPTlNfU1VGRklYICkgJiYgcHJvcGVydHkgIT09IE9QVElPTlNfU1VGRklYICkge1xuXG4gICAgICAgICAgICAvLyAqT3B0aW9ucyBwcm9wZXJ0eSB2YWx1ZSBjYW5ub3QgYmUgdW5kZWZpbmVkLCBpZiB0cnV0aHksIGl0IHdlIGJlIHZhbGlkYXRlZCB3aXRoIGFzc2VydElzTWVyZ2VhYmxlIHZpYSByZWN1cnNpb24uXG4gICAgICAgICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBzb3VyY2VQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkLCAnbmVzdGVkICpPcHRpb25zIHNob3VsZCBub3QgYmUgdW5kZWZpbmVkJyApO1xuICAgICAgICAgICAgdGFyZ2V0WyBwcm9wZXJ0eSBdID0gbWVyZ2UoIHRhcmdldFsgcHJvcGVydHkgXSB8fCB7fSwgc291cmNlUHJvcGVydHkgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXRbIHByb3BlcnR5IF0gPSBzb3VyY2VQcm9wZXJ0eTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gKTtcbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBUT0RPOiBjYW4gd2UgcmVtb3ZlIGFzc2VydElzTWVyZ2VhYmxlPyBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY2hpcHBlci9pc3N1ZXMvMTEyOFxuICogQXNzZXJ0cyB0aGF0IHRoZSBvYmplY3QgaXMgY29tcGF0aWJsZSB3aXRoIG1lcmdlLiBUaGF0IGlzLCBpdCdzIGEgUE9KU08uXG4gKiBUaGlzIGZ1bmN0aW9uIG11c3QgYmUgY2FsbGVkIGxpa2U6IGFzc2VydCAmJiBhc3NlcnRJc01lcmdlYWJsZSggYXJnICk7XG4gKi9cbmZ1bmN0aW9uIGFzc2VydElzTWVyZ2VhYmxlKCBvYmplY3Q6IEludGVudGlvbmFsQW55ICk6IHZvaWQge1xuICBhc3NlcnQgJiYgYXNzZXJ0KCBvYmplY3QgPT09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAgICAgKCBvYmplY3QgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKCBvYmplY3QgKSA9PT0gT2JqZWN0LnByb3RvdHlwZSApLFxuICAgICdvYmplY3QgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBtZXJnZScgKTtcblxuICBpZiAoIG9iamVjdCAhPT0gbnVsbCApIHtcbiAgICAvLyBlbnN1cmUgdGhhdCBvcHRpb25zIGtleXMgYXJlIG5vdCBFUzUgc2V0dGVycyBvciBnZXR0ZXJzXG4gICAgT2JqZWN0LmtleXMoIG9iamVjdCApLmZvckVhY2goIHByb3AgPT4ge1xuICAgICAgY29uc3Qgb3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciggb2JqZWN0LCBwcm9wICkhO1xuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggIW93blByb3BlcnR5RGVzY3JpcHRvci5oYXNPd25Qcm9wZXJ0eSggJ3NldCcgKSxcbiAgICAgICAgJ2Nhbm5vdCB1c2UgbWVyZ2Ugd2l0aCBhbiBvYmplY3QgdGhhdCBoYXMgYSBzZXR0ZXInICk7XG4gICAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhb3duUHJvcGVydHlEZXNjcmlwdG9yLmhhc093blByb3BlcnR5KCAnZ2V0JyApLFxuICAgICAgICAnY2Fubm90IHVzZSBtZXJnZSB3aXRoIGFuIG9iamVjdCB0aGF0IGhhcyBhIGdldHRlcicgKTtcbiAgICB9ICk7XG4gIH1cbn1cblxucGhldENvcmUucmVnaXN0ZXIoICdtZXJnZScsIG1lcmdlICk7XG5leHBvcnQgZGVmYXVsdCBtZXJnZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSxlQUFlO0FBR3BDO0FBQ0EsTUFBTUMsY0FBYyxHQUFHLFNBQVM7O0FBRWhDOztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsS0FBS0EsQ0FBRUMsTUFBc0IsRUFBRSxHQUFHQyxPQUF5QixFQUFtQjtFQUNyRkMsTUFBTSxJQUFJQyxpQkFBaUIsQ0FBRUgsTUFBTSxDQUFFO0VBQ3JDRSxNQUFNLElBQUlBLE1BQU0sQ0FBRUYsTUFBTSxLQUFLLElBQUksRUFBRSwyQkFBMkIsQ0FBRSxDQUFDLENBQUM7RUFDbEVFLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxPQUFPLENBQUNHLE1BQU0sR0FBRyxDQUFDLEVBQUUsOEJBQThCLENBQUU7RUFFdEVDLENBQUMsQ0FBQ0MsSUFBSSxDQUFFTCxPQUFPLEVBQUVNLE1BQU0sSUFBSTtJQUN6QixJQUFLQSxNQUFNLEVBQUc7TUFDWkwsTUFBTSxJQUFJQyxpQkFBaUIsQ0FBRUksTUFBTSxDQUFFO01BQ3JDLEtBQU0sTUFBTUMsUUFBUSxJQUFJRCxNQUFNLEVBQUc7UUFFL0I7UUFDQSxJQUFLQSxNQUFNLENBQUNFLGNBQWMsQ0FBRUQsUUFBUSxDQUFFLElBQUlELE1BQU0sQ0FBRUMsUUFBUSxDQUFFLEtBQUtFLFNBQVMsRUFBRztVQUMzRSxNQUFNQyxjQUFjLEdBQUdKLE1BQU0sQ0FBRUMsUUFBUSxDQUFFOztVQUV6QztVQUNBLElBQUtILENBQUMsQ0FBQ08sUUFBUSxDQUFFSixRQUFRLEVBQUVWLGNBQWMsQ0FBRSxJQUFJVSxRQUFRLEtBQUtWLGNBQWMsRUFBRztZQUUzRTtZQUNBSSxNQUFNLElBQUlBLE1BQU0sQ0FBRVMsY0FBYyxLQUFLRCxTQUFTLEVBQUUseUNBQXlDLENBQUU7WUFDM0ZWLE1BQU0sQ0FBRVEsUUFBUSxDQUFFLEdBQUdULEtBQUssQ0FBRUMsTUFBTSxDQUFFUSxRQUFRLENBQUUsSUFBSSxDQUFDLENBQUMsRUFBRUcsY0FBYyxDQUFFO1VBQ3hFLENBQUMsTUFDSTtZQUNIWCxNQUFNLENBQUVRLFFBQVEsQ0FBRSxHQUFHRyxjQUFjO1VBQ3JDO1FBQ0Y7TUFDRjtJQUNGO0VBQ0YsQ0FBQyxDQUFFO0VBQ0gsT0FBT1gsTUFBTTtBQUNmOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRyxpQkFBaUJBLENBQUVVLE1BQXNCLEVBQVM7RUFDekRYLE1BQU0sSUFBSUEsTUFBTSxDQUFFVyxNQUFNLEtBQUssSUFBSSxJQUNiQSxNQUFNLElBQUksT0FBT0EsTUFBTSxLQUFLLFFBQVEsSUFBSUMsTUFBTSxDQUFDQyxjQUFjLENBQUVGLE1BQU0sQ0FBRSxLQUFLQyxNQUFNLENBQUNFLFNBQVcsRUFDaEgscUNBQXFDLENBQUU7RUFFekMsSUFBS0gsTUFBTSxLQUFLLElBQUksRUFBRztJQUNyQjtJQUNBQyxNQUFNLENBQUNHLElBQUksQ0FBRUosTUFBTSxDQUFFLENBQUNLLE9BQU8sQ0FBRUMsSUFBSSxJQUFJO01BQ3JDLE1BQU1DLHFCQUFxQixHQUFHTixNQUFNLENBQUNPLHdCQUF3QixDQUFFUixNQUFNLEVBQUVNLElBQUksQ0FBRztNQUM5RWpCLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUNrQixxQkFBcUIsQ0FBQ1gsY0FBYyxDQUFFLEtBQUssQ0FBRSxFQUM5RCxtREFBbUQsQ0FBRTtNQUN2RFAsTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQ2tCLHFCQUFxQixDQUFDWCxjQUFjLENBQUUsS0FBSyxDQUFFLEVBQzlELG1EQUFtRCxDQUFFO0lBQ3pELENBQUMsQ0FBRTtFQUNMO0FBQ0Y7QUFFQVosUUFBUSxDQUFDeUIsUUFBUSxDQUFFLE9BQU8sRUFBRXZCLEtBQUssQ0FBRTtBQUNuQyxlQUFlQSxLQUFLIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/optionize.js
// Copyright 2022-2023, University of Colorado Boulder

/**
 * Optionize is a TypeScript layer built on PHET_CORE/merge. Its goal is to satisfy type safety within PhET's "options"
 * pattern.
 *
 * For up-to-date examples on how to use this file, see WILDER/WilderOptionsPatterns.ts
 *
 * This pattern is still being solidified. Although the long term location of PhET's options pattern documentation
 * can be found at https://github.com/phetsims/phet-info/blob/main/doc/phet-software-design-patterns.md#options-and-config,
 * that document is currently out of date. Please see https://github.com/phetsims/chipper/issues/1128 for current
 * progress on this pattern.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */



// Factor out the merge arrow closure to avoid heap/cpu at runtime
const merge4 = (a, b, c, d) => js_merge(a, b, c, d);

// ProvidedOptions = The type of this class's public API (type of the providedOptions parameter in the constructor)
// SelfOptions = Options that are defined by "this" class. Anything optional in this block must have a default provided in "defaults"
// ParentOptions = The public API for parent options, this will be exported by the parent class, like "NodeOptions"
// KeysUsedInSubclassConstructor = list of keys from ParentOptions that are used in this constructor.
function optionize() {
  return merge4;
}

// Use this function to gain the typing that optionize provides but in a case where the first argument is an empty object.
function optionize3() {
  return merge4;
}

/**
 * Use this function to replace merge in cases like:
 *
 * const options = m-e-r-g-e(
 *   {},
 *
 *   // ParentOptions defaults that are common throughout the sim
 *   MyConstants.SOME_COMMON_OPTIONS,
 *
 *   // SelfOptions and ParentOptions defaults that are provided by this class
 *   { ... },
 *
 *   // option values that are provided by the caller
 *   providedOptions );
 */
function optionize4() {
  return merge4;
}

// Use combineOptions to combine object literals (typically options) that all have the same type.
function combineOptions(target, ...sources) {
  return merge4(target, ...sources);
}

// function optionize<ProvidedOptions, // eslint-disable-line no-redeclare
//   SelfOptions = ProvidedOptions,
//   ParentOptions = EmptySelfOptions>():
//   <KeysUsedInSubclassConstructor extends keyof ( ParentOptions )>(
//     emptyObject: ObjectWithNoKeys,
//     defaults: OptionizeDefaults<SelfOptions, ParentOptions>,
//     providedOptions?: ProvidedOptions
//   ) => OptionizeDefaults<SelfOptions, ParentOptions> & ProvidedOptions & Required<Pick<ParentOptions, KeysUsedInSubclassConstructor>>;
//
// function optionize<ProvidedOptions, // eslint-disable-line no-redeclare
//   SelfOptions = ProvidedOptions,
//   ParentOptions = EmptySelfOptions,
//   KeysUsedInSubclassConstructor extends keyof ParentOptions = never>():
//   (
//     empytObject: ObjectWithNoKeys,
//     defaults: OptionizeDefaults<SelfOptions, ParentOptions, KeysUsedInSubclassConstructor>,
//     providedOptions?: ProvidedOptions
//   ) => ObjectWithNoKeys & OptionizeDefaults<SelfOptions, ParentOptions, KeysUsedInSubclassConstructor> & ProvidedOptions;

// The implementation gets "any" types because of the above signatures
// function optionize<???>() { return ( a: any, b?: any, c?: any ) => merge( a, b, c ); } // eslint-disable-line no-redeclare,bad-text

// TypeScript is all-or-none on inferring generic parameter types (per function), so we must use the nested strategy in
// https://stackoverflow.com/questions/63678306/typescript-partial-type-inference to specify the types we want
// while still allowing definitions to flow through.
// This also works, we will keep it here now in case it helps with further improvements with inference.
// const optionize = <S, P, M extends keyof P = never>() => {
//   return <B>( defaults: Required<Options<S>> & Partial<P> & Required<Pick<P, M>>, providedOptions?: B ) => {
//     return merge( defaults, providedOptions );
//   };
// };

/*
Limitation (I):

This gets us half way there, when you have required args to the parent, this makes sure that you don't make
providedOptions optional (with a question mark). We still need a way to note when the required param is specified via the self options.
const optionize = <S, P = EmptySelfOptions, M extends keyof P = never, A = S & P>(
  defaults: Required<Options<S>> & Partial<P> & Required<Pick<P, M>>,
  providedOptions: RequiredKeys<A> extends never ? ( A | undefined ) : A
) => {
  return merge( defaults, providedOptions );
};

TEST TO SEE IF WE CAN GET TYPESCRIPT TO KNOW ABOUT REQUIRED ARGUMENTS TO POTENTIALLY COME FROM EITHER ARG.
const optionize = <S, P = EmptySelfOptions, M extends keyof P = never, A = S & P>() => {
  type FirstArg = Required<Options<S>> & Partial<P> & Required<Pick<P, M>>;
  return (
    defaults: FirstArg,
    //NOT WORKING: If any required elements were in the first arg, then we don't need them here, and potentially can mark providedOptions as a whole as optional
    providedOptions: RequiredKeys<FirstArg> extends never ? RequiredKeys<A> extends never ? ( A | undefined ) : A : A
  ) => {
    return merge( defaults, providedOptions );
  };
};
 */

js_phetCore.register('optionize', optionize);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsIm1lcmdlIiwibWVyZ2U0IiwiYSIsImIiLCJjIiwiZCIsIm9wdGlvbml6ZSIsIm9wdGlvbml6ZTMiLCJvcHRpb25pemU0IiwiY29tYmluZU9wdGlvbnMiLCJ0YXJnZXQiLCJzb3VyY2VzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJvcHRpb25pemUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogT3B0aW9uaXplIGlzIGEgVHlwZVNjcmlwdCBsYXllciBidWlsdCBvbiBQSEVUX0NPUkUvbWVyZ2UuIEl0cyBnb2FsIGlzIHRvIHNhdGlzZnkgdHlwZSBzYWZldHkgd2l0aGluIFBoRVQncyBcIm9wdGlvbnNcIlxuICogcGF0dGVybi5cbiAqXG4gKiBGb3IgdXAtdG8tZGF0ZSBleGFtcGxlcyBvbiBob3cgdG8gdXNlIHRoaXMgZmlsZSwgc2VlIFdJTERFUi9XaWxkZXJPcHRpb25zUGF0dGVybnMudHNcbiAqXG4gKiBUaGlzIHBhdHRlcm4gaXMgc3RpbGwgYmVpbmcgc29saWRpZmllZC4gQWx0aG91Z2ggdGhlIGxvbmcgdGVybSBsb2NhdGlvbiBvZiBQaEVUJ3Mgb3B0aW9ucyBwYXR0ZXJuIGRvY3VtZW50YXRpb25cbiAqIGNhbiBiZSBmb3VuZCBhdCBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcGhldC1pbmZvL2Jsb2IvbWFzdGVyL2RvYy9waGV0LXNvZnR3YXJlLWRlc2lnbi1wYXR0ZXJucy5tZCNvcHRpb25zLWFuZC1jb25maWcsXG4gKiB0aGF0IGRvY3VtZW50IGlzIGN1cnJlbnRseSBvdXQgb2YgZGF0ZS4gUGxlYXNlIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY2hpcHBlci9pc3N1ZXMvMTEyOCBmb3IgY3VycmVudFxuICogcHJvZ3Jlc3Mgb24gdGhpcyBwYXR0ZXJuLlxuICpcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKi9cblxuaW1wb3J0IHBoZXRDb3JlIGZyb20gJy4vcGhldENvcmUuanMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UuanMnO1xuaW1wb3J0IEludGVudGlvbmFsQW55IGZyb20gJy4vdHlwZXMvSW50ZW50aW9uYWxBbnkuanMnO1xuaW1wb3J0IFJlcXVpcmVkS2V5cyBmcm9tICcuL3R5cGVzL1JlcXVpcmVkS2V5cy5qcyc7XG5pbXBvcnQgT3B0aW9uYWxLZXlzIGZyb20gJy4vdHlwZXMvT3B0aW9uYWxLZXlzLmpzJztcblxuLy8gR2V0cyB0aGUgcGFydHMgb2YgYW4gb2JqZWN0IHRoYXQgYXJlIG9wdGlvbmFsXG50eXBlIE9wdGlvbnM8VD4gPSBQaWNrPFQsIE9wdGlvbmFsS2V5czxUPj47XG5cbnR5cGUgT2JqZWN0V2l0aE5vS2V5cyA9IFJlY29yZDxzdHJpbmcgfCBudW1iZXIsIG5ldmVyPjtcblxuZXhwb3J0IHR5cGUgRW1wdHlTZWxmT3B0aW9ucyA9IHtcbiAgX2VtcHR5U2VsZk9wdGlvbnNLZXk/OiBuZXZlcjtcbn07XG5cbnR5cGUgRW1wdHlTZWxmT3B0aW9uc0tleXMgPSBrZXlvZiBFbXB0eVNlbGZPcHRpb25zO1xuXG4vLyBUaGlzIGlzIHRoZSB0eXBlIGZvciB0aGUgYGRlZmF1bHRzYCBhcmd1bWVudCB0byBvcHRpb25pemVcbnR5cGUgT3B0aW9uaXplRGVmYXVsdHM8U2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zLCBQYXJlbnRPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucywgUHJvdmlkZWRPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucz4gPVxuXG4vLyBFdmVyeXRoaW5nIG9wdGlvbmFsIGZyb20gU2VsZk9wdGlvbnMgbXVzdCBoYXZlIGEgZGVmYXVsdCBzcGVjaWZpZWRcbiAgT21pdDxSZXF1aXJlZDxPcHRpb25zPFNlbGZPcHRpb25zPj4sIEVtcHR5U2VsZk9wdGlvbnNLZXlzPiAmIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuXG4gIC8vIEFueXRoaW5nIHJlcXVpcmVkIGluIHRoZSBQcm92aWRlZE9wdGlvbnMgc2hvdWxkIG5vdCBzaG93IHVwIGluXG4gIHsgW2sgaW4gUmVxdWlyZWRLZXlzPFByb3ZpZGVkT3B0aW9ucz5dPzogbmV2ZXI7IH0gJlxuXG4gIC8vIEFueSBvciBub25lIG9mIFBhcmVudCBvcHRpb25zIGNhbiBiZSBwcm92aWRlZFxuICBQYXJ0aWFsPFBhcmVudE9wdGlvbnM+O1xuXG4vLyBGYWN0b3Igb3V0IHRoZSBtZXJnZSBhcnJvdyBjbG9zdXJlIHRvIGF2b2lkIGhlYXAvY3B1IGF0IHJ1bnRpbWVcbmNvbnN0IG1lcmdlNCA9ICggYTogSW50ZW50aW9uYWxBbnksIGI/OiBJbnRlbnRpb25hbEFueSwgYz86IEludGVudGlvbmFsQW55LCBkPzogSW50ZW50aW9uYWxBbnkgKSA9PiBtZXJnZSggYSwgYiwgYywgZCApO1xuXG4vLyBQcm92aWRlZE9wdGlvbnMgPSBUaGUgdHlwZSBvZiB0aGlzIGNsYXNzJ3MgcHVibGljIEFQSSAodHlwZSBvZiB0aGUgcHJvdmlkZWRPcHRpb25zIHBhcmFtZXRlciBpbiB0aGUgY29uc3RydWN0b3IpXG4vLyBTZWxmT3B0aW9ucyA9IE9wdGlvbnMgdGhhdCBhcmUgZGVmaW5lZCBieSBcInRoaXNcIiBjbGFzcy4gQW55dGhpbmcgb3B0aW9uYWwgaW4gdGhpcyBibG9jayBtdXN0IGhhdmUgYSBkZWZhdWx0IHByb3ZpZGVkIGluIFwiZGVmYXVsdHNcIlxuLy8gUGFyZW50T3B0aW9ucyA9IFRoZSBwdWJsaWMgQVBJIGZvciBwYXJlbnQgb3B0aW9ucywgdGhpcyB3aWxsIGJlIGV4cG9ydGVkIGJ5IHRoZSBwYXJlbnQgY2xhc3MsIGxpa2UgXCJOb2RlT3B0aW9uc1wiXG4vLyBLZXlzVXNlZEluU3ViY2xhc3NDb25zdHJ1Y3RvciA9IGxpc3Qgb2Yga2V5cyBmcm9tIFBhcmVudE9wdGlvbnMgdGhhdCBhcmUgdXNlZCBpbiB0aGlzIGNvbnN0cnVjdG9yLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3B0aW9uaXplPFByb3ZpZGVkT3B0aW9ucyxcbiAgU2VsZk9wdGlvbnMgPSBQcm92aWRlZE9wdGlvbnMsXG4gIFBhcmVudE9wdGlvbnMgPSBSZWNvcmQ8bmV2ZXIsIG5ldmVyPj4oKTpcbiAgPEtleXNVc2VkSW5TdWJjbGFzc0NvbnN0cnVjdG9yIGV4dGVuZHMga2V5b2YgKCBQYXJlbnRPcHRpb25zICk+KFxuICAgIGRlZmF1bHRzOiBPcHRpb25pemVEZWZhdWx0czxTZWxmT3B0aW9ucywgUGFyZW50T3B0aW9ucywgUHJvdmlkZWRPcHRpb25zPixcbiAgICBwcm92aWRlZE9wdGlvbnM/OiBQcm92aWRlZE9wdGlvbnNcbiAgKSA9PiBPcHRpb25pemVEZWZhdWx0czxTZWxmT3B0aW9ucywgUGFyZW50T3B0aW9ucz4gJiBQcm92aWRlZE9wdGlvbnMgJiBSZXF1aXJlZDxQaWNrPFBhcmVudE9wdGlvbnMsIEtleXNVc2VkSW5TdWJjbGFzc0NvbnN0cnVjdG9yPj4ge1xuICByZXR1cm4gbWVyZ2U0O1xufVxuXG4vLyBVc2UgdGhpcyBmdW5jdGlvbiB0byBnYWluIHRoZSB0eXBpbmcgdGhhdCBvcHRpb25pemUgcHJvdmlkZXMgYnV0IGluIGEgY2FzZSB3aGVyZSB0aGUgZmlyc3QgYXJndW1lbnQgaXMgYW4gZW1wdHkgb2JqZWN0LlxuZXhwb3J0IGZ1bmN0aW9uIG9wdGlvbml6ZTM8UHJvdmlkZWRPcHRpb25zLFxuICBTZWxmT3B0aW9ucyA9IFByb3ZpZGVkT3B0aW9ucyxcbiAgUGFyZW50T3B0aW9ucyA9IFJlY29yZDxuZXZlciwgbmV2ZXI+PigpOlxuICA8S2V5c1VzZWRJblN1YmNsYXNzQ29uc3RydWN0b3IgZXh0ZW5kcyBrZXlvZiAoIFBhcmVudE9wdGlvbnMgKT4oXG4gICAgZW1wdHlPYmplY3Q6IE9iamVjdFdpdGhOb0tleXMsXG4gICAgZGVmYXVsdHM6IE9wdGlvbml6ZURlZmF1bHRzPFNlbGZPcHRpb25zLCBQYXJlbnRPcHRpb25zPixcbiAgICBwcm92aWRlZE9wdGlvbnM/OiBQcm92aWRlZE9wdGlvbnNcbiAgKSA9PiBPcHRpb25pemVEZWZhdWx0czxTZWxmT3B0aW9ucywgUGFyZW50T3B0aW9ucz4gJiBQcm92aWRlZE9wdGlvbnMgJiBSZXF1aXJlZDxQaWNrPFBhcmVudE9wdGlvbnMsIEtleXNVc2VkSW5TdWJjbGFzc0NvbnN0cnVjdG9yPj4ge1xuICByZXR1cm4gbWVyZ2U0O1xufVxuXG4vKipcbiAqIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIHJlcGxhY2UgbWVyZ2UgaW4gY2FzZXMgbGlrZTpcbiAqXG4gKiBjb25zdCBvcHRpb25zID0gbS1lLXItZy1lKFxuICogICB7fSxcbiAqXG4gKiAgIC8vIFBhcmVudE9wdGlvbnMgZGVmYXVsdHMgdGhhdCBhcmUgY29tbW9uIHRocm91Z2hvdXQgdGhlIHNpbVxuICogICBNeUNvbnN0YW50cy5TT01FX0NPTU1PTl9PUFRJT05TLFxuICpcbiAqICAgLy8gU2VsZk9wdGlvbnMgYW5kIFBhcmVudE9wdGlvbnMgZGVmYXVsdHMgdGhhdCBhcmUgcHJvdmlkZWQgYnkgdGhpcyBjbGFzc1xuICogICB7IC4uLiB9LFxuICpcbiAqICAgLy8gb3B0aW9uIHZhbHVlcyB0aGF0IGFyZSBwcm92aWRlZCBieSB0aGUgY2FsbGVyXG4gKiAgIHByb3ZpZGVkT3B0aW9ucyApO1xuICovXG5leHBvcnQgZnVuY3Rpb24gb3B0aW9uaXplNDxQcm92aWRlZE9wdGlvbnMsXG4gIFNlbGZPcHRpb25zID0gUHJvdmlkZWRPcHRpb25zLFxuICBQYXJlbnRPcHRpb25zID0gb2JqZWN0PigpOlxuICA8S2V5c1VzZWRJblN1YmNsYXNzQ29uc3RydWN0b3IgZXh0ZW5kcyBrZXlvZiAoIFBhcmVudE9wdGlvbnMgKT4oXG4gICAgZW1wdHlPYmplY3Q6IE9iamVjdFdpdGhOb0tleXMsXG4gICAgZGVmYXVsdHMxOiBQYXJ0aWFsPFBhcmVudE9wdGlvbnM+LFxuICAgIGRlZmF1bHRzMjogT3B0aW9uaXplRGVmYXVsdHM8U2VsZk9wdGlvbnMsIFBhcmVudE9wdGlvbnM+LFxuICAgIHByb3ZpZGVkT3B0aW9ucz86IFByb3ZpZGVkT3B0aW9uc1xuICApID0+IE9wdGlvbml6ZURlZmF1bHRzPFNlbGZPcHRpb25zLCBQYXJlbnRPcHRpb25zPiAmIFByb3ZpZGVkT3B0aW9ucyAmIFJlcXVpcmVkPFBpY2s8UGFyZW50T3B0aW9ucywgS2V5c1VzZWRJblN1YmNsYXNzQ29uc3RydWN0b3I+PiB7XG4gIHJldHVybiBtZXJnZTQ7XG59XG5cbi8vIFVzZSBjb21iaW5lT3B0aW9ucyB0byBjb21iaW5lIG9iamVjdCBsaXRlcmFscyAodHlwaWNhbGx5IG9wdGlvbnMpIHRoYXQgYWxsIGhhdmUgdGhlIHNhbWUgdHlwZS5cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lT3B0aW9uczxUeXBlIGV4dGVuZHMgb2JqZWN0PiggdGFyZ2V0OiBQYXJ0aWFsPFR5cGU+LCAuLi5zb3VyY2VzOiBBcnJheTxQYXJ0aWFsPFR5cGU+IHwgdW5kZWZpbmVkPiApOiBUeXBlIHtcbiAgcmV0dXJuIG1lcmdlNCggdGFyZ2V0LCAuLi5zb3VyY2VzICk7XG59XG5cblxuLy8gZnVuY3Rpb24gb3B0aW9uaXplPFByb3ZpZGVkT3B0aW9ucywgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZWRlY2xhcmVcbi8vICAgU2VsZk9wdGlvbnMgPSBQcm92aWRlZE9wdGlvbnMsXG4vLyAgIFBhcmVudE9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zPigpOlxuLy8gICA8S2V5c1VzZWRJblN1YmNsYXNzQ29uc3RydWN0b3IgZXh0ZW5kcyBrZXlvZiAoIFBhcmVudE9wdGlvbnMgKT4oXG4vLyAgICAgZW1wdHlPYmplY3Q6IE9iamVjdFdpdGhOb0tleXMsXG4vLyAgICAgZGVmYXVsdHM6IE9wdGlvbml6ZURlZmF1bHRzPFNlbGZPcHRpb25zLCBQYXJlbnRPcHRpb25zPixcbi8vICAgICBwcm92aWRlZE9wdGlvbnM/OiBQcm92aWRlZE9wdGlvbnNcbi8vICAgKSA9PiBPcHRpb25pemVEZWZhdWx0czxTZWxmT3B0aW9ucywgUGFyZW50T3B0aW9ucz4gJiBQcm92aWRlZE9wdGlvbnMgJiBSZXF1aXJlZDxQaWNrPFBhcmVudE9wdGlvbnMsIEtleXNVc2VkSW5TdWJjbGFzc0NvbnN0cnVjdG9yPj47XG4vL1xuLy8gZnVuY3Rpb24gb3B0aW9uaXplPFByb3ZpZGVkT3B0aW9ucywgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZWRlY2xhcmVcbi8vICAgU2VsZk9wdGlvbnMgPSBQcm92aWRlZE9wdGlvbnMsXG4vLyAgIFBhcmVudE9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zLFxuLy8gICBLZXlzVXNlZEluU3ViY2xhc3NDb25zdHJ1Y3RvciBleHRlbmRzIGtleW9mIFBhcmVudE9wdGlvbnMgPSBuZXZlcj4oKTpcbi8vICAgKFxuLy8gICAgIGVtcHl0T2JqZWN0OiBPYmplY3RXaXRoTm9LZXlzLFxuLy8gICAgIGRlZmF1bHRzOiBPcHRpb25pemVEZWZhdWx0czxTZWxmT3B0aW9ucywgUGFyZW50T3B0aW9ucywgS2V5c1VzZWRJblN1YmNsYXNzQ29uc3RydWN0b3I+LFxuLy8gICAgIHByb3ZpZGVkT3B0aW9ucz86IFByb3ZpZGVkT3B0aW9uc1xuLy8gICApID0+IE9iamVjdFdpdGhOb0tleXMgJiBPcHRpb25pemVEZWZhdWx0czxTZWxmT3B0aW9ucywgUGFyZW50T3B0aW9ucywgS2V5c1VzZWRJblN1YmNsYXNzQ29uc3RydWN0b3I+ICYgUHJvdmlkZWRPcHRpb25zO1xuXG4vLyBUaGUgaW1wbGVtZW50YXRpb24gZ2V0cyBcImFueVwiIHR5cGVzIGJlY2F1c2Ugb2YgdGhlIGFib3ZlIHNpZ25hdHVyZXNcbi8vIGZ1bmN0aW9uIG9wdGlvbml6ZTw/Pz8+KCkgeyByZXR1cm4gKCBhOiBhbnksIGI/OiBhbnksIGM/OiBhbnkgKSA9PiBtZXJnZSggYSwgYiwgYyApOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVkZWNsYXJlLGJhZC10ZXh0XG5cbi8vIFR5cGVTY3JpcHQgaXMgYWxsLW9yLW5vbmUgb24gaW5mZXJyaW5nIGdlbmVyaWMgcGFyYW1ldGVyIHR5cGVzIChwZXIgZnVuY3Rpb24pLCBzbyB3ZSBtdXN0IHVzZSB0aGUgbmVzdGVkIHN0cmF0ZWd5IGluXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82MzY3ODMwNi90eXBlc2NyaXB0LXBhcnRpYWwtdHlwZS1pbmZlcmVuY2UgdG8gc3BlY2lmeSB0aGUgdHlwZXMgd2Ugd2FudFxuLy8gd2hpbGUgc3RpbGwgYWxsb3dpbmcgZGVmaW5pdGlvbnMgdG8gZmxvdyB0aHJvdWdoLlxuLy8gVGhpcyBhbHNvIHdvcmtzLCB3ZSB3aWxsIGtlZXAgaXQgaGVyZSBub3cgaW4gY2FzZSBpdCBoZWxwcyB3aXRoIGZ1cnRoZXIgaW1wcm92ZW1lbnRzIHdpdGggaW5mZXJlbmNlLlxuLy8gY29uc3Qgb3B0aW9uaXplID0gPFMsIFAsIE0gZXh0ZW5kcyBrZXlvZiBQID0gbmV2ZXI+KCkgPT4ge1xuLy8gICByZXR1cm4gPEI+KCBkZWZhdWx0czogUmVxdWlyZWQ8T3B0aW9uczxTPj4gJiBQYXJ0aWFsPFA+ICYgUmVxdWlyZWQ8UGljazxQLCBNPj4sIHByb3ZpZGVkT3B0aW9ucz86IEIgKSA9PiB7XG4vLyAgICAgcmV0dXJuIG1lcmdlKCBkZWZhdWx0cywgcHJvdmlkZWRPcHRpb25zICk7XG4vLyAgIH07XG4vLyB9O1xuXG4vKlxuTGltaXRhdGlvbiAoSSk6XG5cblRoaXMgZ2V0cyB1cyBoYWxmIHdheSB0aGVyZSwgd2hlbiB5b3UgaGF2ZSByZXF1aXJlZCBhcmdzIHRvIHRoZSBwYXJlbnQsIHRoaXMgbWFrZXMgc3VyZSB0aGF0IHlvdSBkb24ndCBtYWtlXG5wcm92aWRlZE9wdGlvbnMgb3B0aW9uYWwgKHdpdGggYSBxdWVzdGlvbiBtYXJrKS4gV2Ugc3RpbGwgbmVlZCBhIHdheSB0byBub3RlIHdoZW4gdGhlIHJlcXVpcmVkIHBhcmFtIGlzIHNwZWNpZmllZCB2aWEgdGhlIHNlbGYgb3B0aW9ucy5cbmNvbnN0IG9wdGlvbml6ZSA9IDxTLCBQID0gRW1wdHlTZWxmT3B0aW9ucywgTSBleHRlbmRzIGtleW9mIFAgPSBuZXZlciwgQSA9IFMgJiBQPihcbiAgZGVmYXVsdHM6IFJlcXVpcmVkPE9wdGlvbnM8Uz4+ICYgUGFydGlhbDxQPiAmIFJlcXVpcmVkPFBpY2s8UCwgTT4+LFxuICBwcm92aWRlZE9wdGlvbnM6IFJlcXVpcmVkS2V5czxBPiBleHRlbmRzIG5ldmVyID8gKCBBIHwgdW5kZWZpbmVkICkgOiBBXG4pID0+IHtcbiAgcmV0dXJuIG1lcmdlKCBkZWZhdWx0cywgcHJvdmlkZWRPcHRpb25zICk7XG59O1xuXG5URVNUIFRPIFNFRSBJRiBXRSBDQU4gR0VUIFRZUEVTQ1JJUFQgVE8gS05PVyBBQk9VVCBSRVFVSVJFRCBBUkdVTUVOVFMgVE8gUE9URU5USUFMTFkgQ09NRSBGUk9NIEVJVEhFUiBBUkcuXG5jb25zdCBvcHRpb25pemUgPSA8UywgUCA9IEVtcHR5U2VsZk9wdGlvbnMsIE0gZXh0ZW5kcyBrZXlvZiBQID0gbmV2ZXIsIEEgPSBTICYgUD4oKSA9PiB7XG4gIHR5cGUgRmlyc3RBcmcgPSBSZXF1aXJlZDxPcHRpb25zPFM+PiAmIFBhcnRpYWw8UD4gJiBSZXF1aXJlZDxQaWNrPFAsIE0+PjtcbiAgcmV0dXJuIChcbiAgICBkZWZhdWx0czogRmlyc3RBcmcsXG4gICAgLy9OT1QgV09SS0lORzogSWYgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHdlcmUgaW4gdGhlIGZpcnN0IGFyZywgdGhlbiB3ZSBkb24ndCBuZWVkIHRoZW0gaGVyZSwgYW5kIHBvdGVudGlhbGx5IGNhbiBtYXJrIHByb3ZpZGVkT3B0aW9ucyBhcyBhIHdob2xlIGFzIG9wdGlvbmFsXG4gICAgcHJvdmlkZWRPcHRpb25zOiBSZXF1aXJlZEtleXM8Rmlyc3RBcmc+IGV4dGVuZHMgbmV2ZXIgPyBSZXF1aXJlZEtleXM8QT4gZXh0ZW5kcyBuZXZlciA/ICggQSB8IHVuZGVmaW5lZCApIDogQSA6IEFcbiAgKSA9PiB7XG4gICAgcmV0dXJuIG1lcmdlKCBkZWZhdWx0cywgcHJvdmlkZWRPcHRpb25zICk7XG4gIH07XG59O1xuICovXG5cbnBoZXRDb3JlLnJlZ2lzdGVyKCAnb3B0aW9uaXplJywgb3B0aW9uaXplICk7XG5leHBvcnQgdHlwZSB7IE9wdGlvbml6ZURlZmF1bHRzIH07Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSxlQUFlO0FBQ3BDLE9BQU9DLEtBQUssTUFBTSxZQUFZO0FBNEI5QjtBQUNBLE1BQU1DLE1BQU0sR0FBR0EsQ0FBRUMsQ0FBaUIsRUFBRUMsQ0FBa0IsRUFBRUMsQ0FBa0IsRUFBRUMsQ0FBa0IsS0FBTUwsS0FBSyxDQUFFRSxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLENBQUU7O0FBRXZIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTQyxTQUFTQSxDQUFBLEVBTXFHO0VBQ3BJLE9BQU9MLE1BQU07QUFDZjs7QUFFQTtBQUNBLE9BQU8sU0FBU00sVUFBVUEsQ0FBQSxFQU80RztFQUNwSSxPQUFPTixNQUFNO0FBQ2Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxTQUFTTyxVQUFVQSxDQUFBLEVBUTRHO0VBQ3BJLE9BQU9QLE1BQU07QUFDZjs7QUFFQTtBQUNBLE9BQU8sU0FBU1EsY0FBY0EsQ0FBdUJDLE1BQXFCLEVBQUUsR0FBR0MsT0FBeUMsRUFBUztFQUMvSCxPQUFPVixNQUFNLENBQUVTLE1BQU0sRUFBRSxHQUFHQyxPQUFPLENBQUU7QUFDckM7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQVosUUFBUSxDQUFDYSxRQUFRLENBQUUsV0FBVyxFQUFFTixTQUFTLENBQUUifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/tandemNamespace.js
// Copyright 2015-2022, University of Colorado Boulder

/**
 * Creates the namespace for this repository.  By convention, this should have been declared in a file "tandem.js"
 * But that filename was already used for Tandem.js, so we use the alternate convention discussed in:
 * https://github.com/phetsims/tandem/issues/5#issuecomment-162597651
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */


/* harmony default export */ const tandemNamespace = (new js_Namespace('tandem'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOYW1lc3BhY2UiXSwic291cmNlcyI6WyJ0YW5kZW1OYW1lc3BhY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogQ3JlYXRlcyB0aGUgbmFtZXNwYWNlIGZvciB0aGlzIHJlcG9zaXRvcnkuICBCeSBjb252ZW50aW9uLCB0aGlzIHNob3VsZCBoYXZlIGJlZW4gZGVjbGFyZWQgaW4gYSBmaWxlIFwidGFuZGVtLmpzXCJcbiAqIEJ1dCB0aGF0IGZpbGVuYW1lIHdhcyBhbHJlYWR5IHVzZWQgZm9yIFRhbmRlbS5qcywgc28gd2UgdXNlIHRoZSBhbHRlcm5hdGUgY29udmVudGlvbiBkaXNjdXNzZWQgaW46XG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvdGFuZGVtL2lzc3Vlcy81I2lzc3VlY29tbWVudC0xNjI1OTc2NTFcbiAqXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5cbmltcG9ydCBOYW1lc3BhY2UgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL05hbWVzcGFjZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBOYW1lc3BhY2UoICd0YW5kZW0nICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0saUNBQWlDO0FBRXZELGVBQWUsSUFBSUEsU0FBUyxDQUFFLFFBQVEsQ0FBRSJ9
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/deprecationWarning.js
// Copyright 2020, University of Colorado Boulder

/**
 * Output deprecation warnings to console.warn when ?deprecationWarnings is specified
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */



// contains all messages printed for deprecation warnings so that we do not print the same message multiple times
const deprecatedMessages = {};
const deprecationWarning = message => {
  if (window.phet && window.phet.chipper && window.phet.chipper.queryParameters && phet.chipper.queryParameters.deprecationWarnings) {
    if (!deprecatedMessages.hasOwnProperty(message)) {
      deprecatedMessages[message] = true;
      console.warn(`Deprecation warning: ${message}`);
    }
  }
};
js_phetCore.register('deprecationWarning', deprecationWarning);
/* harmony default export */ const js_deprecationWarning = (deprecationWarning);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsImRlcHJlY2F0ZWRNZXNzYWdlcyIsImRlcHJlY2F0aW9uV2FybmluZyIsIm1lc3NhZ2UiLCJ3aW5kb3ciLCJwaGV0IiwiY2hpcHBlciIsInF1ZXJ5UGFyYW1ldGVycyIsImRlcHJlY2F0aW9uV2FybmluZ3MiLCJoYXNPd25Qcm9wZXJ0eSIsImNvbnNvbGUiLCJ3YXJuIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJkZXByZWNhdGlvbldhcm5pbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIE91dHB1dCBkZXByZWNhdGlvbiB3YXJuaW5ncyB0byBjb25zb2xlLndhcm4gd2hlbiA/ZGVwcmVjYXRpb25XYXJuaW5ncyBpcyBzcGVjaWZpZWRcbiAqXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5cbmltcG9ydCBwaGV0Q29yZSBmcm9tICcuL3BoZXRDb3JlLmpzJztcblxuLy8gY29udGFpbnMgYWxsIG1lc3NhZ2VzIHByaW50ZWQgZm9yIGRlcHJlY2F0aW9uIHdhcm5pbmdzIHNvIHRoYXQgd2UgZG8gbm90IHByaW50IHRoZSBzYW1lIG1lc3NhZ2UgbXVsdGlwbGUgdGltZXNcbmNvbnN0IGRlcHJlY2F0ZWRNZXNzYWdlcyA9IHt9O1xuXG5jb25zdCBkZXByZWNhdGlvbldhcm5pbmcgPSBtZXNzYWdlID0+IHtcbiAgaWYgKCB3aW5kb3cucGhldCAmJiB3aW5kb3cucGhldC5jaGlwcGVyICYmIHdpbmRvdy5waGV0LmNoaXBwZXIucXVlcnlQYXJhbWV0ZXJzICYmIHBoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMuZGVwcmVjYXRpb25XYXJuaW5ncyApIHtcbiAgICBpZiAoICFkZXByZWNhdGVkTWVzc2FnZXMuaGFzT3duUHJvcGVydHkoIG1lc3NhZ2UgKSApIHtcbiAgICAgIGRlcHJlY2F0ZWRNZXNzYWdlc1sgbWVzc2FnZSBdID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUud2FybiggYERlcHJlY2F0aW9uIHdhcm5pbmc6ICR7bWVzc2FnZX1gICk7XG4gICAgfVxuICB9XG59O1xuXG5waGV0Q29yZS5yZWdpc3RlciggJ2RlcHJlY2F0aW9uV2FybmluZycsIGRlcHJlY2F0aW9uV2FybmluZyApO1xuXG5leHBvcnQgZGVmYXVsdCBkZXByZWNhdGlvbldhcm5pbmc7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSxlQUFlOztBQUVwQztBQUNBLE1BQU1DLGtCQUFrQixHQUFHLENBQUMsQ0FBQztBQUU3QixNQUFNQyxrQkFBa0IsR0FBR0MsT0FBTyxJQUFJO0VBQ3BDLElBQUtDLE1BQU0sQ0FBQ0MsSUFBSSxJQUFJRCxNQUFNLENBQUNDLElBQUksQ0FBQ0MsT0FBTyxJQUFJRixNQUFNLENBQUNDLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxlQUFlLElBQUlGLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxlQUFlLENBQUNDLG1CQUFtQixFQUFHO0lBQ25JLElBQUssQ0FBQ1Asa0JBQWtCLENBQUNRLGNBQWMsQ0FBRU4sT0FBTyxDQUFFLEVBQUc7TUFDbkRGLGtCQUFrQixDQUFFRSxPQUFPLENBQUUsR0FBRyxJQUFJO01BQ3BDTyxPQUFPLENBQUNDLElBQUksQ0FBRyx3QkFBdUJSLE9BQVEsRUFBQyxDQUFFO0lBQ25EO0VBQ0Y7QUFDRixDQUFDO0FBRURILFFBQVEsQ0FBQ1ksUUFBUSxDQUFFLG9CQUFvQixFQUFFVixrQkFBa0IsQ0FBRTtBQUU3RCxlQUFlQSxrQkFBa0IifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/EnumerationDeprecated.js
// Copyright 2018-2022, University of Colorado Boulder

/**
 * Creates a simple enumeration, with most of the boilerplate.
 *
 * An EnumerationDeprecated can be created like this:
 *
 *   const CardinalDirection = EnumerationDeprecated.byKeys( [ 'NORTH', 'SOUTH', 'EAST', 'WEST' ] );
 *
 * OR using rich values like so:
 *
 *   const CardinalDirection = EnumerationDeprecated.byMap( {NORTH: northObject, SOUTH: southObject, EAST: eastObject, WEST: westObject} );
 *
 * and values are referenced like this:
 *
 *   CardinalDirection.NORTH;
 *   CardinalDirection.SOUTH;
 *   CardinalDirection.EAST;
 *   CardinalDirection.WEST;
 *
 *   CardinalDirection.VALUES;
 *   // returns [ CardinalDirection.NORTH, CardinalDirection.SOUTH, CardinalDirection.EAST, CardinalDirection.WEST ]
 *
 * And support for checking whether any value is a value of the enumeration:
 *
 *   CardinalDirection.includes( CardinalDirection.NORTH ); // true
 *   CardinalDirection.includes( CardinalDirection.SOUTHWEST ); // false
 *   CardinalDirection.includes( 'NORTH' ); // false, values are not strings
 *
 * Conventions for using EnumerationDeprecated, from https://github.com/phetsims/phet-core/issues/53:
 *
 * (1) Enumerations are named like classes/types. Nothing in the name needs to identify that they are Enumerations.
 *     See the example above: CardinalDirection, not CardinalDirectionEnum or CardinalDirectionEnumeration.
 *
 * (2) EnumerationDeprecated values are named like constants, using uppercase. See the example above.
 *
 * (3) If an EnumerationDeprecated is closely related to some class, then make it a static field of that class. If an
 *     EnumerationDeprecated is specific to a Property, then the EnumerationDeprecated should likely be owned by the class that
 *     owns that Property.
 *
 * (4) If an EnumerationDeprecated is not closely related to some class, then put the EnumerationDeprecated in its own .js file.
 *     Do not combine multiple Enumerations into one file.
 *
 * (5) If a Property takes an EnumerationDeprecated value, its validation typically looks like this:
 *
 *     const cardinalDirectionProperty = new Property( CardinalDirection.NORTH, {
 *       validValues: CardinalDirection.VALUES
 *     }
 *
 * (6) Values of the EnumerationDeprecated are considered instances of the EnumerationDeprecated in documentation. For example, a method
 *     that that takes an EnumerationDeprecated value as an argument would be documented like this:
 *
 *     // @param {Scene} mode - value from Scene EnumerationDeprecated
 *     setSceneMode( mode ) {
 *       assert && assert( Scene.includes( mode ) );
 *       //...
 *     }
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */





/**
 * @deprecated
 */
class EnumerationDeprecated {
  /**
   * @param {Object} config - must provide keys such as {keys:['RED','BLUE]}
   *                          - or map such as {map:{RED: myRedValue, BLUE: myBlueValue}}
   *
   * @private - clients should use EnumerationDeprecated.byKeys or EnumerationDeprecated.byMap
   */
  constructor(config) {
    js_deprecationWarning('EnumerationDeprecated should be exchanged for classes that extend EnumerationValue, see WilderEnumerationPatterns for examples.');
    assert && assert(config, 'config must be provided');
    const keysProvided = !!config.keys;
    const mapProvided = !!config.map;
    assert && assert(keysProvided !== mapProvided, 'must provide one or the other but not both of keys/map');
    const keys = config.keys || Object.keys(config.map);
    const map = config.map || {};
    config = js_merge({
      // {string|null} Will be appended to the EnumerationIO documentation, if provided
      phetioDocumentation: null,
      // {function(EnumerationDeprecated):|null} If provided, it will be called as beforeFreeze( enumeration ) just before the
      // enumeration is frozen. Since it's not possible to modify the enumeration after
      // it is frozen (e.g. adding convenience functions), and there is no reference to
      // the enumeration object beforehand, this allows defining custom values/methods
      // on the enumeration object itself.
      beforeFreeze: null
    }, config);
    assert && assert(Array.isArray(keys), 'Values should be an array');
    assert && assert(_.uniq(keys).length === keys.length, 'There should be no duplicated values provided');
    assert && keys.forEach(value => assert(typeof value === 'string', 'Each value should be a string'));
    assert && keys.forEach(value => assert(/^[A-Z][A-Z0-9_]*$/g.test(value), 'EnumerationDeprecated values should be uppercase alphanumeric with underscores and begin with a letter'));
    assert && assert(!_.includes(keys, 'VALUES'), 'This is the name of a built-in provided value, so it cannot be included as an enumeration value');
    assert && assert(!_.includes(keys, 'KEYS'), 'This is the name of a built-in provided value, so it cannot be included as an enumeration value');
    assert && assert(!_.includes(keys, 'includes'), 'This is the name of a built-in provided value, so it cannot be included as an enumeration value');

    // @public (phet-io) - provides additional documentation for PhET-iO which can be viewed in studio
    // Note this uses the same term as used by PhetioObject, but via a different channel.
    this.phetioDocumentation = config.phetioDocumentation;

    // @public {string[]} (read-only) - the string keys of the enumeration
    this.KEYS = keys;

    // @public {Object[]} (read-only) - the object values of the enumeration
    this.VALUES = [];
    keys.forEach(key => {
      const value = map[key] || {};

      // Set attributes of the enumeration value
      assert && assert(value.name === undefined, '"rich" enumeration values cannot provide their own name attribute');
      assert && assert(value.toString === Object.prototype.toString, '"rich" enumeration values cannot provide their own toString');

      // @public {string} (read-only) - PhET-iO public API relies on this mapping, do not change it lightly
      value.name = key;

      // @public {function():string} (read-only)
      value.toString = () => key;

      // Assign to the enumeration
      this[key] = value;
      this.VALUES.push(value);
    });
    config.beforeFreeze && config.beforeFreeze(this);
    assert && Object.freeze(this);
    assert && Object.freeze(this.VALUES);
    assert && Object.freeze(this.KEYS);
    assert && keys.forEach(key => assert && Object.freeze(map[key]));
  }

  /**
   * Based solely on the keys in EnumerationDeprecated.
   * @public
   *
   * @returns {String}
   */

  toString() {
    return this.KEYS.join(', ');
  }

  /**
   * Checks whether the given value is a value of this enumeration. Should generally be used for assertions
   * @public
   *
   * @param {Object} value
   * @returns {boolean}
   */
  includes(value) {
    return _.includes(this.VALUES, value);
  }

  /**
   * To support consistent API with Enumeration.
   * @public
   * @param {string} key
   * @returns {*}
   */
  getValue(key) {
    return this[key];
  }

  /**
   * To support consistent API with Enumeration.
   * @public
   * @param {Object} enumerationValue
   * @returns {string}
   */
  getKey(enumerationValue) {
    return enumerationValue.name;
  }

  /**
   * To support consistent API with Enumeration.
   * @public
   * @returns {Object[]}
   */
  get values() {
    return this.VALUES;
  }

  /**
   * To support consistent API with Enumeration.
   * @public
   * @returns {string[]}
   */
  get keys() {
    return this.KEYS;
  }

  /**
   * To support consistent API with Enumeration.
   * @public
   * @returns {EnumerationDeprecated}
   */
  get enumeration() {
    return this;
  }

  /**
   * Creates an enumeration based on the provided string array
   * @param {string[]} keys - such as ['RED','BLUE']
   * @param {Object} [options]
   * @returns {EnumerationDeprecated}
   * @public
   */
  static byKeys(keys, options) {
    assert && assert(Array.isArray(keys), 'keys must be an array');
    assert && assert(!options || options.keys === undefined);
    return new EnumerationDeprecated(js_merge({
      keys: keys
    }, options));
  }

  /**
   * Creates a "rich" enumeration based on the provided map
   * @param {Object} map - such as {RED: myRedValue, BLUE: myBlueValue}
   * @param {Object} [options]
   * @returns {EnumerationDeprecated}
   * @public
   */
  static byMap(map, options) {
    assert && assert(!options || options.map === undefined);
    if (assert) {
      const values = _.values(map);
      assert && assert(values.length >= 1, 'must have at least 2 entries in an enumeration');
      assert && assert(_.every(values, value => value.constructor === values[0].constructor), 'Values must have same constructor');
    }
    return new EnumerationDeprecated(js_merge({
      map: map
    }, options));
  }
}
js_phetCore.register('EnumerationDeprecated', EnumerationDeprecated);
/* harmony default export */ const js_EnumerationDeprecated = (EnumerationDeprecated);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/Validation.js
// Copyright 2019-2023, University of Colorado Boulder

/**
 * The definition file for "validators" used to validate values. This file holds associated logic that validates the
 * schema of the "validator" object, as well as testing if a value adheres to the restrictions provided by a validator.
 * See validate.js for usage with assertions to check that values are valid.
 *
 * Examples:
 *
 * A Validator that only accepts number values:
 * { valueType: 'number' }
 *
 * A Validator that only accepts the numbers "2" or "3":
 * { valueType: 'number', validValues: [ 2, 3 ] }
 *
 * A Validator that accepts any Object:
 * { valueType: Object }
 *
 * A Validator that accepts EnumerationDeprecated values (NOTE! This is deprecated, use the new class-based enumeration pattern as the valueType):
 * { valueType: MyEnumeration }
 * and/or
 * { validValues: MyEnumeration.VALUES }
 *
 * A Validator that accepts a string or a number greater than 2:
 * { isValidValue: value => { typeof value === 'string' || (typeof value === 'number' && value > 2)} }
 *
 * A Validator for a number that should be an even number greater than 10
 * { valueType: 'number', validators: [ { isValidValue: v => v > 10 }, { isValidValue: v => v%2 === 0 }] }
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */




const TYPEOF_STRINGS = ['string', 'number', 'boolean', 'function'];
// Key names are verbose so this can be mixed into other contexts like AXON/Property. `undefined` and `null` have the
// same semantics so that we can use this feature without having extend and allocate new objects at every validation.
const VALIDATOR_KEYS = ['valueType', 'validValues', 'valueComparisonStrategy', 'isValidValue', 'phetioType', 'validators'];
class Validation {
  /**
   * @returns an error string if incorrect, otherwise null if valid
   */
  static getValidatorValidationError(validator) {
    if (!(validator instanceof Object)) {
      // There won't be a validationMessage on a non-object
      return 'validator must be an Object';
    }
    if (!(validator.hasOwnProperty('isValidValue') || validator.hasOwnProperty('valueType') || validator.hasOwnProperty('validValues') || validator.hasOwnProperty('valueComparisonStrategy') || validator.hasOwnProperty('phetioType') || validator.hasOwnProperty('validators'))) {
      return this.combineErrorMessages(`validator must have at least one of: ${VALIDATOR_KEYS.join(',')}`, validator.validationMessage);
    }
    if (validator.hasOwnProperty('valueType')) {
      const valueTypeValidationError = Validation.getValueOrElementTypeValidationError(validator.valueType);
      if (valueTypeValidationError) {
        return this.combineErrorMessages(`Invalid valueType: ${validator.valueType}, error: ${valueTypeValidationError}`, validator.validationMessage);
      }
    }
    if (validator.hasOwnProperty('isValidValue')) {
      if (!(typeof validator.isValidValue === 'function' || validator.isValidValue === null || validator.isValidValue === undefined)) {
        return this.combineErrorMessages(`isValidValue must be a function: ${validator.isValidValue}`, validator.validationMessage);
      }
    }
    if (validator.hasOwnProperty('valueComparisonStrategy')) {
      // Only accepted values are below
      if (!(validator.valueComparisonStrategy === 'reference' || validator.valueComparisonStrategy === 'lodashDeep' || validator.valueComparisonStrategy === 'equalsFunction' || typeof validator.isValidValue === 'function')) {
        return this.combineErrorMessages(`valueComparisonStrategy must be "reference", "lodashDeep", 
        "equalsFunction", or a comparison function: ${validator.valueComparisonStrategy}`, validator.validationMessage);
      }
    }
    if (validator.validValues !== undefined && validator.validValues !== null) {
      if (!Array.isArray(validator.validValues)) {
        return this.combineErrorMessages(`validValues must be an array: ${validator.validValues}`, validator.validationMessage);
      }

      // Make sure each validValue matches the other rules, if any.
      const validatorWithoutValidValues = _.omit(validator, 'validValues');
      if (Validation.containsValidatorKey(validatorWithoutValidValues)) {
        for (let i = 0; i < validator.validValues.length; i++) {
          const validValue = validator.validValues[i];
          const validValueValidationError = Validation.getValidationError(validValue, validatorWithoutValidValues);
          if (validValueValidationError) {
            return this.combineErrorMessages(`Item not valid in validValues: ${validValue}, error: ${validValueValidationError}`, validator.validationMessage);
          }
        }
      }
    }
    if (validator.hasOwnProperty('phetioType')) {
      if (!validator.phetioType) {
        return this.combineErrorMessages('falsey phetioType provided', validator.validationMessage);
      }
      if (!validator.phetioType.validator) {
        return this.combineErrorMessages(`validator needed for phetioType: ${validator.phetioType.typeName}`, validator.validationMessage);
      }
      const phetioTypeValidationError = Validation.getValidatorValidationError(validator.phetioType.validator);
      if (phetioTypeValidationError) {
        return this.combineErrorMessages(phetioTypeValidationError, validator.validationMessage);
      }
    }
    if (validator.hasOwnProperty('validators')) {
      const validators = validator.validators;
      for (let i = 0; i < validators.length; i++) {
        const subValidator = validators[i];
        const subValidationError = Validation.getValidatorValidationError(subValidator);
        if (subValidationError) {
          return this.combineErrorMessages(`validators[${i}] invalid: ${subValidationError}`, validator.validationMessage);
        }
      }
    }
    return null;
  }

  /**
   * Validate that the valueType is of the expected format. Does not add validationMessage to any error it reports.
   * @returns - null if valid
   */
  static getValueTypeValidatorValidationError(valueType) {
    if (!(typeof valueType === 'function' || typeof valueType === 'string' || valueType instanceof js_EnumerationDeprecated || valueType === null || valueType === undefined)) {
      return `valueType must be {function|string|EnumerationDeprecated|null|undefined}, valueType=${valueType}`;
    }

    // {string} valueType must be one of the primitives in TYPEOF_STRINGS, for typeof comparison
    if (typeof valueType === 'string') {
      if (!_.includes(TYPEOF_STRINGS, valueType)) {
        return `valueType not a supported primitive types: ${valueType}`;
      }
    }
    return null;
  }
  static validateValidator(validator) {
    if (assert) {
      const error = Validation.getValidatorValidationError(validator);
      error && assert(false, error);
    }
  }

  /**
   * @param validator - object which may or may not contain validation keys
   */
  static containsValidatorKey(validator) {
    if (!(validator instanceof Object)) {
      return false;
    }
    for (let i = 0; i < VALIDATOR_KEYS.length; i++) {
      if (validator.hasOwnProperty(VALIDATOR_KEYS[i])) {
        return true;
      }
    }
    return false;
  }
  static combineErrorMessages(genericMessage, specificMessage) {
    if (specificMessage) {
      genericMessage = `${specificMessage}: ${genericMessage}`;
    }
    return genericMessage;
  }
  static isValueValid(value, validator, providedOptions) {
    return this.getValidationError(value, validator, providedOptions) === null;
  }

  /**
   * Determines whether a value is valid (returning a boolean value), returning the problem as a string if invalid,
   * otherwise returning null when valid.
   */
  static getValidationError(value, validator, providedOptions) {
    const options = optionize()({
      validateValidator: true
    }, providedOptions);
    if (options.validateValidator) {
      const validatorValidationError = Validation.getValidatorValidationError(validator);
      if (validatorValidationError) {
        return validatorValidationError;
      }
    }

    // Check valueType, which can be an array, string, type, or null
    if (validator.hasOwnProperty('valueType')) {
      const valueType = validator.valueType;
      if (Array.isArray(valueType)) {
        // Only one should be valid, so error out if none of them returned valid (valid=null)
        if (!_.some(valueType.map(typeInArray => !Validation.getValueTypeValidationError(value, typeInArray, validator.validationMessage)))) {
          return this.combineErrorMessages(`value not valid for any valueType in ${valueType.toString().substring(0, 100)}, value: ${value}`, validator.validationMessage);
        }
      } else if (valueType) {
        const valueTypeValidationError = Validation.getValueTypeValidationError(value, valueType, validator.validationMessage);
        if (valueTypeValidationError) {
          // getValueTypeValidationError will add the validationMessage for us
          return valueTypeValidationError;
        }
      }
    }
    if (validator.validValues) {
      const valueComparisonStrategy = validator.valueComparisonStrategy || 'reference';
      const valueValid = validator.validValues.some(validValue => {
        if (valueComparisonStrategy === 'reference') {
          return validValue === value;
        }
        if (valueComparisonStrategy === 'equalsFunction') {
          const validComparable = validValue;
          assert && assert(!!validComparable.equals, 'no equals function for 1st arg');
          assert && assert(!!value.equals, 'no equals function for 2nd arg');
          assert && assert(validComparable.equals(value) === value.equals(validComparable), 'incompatible equality checks');
          return validComparable.equals(value);
        }
        if (valueComparisonStrategy === 'lodashDeep') {
          return _.isEqual(validValue, value);
        } else {
          return valueComparisonStrategy(validValue, value);
        }
      });
      if (!valueValid) {
        return this.combineErrorMessages(`value not in validValues: ${value}`, validator.validationMessage);
      }
    }
    if (validator.hasOwnProperty('isValidValue') && !validator.isValidValue(value)) {
      return this.combineErrorMessages(`value failed isValidValue: ${value}`, validator.validationMessage);
    }
    if (validator.hasOwnProperty('phetioType')) {
      const phetioTypeValidationError = Validation.getValidationError(value, validator.phetioType.validator, options);
      if (phetioTypeValidationError) {
        return this.combineErrorMessages(`value failed phetioType validator: ${value}, error: ${phetioTypeValidationError}`, validator.validationMessage);
      }
    }
    if (validator.hasOwnProperty('validators')) {
      const validators = validator.validators;
      for (let i = 0; i < validators.length; i++) {
        const subValidator = validators[i];
        const subValidationError = Validation.getValidationError(value, subValidator, options);
        if (subValidationError) {
          return this.combineErrorMessages(`Failed validation for validators[${i}]: ${subValidationError}`, validator.validationMessage);
        }
      }
    }
    return null;
  }
  static getValueTypeValidationError(value, valueType, message) {
    if (typeof valueType === 'string' && typeof value !== valueType) {
      // primitive type
      return this.combineErrorMessages(`value should have typeof ${valueType}, value=${value}`, message);
    } else if (valueType === Array && !Array.isArray(value)) {
      return this.combineErrorMessages(`value should have been an array, value=${value}`, message);
    } else if (valueType instanceof js_EnumerationDeprecated && !valueType.includes(value)) {
      return this.combineErrorMessages(`value is not a member of EnumerationDeprecated ${valueType}`, message);
    } else if (typeof valueType === 'function' && !(value instanceof valueType)) {
      // constructor
      return this.combineErrorMessages(`value should be instanceof ${valueType.name}, value=${value}`, message);
    }
    if (valueType === null && value !== null) {
      return this.combineErrorMessages(`value should be null, value=${value}`, message);
    }
    return null;
  }

  /**
   * Validate a type that can be a type, or an array of multiple types. Does not add validationMessage to any error
   * it reports
   */
  static getValueOrElementTypeValidationError(type) {
    if (Array.isArray(type)) {
      // If not every type in the list is valid, then return false, pass options through verbatim.
      for (let i = 0; i < type.length; i++) {
        const typeElement = type[i];
        const error = Validation.getValueTypeValidatorValidationError(typeElement);
        if (error) {
          return `Array value invalid: ${error}`;
        }
      }
    } else if (type) {
      const error = Validation.getValueTypeValidatorValidationError(type);
      if (error) {
        return `Value type invalid: ${error}`;
      }
    }
    return null;
  }
  static VALIDATOR_KEYS = VALIDATOR_KEYS;

  /**
   * General validator for validating that a string doesn't have template variables in it.
   */
  static STRING_WITHOUT_TEMPLATE_VARS_VALIDATOR = {
    valueType: 'string',
    isValidValue: v => !/\{\{\w*\}\}/.test(v)
  };
}
js_axon.register('Validation', Validation);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/validate.js
// Copyright 2019-2023, University of Colorado Boulder

/**
 * Throws an assertion error if assertions are enabled and the value is invalid, otherwise returns the value.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */




/**
 * If assertions are enabled, assert out if the value does not adhere to the validator. No-op without assertions.
 * @deprecated - this solution is worse than a direct assertion (or otherwise call Validation.getValidationError directly)
 */
const validate = (value, validator, providedOptions) => {
  if (assert) {
    // Throws an error if not valid
    const result = Validation.getValidationError(value, validator, providedOptions);
    if (result) {
      const prunedValidator = _.pick(validator, Validation.VALIDATOR_KEYS);
      assert && assert(false, 'validation failed:', result, 'prunedValidator:', prunedValidator);
    }
  }
};
js_axon.register('validate', validate);
/* harmony default export */ const js_validate = (validate);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheG9uIiwiVmFsaWRhdGlvbiIsInZhbGlkYXRlIiwidmFsdWUiLCJ2YWxpZGF0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJhc3NlcnQiLCJyZXN1bHQiLCJnZXRWYWxpZGF0aW9uRXJyb3IiLCJwcnVuZWRWYWxpZGF0b3IiLCJfIiwicGljayIsIlZBTElEQVRPUl9LRVlTIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJ2YWxpZGF0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBUaHJvd3MgYW4gYXNzZXJ0aW9uIGVycm9yIGlmIGFzc2VydGlvbnMgYXJlIGVuYWJsZWQgYW5kIHRoZSB2YWx1ZSBpcyBpbnZhbGlkLCBvdGhlcndpc2UgcmV0dXJucyB0aGUgdmFsdWUuXG4gKlxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5pbXBvcnQgYXhvbiBmcm9tICcuL2F4b24uanMnO1xuaW1wb3J0IEludGVudGlvbmFsQW55IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9JbnRlbnRpb25hbEFueS5qcyc7XG5pbXBvcnQgVmFsaWRhdGlvbiwgeyBJc1ZhbGlkVmFsdWVPcHRpb25zLCBWYWxpZGF0b3IgfSBmcm9tICcuL1ZhbGlkYXRpb24uanMnO1xuXG4vKipcbiAqIElmIGFzc2VydGlvbnMgYXJlIGVuYWJsZWQsIGFzc2VydCBvdXQgaWYgdGhlIHZhbHVlIGRvZXMgbm90IGFkaGVyZSB0byB0aGUgdmFsaWRhdG9yLiBOby1vcCB3aXRob3V0IGFzc2VydGlvbnMuXG4gKiBAZGVwcmVjYXRlZCAtIHRoaXMgc29sdXRpb24gaXMgd29yc2UgdGhhbiBhIGRpcmVjdCBhc3NlcnRpb24gKG9yIG90aGVyd2lzZSBjYWxsIFZhbGlkYXRpb24uZ2V0VmFsaWRhdGlvbkVycm9yIGRpcmVjdGx5KVxuICovXG5jb25zdCB2YWxpZGF0ZSA9IDxUPiggdmFsdWU6IEludGVudGlvbmFsQW55LCB2YWxpZGF0b3I6IFZhbGlkYXRvcjxUPiwgcHJvdmlkZWRPcHRpb25zPzogSXNWYWxpZFZhbHVlT3B0aW9ucyApOiB2b2lkID0+IHtcblxuICBpZiAoIGFzc2VydCApIHtcblxuICAgIC8vIFRocm93cyBhbiBlcnJvciBpZiBub3QgdmFsaWRcbiAgICBjb25zdCByZXN1bHQgPSBWYWxpZGF0aW9uLmdldFZhbGlkYXRpb25FcnJvciggdmFsdWUsIHZhbGlkYXRvciwgcHJvdmlkZWRPcHRpb25zICk7XG4gICAgaWYgKCByZXN1bHQgKSB7XG4gICAgICBjb25zdCBwcnVuZWRWYWxpZGF0b3IgPSBfLnBpY2soIHZhbGlkYXRvciwgVmFsaWRhdGlvbi5WQUxJREFUT1JfS0VZUyApO1xuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICd2YWxpZGF0aW9uIGZhaWxlZDonLCByZXN1bHQsICdwcnVuZWRWYWxpZGF0b3I6JywgcHJ1bmVkVmFsaWRhdG9yICk7XG4gICAgfVxuICB9XG59O1xuXG5cbmF4b24ucmVnaXN0ZXIoICd2YWxpZGF0ZScsIHZhbGlkYXRlICk7XG5leHBvcnQgZGVmYXVsdCB2YWxpZGF0ZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxJQUFJLE1BQU0sV0FBVztBQUU1QixPQUFPQyxVQUFVLE1BQTBDLGlCQUFpQjs7QUFFNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyxRQUFRLEdBQUdBLENBQUtDLEtBQXFCLEVBQUVDLFNBQXVCLEVBQUVDLGVBQXFDLEtBQVk7RUFFckgsSUFBS0MsTUFBTSxFQUFHO0lBRVo7SUFDQSxNQUFNQyxNQUFNLEdBQUdOLFVBQVUsQ0FBQ08sa0JBQWtCLENBQUVMLEtBQUssRUFBRUMsU0FBUyxFQUFFQyxlQUFlLENBQUU7SUFDakYsSUFBS0UsTUFBTSxFQUFHO01BQ1osTUFBTUUsZUFBZSxHQUFHQyxDQUFDLENBQUNDLElBQUksQ0FBRVAsU0FBUyxFQUFFSCxVQUFVLENBQUNXLGNBQWMsQ0FBRTtNQUN0RU4sTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLG9CQUFvQixFQUFFQyxNQUFNLEVBQUUsa0JBQWtCLEVBQUVFLGVBQWUsQ0FBRTtJQUM5RjtFQUNGO0FBQ0YsQ0FBQztBQUdEVCxJQUFJLENBQUNhLFFBQVEsQ0FBRSxVQUFVLEVBQUVYLFFBQVEsQ0FBRTtBQUNyQyxlQUFlQSxRQUFRIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/PhetioConstants.js
// Copyright 2020-2022, University of Colorado Boulder



/**
 * Constants used in PhET-iO. Defined in the tandem repo since they need to be accessed in non-private code, like
 * IOType.ObjectIO.
 * @author Sam Reid (PhET Interactive Simulations)
 */
const PhetioConstants = {
  // Suffix that is required for all IO Type class names
  IO_TYPE_SUFFIX: 'IO'
};
tandemNamespace.register('PhetioConstants', PhetioConstants);
/* harmony default export */ const js_PhetioConstants = (PhetioConstants);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0YW5kZW1OYW1lc3BhY2UiLCJQaGV0aW9Db25zdGFudHMiLCJJT19UWVBFX1NVRkZJWCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGhldGlvQ29uc3RhbnRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG5pbXBvcnQgdGFuZGVtTmFtZXNwYWNlIGZyb20gJy4vdGFuZGVtTmFtZXNwYWNlLmpzJztcblxuLyoqXG4gKiBDb25zdGFudHMgdXNlZCBpbiBQaEVULWlPLiBEZWZpbmVkIGluIHRoZSB0YW5kZW0gcmVwbyBzaW5jZSB0aGV5IG5lZWQgdG8gYmUgYWNjZXNzZWQgaW4gbm9uLXByaXZhdGUgY29kZSwgbGlrZVxuICogSU9UeXBlLk9iamVjdElPLlxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuY29uc3QgUGhldGlvQ29uc3RhbnRzID0ge1xuXG4gIC8vIFN1ZmZpeCB0aGF0IGlzIHJlcXVpcmVkIGZvciBhbGwgSU8gVHlwZSBjbGFzcyBuYW1lc1xuICBJT19UWVBFX1NVRkZJWDogJ0lPJ1xufTtcblxudGFuZGVtTmFtZXNwYWNlLnJlZ2lzdGVyKCAnUGhldGlvQ29uc3RhbnRzJywgUGhldGlvQ29uc3RhbnRzICk7XG5leHBvcnQgZGVmYXVsdCBQaGV0aW9Db25zdGFudHM7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sc0JBQXNCOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsZUFBZSxHQUFHO0VBRXRCO0VBQ0FDLGNBQWMsRUFBRTtBQUNsQixDQUFDO0FBRURGLGVBQWUsQ0FBQ0csUUFBUSxDQUFFLGlCQUFpQixFQUFFRixlQUFlLENBQUU7QUFDOUQsZUFBZUEsZUFBZSJ9
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/TandemConstants.js
// Copyright 2021-2023, University of Colorado Boulder



/**
 * Factored-out constant values for use in Tandem.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

const OBJECT_IO_TYPE_NAME = 'ObjectIO';
const EVENT_TYPE_MODEL = 'MODEL';
const metadataDefaults = {
  phetioTypeName: OBJECT_IO_TYPE_NAME,
  phetioDocumentation: '',
  phetioState: true,
  phetioReadOnly: false,
  // NOTE: Relies on the details about how Enumerations are serialized (via name), like EventType.phetioType.toStateObject( object.phetioEventType )
  phetioEventType: EVENT_TYPE_MODEL,
  phetioHighFrequency: false,
  phetioPlayback: false,
  phetioDynamicElement: false,
  phetioIsArchetype: false,
  phetioFeatured: false,
  phetioDesigned: false,
  phetioArchetypePhetioID: null
};
const TandemConstants = {
  OBJECT_IO_TYPE_NAME: OBJECT_IO_TYPE_NAME,
  EVENT_TYPE_MODEL: EVENT_TYPE_MODEL,
  // Default metadata set for an ObjectIO in the PhET-iO API.  These are used as the default options in PhetioObject
  // and when outputting an API (since values that match the defaults are omitted)
  PHET_IO_OBJECT_METADATA_DEFAULTS: metadataDefaults,
  METADATA_KEY_NAME: '_metadata',
  DATA_KEY_NAME: '_data'
};
tandemNamespace.register('TandemConstants', TandemConstants);
/* harmony default export */ const js_TandemConstants = (TandemConstants);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0YW5kZW1OYW1lc3BhY2UiLCJPQkpFQ1RfSU9fVFlQRV9OQU1FIiwiRVZFTlRfVFlQRV9NT0RFTCIsIm1ldGFkYXRhRGVmYXVsdHMiLCJwaGV0aW9UeXBlTmFtZSIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJwaGV0aW9TdGF0ZSIsInBoZXRpb1JlYWRPbmx5IiwicGhldGlvRXZlbnRUeXBlIiwicGhldGlvSGlnaEZyZXF1ZW5jeSIsInBoZXRpb1BsYXliYWNrIiwicGhldGlvRHluYW1pY0VsZW1lbnQiLCJwaGV0aW9Jc0FyY2hldHlwZSIsInBoZXRpb0ZlYXR1cmVkIiwicGhldGlvRGVzaWduZWQiLCJwaGV0aW9BcmNoZXR5cGVQaGV0aW9JRCIsIlRhbmRlbUNvbnN0YW50cyIsIlBIRVRfSU9fT0JKRUNUX01FVEFEQVRBX0RFRkFVTFRTIiwiTUVUQURBVEFfS0VZX05BTUUiLCJEQVRBX0tFWV9OQU1FIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJUYW5kZW1Db25zdGFudHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbmltcG9ydCBJbnRlbnRpb25hbEFueSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvSW50ZW50aW9uYWxBbnkuanMnO1xuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcbmltcG9ydCB0YW5kZW1OYW1lc3BhY2UgZnJvbSAnLi90YW5kZW1OYW1lc3BhY2UuanMnO1xuXG4vKipcbiAqIEZhY3RvcmVkLW91dCBjb25zdGFudCB2YWx1ZXMgZm9yIHVzZSBpbiBUYW5kZW0uXG4gKlxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5jb25zdCBPQkpFQ1RfSU9fVFlQRV9OQU1FID0gJ09iamVjdElPJztcbmNvbnN0IEVWRU5UX1RZUEVfTU9ERUwgPSAnTU9ERUwnO1xuXG5leHBvcnQgdHlwZSBQaGV0aW9JRCA9IHN0cmluZztcblxuZXhwb3J0IHR5cGUgUGhldGlvRWxlbWVudERhdGEgPSB7XG4gIGluaXRpYWxTdGF0ZTogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG59O1xuXG5leHBvcnQgdHlwZSBQaGV0aW9FbGVtZW50ID0ge1xuICBfbWV0YWRhdGE6IFBoZXRpb09iamVjdE1ldGFkYXRhO1xuICBfZGF0YT86IFBoZXRpb0VsZW1lbnREYXRhO1xufTtcblxuLy8gSW4gdHJlZSBzdHJ1Y3R1cmVcbmV4cG9ydCB0eXBlIFBoZXRpb0VsZW1lbnRzID0ge1xuXG4gIC8vIEVhY2ggc3RyaW5nIGlzIGEgY29tcG9uZW50IG5hbWUgb2YgYSBQaGV0aW9JRFxuICBbIG5hbWU6IHN0cmluZyBdOiBQaGV0aW9FbGVtZW50cztcbn0gJiBQaGV0aW9FbGVtZW50O1xuXG5leHBvcnQgdHlwZSBNZXRob2QgPSB7XG4gIHJldHVyblR5cGU6IHN0cmluZztcbiAgcGFyYW1ldGVyVHlwZXM6IHN0cmluZ1tdO1xuICBkb2N1bWVudGF0aW9uOiBzdHJpbmc7XG4gIGludm9jYWJsZUZvclJlYWRPbmx5RWxlbWVudHM/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IHR5cGUgUGhldGlvT2JqZWN0U3RhdGUgPSBSZWNvcmQ8c3RyaW5nLCBJbnRlbnRpb25hbEFueT47XG5cbmV4cG9ydCB0eXBlIE1ldGhvZHMgPSBSZWNvcmQ8c3RyaW5nLCBNZXRob2Q+O1xuXG5leHBvcnQgdHlwZSBQaGV0aW9UeXBlID0ge1xuICBtZXRob2RzOiBNZXRob2RzO1xuICBzdXBlcnR5cGU/OiBzdHJpbmc7IC8vIG5vIHN1cGVydHlwZSBmb3Igcm9vdCBvZiBoaWVyYXJjaHlcbiAgdHlwZU5hbWU6IHN0cmluZztcbiAgZG9jdW1lbnRhdGlvbj86IHN0cmluZztcbiAgZXZlbnRzOiBzdHJpbmdbXTtcbiAgbWV0YWRhdGFEZWZhdWx0cz86IFBhcnRpYWw8UGhldGlvT2JqZWN0TWV0YWRhdGE+O1xuICBkYXRhRGVmYXVsdHM/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgbWV0aG9kT3JkZXI/OiBzdHJpbmdbXTtcbiAgc3RhdGVTY2hlbWE/OiBQaGV0aW9PYmplY3RTdGF0ZTtcbiAgcGFyYW1ldGVyVHlwZXM/OiBzdHJpbmdbXTsgLy8gZWFjaCB0eXBlTmFtZVxufTtcbmV4cG9ydCB0eXBlIFBoZXRpb1R5cGVzID0gUmVjb3JkPHN0cmluZywgUGhldGlvVHlwZT47XG5cbmV4cG9ydCB0eXBlIFBoZXRpb092ZXJyaWRlcyA9IFJlY29yZDxzdHJpbmcsIFBhcnRpYWw8UGhldGlvT2JqZWN0TWV0YWRhdGE+PjtcblxuZXhwb3J0IHR5cGUgUGhldGlvU3RhdGUgPSBSZWNvcmQ8c3RyaW5nLCBvYmplY3Q+O1xuXG4vLyBMaWtlIHRoZSBnZW5lcmF0ZSBBUEkgZmlsZXNcbmV4cG9ydCB0eXBlIFBoZXRpb0FQSSA9IHtcbiAgdmVyc2lvbjoge1xuICAgIG1ham9yOiBudW1iZXI7XG4gICAgbWlub3I6IG51bWJlcjtcbiAgfTtcbiAgcGhldGlvRnVsbEFQST86IGJvb2xlYW47XG4gIHNpbTogc3RyaW5nO1xuICBwaGV0aW9FbGVtZW50czogUGhldGlvRWxlbWVudHM7XG4gIHBoZXRpb1R5cGVzOiBQaGV0aW9UeXBlcztcbn07XG5cbi8vIExpa2UgdGhlIG9sZCBBUEkgc2NoZW1hLCB3aGVyZSBrZXlzIGFyZSB0aGUgZnVsbCwgZG90LXNlcGFyYXRlZCBwaGV0aW9JRFxuZXhwb3J0IHR5cGUgQVBJRmxhdCA9IFJlY29yZDxQaGV0aW9JRCwgUGhldGlvRWxlbWVudD47XG5cbmV4cG9ydCB0eXBlIFBoZXRpb09iamVjdE1ldGFkYXRhID0ge1xuXG4gIC8vIFVzZWQgaW4gUGhldGlvT2JqZWN0T3B0aW9uc1xuICBwaGV0aW9TdGF0ZTogYm9vbGVhbjtcbiAgcGhldGlvUmVhZE9ubHk6IGJvb2xlYW47XG4gIHBoZXRpb0V2ZW50VHlwZTogc3RyaW5nO1xuICBwaGV0aW9Eb2N1bWVudGF0aW9uOiBzdHJpbmc7XG4gIHBoZXRpb0hpZ2hGcmVxdWVuY3k6IGJvb2xlYW47IC8vIEBkZXByZWNhdGVkXG4gIHBoZXRpb1BsYXliYWNrOiBib29sZWFuO1xuICBwaGV0aW9GZWF0dXJlZD86IGJvb2xlYW47IC8vIExpbmtlZEVsZW1lbnRzIGhhdmUgbm8gcGhldGlvRmVhdHVyZWQgYmVjYXVzZSB0aGV5IGRlZmVyIHRvIHRoZWlyIGNvcmUgZWxlbWVudFxuICBwaGV0aW9EeW5hbWljRWxlbWVudDogYm9vbGVhbjtcbiAgcGhldGlvRGVzaWduZWQ6IGJvb2xlYW47XG5cbiAgLy8gU3BlY2lmaWMgdG8gTWV0YWRhdGFcbiAgcGhldGlvVHlwZU5hbWU6IHN0cmluZztcbiAgcGhldGlvSXNBcmNoZXR5cGU6IGJvb2xlYW47XG4gIHBoZXRpb0FyY2hldHlwZVBoZXRpb0lEPzogc3RyaW5nIHwgbnVsbDtcblxuICAvLyBGb3IgUGhldGlvRHluYW1pY0VsZW1lbnRDb250YWluZXIuICBUT0RPOiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvdGFuZGVtL2lzc3Vlcy8yNjMgY2FuIHRoaXMgYmUgZWxzZXdoZXJlP1xuICBwaGV0aW9EeW5hbWljRWxlbWVudE5hbWU/OiBzdHJpbmcgfCBudWxsO1xufTtcblxuY29uc3QgbWV0YWRhdGFEZWZhdWx0czogUGhldGlvT2JqZWN0TWV0YWRhdGEgJiBQaWNrUmVxdWlyZWQ8UGhldGlvT2JqZWN0TWV0YWRhdGEsICdwaGV0aW9GZWF0dXJlZCc+ID0ge1xuICBwaGV0aW9UeXBlTmFtZTogT0JKRUNUX0lPX1RZUEVfTkFNRSxcbiAgcGhldGlvRG9jdW1lbnRhdGlvbjogJycsXG4gIHBoZXRpb1N0YXRlOiB0cnVlLFxuICBwaGV0aW9SZWFkT25seTogZmFsc2UsXG5cbiAgLy8gTk9URTogUmVsaWVzIG9uIHRoZSBkZXRhaWxzIGFib3V0IGhvdyBFbnVtZXJhdGlvbnMgYXJlIHNlcmlhbGl6ZWQgKHZpYSBuYW1lKSwgbGlrZSBFdmVudFR5cGUucGhldGlvVHlwZS50b1N0YXRlT2JqZWN0KCBvYmplY3QucGhldGlvRXZlbnRUeXBlIClcbiAgcGhldGlvRXZlbnRUeXBlOiBFVkVOVF9UWVBFX01PREVMLFxuICBwaGV0aW9IaWdoRnJlcXVlbmN5OiBmYWxzZSxcbiAgcGhldGlvUGxheWJhY2s6IGZhbHNlLFxuICBwaGV0aW9EeW5hbWljRWxlbWVudDogZmFsc2UsXG4gIHBoZXRpb0lzQXJjaGV0eXBlOiBmYWxzZSxcbiAgcGhldGlvRmVhdHVyZWQ6IGZhbHNlLFxuICBwaGV0aW9EZXNpZ25lZDogZmFsc2UsXG4gIHBoZXRpb0FyY2hldHlwZVBoZXRpb0lEOiBudWxsXG59O1xuXG5cbmNvbnN0IFRhbmRlbUNvbnN0YW50cyA9IHtcbiAgT0JKRUNUX0lPX1RZUEVfTkFNRTogT0JKRUNUX0lPX1RZUEVfTkFNRSxcbiAgRVZFTlRfVFlQRV9NT0RFTDogRVZFTlRfVFlQRV9NT0RFTCxcblxuICAvLyBEZWZhdWx0IG1ldGFkYXRhIHNldCBmb3IgYW4gT2JqZWN0SU8gaW4gdGhlIFBoRVQtaU8gQVBJLiAgVGhlc2UgYXJlIHVzZWQgYXMgdGhlIGRlZmF1bHQgb3B0aW9ucyBpbiBQaGV0aW9PYmplY3RcbiAgLy8gYW5kIHdoZW4gb3V0cHV0dGluZyBhbiBBUEkgKHNpbmNlIHZhbHVlcyB0aGF0IG1hdGNoIHRoZSBkZWZhdWx0cyBhcmUgb21pdHRlZClcbiAgUEhFVF9JT19PQkpFQ1RfTUVUQURBVEFfREVGQVVMVFM6IG1ldGFkYXRhRGVmYXVsdHMsXG5cbiAgTUVUQURBVEFfS0VZX05BTUU6ICdfbWV0YWRhdGEnLFxuICBEQVRBX0tFWV9OQU1FOiAnX2RhdGEnXG5cbn0gYXMgY29uc3Q7XG5cbnRhbmRlbU5hbWVzcGFjZS5yZWdpc3RlciggJ1RhbmRlbUNvbnN0YW50cycsIFRhbmRlbUNvbnN0YW50cyApO1xuZXhwb3J0IGRlZmF1bHQgVGFuZGVtQ29uc3RhbnRzOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBSUEsT0FBT0EsZUFBZSxNQUFNLHNCQUFzQjs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1DLG1CQUFtQixHQUFHLFVBQVU7QUFDdEMsTUFBTUMsZ0JBQWdCLEdBQUcsT0FBTztBQXNGaEMsTUFBTUMsZ0JBQTZGLEdBQUc7RUFDcEdDLGNBQWMsRUFBRUgsbUJBQW1CO0VBQ25DSSxtQkFBbUIsRUFBRSxFQUFFO0VBQ3ZCQyxXQUFXLEVBQUUsSUFBSTtFQUNqQkMsY0FBYyxFQUFFLEtBQUs7RUFFckI7RUFDQUMsZUFBZSxFQUFFTixnQkFBZ0I7RUFDakNPLG1CQUFtQixFQUFFLEtBQUs7RUFDMUJDLGNBQWMsRUFBRSxLQUFLO0VBQ3JCQyxvQkFBb0IsRUFBRSxLQUFLO0VBQzNCQyxpQkFBaUIsRUFBRSxLQUFLO0VBQ3hCQyxjQUFjLEVBQUUsS0FBSztFQUNyQkMsY0FBYyxFQUFFLEtBQUs7RUFDckJDLHVCQUF1QixFQUFFO0FBQzNCLENBQUM7QUFHRCxNQUFNQyxlQUFlLEdBQUc7RUFDdEJmLG1CQUFtQixFQUFFQSxtQkFBbUI7RUFDeENDLGdCQUFnQixFQUFFQSxnQkFBZ0I7RUFFbEM7RUFDQTtFQUNBZSxnQ0FBZ0MsRUFBRWQsZ0JBQWdCO0VBRWxEZSxpQkFBaUIsRUFBRSxXQUFXO0VBQzlCQyxhQUFhLEVBQUU7QUFFakIsQ0FBVTtBQUVWbkIsZUFBZSxDQUFDb0IsUUFBUSxDQUFFLGlCQUFpQixFQUFFSixlQUFlLENBQUU7QUFDOUQsZUFBZUEsZUFBZSJ9
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/assertMutuallyExclusiveOptions.js
// Copyright 2019-2020, University of Colorado Boulder

/**
 * Throws an assertion error if mutually exclusive options are specified.
 *
 * @example
 * assertMutuallyExclusiveOptions( { tree:1, flower:2 }, [ 'tree' ], [ 'flower' ] ) => error
 * assertMutuallyExclusiveOptions( { flower:2 }, [ 'tree' ], [ 'flower' ] ) => no error
 * assertMutuallyExclusiveOptions( { tree:1 }, [ 'tree' ], [ 'flower' ] ) => no error
 * assertMutuallyExclusiveOptions( { tree:1, mountain:2 }, [ 'tree', 'mountain' ], [ 'flower' ] ) => no error
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */



/**
 * @param {Object|null|undefined} options - an options object.  Could be before or after merge, and may therefore
 *                                        - be null or undefined
 * @param {...string[]} sets - families of mutually exclusive option keys, see examples above.
 */
const assertMutuallyExclusiveOptions = function (options, ...sets) {
  if (assert && options) {
    // Determine which options are used from each set
    const usedElementsFromEachSet = sets.map(set => Object.keys(_.pick(options, ...set)));

    // If any element is used from more than one set...
    if (usedElementsFromEachSet.filter(usedElements => usedElements.length > 0).length > 1) {
      // Output the errant options.
      assert && assert(false, `Cannot simultaneously specify ${usedElementsFromEachSet.join(' and ')}`);
    }
  }
};
js_phetCore.register('assertMutuallyExclusiveOptions', assertMutuallyExclusiveOptions);
/* harmony default export */ const js_assertMutuallyExclusiveOptions = (assertMutuallyExclusiveOptions);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsImFzc2VydE11dHVhbGx5RXhjbHVzaXZlT3B0aW9ucyIsIm9wdGlvbnMiLCJzZXRzIiwiYXNzZXJ0IiwidXNlZEVsZW1lbnRzRnJvbUVhY2hTZXQiLCJtYXAiLCJzZXQiLCJPYmplY3QiLCJrZXlzIiwiXyIsInBpY2siLCJmaWx0ZXIiLCJ1c2VkRWxlbWVudHMiLCJsZW5ndGgiLCJqb2luIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJhc3NlcnRNdXR1YWxseUV4Y2x1c2l2ZU9wdGlvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogVGhyb3dzIGFuIGFzc2VydGlvbiBlcnJvciBpZiBtdXR1YWxseSBleGNsdXNpdmUgb3B0aW9ucyBhcmUgc3BlY2lmaWVkLlxuICpcbiAqIEBleGFtcGxlXG4gKiBhc3NlcnRNdXR1YWxseUV4Y2x1c2l2ZU9wdGlvbnMoIHsgdHJlZToxLCBmbG93ZXI6MiB9LCBbICd0cmVlJyBdLCBbICdmbG93ZXInIF0gKSA9PiBlcnJvclxuICogYXNzZXJ0TXV0dWFsbHlFeGNsdXNpdmVPcHRpb25zKCB7IGZsb3dlcjoyIH0sIFsgJ3RyZWUnIF0sIFsgJ2Zsb3dlcicgXSApID0+IG5vIGVycm9yXG4gKiBhc3NlcnRNdXR1YWxseUV4Y2x1c2l2ZU9wdGlvbnMoIHsgdHJlZToxIH0sIFsgJ3RyZWUnIF0sIFsgJ2Zsb3dlcicgXSApID0+IG5vIGVycm9yXG4gKiBhc3NlcnRNdXR1YWxseUV4Y2x1c2l2ZU9wdGlvbnMoIHsgdHJlZToxLCBtb3VudGFpbjoyIH0sIFsgJ3RyZWUnLCAnbW91bnRhaW4nIF0sIFsgJ2Zsb3dlcicgXSApID0+IG5vIGVycm9yXG4gKlxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5pbXBvcnQgcGhldENvcmUgZnJvbSAnLi9waGV0Q29yZS5qcyc7XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R8bnVsbHx1bmRlZmluZWR9IG9wdGlvbnMgLSBhbiBvcHRpb25zIG9iamVjdC4gIENvdWxkIGJlIGJlZm9yZSBvciBhZnRlciBtZXJnZSwgYW5kIG1heSB0aGVyZWZvcmVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gYmUgbnVsbCBvciB1bmRlZmluZWRcbiAqIEBwYXJhbSB7Li4uc3RyaW5nW119IHNldHMgLSBmYW1pbGllcyBvZiBtdXR1YWxseSBleGNsdXNpdmUgb3B0aW9uIGtleXMsIHNlZSBleGFtcGxlcyBhYm92ZS5cbiAqL1xuY29uc3QgYXNzZXJ0TXV0dWFsbHlFeGNsdXNpdmVPcHRpb25zID0gZnVuY3Rpb24oIG9wdGlvbnMsIC4uLnNldHMgKSB7XG4gIGlmICggYXNzZXJ0ICYmIG9wdGlvbnMgKSB7XG5cbiAgICAvLyBEZXRlcm1pbmUgd2hpY2ggb3B0aW9ucyBhcmUgdXNlZCBmcm9tIGVhY2ggc2V0XG4gICAgY29uc3QgdXNlZEVsZW1lbnRzRnJvbUVhY2hTZXQgPSBzZXRzLm1hcCggc2V0ID0+IE9iamVjdC5rZXlzKCBfLnBpY2soIG9wdGlvbnMsIC4uLnNldCApICkgKTtcblxuICAgIC8vIElmIGFueSBlbGVtZW50IGlzIHVzZWQgZnJvbSBtb3JlIHRoYW4gb25lIHNldC4uLlxuICAgIGlmICggdXNlZEVsZW1lbnRzRnJvbUVhY2hTZXQuZmlsdGVyKCB1c2VkRWxlbWVudHMgPT4gdXNlZEVsZW1lbnRzLmxlbmd0aCA+IDAgKS5sZW5ndGggPiAxICkge1xuXG4gICAgICAvLyBPdXRwdXQgdGhlIGVycmFudCBvcHRpb25zLlxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsIGBDYW5ub3Qgc2ltdWx0YW5lb3VzbHkgc3BlY2lmeSAke3VzZWRFbGVtZW50c0Zyb21FYWNoU2V0LmpvaW4oICcgYW5kICcgKX1gICk7XG4gICAgfVxuICB9XG59O1xuXG5waGV0Q29yZS5yZWdpc3RlciggJ2Fzc2VydE11dHVhbGx5RXhjbHVzaXZlT3B0aW9ucycsIGFzc2VydE11dHVhbGx5RXhjbHVzaXZlT3B0aW9ucyApO1xuZXhwb3J0IGRlZmF1bHQgYXNzZXJ0TXV0dWFsbHlFeGNsdXNpdmVPcHRpb25zOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sZUFBZTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLDhCQUE4QixHQUFHLFNBQUFBLENBQVVDLE9BQU8sRUFBRSxHQUFHQyxJQUFJLEVBQUc7RUFDbEUsSUFBS0MsTUFBTSxJQUFJRixPQUFPLEVBQUc7SUFFdkI7SUFDQSxNQUFNRyx1QkFBdUIsR0FBR0YsSUFBSSxDQUFDRyxHQUFHLENBQUVDLEdBQUcsSUFBSUMsTUFBTSxDQUFDQyxJQUFJLENBQUVDLENBQUMsQ0FBQ0MsSUFBSSxDQUFFVCxPQUFPLEVBQUUsR0FBR0ssR0FBRyxDQUFFLENBQUUsQ0FBRTs7SUFFM0Y7SUFDQSxJQUFLRix1QkFBdUIsQ0FBQ08sTUFBTSxDQUFFQyxZQUFZLElBQUlBLFlBQVksQ0FBQ0MsTUFBTSxHQUFHLENBQUMsQ0FBRSxDQUFDQSxNQUFNLEdBQUcsQ0FBQyxFQUFHO01BRTFGO01BQ0FWLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRyxpQ0FBZ0NDLHVCQUF1QixDQUFDVSxJQUFJLENBQUUsT0FBTyxDQUFHLEVBQUMsQ0FBRTtJQUN2RztFQUNGO0FBQ0YsQ0FBQztBQUVEZixRQUFRLENBQUNnQixRQUFRLENBQUUsZ0NBQWdDLEVBQUVmLDhCQUE4QixDQUFFO0FBQ3JGLGVBQWVBLDhCQUE4QiJ9
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/types/StateSchema.js
// Copyright 2021-2023, University of Colorado Boulder

/**
 * Class responsible for storing information about the schema of PhET-iO state. See IOType stateSchema option for usage
 * and more information.
 *
 * There are two types of StateSchema, the first serves as a "value", when the state of an IOType is just a value.
 * The second is a "composite", where the state of an IOType is made from sub-components, each of which have an IOType.
 * Check which type of StateSchema your instance is with StateSchema.isComposite().
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */







class StateSchema {
  // "composite" state schemas are treated differently that value state schemas

  constructor(providedOptions) {
    // Either create with compositeSchema, or specify a that this state is just a value
    assert && js_assertMutuallyExclusiveOptions(providedOptions, ['compositeSchema'], ['displayString', 'validator']);
    const options = optionize()({
      displayString: '',
      validator: null,
      // an object literal of keys that correspond to an IOType
      compositeSchema: null
    }, providedOptions);
    this.displayString = options.displayString;
    this.validator = options.validator;
    this.compositeSchema = options.compositeSchema;
    assert && this.validateStateSchema(this.compositeSchema);
  }

  /**
   * Make sure that a composite state schema is of the correct form. Each value in the object should be an IOType
   * Only useful if assert is called.
   */
  validateStateSchema(stateSchema) {
    if (assert && this.isComposite()) {
      for (const stateSchemaKey in stateSchema) {
        if (stateSchema.hasOwnProperty(stateSchemaKey)) {
          if (stateSchemaKey === '_private') {
            // By putting the assignment in this statement, typescript knows the value as a CompositeSchema
            const stateSchemaValue = stateSchema[stateSchemaKey];
            assert && assert(stateSchemaValue, 'should not be undefined');
            this.validateStateSchema(stateSchemaValue);
          }
        }
      }
    }
  }
  defaultApplyState(coreObject, stateObject) {
    const applyStateForLevel = (schema, stateObjectLevel) => {
      assert && assert(this.isComposite(), 'defaultApplyState from stateSchema only applies to composite stateSchemas');
      for (const stateKey in schema) {
        if (schema.hasOwnProperty(stateKey)) {
          if (stateKey === '_private') {
            applyStateForLevel(schema._private, stateObjectLevel._private);
          } else {
            // The IOType for the key in the composite.
            const schemaIOType = schema[stateKey];
            assert && assert(stateObjectLevel.hasOwnProperty(stateKey), `stateObject does not have expected schema key: ${stateKey}`);

            // Using fromStateObject to deserialize sub-component
            if (schemaIOType.defaultDeserializationMethod === 'fromStateObject') {
              // @ts-expect-error, I don't know how to tell typescript that we are accessing an expected key on the PhetioObject subtype. Likely there is no way with making things generic.
              coreObject[stateKey] = schema[stateKey].fromStateObject(stateObjectLevel[stateKey]);
            } else {
              assert && assert(schemaIOType.defaultDeserializationMethod === 'applyState', 'unexpected deserialization method');

              // Using applyState to deserialize sub-component
              // @ts-expect-error, I don't know how to tell typescript that we are accessing an expected key on the PhetioObject subtype. Likely there is no way with making things generic.
              schema[stateKey].applyState(coreObject[stateKey], stateObjectLevel[stateKey]);
            }
          }
        }
      }
    };
    applyStateForLevel(this.compositeSchema, stateObject);
  }
  defaultToStateObject(coreObject) {
    assert && assert(this.isComposite(), 'defaultToStateObject from stateSchema only applies to composite stateSchemas');
    const toStateObjectForSchemaLevel = schema => {
      const stateObject = {};
      for (const stateKey in schema) {
        if (schema.hasOwnProperty(stateKey)) {
          if (stateKey === '_private') {
            // @ts-expect-error Still working on _private in https://github.com/phetsims/tandem/issues/282
            stateObject._private = toStateObjectForSchemaLevel(schema._private);
          } else {
            // @ts-expect-error I guess we need to support schemas outside of composite here, or tell how to avoid that, https://github.com/phetsims/tandem/issues/261
            assert && assert(coreObject.hasOwnProperty(stateKey), `cannot get state because coreObject does not have expected schema key: ${stateKey}`);

            // @ts-expect-error https://github.com/phetsims/tandem/issues/261
            stateObject[stateKey] = schema[stateKey].toStateObject(coreObject[stateKey]);
          }
        }
      }
      return stateObject;
    };
    return toStateObjectForSchemaLevel(this.compositeSchema);
  }

  /**
   * True if the StateSchema is a composite schema.
   */
  isComposite() {
    return !!this.compositeSchema;
  }

  /**
   * Check if a given stateObject is as valid as can be determined by this StateSchema. Will return null if valid, but
   * needs more checking up and down the hierarchy.
   *
   * @param stateObject - the stateObject to validate against
   * @param toAssert - whether to assert when invalid
   * @param publicSchemaKeys - to be populated with any public keys this StateSchema is responsible for
   * @param privateSchemaKeys - to be populated with any private keys this StateSchema is responsible for
   * @returns boolean if validity can be checked, null if valid, but next in the hierarchy is needed
   */
  checkStateObjectValid(stateObject, toAssert, publicSchemaKeys, privateSchemaKeys) {
    if (this.isComposite()) {
      const compositeStateObject = stateObject;
      const schema = this.compositeSchema;
      let valid = null;
      const checkLevel = (schemaLevel, objectLevel, keyList, exclude) => {
        if (!objectLevel) {
          valid = false;
          assert && toAssert && assert(false, 'There was no stateObject, but there was a state schema saying there should be', schemaLevel);
          return;
        }
        Object.keys(schemaLevel).filter(k => k !== exclude).forEach(key => {
          const validKey = objectLevel.hasOwnProperty(key);
          if (!validKey) {
            valid = false;
          }
          assert && toAssert && assert(validKey, `${key} in state schema but not in the state object`);
          schemaLevel[key].validateStateObject(objectLevel[key]);
          keyList.push(key);
        });
      };
      checkLevel(schema, compositeStateObject, publicSchemaKeys, '_private');
      schema._private && checkLevel(schema._private, compositeStateObject._private, privateSchemaKeys, null);
      return valid;
    } else {
      assert && assert(this.validator, 'validator must be present if not composite');
      const valueStateObject = stateObject;
      if (toAssert) {
        js_validate(valueStateObject, this.validator);
      }
      return Validation.isValueValid(valueStateObject, this.validator);
    }
  }

  /**
   * Get a list of all IOTypes associated with this StateSchema
   */
  getRelatedTypes() {
    const relatedTypes = [];

    // to support IOTypes from public and private state
    const getRelatedStateTypeForLevel = stateSchema => {
      Object.keys(stateSchema).forEach(stateSchemaKey => {
        // Support keywords in state like "private"
        stateSchema[stateSchemaKey] instanceof IOType && relatedTypes.push(stateSchema[stateSchemaKey]);
      });
    };
    if (this.compositeSchema) {
      getRelatedStateTypeForLevel(this.compositeSchema);
      this.compositeSchema._private && getRelatedStateTypeForLevel(this.compositeSchema._private);
    }
    return relatedTypes;
  }

  /**
   * Returns a unique identified for this stateSchema, or an object of the stateSchemas for each sub-component in the composite
   * (phet-io internal)
   */
  getStateSchemaAPI() {
    if (this.isComposite()) {
      const stateSchemaAPI = _.mapValues(this.compositeSchema, value => value.typeName);
      if (this.compositeSchema._private) {
        stateSchemaAPI._private = _.mapValues(this.compositeSchema._private, value => value.typeName);
      }
      return stateSchemaAPI;
    } else {
      return this.displayString;
    }
  }

  /**
   * Factory function for StateKSchema instances that represent a single value of state. This is opposed to a composite
   * schema of sub-components.
   */
  static asValue(displayString, validator) {
    assert && assert(validator, 'validator required');
    return new StateSchema({
      validator: validator,
      displayString: displayString
    });
  }
}
tandemNamespace.register('StateSchema', StateSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/types/IOType.js
// Copyright 2020-2023, University of Colorado Boulder

/**
 * IO Types form a synthetic type system used to describe PhET-iO Elements. A PhET-iO Element is an instrumented PhetioObject
 * that is interoperable from the "wrapper" frame (outside the sim frame). An IO Type includes documentation, methods,
 * names, serialization, etc.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */








// constants
const VALIDATE_OPTIONS_FALSE = {
  validateValidator: false
};

/**
 * Estimate the core type name from a given IO Type name.
 */
const getCoreTypeName = ioTypeName => {
  const index = ioTypeName.indexOf(js_PhetioConstants.IO_TYPE_SUFFIX);
  assert && assert(index >= 0, 'IO should be in the type name');
  return ioTypeName.substring(0, index);
};
// TODO: not any, but do we have to serialize type parameters? https://github.com/phetsims/tandem/issues/263
class IOType {
  // eslint-disable-line @typescript-eslint/no-explicit-any

  // TODO: instead of unknown this is the second parameter type for PhetioDynamicElementContainer. How? https://github.com/phetsims/tandem/issues/261

  /**
   * @param typeName - The name that this IOType will have in the public PhET-iO API. In general, this should
   *    only be word characters, ending in "IO". Parametric types are a special subset of IOTypes that include their
   *    parameters in their typeName. If an IOType's parameters are other IO Type(s), then they should be included within
   *    angle brackets, like "PropertyIO<BooleanIO>". Some other types use a more custom format for displaying their
   *    parameter types, in this case the parameter section of the type name (immediately following "IO") should begin
   *    with an open paren, "(". Thus the schema for a typeName could be defined (using regex) as `[A-Z]\w*IO([(<].*){0,1}`.
   *    Parameterized types should also include a `parameterTypes` field on the IOType.
   * @param providedOptions
   */
  constructor(typeName, providedOptions) {
    this.typeName = typeName;
    // For reference in the options
    const supertype = providedOptions.supertype || IOType.ObjectIO;
    const toStateObjectSupplied = !!providedOptions.toStateObject;
    const applyStateSupplied = !!providedOptions.applyState;
    const stateSchemaSupplied = !!providedOptions.stateSchema;
    const options = optionize()({
      supertype: IOType.ObjectIO,
      methods: {},
      events: [],
      metadataDefaults: {},
      //  Most likely this will remain PhET-iO internal, and shouldn't need to be used when creating IOTypes outside of tandem/.
      dataDefaults: {},
      methodOrder: [],
      parameterTypes: [],
      documentation: `IO Type for ${getCoreTypeName(typeName)}`,
      isFunctionType: false,
      /**** STATE ****/

      toStateObject: supertype && supertype.toStateObject,
      fromStateObject: supertype && supertype.fromStateObject,
      stateObjectToCreateElementArguments: supertype && supertype.stateObjectToCreateElementArguments,
      applyState: supertype && supertype.applyState,
      stateSchema: null,
      defaultDeserializationMethod: 'fromStateObject',
      addChildElement: supertype && supertype.addChildElement
    }, providedOptions);
    if (assert && supertype) {
      Object.keys(options.metadataDefaults).forEach(metadataDefaultKey => {
        assert && supertype.getAllMetadataDefaults().hasOwnProperty(metadataDefaultKey) && assert(supertype.getAllMetadataDefaults()[metadataDefaultKey] !== options.metadataDefaults[metadataDefaultKey], `${metadataDefaultKey} should not have the same default value as the ancestor metadata default.`);
      });
    }
    this.supertype = supertype;
    this.documentation = options.documentation;
    this.methods = options.methods;
    this.events = options.events;
    this.metadataDefaults = options.metadataDefaults; // just for this level, see getAllMetadataDefaults()
    this.dataDefaults = options.dataDefaults; // just for this level, see getAllDataDefaults()
    this.methodOrder = options.methodOrder;
    this.parameterTypes = options.parameterTypes;

    // Validation
    this.validator = _.pick(options, Validation.VALIDATOR_KEYS);
    this.validator.validationMessage = this.validator.validationMessage || `Validation failed IOType Validator: ${this.typeName}`;
    this.defaultDeserializationMethod = options.defaultDeserializationMethod;
    if (options.stateSchema === null || options.stateSchema instanceof StateSchema) {
      // @ts-expect-error https://github.com/phetsims/tandem/issues/263
      this.stateSchema = options.stateSchema;
    } else {
      const compositeSchema = typeof options.stateSchema === 'function' ? options.stateSchema(this) : options.stateSchema;
      this.stateSchema = new StateSchema({
        compositeSchema: compositeSchema
      });
    }

    // Assert that toStateObject method is provided for value StateSchemas. Do this with the following logic:
    // 1. It is acceptable to not provide a stateSchema (for IOTypes that aren't stateful)
    // 2. You must either provide a toStateObject, or have a composite StateSchema. Composite state schemas support default serialization methods.
    assert && assert(!this.stateSchema || toStateObjectSupplied || this.stateSchema.isComposite(), 'toStateObject method must be provided for value StateSchemas');
    this.toStateObject = coreObject => {
      js_validate(coreObject, this.validator, VALIDATE_OPTIONS_FALSE);
      let toStateObject;

      // Only do this non-standard toStateObject function if there is a stateSchema but no toStateObject provided
      if (!toStateObjectSupplied && stateSchemaSupplied && this.stateSchema && this.stateSchema.isComposite()) {
        toStateObject = this.stateSchema.defaultToStateObject(coreObject);
      } else {
        toStateObject = options.toStateObject(coreObject);
      }

      // Validate, but only if this IOType instance has more to validate than the supertype
      if (toStateObjectSupplied || stateSchemaSupplied) {
        // Only validate the stateObject if it is phetioState:true.
        // This is an n*m algorithm because for each time toStateObject is called and needs validation, this.validateStateObject
        // looks all the way up the IOType hierarchy. This is not efficient, but gains us the ability to make sure that
        // the stateObject doesn't have any superfluous, unexpected keys. The "m" portion is based on how many sub-properties
        // in a state call `toStateObject`, and the "n" portion is based on how many IOTypes in the hierarchy define a
        // toStateObject or stateSchema. In the future we could potentially improve performance by having validateStateObject
        // only check against the schema at this level, but then extra keys in the stateObject would not be caught. From work done in https://github.com/phetsims/phet-io/issues/1774
        assert && this.validateStateObject(toStateObject);
      }
      return toStateObject;
    };
    this.fromStateObject = options.fromStateObject;
    this.stateObjectToCreateElementArguments = options.stateObjectToCreateElementArguments;
    this.applyState = (coreObject, stateObject) => {
      js_validate(coreObject, this.validator, VALIDATE_OPTIONS_FALSE);

      // Validate, but only if this IOType instance has more to validate than the supertype
      if (applyStateSupplied || stateSchemaSupplied) {
        // Validate that the provided stateObject is of the expected schema
        // NOTE: Cannot use this.validateStateObject because options adopts supertype.applyState, which is bounds to the
        // parent IO Type. This prevents correct validation because the supertype doesn't know about the subtype schemas.
        // @ts-expect-error we cannot type check against PhetioObject from this file
        assert && coreObject.phetioType.validateStateObject(stateObject);
      }

      // Only do this non-standard applyState function from stateSchema if there is a stateSchema but no applyState provided
      if (!applyStateSupplied && stateSchemaSupplied && this.stateSchema && this.stateSchema.isComposite()) {
        this.stateSchema.defaultApplyState(coreObject, stateObject);
      } else {
        options.applyState(coreObject, stateObject);
      }
    };
    this.isFunctionType = options.isFunctionType;
    this.addChildElement = options.addChildElement;
    if (assert) {
      assert && assert(supertype || this.typeName === 'ObjectIO', 'supertype is required');
      assert && assert(!this.typeName.includes('.'), 'Dots should not appear in type names');
      assert && assert(this.typeName.split(/[<(]/)[0].endsWith(js_PhetioConstants.IO_TYPE_SUFFIX), `IO Type name must end with ${js_PhetioConstants.IO_TYPE_SUFFIX}`);
      assert && assert(this.hasOwnProperty('typeName'), 'this.typeName is required');

      // assert that each public method adheres to the expected schema
      this.methods && Object.values(this.methods).forEach(methodObject => {
        if (typeof methodObject === 'object') {
          assert && methodObject.invocableForReadOnlyElements && assert(typeof methodObject.invocableForReadOnlyElements === 'boolean', `invocableForReadOnlyElements must be of type boolean: ${methodObject.invocableForReadOnlyElements}`);
        }
      });
      assert && assert(this.documentation.length > 0, 'documentation must be provided');
      this.methods && this.hasOwnProperty('methodOrder') && this.methodOrder.forEach(methodName => {
        assert && assert(this.methods[methodName], `methodName not in public methods: ${methodName}`);
      });
      if (supertype) {
        const typeHierarchy = supertype.getTypeHierarchy();
        assert && this.events && this.events.forEach(event => {
          // Make sure events are not listed again
          assert && assert(!_.some(typeHierarchy, t => t.events.includes(event)), `IOType should not declare event that parent also has: ${event}`);
        });
      } else {
        // The root IOType must supply all 4 state methods.
        assert && assert(typeof options.toStateObject === 'function', 'toStateObject must be defined');
        assert && assert(typeof options.fromStateObject === 'function', 'fromStateObject must be defined');
        assert && assert(typeof options.stateObjectToCreateElementArguments === 'function', 'stateObjectToCreateElementArguments must be defined');
        assert && assert(typeof options.applyState === 'function', 'applyState must be defined');
      }
    }
  }

  /**
   * Gets an array of IOTypes of the self type and all the supertype ancestors.
   */
  getTypeHierarchy() {
    const array = [];

    // @ts-expect-error Still working out this stuff, https://github.com/phetsims/tandem/issues/263
    let ioType = this; // eslint-disable-line consistent-this, @typescript-eslint/no-this-alias
    while (ioType) {
      array.push(ioType);
      ioType = ioType.supertype;
    }
    return array;
  }

  /**
   * Returns true if this IOType is a subtype of the passed-in type (or if they are the same).
   */
  extends(type) {
    // memory-based implementation OK since this method is only used in assertions
    return this.getTypeHierarchy().includes(type);
  }

  /**
   * Return all the metadata defaults (for the entire IO Type hierarchy)
   */
  getAllMetadataDefaults() {
    return _.merge({}, this.supertype ? this.supertype.getAllMetadataDefaults() : {}, this.metadataDefaults);
  }

  /**
   * Return all the data defaults (for the entire IO Type hierarchy)
   */
  getAllDataDefaults() {
    return _.merge({}, this.supertype ? this.supertype.getAllDataDefaults() : {}, this.dataDefaults);
  }

  /**
   * @param stateObject - the stateObject to validate against
   * @param toAssert=false - whether or not to assert when invalid
   * @param publicSchemaKeys=[]
   * @param privateSchemaKeys=[]
   * @returns if the stateObject is valid or not.
   */
  isStateObjectValid(stateObject, toAssert = false, publicSchemaKeys = [], privateSchemaKeys = []) {
    // Set to false when invalid
    let valid = true;

    // make sure the stateObject has everything the schema requires and nothing more
    if (this.stateSchema) {
      const validSoFar = this.stateSchema.checkStateObjectValid(stateObject, toAssert, publicSchemaKeys, privateSchemaKeys);

      // null as a marker to keep checking up the hierarchy, otherwise we reached our based case because the stateSchema was a value, not a composite
      if (validSoFar !== null) {
        return validSoFar;
      }
    }
    if (this.supertype) {
      return valid && this.supertype.isStateObjectValid(stateObject, toAssert, publicSchemaKeys, privateSchemaKeys);
    }

    // When we reach the root, make sure there isn't anything in the stateObject that isn't described by a schema
    if (!this.supertype && stateObject && typeof stateObject !== 'string' && !Array.isArray(stateObject)) {
      const check = (type, key) => {
        const keys = type === 'public' ? publicSchemaKeys : privateSchemaKeys;
        const keyValid = keys.includes(key);
        if (!keyValid) {
          valid = false;
        }
        assert && toAssert && assert(keyValid, `stateObject provided a ${type} key that is not in the schema: ${key}`);
      };

      // Visit the public state
      Object.keys(stateObject).filter(key => key !== '_private').forEach(key => check('public', key));

      // Visit the private state, if any
      // @ts-expect-error stateObjects can take a variety of forms, they don't have to be a record, thus, it is challenging to be graceful to a `_private` key
      stateObject._private && Object.keys(stateObject._private).forEach(key => check('private', key));
      return valid;
    }
    return true;
  }

  /**
   * Assert if the provided stateObject is not valid to this IOType's stateSchema
   */
  validateStateObject(stateObject) {
    this.isStateObjectValid(stateObject, true);
  }
  toString() {
    return this.typeName;
  }
}

// default state value
const DEFAULT_STATE = null;
IOType.ObjectIO = new IOType(js_TandemConstants.OBJECT_IO_TYPE_NAME, {
  isValidValue: () => true,
  supertype: null,
  documentation: 'The root of the IO Type hierarchy',
  toStateObject: coreObject => {
    if (phet && phet.tandem && phet.tandem.Tandem.VALIDATION) {
      assert && assert(coreObject.tandem, 'coreObject must be PhET-iO object');
      assert && assert(!coreObject.phetioState, `fell back to root serialization state for ${coreObject.tandem.phetioID}. Potential solutions:
         * mark the type as phetioState: false
         * create a custom toStateObject method in your IO Type
         * perhaps you have everything right, but forgot to pass in the IOType via phetioType in the constructor`);
    }
    return DEFAULT_STATE;
  },
  fromStateObject: () => {
    throw new Error('ObjectIO.fromStateObject should not be called');
  },
  stateObjectToCreateElementArguments: stateObject => [],
  applyState: _.noop,
  metadataDefaults: js_TandemConstants.PHET_IO_OBJECT_METADATA_DEFAULTS,
  dataDefaults: {
    initialState: DEFAULT_STATE
  },
  stateSchema: null
});
tandemNamespace.register('IOType', IOType);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/types/ValueIO.js
// Copyright 2021-2022, University of Colorado Boulder




/**
 * IO Type that uses value semantics for toStateObject/fromStateObject
 * @author Sam Reid (PhET Interactive Simulations)
 */
const ValueIO = new IOType('ValueIO', {
  isValidValue: _.stubTrue,
  supertype: IOType.ObjectIO,
  toStateObject: coreObject => coreObject,
  fromStateObject: stateObject => stateObject,
  stateSchema: StateSchema.asValue('*', {
    isValidValue: _.stubTrue
  })
});
tandemNamespace.register('ValueIO', ValueIO);
/* harmony default export */ const types_ValueIO = (ValueIO);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0YW5kZW1OYW1lc3BhY2UiLCJJT1R5cGUiLCJTdGF0ZVNjaGVtYSIsIlZhbHVlSU8iLCJpc1ZhbGlkVmFsdWUiLCJfIiwic3R1YlRydWUiLCJzdXBlcnR5cGUiLCJPYmplY3RJTyIsInRvU3RhdGVPYmplY3QiLCJjb3JlT2JqZWN0IiwiZnJvbVN0YXRlT2JqZWN0Iiwic3RhdGVPYmplY3QiLCJzdGF0ZVNjaGVtYSIsImFzVmFsdWUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlZhbHVlSU8udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbmltcG9ydCB0YW5kZW1OYW1lc3BhY2UgZnJvbSAnLi4vdGFuZGVtTmFtZXNwYWNlLmpzJztcbmltcG9ydCBJT1R5cGUgZnJvbSAnLi9JT1R5cGUuanMnO1xuaW1wb3J0IFN0YXRlU2NoZW1hIGZyb20gJy4vU3RhdGVTY2hlbWEuanMnO1xuaW1wb3J0IEludGVudGlvbmFsQW55IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9JbnRlbnRpb25hbEFueS5qcyc7XG5cbi8qKlxuICogSU8gVHlwZSB0aGF0IHVzZXMgdmFsdWUgc2VtYW50aWNzIGZvciB0b1N0YXRlT2JqZWN0L2Zyb21TdGF0ZU9iamVjdFxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuY29uc3QgVmFsdWVJTyA9IG5ldyBJT1R5cGU8SW50ZW50aW9uYWxBbnksIEludGVudGlvbmFsQW55PiggJ1ZhbHVlSU8nLCB7XG4gIGlzVmFsaWRWYWx1ZTogXy5zdHViVHJ1ZSxcbiAgc3VwZXJ0eXBlOiBJT1R5cGUuT2JqZWN0SU8sXG4gIHRvU3RhdGVPYmplY3Q6IGNvcmVPYmplY3QgPT4gY29yZU9iamVjdCxcbiAgZnJvbVN0YXRlT2JqZWN0OiBzdGF0ZU9iamVjdCA9PiBzdGF0ZU9iamVjdCxcbiAgc3RhdGVTY2hlbWE6IFN0YXRlU2NoZW1hLmFzVmFsdWUoICcqJywgeyBpc1ZhbGlkVmFsdWU6IF8uc3R1YlRydWUgfSApXG59ICk7XG5cbnRhbmRlbU5hbWVzcGFjZS5yZWdpc3RlciggJ1ZhbHVlSU8nLCBWYWx1ZUlPICk7XG5leHBvcnQgZGVmYXVsdCBWYWx1ZUlPOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHVCQUF1QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sYUFBYTtBQUNoQyxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBRzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsT0FBTyxHQUFHLElBQUlGLE1BQU0sQ0FBa0MsU0FBUyxFQUFFO0VBQ3JFRyxZQUFZLEVBQUVDLENBQUMsQ0FBQ0MsUUFBUTtFQUN4QkMsU0FBUyxFQUFFTixNQUFNLENBQUNPLFFBQVE7RUFDMUJDLGFBQWEsRUFBRUMsVUFBVSxJQUFJQSxVQUFVO0VBQ3ZDQyxlQUFlLEVBQUVDLFdBQVcsSUFBSUEsV0FBVztFQUMzQ0MsV0FBVyxFQUFFWCxXQUFXLENBQUNZLE9BQU8sQ0FBRSxHQUFHLEVBQUU7SUFBRVYsWUFBWSxFQUFFQyxDQUFDLENBQUNDO0VBQVMsQ0FBQztBQUNyRSxDQUFDLENBQUU7QUFFSE4sZUFBZSxDQUFDZSxRQUFRLENBQUUsU0FBUyxFQUFFWixPQUFPLENBQUU7QUFDOUMsZUFBZUEsT0FBTyJ9
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/types/BooleanIO.js
// Copyright 2018-2022, University of Colorado Boulder

/**
 * IO Type for JS's built-in boolean type.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Andrew Adare (PhET Interactive Simulations)
 */





const BooleanIO = new IOType('BooleanIO', {
  supertype: types_ValueIO,
  valueType: 'boolean',
  documentation: 'IO Type for Javascript\'s boolean primitive type',
  stateSchema: StateSchema.asValue('boolean', {
    valueType: 'boolean'
  }),
  toStateObject: _.identity
});
tandemNamespace.register('BooleanIO', BooleanIO);
/* harmony default export */ const types_BooleanIO = (BooleanIO);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0YW5kZW1OYW1lc3BhY2UiLCJJT1R5cGUiLCJTdGF0ZVNjaGVtYSIsIlZhbHVlSU8iLCJCb29sZWFuSU8iLCJzdXBlcnR5cGUiLCJ2YWx1ZVR5cGUiLCJkb2N1bWVudGF0aW9uIiwic3RhdGVTY2hlbWEiLCJhc1ZhbHVlIiwidG9TdGF0ZU9iamVjdCIsIl8iLCJpZGVudGl0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQm9vbGVhbklPLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIElPIFR5cGUgZm9yIEpTJ3MgYnVpbHQtaW4gYm9vbGVhbiB0eXBlLlxuICpcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKiBAYXV0aG9yIEFuZHJldyBBZGFyZSAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5pbXBvcnQgdGFuZGVtTmFtZXNwYWNlIGZyb20gJy4uL3RhbmRlbU5hbWVzcGFjZS5qcyc7XG5pbXBvcnQgSU9UeXBlIGZyb20gJy4vSU9UeXBlLmpzJztcbmltcG9ydCBTdGF0ZVNjaGVtYSBmcm9tICcuL1N0YXRlU2NoZW1hLmpzJztcbmltcG9ydCBWYWx1ZUlPIGZyb20gJy4vVmFsdWVJTy5qcyc7XG5cbmNvbnN0IEJvb2xlYW5JTyA9IG5ldyBJT1R5cGU8Ym9vbGVhbiwgYm9vbGVhbj4oICdCb29sZWFuSU8nLCB7XG4gIHN1cGVydHlwZTogVmFsdWVJTyxcbiAgdmFsdWVUeXBlOiAnYm9vbGVhbicsXG4gIGRvY3VtZW50YXRpb246ICdJTyBUeXBlIGZvciBKYXZhc2NyaXB0XFwncyBib29sZWFuIHByaW1pdGl2ZSB0eXBlJyxcbiAgc3RhdGVTY2hlbWE6IFN0YXRlU2NoZW1hLmFzVmFsdWU8Ym9vbGVhbiwgYm9vbGVhbj4oICdib29sZWFuJywgeyB2YWx1ZVR5cGU6ICdib29sZWFuJyB9ICksXG4gIHRvU3RhdGVPYmplY3Q6IF8uaWRlbnRpdHlcbn0gKTtcblxudGFuZGVtTmFtZXNwYWNlLnJlZ2lzdGVyKCAnQm9vbGVhbklPJywgQm9vbGVhbklPICk7XG5leHBvcnQgZGVmYXVsdCBCb29sZWFuSU87Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHVCQUF1QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sYUFBYTtBQUNoQyxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBQzFDLE9BQU9DLE9BQU8sTUFBTSxjQUFjO0FBRWxDLE1BQU1DLFNBQVMsR0FBRyxJQUFJSCxNQUFNLENBQW9CLFdBQVcsRUFBRTtFQUMzREksU0FBUyxFQUFFRixPQUFPO0VBQ2xCRyxTQUFTLEVBQUUsU0FBUztFQUNwQkMsYUFBYSxFQUFFLGtEQUFrRDtFQUNqRUMsV0FBVyxFQUFFTixXQUFXLENBQUNPLE9BQU8sQ0FBb0IsU0FBUyxFQUFFO0lBQUVILFNBQVMsRUFBRTtFQUFVLENBQUMsQ0FBRTtFQUN6RkksYUFBYSxFQUFFQyxDQUFDLENBQUNDO0FBQ25CLENBQUMsQ0FBRTtBQUVIWixlQUFlLENBQUNhLFFBQVEsQ0FBRSxXQUFXLEVBQUVULFNBQVMsQ0FBRTtBQUNsRCxlQUFlQSxTQUFTIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/arrayRemove.js
// Copyright 2014-2020, University of Colorado Boulder

/**
 * Removes a single (the first) matching object from an Array.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



/*
 * @param {Array} array
 * @param {*} item - the item to remove from the array
 */
function arrayRemove(array, item) {
  assert && assert(Array.isArray(array), 'arrayRemove takes an Array');
  const index = _.indexOf(array, item);
  assert && assert(index >= 0, 'item not found in Array');
  array.splice(index, 1);
}
js_phetCore.register('arrayRemove', arrayRemove);
/* harmony default export */ const js_arrayRemove = (arrayRemove);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsImFycmF5UmVtb3ZlIiwiYXJyYXkiLCJpdGVtIiwiYXNzZXJ0IiwiQXJyYXkiLCJpc0FycmF5IiwiaW5kZXgiLCJfIiwiaW5kZXhPZiIsInNwbGljZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiYXJyYXlSZW1vdmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogUmVtb3ZlcyBhIHNpbmdsZSAodGhlIGZpcnN0KSBtYXRjaGluZyBvYmplY3QgZnJvbSBhbiBBcnJheS5cbiAqXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XG4gKi9cblxuaW1wb3J0IHBoZXRDb3JlIGZyb20gJy4vcGhldENvcmUuanMnO1xuXG4vKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXlcbiAqIEBwYXJhbSB7Kn0gaXRlbSAtIHRoZSBpdGVtIHRvIHJlbW92ZSBmcm9tIHRoZSBhcnJheVxuICovXG5mdW5jdGlvbiBhcnJheVJlbW92ZSggYXJyYXksIGl0ZW0gKSB7XG4gIGFzc2VydCAmJiBhc3NlcnQoIEFycmF5LmlzQXJyYXkoIGFycmF5ICksICdhcnJheVJlbW92ZSB0YWtlcyBhbiBBcnJheScgKTtcblxuICBjb25zdCBpbmRleCA9IF8uaW5kZXhPZiggYXJyYXksIGl0ZW0gKTtcbiAgYXNzZXJ0ICYmIGFzc2VydCggaW5kZXggPj0gMCwgJ2l0ZW0gbm90IGZvdW5kIGluIEFycmF5JyApO1xuXG4gIGFycmF5LnNwbGljZSggaW5kZXgsIDEgKTtcbn1cblxucGhldENvcmUucmVnaXN0ZXIoICdhcnJheVJlbW92ZScsIGFycmF5UmVtb3ZlICk7XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5UmVtb3ZlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sZUFBZTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRztFQUNsQ0MsTUFBTSxJQUFJQSxNQUFNLENBQUVDLEtBQUssQ0FBQ0MsT0FBTyxDQUFFSixLQUFLLENBQUUsRUFBRSw0QkFBNEIsQ0FBRTtFQUV4RSxNQUFNSyxLQUFLLEdBQUdDLENBQUMsQ0FBQ0MsT0FBTyxDQUFFUCxLQUFLLEVBQUVDLElBQUksQ0FBRTtFQUN0Q0MsTUFBTSxJQUFJQSxNQUFNLENBQUVHLEtBQUssSUFBSSxDQUFDLEVBQUUseUJBQXlCLENBQUU7RUFFekRMLEtBQUssQ0FBQ1EsTUFBTSxDQUFFSCxLQUFLLEVBQUUsQ0FBQyxDQUFFO0FBQzFCO0FBRUFQLFFBQVEsQ0FBQ1csUUFBUSxDQUFFLGFBQWEsRUFBRVYsV0FBVyxDQUFFO0FBRS9DLGVBQWVBLFdBQVcifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/EnumerationValue.js
// Copyright 2021-2023, University of Colorado Boulder

/**
 * EnumerationValue is the base class for enumeration value instances.
 * See https://github.com/phetsims/phet-info/blob/main/doc/phet-software-design-patterns.md#enumeration
 *
 * PhET's Enumeration pattern is:
 *
 * class MyEnumeration extends EnumerationValue {
 *   public static VALUE_1 = new MyEnumeration();
 *   public static VALUE_2 = new MyEnumeration();
 *
 *   // Make sure this is last, once all EnumerationValues have been declared statically.
 *   public static enumeration = new Enumeration( MyEnumeration );
 * }
 *
 * // Usage
 * console.log( MyEnumeration.VALUE_1 );
 * const printValue = enumValue => {
 *   assert && assert( enumValue.enumeration.values.includes(enumValue));
 *   console.log( enumValue );
 * };
 * printValue( MyEnumeration.VALUE_2 );
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */


class EnumerationValue {
  // null until set by Enumeration. Once set, cannot be changed.

  // After an Enumeration is constructed, no new instances of that exact type can be made (though it is OK to
  // create subtypes)
  static sealedCache = new Set();
  toString() {
    return this.name;
  }

  // This method is unused, but needs to remain here so other types don't accidentally structurally match
  // enumeration values.  Without this, string satisfies the EnumerationValue interface, but we don't want it to.
  isEnumerationValue() {
    return true;
  }
  constructor() {
    const c = this.constructor;
    assert && assert(!EnumerationValue.sealedCache.has(c), 'cannot create instanceof of a sealed constructor');
    this._name = null;
    this._enumeration = null;
  }
  set name(name) {
    assert && assert(!this._name, 'name cannot be changed once defined.');
    this._name = name;
  }
  get name() {
    assert && assert(this._name, 'name cannot be retrieved until it has been filled in by Enumeration.');
    return this._name;
  }
  set enumeration(enumeration) {
    assert && assert(!this._enumeration, 'enumeration cannot be changed once defined.');
    this._enumeration = enumeration;
  }
  get enumeration() {
    assert && assert(this._enumeration, 'enumeration cannot be retrieved until it has been filled in by Enumeration.');
    return this._enumeration;
  }
}
js_phetCore.register('EnumerationValue', EnumerationValue);
/* harmony default export */ const js_EnumerationValue = (EnumerationValue);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsIkVudW1lcmF0aW9uVmFsdWUiLCJzZWFsZWRDYWNoZSIsIlNldCIsInRvU3RyaW5nIiwibmFtZSIsImlzRW51bWVyYXRpb25WYWx1ZSIsImNvbnN0cnVjdG9yIiwiYyIsImFzc2VydCIsImhhcyIsIl9uYW1lIiwiX2VudW1lcmF0aW9uIiwiZW51bWVyYXRpb24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkVudW1lcmF0aW9uVmFsdWUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogRW51bWVyYXRpb25WYWx1ZSBpcyB0aGUgYmFzZSBjbGFzcyBmb3IgZW51bWVyYXRpb24gdmFsdWUgaW5zdGFuY2VzLlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9waGV0LWluZm8vYmxvYi9tYXN0ZXIvZG9jL3BoZXQtc29mdHdhcmUtZGVzaWduLXBhdHRlcm5zLm1kI2VudW1lcmF0aW9uXG4gKlxuICogUGhFVCdzIEVudW1lcmF0aW9uIHBhdHRlcm4gaXM6XG4gKlxuICogY2xhc3MgTXlFbnVtZXJhdGlvbiBleHRlbmRzIEVudW1lcmF0aW9uVmFsdWUge1xuICogICBwdWJsaWMgc3RhdGljIFZBTFVFXzEgPSBuZXcgTXlFbnVtZXJhdGlvbigpO1xuICogICBwdWJsaWMgc3RhdGljIFZBTFVFXzIgPSBuZXcgTXlFbnVtZXJhdGlvbigpO1xuICpcbiAqICAgLy8gTWFrZSBzdXJlIHRoaXMgaXMgbGFzdCwgb25jZSBhbGwgRW51bWVyYXRpb25WYWx1ZXMgaGF2ZSBiZWVuIGRlY2xhcmVkIHN0YXRpY2FsbHkuXG4gKiAgIHB1YmxpYyBzdGF0aWMgZW51bWVyYXRpb24gPSBuZXcgRW51bWVyYXRpb24oIE15RW51bWVyYXRpb24gKTtcbiAqIH1cbiAqXG4gKiAvLyBVc2FnZVxuICogY29uc29sZS5sb2coIE15RW51bWVyYXRpb24uVkFMVUVfMSApO1xuICogY29uc3QgcHJpbnRWYWx1ZSA9IGVudW1WYWx1ZSA9PiB7XG4gKiAgIGFzc2VydCAmJiBhc3NlcnQoIGVudW1WYWx1ZS5lbnVtZXJhdGlvbi52YWx1ZXMuaW5jbHVkZXMoZW51bVZhbHVlKSk7XG4gKiAgIGNvbnNvbGUubG9nKCBlbnVtVmFsdWUgKTtcbiAqIH07XG4gKiBwcmludFZhbHVlKCBNeUVudW1lcmF0aW9uLlZBTFVFXzIgKTtcbiAqXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5cbmltcG9ydCBwaGV0Q29yZSBmcm9tICcuL3BoZXRDb3JlLmpzJztcbmltcG9ydCBFbnVtZXJhdGlvbiBmcm9tICcuL0VudW1lcmF0aW9uLmpzJztcbmltcG9ydCBDb25zdHJ1Y3RvciBmcm9tICcuL3R5cGVzL0NvbnN0cnVjdG9yLmpzJztcblxuY2xhc3MgRW51bWVyYXRpb25WYWx1ZSB7XG5cbiAgLy8gbnVsbCB1bnRpbCBzZXQgYnkgRW51bWVyYXRpb24uIE9uY2Ugc2V0LCBjYW5ub3QgYmUgY2hhbmdlZC5cbiAgcHJpdmF0ZSBfbmFtZTogc3RyaW5nIHwgbnVsbDtcbiAgcHJpdmF0ZSBfZW51bWVyYXRpb246IEVudW1lcmF0aW9uPHRoaXM+IHwgbnVsbDtcblxuICAvLyBBZnRlciBhbiBFbnVtZXJhdGlvbiBpcyBjb25zdHJ1Y3RlZCwgbm8gbmV3IGluc3RhbmNlcyBvZiB0aGF0IGV4YWN0IHR5cGUgY2FuIGJlIG1hZGUgKHRob3VnaCBpdCBpcyBPSyB0b1xuICAvLyBjcmVhdGUgc3VidHlwZXMpXG4gIHB1YmxpYyBzdGF0aWMgc2VhbGVkQ2FjaGUgPSBuZXcgU2V0PENvbnN0cnVjdG9yPEVudW1lcmF0aW9uVmFsdWU+PigpO1xuXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLm5hbWU7XG4gIH1cblxuICAvLyBUaGlzIG1ldGhvZCBpcyB1bnVzZWQsIGJ1dCBuZWVkcyB0byByZW1haW4gaGVyZSBzbyBvdGhlciB0eXBlcyBkb24ndCBhY2NpZGVudGFsbHkgc3RydWN0dXJhbGx5IG1hdGNoXG4gIC8vIGVudW1lcmF0aW9uIHZhbHVlcy4gIFdpdGhvdXQgdGhpcywgc3RyaW5nIHNhdGlzZmllcyB0aGUgRW51bWVyYXRpb25WYWx1ZSBpbnRlcmZhY2UsIGJ1dCB3ZSBkb24ndCB3YW50IGl0IHRvLlxuICBwcml2YXRlIGlzRW51bWVyYXRpb25WYWx1ZSgpOiBib29sZWFuIHtyZXR1cm4gdHJ1ZTt9XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IGMgPSB0aGlzLmNvbnN0cnVjdG9yIGFzIENvbnN0cnVjdG9yPEVudW1lcmF0aW9uVmFsdWU+O1xuICAgIGFzc2VydCAmJiBhc3NlcnQoICFFbnVtZXJhdGlvblZhbHVlLnNlYWxlZENhY2hlLmhhcyggYyApLCAnY2Fubm90IGNyZWF0ZSBpbnN0YW5jZW9mIG9mIGEgc2VhbGVkIGNvbnN0cnVjdG9yJyApO1xuXG4gICAgdGhpcy5fbmFtZSA9IG51bGw7XG4gICAgdGhpcy5fZW51bWVyYXRpb24gPSBudWxsO1xuICB9XG5cbiAgcHVibGljIHNldCBuYW1lKCBuYW1lOiBzdHJpbmcgKSB7XG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIXRoaXMuX25hbWUsICduYW1lIGNhbm5vdCBiZSBjaGFuZ2VkIG9uY2UgZGVmaW5lZC4nICk7XG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gIH1cblxuICBwdWJsaWMgZ2V0IG5hbWUoKTogc3RyaW5nIHtcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0aGlzLl9uYW1lLCAnbmFtZSBjYW5ub3QgYmUgcmV0cmlldmVkIHVudGlsIGl0IGhhcyBiZWVuIGZpbGxlZCBpbiBieSBFbnVtZXJhdGlvbi4nICk7XG4gICAgcmV0dXJuIHRoaXMuX25hbWUhO1xuICB9XG5cbiAgcHVibGljIHNldCBlbnVtZXJhdGlvbiggZW51bWVyYXRpb246IEVudW1lcmF0aW9uPHRoaXM+ICkge1xuICAgIGFzc2VydCAmJiBhc3NlcnQoICF0aGlzLl9lbnVtZXJhdGlvbiwgJ2VudW1lcmF0aW9uIGNhbm5vdCBiZSBjaGFuZ2VkIG9uY2UgZGVmaW5lZC4nICk7XG4gICAgdGhpcy5fZW51bWVyYXRpb24gPSBlbnVtZXJhdGlvbjtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZW51bWVyYXRpb24oKTogRW51bWVyYXRpb248dGhpcz4ge1xuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMuX2VudW1lcmF0aW9uLCAnZW51bWVyYXRpb24gY2Fubm90IGJlIHJldHJpZXZlZCB1bnRpbCBpdCBoYXMgYmVlbiBmaWxsZWQgaW4gYnkgRW51bWVyYXRpb24uJyApO1xuICAgIHJldHVybiB0aGlzLl9lbnVtZXJhdGlvbiE7XG4gIH1cbn1cblxucGhldENvcmUucmVnaXN0ZXIoICdFbnVtZXJhdGlvblZhbHVlJywgRW51bWVyYXRpb25WYWx1ZSApO1xuXG5leHBvcnQgZGVmYXVsdCBFbnVtZXJhdGlvblZhbHVlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLGVBQWU7QUFJcEMsTUFBTUMsZ0JBQWdCLENBQUM7RUFFckI7O0VBSUE7RUFDQTtFQUNBLE9BQWNDLFdBQVcsR0FBRyxJQUFJQyxHQUFHLEVBQWlDO0VBRTdEQyxRQUFRQSxDQUFBLEVBQVc7SUFDeEIsT0FBTyxJQUFJLENBQUNDLElBQUk7RUFDbEI7O0VBRUE7RUFDQTtFQUNRQyxrQkFBa0JBLENBQUEsRUFBWTtJQUFDLE9BQU8sSUFBSTtFQUFDO0VBRTVDQyxXQUFXQSxDQUFBLEVBQUc7SUFDbkIsTUFBTUMsQ0FBQyxHQUFHLElBQUksQ0FBQ0QsV0FBNEM7SUFDM0RFLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUNSLGdCQUFnQixDQUFDQyxXQUFXLENBQUNRLEdBQUcsQ0FBRUYsQ0FBQyxDQUFFLEVBQUUsa0RBQWtELENBQUU7SUFFOUcsSUFBSSxDQUFDRyxLQUFLLEdBQUcsSUFBSTtJQUNqQixJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJO0VBQzFCO0VBRUEsSUFBV1AsSUFBSUEsQ0FBRUEsSUFBWSxFQUFHO0lBQzlCSSxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDLElBQUksQ0FBQ0UsS0FBSyxFQUFFLHNDQUFzQyxDQUFFO0lBQ3ZFLElBQUksQ0FBQ0EsS0FBSyxHQUFHTixJQUFJO0VBQ25CO0VBRUEsSUFBV0EsSUFBSUEsQ0FBQSxFQUFXO0lBQ3hCSSxNQUFNLElBQUlBLE1BQU0sQ0FBRSxJQUFJLENBQUNFLEtBQUssRUFBRSxzRUFBc0UsQ0FBRTtJQUN0RyxPQUFPLElBQUksQ0FBQ0EsS0FBSztFQUNuQjtFQUVBLElBQVdFLFdBQVdBLENBQUVBLFdBQThCLEVBQUc7SUFDdkRKLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUMsSUFBSSxDQUFDRyxZQUFZLEVBQUUsNkNBQTZDLENBQUU7SUFDckYsSUFBSSxDQUFDQSxZQUFZLEdBQUdDLFdBQVc7RUFDakM7RUFFQSxJQUFXQSxXQUFXQSxDQUFBLEVBQXNCO0lBQzFDSixNQUFNLElBQUlBLE1BQU0sQ0FBRSxJQUFJLENBQUNHLFlBQVksRUFBRSw2RUFBNkUsQ0FBRTtJQUNwSCxPQUFPLElBQUksQ0FBQ0EsWUFBWTtFQUMxQjtBQUNGO0FBRUFaLFFBQVEsQ0FBQ2MsUUFBUSxDQUFFLGtCQUFrQixFQUFFYixnQkFBZ0IsQ0FBRTtBQUV6RCxlQUFlQSxnQkFBZ0IifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/inheritance.js
// Copyright 2017-2020, University of Colorado Boulder

/**
 * Given inheritance using inherit, this will give the full prototype chain.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



/*
 * @param {*} type - Constructor for the type in question.
 * @returns {Array.<*>}
 */
function inheritance(type) {
  const types = [type];
  let proto = type.prototype;
  while (proto && (proto = Object.getPrototypeOf(proto))) {
    if (proto.constructor) {
      types.push(proto.constructor);
    }
  }
  return types;
}
js_phetCore.register('inheritance', inheritance);
/* harmony default export */ const js_inheritance = (inheritance);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsImluaGVyaXRhbmNlIiwidHlwZSIsInR5cGVzIiwicHJvdG8iLCJwcm90b3R5cGUiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImNvbnN0cnVjdG9yIiwicHVzaCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiaW5oZXJpdGFuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogR2l2ZW4gaW5oZXJpdGFuY2UgdXNpbmcgaW5oZXJpdCwgdGhpcyB3aWxsIGdpdmUgdGhlIGZ1bGwgcHJvdG90eXBlIGNoYWluLlxuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cbiAqL1xuXG5pbXBvcnQgcGhldENvcmUgZnJvbSAnLi9waGV0Q29yZS5qcyc7XG5cbi8qXG4gKiBAcGFyYW0geyp9IHR5cGUgLSBDb25zdHJ1Y3RvciBmb3IgdGhlIHR5cGUgaW4gcXVlc3Rpb24uXG4gKiBAcmV0dXJucyB7QXJyYXkuPCo+fVxuICovXG5mdW5jdGlvbiBpbmhlcml0YW5jZSggdHlwZSApIHtcbiAgY29uc3QgdHlwZXMgPSBbIHR5cGUgXTtcblxuICBsZXQgcHJvdG8gPSB0eXBlLnByb3RvdHlwZTtcbiAgd2hpbGUgKCBwcm90byAmJiAoIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKCBwcm90byApICkgKSB7XG4gICAgaWYgKCBwcm90by5jb25zdHJ1Y3RvciApIHtcbiAgICAgIHR5cGVzLnB1c2goIHByb3RvLmNvbnN0cnVjdG9yICk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0eXBlcztcbn1cblxucGhldENvcmUucmVnaXN0ZXIoICdpbmhlcml0YW5jZScsIGluaGVyaXRhbmNlICk7XG5cbmV4cG9ydCBkZWZhdWx0IGluaGVyaXRhbmNlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sZUFBZTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxXQUFXQSxDQUFFQyxJQUFJLEVBQUc7RUFDM0IsTUFBTUMsS0FBSyxHQUFHLENBQUVELElBQUksQ0FBRTtFQUV0QixJQUFJRSxLQUFLLEdBQUdGLElBQUksQ0FBQ0csU0FBUztFQUMxQixPQUFRRCxLQUFLLEtBQU1BLEtBQUssR0FBR0UsTUFBTSxDQUFDQyxjQUFjLENBQUVILEtBQUssQ0FBRSxDQUFFLEVBQUc7SUFDNUQsSUFBS0EsS0FBSyxDQUFDSSxXQUFXLEVBQUc7TUFDdkJMLEtBQUssQ0FBQ00sSUFBSSxDQUFFTCxLQUFLLENBQUNJLFdBQVcsQ0FBRTtJQUNqQztFQUNGO0VBQ0EsT0FBT0wsS0FBSztBQUNkO0FBRUFILFFBQVEsQ0FBQ1UsUUFBUSxDQUFFLGFBQWEsRUFBRVQsV0FBVyxDQUFFO0FBRS9DLGVBQWVBLFdBQVcifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/Enumeration.js
// Copyright 2021-2022, University of Colorado Boulder

/**
 * This implementation auto-detects the enumeration values by Object.keys and instanceof. Every property that has a
 * type matching the enumeration type is marked as a value.  See sample usage in Orientation.ts.
 *
 * For general pattern see https://github.com/phetsims/phet-info/blob/main/doc/phet-software-design-patterns.md#enumeration
 *
 * This creates 2-way maps (key-to-value and value-to-key) for ease of use and to enable phet-io serialization.
 *
 * class T extends EnumerationValue {
 *     static a=new T();
 *     static b =new T();
 *     getName(){return 'he';}
 *     get thing(){return 'text';}
 *     static get age(){return 77;}
 *     static enumeration = new Enumeration( T );
 * }
 * T.enumeration.keys => ['a', 'b']
 * T.enumeration.values => [T, T]
 *
 * Note how `keys` only picks up 'a' and 'b'.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */





class Enumeration {
  // in the order that static instances are defined

  constructor(Enumeration, providedOptions) {
    const options = optionize()({
      phetioDocumentation: '',
      // Values are plucked from the supplied Enumeration, but in order to support subtyping (augmenting) Enumerations,
      // you can specify the rule for what counts as a member of the enumeration. This should only be used in the
      // special case of augmenting existing enumerations.
      instanceType: Enumeration
    }, providedOptions);
    this.phetioDocumentation = options.phetioDocumentation;
    const instanceType = options.instanceType;

    // Iterate over the type hierarchy to support augmenting enumerations, but reverse so that newly added enumeration
    // values appear after previously existing enumeration values
    const types = _.reverse(js_inheritance(Enumeration));
    assert && assert(types.includes(instanceType), 'the specified type should be in its own hierarchy');
    this.keys = [];
    this.values = [];
    types.forEach(type => {
      Object.keys(type).forEach(key => {
        const value = type[key];
        if (value instanceof instanceType) {
          assert && assert(key === key.toUpperCase(), 'keys should be upper case by convention');
          this.keys.push(key);
          this.values.push(value);

          // Only assign this to the lowest Enumeration in the hierarchy. Otherwise this would overwrite the
          // supertype-assigned Enumeration. See https://github.com/phetsims/phet-core/issues/102
          if (value instanceof Enumeration) {
            value.name = key;
            value.enumeration = this;
          }
        }
      });
    });
    assert && assert(this.keys.length > 0, 'no keys found');
    assert && assert(this.values.length > 0, 'no values found');
    this.Enumeration = Enumeration;
    js_EnumerationValue.sealedCache.add(Enumeration);
  }
  getKey(value) {
    return value.name;
  }
  getValue(key) {
    return this.Enumeration[key];
  }
  includes(value) {
    return this.values.includes(value);
  }
}
js_phetCore.register('Enumeration', Enumeration);
/* harmony default export */ const js_Enumeration = (Enumeration);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/types/EnumerationIO.js
// Copyright 2022, University of Colorado Boulder

/**
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */





// Cache each parameterized IOType so that it is only created once.
const cache = new Map();
const joinKeys = keys => keys.join('|');
const EnumerationIO = enumerationContainer => {
  const enumeration = enumerationContainer.enumeration;

  // This caching implementation should be kept in sync with the other parametric IO Type caching implementations.
  if (!cache.has(enumeration)) {
    // Enumeration supports additional documentation, so the values can be described.
    const additionalDocs = enumeration.phetioDocumentation ? ` ${enumeration.phetioDocumentation}` : '';
    const keys = enumeration.keys;
    const values = enumeration.values;
    const ioTypeName = `EnumerationIO(${joinKeys(keys)})`;
    assert && assert(!Array.from(cache.values()).find(ioType => ioType.typeName === ioTypeName), 'There was already another IO Type with the same name: ' + ioTypeName);
    cache.set(enumeration, new IOType(ioTypeName, {
      validValues: values,
      documentation: `Possible values: ${keys.join(', ')}.${additionalDocs}`,
      toStateObject: value => enumeration.getKey(value),
      fromStateObject: stateObject => {
        assert && assert(typeof stateObject === 'string', 'unsupported EnumerationIO value type, expected string'); // eslint-disable-line no-simple-type-checking-assertions
        assert && assert(keys.includes(stateObject), `Unrecognized value: ${stateObject}`);
        return enumeration.getValue(stateObject);
      },
      stateSchema: StateSchema.asValue(`${joinKeys(keys)}`, {
        isValidValue: key => keys.includes(key)
      })
    }));
  }
  return cache.get(enumeration);
};
tandemNamespace.register('EnumerationIO', EnumerationIO);
/* harmony default export */ const types_EnumerationIO = (EnumerationIO);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJT1R5cGUiLCJTdGF0ZVNjaGVtYSIsInRhbmRlbU5hbWVzcGFjZSIsImNhY2hlIiwiTWFwIiwiam9pbktleXMiLCJrZXlzIiwiam9pbiIsIkVudW1lcmF0aW9uSU8iLCJlbnVtZXJhdGlvbkNvbnRhaW5lciIsImVudW1lcmF0aW9uIiwiaGFzIiwiYWRkaXRpb25hbERvY3MiLCJwaGV0aW9Eb2N1bWVudGF0aW9uIiwidmFsdWVzIiwiaW9UeXBlTmFtZSIsImFzc2VydCIsIkFycmF5IiwiZnJvbSIsImZpbmQiLCJpb1R5cGUiLCJ0eXBlTmFtZSIsInNldCIsInZhbGlkVmFsdWVzIiwiZG9jdW1lbnRhdGlvbiIsInRvU3RhdGVPYmplY3QiLCJ2YWx1ZSIsImdldEtleSIsImZyb21TdGF0ZU9iamVjdCIsInN0YXRlT2JqZWN0IiwiaW5jbHVkZXMiLCJnZXRWYWx1ZSIsInN0YXRlU2NoZW1hIiwiYXNWYWx1ZSIsImlzVmFsaWRWYWx1ZSIsImtleSIsImdldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRW51bWVyYXRpb25JTy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5pbXBvcnQgRW51bWVyYXRpb25WYWx1ZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvRW51bWVyYXRpb25WYWx1ZS5qcyc7XG5pbXBvcnQgVEVudW1lcmF0aW9uLCB7IEVudW1lcmF0aW9uQ29udGFpbmVyIH0gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL1RFbnVtZXJhdGlvbi5qcyc7XG5pbXBvcnQgSU9UeXBlIGZyb20gJy4vSU9UeXBlLmpzJztcbmltcG9ydCBTdGF0ZVNjaGVtYSBmcm9tICcuL1N0YXRlU2NoZW1hLmpzJztcbmltcG9ydCB0YW5kZW1OYW1lc3BhY2UgZnJvbSAnLi4vdGFuZGVtTmFtZXNwYWNlLmpzJztcblxuLy8gQ2FjaGUgZWFjaCBwYXJhbWV0ZXJpemVkIElPVHlwZSBzbyB0aGF0IGl0IGlzIG9ubHkgY3JlYXRlZCBvbmNlLlxuY29uc3QgY2FjaGUgPSBuZXcgTWFwPFRFbnVtZXJhdGlvbjxFbnVtZXJhdGlvblZhbHVlPiwgSU9UeXBlPigpO1xuXG5jb25zdCBqb2luS2V5cyA9ICgga2V5czogc3RyaW5nW10gKSA9PiBrZXlzLmpvaW4oICd8JyApO1xuXG5jb25zdCBFbnVtZXJhdGlvbklPID0gPFQgZXh0ZW5kcyBFbnVtZXJhdGlvblZhbHVlPiggZW51bWVyYXRpb25Db250YWluZXI6IEVudW1lcmF0aW9uQ29udGFpbmVyPFQ+ICk6IElPVHlwZSA9PiB7XG4gIGNvbnN0IGVudW1lcmF0aW9uID0gZW51bWVyYXRpb25Db250YWluZXIuZW51bWVyYXRpb247XG5cbiAgLy8gVGhpcyBjYWNoaW5nIGltcGxlbWVudGF0aW9uIHNob3VsZCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgb3RoZXIgcGFyYW1ldHJpYyBJTyBUeXBlIGNhY2hpbmcgaW1wbGVtZW50YXRpb25zLlxuICBpZiAoICFjYWNoZS5oYXMoIGVudW1lcmF0aW9uICkgKSB7XG5cbiAgICAvLyBFbnVtZXJhdGlvbiBzdXBwb3J0cyBhZGRpdGlvbmFsIGRvY3VtZW50YXRpb24sIHNvIHRoZSB2YWx1ZXMgY2FuIGJlIGRlc2NyaWJlZC5cbiAgICBjb25zdCBhZGRpdGlvbmFsRG9jcyA9IGVudW1lcmF0aW9uLnBoZXRpb0RvY3VtZW50YXRpb24gPyBgICR7ZW51bWVyYXRpb24ucGhldGlvRG9jdW1lbnRhdGlvbn1gIDogJyc7XG5cbiAgICBjb25zdCBrZXlzID0gZW51bWVyYXRpb24ua2V5cztcbiAgICBjb25zdCB2YWx1ZXMgPSBlbnVtZXJhdGlvbi52YWx1ZXM7XG5cbiAgICBjb25zdCBpb1R5cGVOYW1lID0gYEVudW1lcmF0aW9uSU8oJHtqb2luS2V5cygga2V5cyApfSlgO1xuXG4gICAgYXNzZXJ0ICYmIGFzc2VydChcbiAgICAgICFBcnJheS5mcm9tKCBjYWNoZS52YWx1ZXMoKSApLmZpbmQoIGlvVHlwZSA9PiBpb1R5cGUudHlwZU5hbWUgPT09IGlvVHlwZU5hbWUgKSxcbiAgICAgICdUaGVyZSB3YXMgYWxyZWFkeSBhbm90aGVyIElPIFR5cGUgd2l0aCB0aGUgc2FtZSBuYW1lOiAnICsgaW9UeXBlTmFtZVxuICAgICk7XG5cbiAgICBjYWNoZS5zZXQoIGVudW1lcmF0aW9uLCBuZXcgSU9UeXBlPFQsIHN0cmluZz4oIGlvVHlwZU5hbWUsIHtcbiAgICAgIHZhbGlkVmFsdWVzOiB2YWx1ZXMsXG4gICAgICBkb2N1bWVudGF0aW9uOiBgUG9zc2libGUgdmFsdWVzOiAke2tleXMuam9pbiggJywgJyApfS4ke2FkZGl0aW9uYWxEb2NzfWAsXG4gICAgICB0b1N0YXRlT2JqZWN0OiAoIHZhbHVlOiBUICkgPT4gZW51bWVyYXRpb24uZ2V0S2V5KCB2YWx1ZSApLFxuICAgICAgZnJvbVN0YXRlT2JqZWN0OiAoIHN0YXRlT2JqZWN0OiBzdHJpbmcgKTogVCA9PiB7XG4gICAgICAgIGFzc2VydCAmJiBhc3NlcnQoIHR5cGVvZiBzdGF0ZU9iamVjdCA9PT0gJ3N0cmluZycsICd1bnN1cHBvcnRlZCBFbnVtZXJhdGlvbklPIHZhbHVlIHR5cGUsIGV4cGVjdGVkIHN0cmluZycgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zaW1wbGUtdHlwZS1jaGVja2luZy1hc3NlcnRpb25zXG4gICAgICAgIGFzc2VydCAmJiBhc3NlcnQoIGtleXMuaW5jbHVkZXMoIHN0YXRlT2JqZWN0ICksIGBVbnJlY29nbml6ZWQgdmFsdWU6ICR7c3RhdGVPYmplY3R9YCApO1xuICAgICAgICByZXR1cm4gZW51bWVyYXRpb24uZ2V0VmFsdWUoIHN0YXRlT2JqZWN0ICkhO1xuICAgICAgfSxcbiAgICAgIHN0YXRlU2NoZW1hOiBTdGF0ZVNjaGVtYS5hc1ZhbHVlPEVudW1lcmF0aW9uVmFsdWUsIHN0cmluZz4oIGAke2pvaW5LZXlzKCBrZXlzICl9YCwge1xuICAgICAgICBpc1ZhbGlkVmFsdWU6ICgga2V5OiBzdHJpbmcgKSA9PiBrZXlzLmluY2x1ZGVzKCBrZXkgKVxuICAgICAgfSApXG4gICAgfSApICk7XG4gIH1cblxuICByZXR1cm4gY2FjaGUuZ2V0KCBlbnVtZXJhdGlvbiApITtcbn07XG5cbnRhbmRlbU5hbWVzcGFjZS5yZWdpc3RlciggJ0VudW1lcmF0aW9uSU8nLCBFbnVtZXJhdGlvbklPICk7XG5leHBvcnQgZGVmYXVsdCBFbnVtZXJhdGlvbklPOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBSUEsT0FBT0EsTUFBTSxNQUFNLGFBQWE7QUFDaEMsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxlQUFlLE1BQU0sdUJBQXVCOztBQUVuRDtBQUNBLE1BQU1DLEtBQUssR0FBRyxJQUFJQyxHQUFHLEVBQTBDO0FBRS9ELE1BQU1DLFFBQVEsR0FBS0MsSUFBYyxJQUFNQSxJQUFJLENBQUNDLElBQUksQ0FBRSxHQUFHLENBQUU7QUFFdkQsTUFBTUMsYUFBYSxHQUFpQ0Msb0JBQTZDLElBQWM7RUFDN0csTUFBTUMsV0FBVyxHQUFHRCxvQkFBb0IsQ0FBQ0MsV0FBVzs7RUFFcEQ7RUFDQSxJQUFLLENBQUNQLEtBQUssQ0FBQ1EsR0FBRyxDQUFFRCxXQUFXLENBQUUsRUFBRztJQUUvQjtJQUNBLE1BQU1FLGNBQWMsR0FBR0YsV0FBVyxDQUFDRyxtQkFBbUIsR0FBSSxJQUFHSCxXQUFXLENBQUNHLG1CQUFvQixFQUFDLEdBQUcsRUFBRTtJQUVuRyxNQUFNUCxJQUFJLEdBQUdJLFdBQVcsQ0FBQ0osSUFBSTtJQUM3QixNQUFNUSxNQUFNLEdBQUdKLFdBQVcsQ0FBQ0ksTUFBTTtJQUVqQyxNQUFNQyxVQUFVLEdBQUksaUJBQWdCVixRQUFRLENBQUVDLElBQUksQ0FBRyxHQUFFO0lBRXZEVSxNQUFNLElBQUlBLE1BQU0sQ0FDZCxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBRWYsS0FBSyxDQUFDVyxNQUFNLEVBQUUsQ0FBRSxDQUFDSyxJQUFJLENBQUVDLE1BQU0sSUFBSUEsTUFBTSxDQUFDQyxRQUFRLEtBQUtOLFVBQVUsQ0FBRSxFQUM5RSx3REFBd0QsR0FBR0EsVUFBVSxDQUN0RTtJQUVEWixLQUFLLENBQUNtQixHQUFHLENBQUVaLFdBQVcsRUFBRSxJQUFJVixNQUFNLENBQWFlLFVBQVUsRUFBRTtNQUN6RFEsV0FBVyxFQUFFVCxNQUFNO01BQ25CVSxhQUFhLEVBQUcsb0JBQW1CbEIsSUFBSSxDQUFDQyxJQUFJLENBQUUsSUFBSSxDQUFHLElBQUdLLGNBQWUsRUFBQztNQUN4RWEsYUFBYSxFQUFJQyxLQUFRLElBQU1oQixXQUFXLENBQUNpQixNQUFNLENBQUVELEtBQUssQ0FBRTtNQUMxREUsZUFBZSxFQUFJQyxXQUFtQixJQUFTO1FBQzdDYixNQUFNLElBQUlBLE1BQU0sQ0FBRSxPQUFPYSxXQUFXLEtBQUssUUFBUSxFQUFFLHVEQUF1RCxDQUFFLENBQUMsQ0FBQztRQUM5R2IsTUFBTSxJQUFJQSxNQUFNLENBQUVWLElBQUksQ0FBQ3dCLFFBQVEsQ0FBRUQsV0FBVyxDQUFFLEVBQUcsdUJBQXNCQSxXQUFZLEVBQUMsQ0FBRTtRQUN0RixPQUFPbkIsV0FBVyxDQUFDcUIsUUFBUSxDQUFFRixXQUFXLENBQUU7TUFDNUMsQ0FBQztNQUNERyxXQUFXLEVBQUUvQixXQUFXLENBQUNnQyxPQUFPLENBQTZCLEdBQUU1QixRQUFRLENBQUVDLElBQUksQ0FBRyxFQUFDLEVBQUU7UUFDakY0QixZQUFZLEVBQUlDLEdBQVcsSUFBTTdCLElBQUksQ0FBQ3dCLFFBQVEsQ0FBRUssR0FBRztNQUNyRCxDQUFDO0lBQ0gsQ0FBQyxDQUFFLENBQUU7RUFDUDtFQUVBLE9BQU9oQyxLQUFLLENBQUNpQyxHQUFHLENBQUUxQixXQUFXLENBQUU7QUFDakMsQ0FBQztBQUVEUixlQUFlLENBQUNtQyxRQUFRLENBQUUsZUFBZSxFQUFFN0IsYUFBYSxDQUFFO0FBQzFELGVBQWVBLGFBQWEifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/EventType.js
// Copyright 2019-2022, University of Colorado Boulder

/**
 * This characterizes events that may be emitted from PhetioObjects to the PhET-iO data stream.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */






class EventType extends js_EnumerationValue {
  // The user has taken an action, such as pressing a button or moving a mouse
  static USER = new EventType();

  // An event was produced by the simulation model. This could be in response to a user event, or something that happens
  // during the simulation step. Note the separation is not model vs view, but user-driven vs automatic.
  static [js_TandemConstants.EVENT_TYPE_MODEL] = new EventType();

  // An event was triggered by the PhET-iO wrapper, via PhetioEngineIO.triggerEvent
  static WRAPPER = new EventType();

  // These messages are suppressed, use this to opt a PhetioObject out of the data stream feature.
  static OPT_OUT = new EventType();
  static enumeration = new js_Enumeration(EventType);
  static phetioType = types_EnumerationIO(EventType);
}
tandemNamespace.register('EventType', EventType);
/* harmony default export */ const js_EventType = (EventType);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbnVtZXJhdGlvbiIsIkVudW1lcmF0aW9uVmFsdWUiLCJUYW5kZW1Db25zdGFudHMiLCJ0YW5kZW1OYW1lc3BhY2UiLCJFbnVtZXJhdGlvbklPIiwiRXZlbnRUeXBlIiwiVVNFUiIsIkVWRU5UX1RZUEVfTU9ERUwiLCJXUkFQUEVSIiwiT1BUX09VVCIsImVudW1lcmF0aW9uIiwicGhldGlvVHlwZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXZlbnRUeXBlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIFRoaXMgY2hhcmFjdGVyaXplcyBldmVudHMgdGhhdCBtYXkgYmUgZW1pdHRlZCBmcm9tIFBoZXRpb09iamVjdHMgdG8gdGhlIFBoRVQtaU8gZGF0YSBzdHJlYW0uXG4gKlxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5cbmltcG9ydCBFbnVtZXJhdGlvbiBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvRW51bWVyYXRpb24uanMnO1xuaW1wb3J0IEVudW1lcmF0aW9uVmFsdWUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL0VudW1lcmF0aW9uVmFsdWUuanMnO1xuaW1wb3J0IFRhbmRlbUNvbnN0YW50cyBmcm9tICcuL1RhbmRlbUNvbnN0YW50cy5qcyc7XG5pbXBvcnQgdGFuZGVtTmFtZXNwYWNlIGZyb20gJy4vdGFuZGVtTmFtZXNwYWNlLmpzJztcbmltcG9ydCBFbnVtZXJhdGlvbklPIGZyb20gJy4vdHlwZXMvRW51bWVyYXRpb25JTy5qcyc7XG5cbmNsYXNzIEV2ZW50VHlwZSBleHRlbmRzIEVudW1lcmF0aW9uVmFsdWUge1xuXG4gIC8vIFRoZSB1c2VyIGhhcyB0YWtlbiBhbiBhY3Rpb24sIHN1Y2ggYXMgcHJlc3NpbmcgYSBidXR0b24gb3IgbW92aW5nIGEgbW91c2VcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBVU0VSID0gbmV3IEV2ZW50VHlwZSgpO1xuXG4gIC8vIEFuIGV2ZW50IHdhcyBwcm9kdWNlZCBieSB0aGUgc2ltdWxhdGlvbiBtb2RlbC4gVGhpcyBjb3VsZCBiZSBpbiByZXNwb25zZSB0byBhIHVzZXIgZXZlbnQsIG9yIHNvbWV0aGluZyB0aGF0IGhhcHBlbnNcbiAgLy8gZHVyaW5nIHRoZSBzaW11bGF0aW9uIHN0ZXAuIE5vdGUgdGhlIHNlcGFyYXRpb24gaXMgbm90IG1vZGVsIHZzIHZpZXcsIGJ1dCB1c2VyLWRyaXZlbiB2cyBhdXRvbWF0aWMuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgWyBUYW5kZW1Db25zdGFudHMuRVZFTlRfVFlQRV9NT0RFTCBdID0gbmV3IEV2ZW50VHlwZSgpO1xuXG4gIC8vIEFuIGV2ZW50IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIFBoRVQtaU8gd3JhcHBlciwgdmlhIFBoZXRpb0VuZ2luZUlPLnRyaWdnZXJFdmVudFxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFdSQVBQRVIgPSBuZXcgRXZlbnRUeXBlKCk7XG5cbiAgLy8gVGhlc2UgbWVzc2FnZXMgYXJlIHN1cHByZXNzZWQsIHVzZSB0aGlzIHRvIG9wdCBhIFBoZXRpb09iamVjdCBvdXQgb2YgdGhlIGRhdGEgc3RyZWFtIGZlYXR1cmUuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgT1BUX09VVCA9IG5ldyBFdmVudFR5cGUoKTtcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGVudW1lcmF0aW9uID0gbmV3IEVudW1lcmF0aW9uKCBFdmVudFR5cGUgKTtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBwaGV0aW9UeXBlID0gRW51bWVyYXRpb25JTyggRXZlbnRUeXBlICk7XG59XG5cbnRhbmRlbU5hbWVzcGFjZS5yZWdpc3RlciggJ0V2ZW50VHlwZScsIEV2ZW50VHlwZSApO1xuZXhwb3J0IGRlZmF1bHQgRXZlbnRUeXBlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxXQUFXLE1BQU0sbUNBQW1DO0FBQzNELE9BQU9DLGdCQUFnQixNQUFNLHdDQUF3QztBQUNyRSxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBQ2xELE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7QUFDbEQsT0FBT0MsYUFBYSxNQUFNLDBCQUEwQjtBQUVwRCxNQUFNQyxTQUFTLFNBQVNKLGdCQUFnQixDQUFDO0VBRXZDO0VBQ0EsT0FBdUJLLElBQUksR0FBRyxJQUFJRCxTQUFTLEVBQUU7O0VBRTdDO0VBQ0E7RUFDQSxRQUF5QkgsZUFBZSxDQUFDSyxnQkFBZ0IsSUFBSyxJQUFJRixTQUFTLEVBQUU7O0VBRTdFO0VBQ0EsT0FBdUJHLE9BQU8sR0FBRyxJQUFJSCxTQUFTLEVBQUU7O0VBRWhEO0VBQ0EsT0FBdUJJLE9BQU8sR0FBRyxJQUFJSixTQUFTLEVBQUU7RUFFaEQsT0FBdUJLLFdBQVcsR0FBRyxJQUFJVixXQUFXLENBQUVLLFNBQVMsQ0FBRTtFQUNqRSxPQUF1Qk0sVUFBVSxHQUFHUCxhQUFhLENBQUVDLFNBQVMsQ0FBRTtBQUNoRTtBQUVBRixlQUFlLENBQUNTLFFBQVEsQ0FBRSxXQUFXLEVBQUVQLFNBQVMsQ0FBRTtBQUNsRCxlQUFlQSxTQUFTIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/Tandem.js
// Copyright 2015-2023, University of Colorado Boulder

/**
 * Tandem defines a set of trees that are used to assign unique identifiers to PhetioObjects in PhET simulations and
 * notify listeners when the associated PhetioObjects have been added/removed. It is used to support PhET-iO.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */






// constants
// Tandem can't depend on joist, so cannot use packageJSON module
const packageJSON = _.hasIn(window, 'phet.chipper.packageObject') ? phet.chipper.packageObject : {
  name: 'placeholder'
};
const PHET_IO_ENABLED = _.hasIn(window, 'phet.preloads.phetio');
const PRINT_MISSING_TANDEMS = PHET_IO_ENABLED && phet.preloads.phetio.queryParameters.phetioPrintMissingTandems;

// Validation defaults to true, but can be overridden to be false in package.json.
const IS_VALIDATION_DEFAULT = _.hasIn(packageJSON, 'phet.phet-io.validation') ? !!packageJSON.phet['phet-io'].validation : true;

// The default value for validation can be overridden with a query parameter ?phetioValidation={true|false}.
const IS_VALIDATION_QUERY_PARAMETER_SPECIFIED = window.QueryStringMachine && QueryStringMachine.containsKey('phetioValidation');
const IS_VALIDATION_SPECIFIED = PHET_IO_ENABLED && IS_VALIDATION_QUERY_PARAMETER_SPECIFIED ? !!phet.preloads.phetio.queryParameters.phetioValidation : PHET_IO_ENABLED && IS_VALIDATION_DEFAULT;
const VALIDATION = PHET_IO_ENABLED && IS_VALIDATION_SPECIFIED && !PRINT_MISSING_TANDEMS;
const UNALLOWED_TANDEM_NAMES = ['pickableProperty'];
const REQUIRED_TANDEM_NAME = 'requiredTandem';
const OPTIONAL_TANDEM_NAME = 'optionalTandem';
const TEST_TANDEM_NAME = 'test';
const INTER_TERM_SEPARATOR = phetio.PhetioIDUtils.INTER_TERM_SEPARATOR;
const DYNAMIC_ARCHETYPE_NAME = 'archetype';

// used to keep track of missing tandems
const missingTandems = {
  required: [],
  optional: []
};
// Listeners that will be notified when items are registered/deregistered. See doc in addPhetioObjectListener
const phetioObjectListeners = [];

// keep track of listeners to fire when Tandem.launch() is called.
const launchListeners = [];
class Tandem {
  // Treat as readonly.  Only marked as writable so it can be eliminated on dispose

  // the last part of the tandem (after the last .), used e.g., in Joist for creating button
  // names dynamically based on screen names

  children = {};
  isDisposed = false;

  // Disabling lint rule because GroupTandem is a subtype

  // eslint-disable-line uppercase-statics-should-be-readonly

  static SCREEN_TANDEM_NAME_SUFFIX = 'Screen';

  /**
   * Typically, sims will create tandems using `tandem.createTandem`.  This constructor is used internally or when
   * a tandem must be created from scratch.
   *
   * @param parentTandem - parent for a child tandem, or null for a root tandem
   * @param name - component name for this level, like 'resetAllButton'
   * @param [providedOptions]
   */
  constructor(parentTandem, name, providedOptions) {
    assert && assert(parentTandem === null || parentTandem instanceof Tandem, 'parentTandem should be null or Tandem');
    assert && assert(name !== Tandem.METADATA_KEY, 'name cannot match Tandem.METADATA_KEY');
    this.parentTandem = parentTandem;
    this.name = name;
    this.phetioID = this.parentTandem ? window.phetio.PhetioIDUtils.append(this.parentTandem.phetioID, this.name) : this.name;

    // options (even subtype options) must be stored so they can be passed through to children
    // Note: Make sure that added options here are also added to options for inheritance and/or for composition
    // (createTandem/parentTandem/getExtendedOptions) as appropriate.
    const options = optionize()({
      // required === false means it is an optional tandem
      required: true,
      // if the tandem is required but not supplied, an error will be thrown.
      supplied: true,
      isValidTandemName: name => /^[a-zA-Z0-9[\],]+$/.test(name)
    }, providedOptions);
    assert && assert(options.isValidTandemName(name), `invalid tandem name: ${name}`);
    this.children = {};
    if (this.parentTandem) {
      assert && assert(!this.parentTandem.hasChild(name), `parent should not have child: ${name}`);
      this.parentTandem.addChild(name, this);
    }
    this.required = options.required;
    this.supplied = options.supplied;
  }

  /**
   * Returns the regular expression which can be used to test each term. The term must consist only of alpha-numeric
   * characters or tildes.
   */
  // protected getTermRegex(): RegExp {
  //   return /^[a-zA-Z0-9[\],-]+$/;
  // }

  /**
   * If the provided tandem is not supplied, support the ?printMissingTandems query parameter for extra logging during
   * initial instrumentation.
   */
  static onMissingTandem(tandem) {
    // When the query parameter phetioPrintMissingTandems is true, report tandems that are required but not supplied
    if (PRINT_MISSING_TANDEMS && !tandem.supplied) {
      const stackTrace = new Error().stack;
      if (tandem.required) {
        missingTandems.required.push({
          phetioID: tandem.phetioID,
          stack: stackTrace
        });
      } else {
        // When the query parameter phetioPrintMissingTandems is true, report tandems that are optional but not
        // supplied, but not for Fonts because they are too numerous.
        if (!stackTrace.includes('Font')) {
          missingTandems.optional.push({
            phetioID: tandem.phetioID,
            stack: stackTrace
          });
        }
      }
    }
  }

  /**
   * Adds a PhetioObject.  For example, it could be an axon Property, SCENERY/Node or SUN/RoundPushButton.
   * phetioEngine listens for when PhetioObjects are added and removed to keep track of them for PhET-iO.
   */
  addPhetioObject(phetioObject) {
    if (PHET_IO_ENABLED) {
      // Throw an error if the tandem is required but not supplied
      assert && Tandem.VALIDATION && assert(!(this.required && !this.supplied), 'Tandem was required but not supplied');

      // If tandem is optional and not supplied, then ignore it.
      if (!this.required && !this.supplied) {
        // Optionally instrumented types without tandems are not added.
        return;
      }
      if (!Tandem.launched) {
        Tandem.bufferedPhetioObjects.push(phetioObject);
      } else {
        for (let i = 0; i < phetioObjectListeners.length; i++) {
          phetioObjectListeners[i].addPhetioObject(phetioObject);
        }
      }
    }
  }

  /**
   * Returns true if this Tandem has the specified ancestor Tandem.
   */
  hasAncestor(ancestor) {
    return this.parentTandem === ancestor || !!(this.parentTandem && this.parentTandem.hasAncestor(ancestor));
  }

  /**
   * Removes a PhetioObject and signifies to listeners that it has been removed.
   */
  removePhetioObject(phetioObject) {
    if (!this.required && !this.supplied) {
      return;
    }

    // Only active when running as phet-io
    if (PHET_IO_ENABLED) {
      if (!Tandem.launched) {
        assert && assert(Tandem.bufferedPhetioObjects.includes(phetioObject), 'should contain item');
        js_arrayRemove(Tandem.bufferedPhetioObjects, phetioObject);
      } else {
        for (let i = 0; i < phetioObjectListeners.length; i++) {
          phetioObjectListeners[i].removePhetioObject(phetioObject);
        }
      }
    }
    phetioObject.tandem.dispose();
  }

  /**
   * Used for creating new tandems, extends this Tandem's options with the passed-in options.
   */
  getExtendedOptions(options) {
    // Any child of something should be passed all inherited options. Make sure that this extend call includes all
    // that make sense from the constructor's extend call.
    return js_merge({
      supplied: this.supplied,
      required: this.required
    }, options);
  }

  /**
   * Create a new Tandem by appending the given id, or if the child Tandem already exists, return it instead.
   */
  createTandem(name, options) {
    assert && Tandem.VALIDATION && assert(!UNALLOWED_TANDEM_NAMES.includes(name), 'tandem name is not allowed: ' + name);
    options = this.getExtendedOptions(options);

    // re-use the child if it already exists, but make sure it behaves the same.
    if (this.hasChild(name)) {
      const currentChild = this.children[name];
      assert && assert(currentChild.required === options.required);
      assert && assert(currentChild.supplied === options.supplied);
      return currentChild;
    } else {
      return new Tandem(this, name, options);
    }
  }
  hasChild(name) {
    return this.children.hasOwnProperty(name);
  }
  addChild(name, tandem) {
    assert && assert(!this.hasChild(name));
    this.children[name] = tandem;
  }

  /**
   * Fire a callback on all descendants of this Tandem
   */
  iterateDescendants(callback) {
    for (const childName in this.children) {
      if (this.children.hasOwnProperty(childName)) {
        callback(this.children[childName]);
        this.children[childName].iterateDescendants(callback);
      }
    }
  }
  removeChild(childName) {
    assert && assert(this.hasChild(childName));
    delete this.children[childName];
  }
  dispose() {
    assert && assert(!this.isDisposed, 'already disposed');
    this.parentTandem.removeChild(this.name);
    this.parentTandem = null;
    this.isDisposed = true;
  }

  /**
   * For API validation, each PhetioObject has a corresponding concrete PhetioObject for comparison. Non-dynamic
   * PhetioObjects have the trivial case where its archetypal phetioID is the same as its phetioID.
   */
  getArchetypalPhetioID() {
    // Dynamic elements always have a parent container, hence since this does not have a parent, it must already be concrete
    const result = this.parentTandem ? window.phetio.PhetioIDUtils.append(this.parentTandem.getArchetypalPhetioID(), this.name) : this.phetioID;

    // For https://github.com/phetsims/axon/issues/408, we need to access archetypes for Tandems from createTandemFromPhetioID
    if (result.includes('_')) {
      const terms = result.split(INTER_TERM_SEPARATOR);
      const mapped = terms.map(term => term.includes('_') ? DYNAMIC_ARCHETYPE_NAME : term);
      return mapped.join(INTER_TERM_SEPARATOR);
    } else {
      return result;
    }
  }

  /**
   * Creates a group tandem for creating multiple indexed child tandems, such as:
   * sim.screen.model.electron0
   * sim.screen.model.electron1
   *
   * In this case, 'sim.screen.model.electron' is the string passed to createGroupTandem.
   *
   * Used for arrays, observable arrays, or when many elements of the same type are created and they do not otherwise
   * have unique identifiers.
   */
  createGroupTandem(name) {
    if (this.children[name]) {
      return this.children[name];
    }
    return new GroupTandem(this, name);
  }
  equals(tandem) {
    return this.phetioID === tandem.phetioID;
  }

  /**
   * Adds a listener that will be notified when items are registered/deregistered
   */
  static addPhetioObjectListener(phetioObjectListener) {
    phetioObjectListeners.push(phetioObjectListener);
  }

  /**
   * After all listeners have been added, then Tandem can be launched.  This registers all of the buffered PhetioObjects
   * and subsequent PhetioObjects will be registered directly.
   */
  static launch() {
    assert && assert(!Tandem.launched, 'Tandem cannot be launched twice');
    Tandem.launched = true;
    while (launchListeners.length > 0) {
      launchListeners.shift()();
    }
    assert && assert(launchListeners.length === 0);
  }

  /**
   * ONLY FOR TESTING!!!!
   * This was created to "undo" launch so that tests can better expose cases around calling Tandem.launch()
   */
  static unlaunch() {
    Tandem.launched = false;
    Tandem.bufferedPhetioObjects.length = 0;
    launchListeners.length = 0;
  }

  /**
   * Add a listener that will fire when Tandem is launched
   */
  static addLaunchListener(listener) {
    assert && assert(!Tandem.launched, 'tandem has already been launched, cannot add listener for that hook.');
    launchListeners.push(listener);
  }

  /**
   * Expose collected missing tandems only populated from specific query parameter, see phetioPrintMissingTandems
   * (phet-io internal)
   */
  static missingTandems = missingTandems;

  /**
   * If PhET-iO is enabled in this runtime.
   */
  static PHET_IO_ENABLED = PHET_IO_ENABLED;

  /**
   * When generating an API (whether to output a file or for in-memory comparison), this is marked as true.
   */
  static API_GENERATION = Tandem.PHET_IO_ENABLED && (phet.preloads.phetio.queryParameters.phetioPrintAPI || phet.preloads.phetio.queryParameters.phetioCompareAPI);

  /**
   * If PhET-iO is running with validation enabled.
   */
  static VALIDATION = VALIDATION;

  /**
   * For the API file, the key name for the metadata section.
   */
  static METADATA_KEY = '_metadata';

  /**
   * For the API file, the key name for the data section.
   */
  static DATA_KEY = '_data';

  // Before listeners are wired up, tandems are buffered.  When listeners are wired up, Tandem.launch() is called and
  // buffered tandems are flushed, then subsequent tandems are delivered to listeners directly
  static launched = false;

  // a list of PhetioObjects ready to be sent out to listeners, but can't because Tandem hasn't been launched yet.
  static bufferedPhetioObjects = [];
  createTandemFromPhetioID(phetioID) {
    return this.createTandem(phetioID.split(window.phetio.PhetioIDUtils.SEPARATOR).join(INTER_TERM_SEPARATOR), {
      isValidTandemName: name => /^[a-zA-Z0-9[\],-_]+$/.test(name)
    });
  }
}
Tandem.addLaunchListener(() => {
  while (Tandem.bufferedPhetioObjects.length > 0) {
    const phetioObject = Tandem.bufferedPhetioObjects.shift();
    phetioObject.tandem.addPhetioObject(phetioObject);
  }
  assert && assert(Tandem.bufferedPhetioObjects.length === 0, 'bufferedPhetioObjects should be empty');
});
class RootTandem extends Tandem {
  /**
   * RootTandems only accept specifically named children.
   */
  createTandem(name, options) {
    if (Tandem.VALIDATION) {
      const allowedOnRoot = name === window.phetio.PhetioIDUtils.GLOBAL_COMPONENT_NAME || name === REQUIRED_TANDEM_NAME || name === OPTIONAL_TANDEM_NAME || name === TEST_TANDEM_NAME || name === window.phetio.PhetioIDUtils.GENERAL_COMPONENT_NAME || _.endsWith(name, Tandem.SCREEN_TANDEM_NAME_SUFFIX);
      assert && assert(allowedOnRoot, `tandem name not allowed on root: "${name}"; perhaps try putting it under general or global`);
    }
    return super.createTandem(name, options);
  }
}

/**
 * The root tandem for a simulation
 */
Tandem.ROOT = new RootTandem(null, _.camelCase(packageJSON.name));

/**
 * Many simulation elements are nested under "general". This tandem is for elements that exists in all sims. For a
 * place to put simulation specific globals, see `GLOBAL`
 *
 * @constant
 * @type {Tandem}
 */
const GENERAL = Tandem.ROOT.createTandem(window.phetio.PhetioIDUtils.GENERAL_COMPONENT_NAME);

/**
 * Used in unit tests
 */
Tandem.ROOT_TEST = Tandem.ROOT.createTandem(TEST_TANDEM_NAME);

/**
 * Tandem for model simulation elements that are general to all sims.
 */
Tandem.GENERAL_MODEL = GENERAL.createTandem(window.phetio.PhetioIDUtils.MODEL_COMPONENT_NAME);

/**
 * Tandem for view simulation elements that are general to all sims.
 */
Tandem.GENERAL_VIEW = GENERAL.createTandem(window.phetio.PhetioIDUtils.VIEW_COMPONENT_NAME);

/**
 * Tandem for controller simulation elements that are general to all sims.
 */
Tandem.GENERAL_CONTROLLER = GENERAL.createTandem(window.phetio.PhetioIDUtils.CONTROLLER_COMPONENT_NAME);

/**
 * Simulation elements that don't belong in screens should be nested under "global". Note that this tandem should only
 * have simulation specific elements in them. Instrument items used by all sims under `Tandem.GENERAL`. Most
 * likely simulations elements should not be directly under this, but instead either under the model or view sub
 * tandems.
 *
 * @constant
 * @type {Tandem}
 */
const GLOBAL = Tandem.ROOT.createTandem(window.phetio.PhetioIDUtils.GLOBAL_COMPONENT_NAME);

/**
 * Model simulation elements that don't belong in specific screens should be nested under this Tandem. Note that this
 * tandem should only have simulation specific elements in them.
 */
Tandem.GLOBAL_MODEL = GLOBAL.createTandem(window.phetio.PhetioIDUtils.MODEL_COMPONENT_NAME);

/**
 * View simulation elements that don't belong in specific screens should be nested under this Tandem. Note that this
 * tandem should only have simulation specific elements in them.
 */
Tandem.GLOBAL_VIEW = GLOBAL.createTandem(window.phetio.PhetioIDUtils.VIEW_COMPONENT_NAME);

/**
 * Colors used in the simulation.
 */
Tandem.COLORS = Tandem.GLOBAL_VIEW.createTandem(window.phetio.PhetioIDUtils.COLORS_COMPONENT_NAME);

/**
 * Used to indicate a common code component that supports tandem, but doesn't not require it.  If a tandem is not
 * passed in, then it will not be instrumented.
 */
Tandem.OPTIONAL = Tandem.ROOT.createTandem(OPTIONAL_TANDEM_NAME, {
  required: false,
  supplied: false
});

/**
 * To be used exclusively to opt out of situations where a tandem is required, see https://github.com/phetsims/tandem/issues/97.
 */
Tandem.OPT_OUT = Tandem.OPTIONAL;

/**
 * Some common code (such as Checkbox or RadioButton) must always be instrumented.
 */
Tandem.REQUIRED = Tandem.ROOT.createTandem(REQUIRED_TANDEM_NAME, {
  // let phetioPrintMissingTandems bypass this
  required: VALIDATION || PRINT_MISSING_TANDEMS,
  supplied: false
});

/**
 * Use this as the parent tandem for Properties that are related to sim-specific preferences.
 */
Tandem.PREFERENCES = Tandem.GLOBAL_MODEL.createTandem('preferences');

/**
 * Group Tandem -- Declared in the same file to avoid circular reference errors in module loading.
 */
class GroupTandem extends Tandem {
  // for generating indices from a pool

  /**
   * create with Tandem.createGroupTandem
   */
  constructor(parentTandem, name) {
    super(parentTandem, name);
    this.groupName = name;
    this.groupMemberIndex = 0;
  }

  /**
   * Creates the next tandem in the group.
   */
  createNextTandem() {
    const tandem = this.parentTandem.createTandem(`${this.groupName}${this.groupMemberIndex}`);
    this.groupMemberIndex++;
    return tandem;
  }
}
tandemNamespace.register('Tandem', Tandem);
/* harmony default export */ const js_Tandem = (Tandem);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/types/StringIO.js
// Copyright 2018-2022, University of Colorado Boulder

/**
 * IO Type for JS's built-in string type.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Andrew Adare (PhET Interactive Simulations)
 */





const StringIO = new IOType('StringIO', {
  supertype: types_ValueIO,
  valueType: 'string',
  documentation: 'IO Type for Javascript\'s string primitive type',
  stateSchema: StateSchema.asValue('string', {
    valueType: 'string'
  }),
  toStateObject: _.identity
});
tandemNamespace.register('StringIO', StringIO);
/* harmony default export */ const types_StringIO = (StringIO);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0YW5kZW1OYW1lc3BhY2UiLCJJT1R5cGUiLCJTdGF0ZVNjaGVtYSIsIlZhbHVlSU8iLCJTdHJpbmdJTyIsInN1cGVydHlwZSIsInZhbHVlVHlwZSIsImRvY3VtZW50YXRpb24iLCJzdGF0ZVNjaGVtYSIsImFzVmFsdWUiLCJ0b1N0YXRlT2JqZWN0IiwiXyIsImlkZW50aXR5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTdHJpbmdJTy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBJTyBUeXBlIGZvciBKUydzIGJ1aWx0LWluIHN0cmluZyB0eXBlLlxuICpcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKiBAYXV0aG9yIEFuZHJldyBBZGFyZSAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5pbXBvcnQgdGFuZGVtTmFtZXNwYWNlIGZyb20gJy4uL3RhbmRlbU5hbWVzcGFjZS5qcyc7XG5pbXBvcnQgSU9UeXBlIGZyb20gJy4vSU9UeXBlLmpzJztcbmltcG9ydCBTdGF0ZVNjaGVtYSBmcm9tICcuL1N0YXRlU2NoZW1hLmpzJztcbmltcG9ydCBWYWx1ZUlPIGZyb20gJy4vVmFsdWVJTy5qcyc7XG5cbmNvbnN0IFN0cmluZ0lPID0gbmV3IElPVHlwZTxzdHJpbmcsIHN0cmluZz4oICdTdHJpbmdJTycsIHtcbiAgc3VwZXJ0eXBlOiBWYWx1ZUlPLFxuICB2YWx1ZVR5cGU6ICdzdHJpbmcnLFxuICBkb2N1bWVudGF0aW9uOiAnSU8gVHlwZSBmb3IgSmF2YXNjcmlwdFxcJ3Mgc3RyaW5nIHByaW1pdGl2ZSB0eXBlJyxcbiAgc3RhdGVTY2hlbWE6IFN0YXRlU2NoZW1hLmFzVmFsdWU8c3RyaW5nLCBzdHJpbmc+KCAnc3RyaW5nJywgeyB2YWx1ZVR5cGU6ICdzdHJpbmcnIH0gKSxcbiAgdG9TdGF0ZU9iamVjdDogXy5pZGVudGl0eVxufSApO1xuXG50YW5kZW1OYW1lc3BhY2UucmVnaXN0ZXIoICdTdHJpbmdJTycsIFN0cmluZ0lPICk7XG5leHBvcnQgZGVmYXVsdCBTdHJpbmdJTzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sdUJBQXVCO0FBQ25ELE9BQU9DLE1BQU0sTUFBTSxhQUFhO0FBQ2hDLE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFDMUMsT0FBT0MsT0FBTyxNQUFNLGNBQWM7QUFFbEMsTUFBTUMsUUFBUSxHQUFHLElBQUlILE1BQU0sQ0FBa0IsVUFBVSxFQUFFO0VBQ3ZESSxTQUFTLEVBQUVGLE9BQU87RUFDbEJHLFNBQVMsRUFBRSxRQUFRO0VBQ25CQyxhQUFhLEVBQUUsaURBQWlEO0VBQ2hFQyxXQUFXLEVBQUVOLFdBQVcsQ0FBQ08sT0FBTyxDQUFrQixRQUFRLEVBQUU7SUFBRUgsU0FBUyxFQUFFO0VBQVMsQ0FBQyxDQUFFO0VBQ3JGSSxhQUFhLEVBQUVDLENBQUMsQ0FBQ0M7QUFDbkIsQ0FBQyxDQUFFO0FBRUhaLGVBQWUsQ0FBQ2EsUUFBUSxDQUFFLFVBQVUsRUFBRVQsUUFBUSxDQUFFO0FBQ2hELGVBQWVBLFFBQVEifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/LinkedElementIO.js
// Copyright 2018-2023, University of Colorado Boulder

/**
 * IO Type for LinkedElement
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */





const LinkedElementIO = new IOType('LinkedElementIO', {
  isValidValue: () => true,
  documentation: 'A LinkedElement',
  toStateObject: linkedElement => {
    assert && js_Tandem.VALIDATION && assert(linkedElement.element.isPhetioInstrumented(), 'Linked elements must be instrumented');
    return {
      elementID: linkedElement.element.tandem.phetioID
    };
  },
  // Override the parent implementation as a no-op.  LinkedElement elementID appears in the state, but should not be set
  // back into a running simulation.
  applyState: _.noop,
  stateSchema: {
    elementID: types_StringIO
  }
});
tandemNamespace.register('LinkedElementIO', LinkedElementIO);
/* harmony default export */ const js_LinkedElementIO = (LinkedElementIO);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUYW5kZW0iLCJ0YW5kZW1OYW1lc3BhY2UiLCJJT1R5cGUiLCJTdHJpbmdJTyIsIkxpbmtlZEVsZW1lbnRJTyIsImlzVmFsaWRWYWx1ZSIsImRvY3VtZW50YXRpb24iLCJ0b1N0YXRlT2JqZWN0IiwibGlua2VkRWxlbWVudCIsImFzc2VydCIsIlZBTElEQVRJT04iLCJlbGVtZW50IiwiaXNQaGV0aW9JbnN0cnVtZW50ZWQiLCJlbGVtZW50SUQiLCJ0YW5kZW0iLCJwaGV0aW9JRCIsImFwcGx5U3RhdGUiLCJfIiwibm9vcCIsInN0YXRlU2NoZW1hIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJMaW5rZWRFbGVtZW50SU8udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogSU8gVHlwZSBmb3IgTGlua2VkRWxlbWVudFxuICpcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKi9cblxuaW1wb3J0IFRhbmRlbSBmcm9tICcuL1RhbmRlbS5qcyc7XG5pbXBvcnQgdGFuZGVtTmFtZXNwYWNlIGZyb20gJy4vdGFuZGVtTmFtZXNwYWNlLmpzJztcbmltcG9ydCBJT1R5cGUgZnJvbSAnLi90eXBlcy9JT1R5cGUuanMnO1xuaW1wb3J0IFN0cmluZ0lPIGZyb20gJy4vdHlwZXMvU3RyaW5nSU8uanMnO1xuXG5leHBvcnQgdHlwZSBMaW5rZWRFbGVtZW50U3RhdGUgPSB7XG4gIGVsZW1lbnRJRDogc3RyaW5nO1xufTtcblxuY29uc3QgTGlua2VkRWxlbWVudElPID0gbmV3IElPVHlwZSggJ0xpbmtlZEVsZW1lbnRJTycsIHtcbiAgaXNWYWxpZFZhbHVlOiAoKSA9PiB0cnVlLFxuICBkb2N1bWVudGF0aW9uOiAnQSBMaW5rZWRFbGVtZW50JyxcbiAgdG9TdGF0ZU9iamVjdDogbGlua2VkRWxlbWVudCA9PiB7XG4gICAgYXNzZXJ0ICYmIFRhbmRlbS5WQUxJREFUSU9OICYmIGFzc2VydCggbGlua2VkRWxlbWVudC5lbGVtZW50LmlzUGhldGlvSW5zdHJ1bWVudGVkKCksICdMaW5rZWQgZWxlbWVudHMgbXVzdCBiZSBpbnN0cnVtZW50ZWQnICk7XG4gICAgcmV0dXJuIHsgZWxlbWVudElEOiBsaW5rZWRFbGVtZW50LmVsZW1lbnQudGFuZGVtLnBoZXRpb0lEIH07XG4gIH0sXG5cbiAgLy8gT3ZlcnJpZGUgdGhlIHBhcmVudCBpbXBsZW1lbnRhdGlvbiBhcyBhIG5vLW9wLiAgTGlua2VkRWxlbWVudCBlbGVtZW50SUQgYXBwZWFycyBpbiB0aGUgc3RhdGUsIGJ1dCBzaG91bGQgbm90IGJlIHNldFxuICAvLyBiYWNrIGludG8gYSBydW5uaW5nIHNpbXVsYXRpb24uXG4gIGFwcGx5U3RhdGU6IF8ubm9vcCxcbiAgc3RhdGVTY2hlbWE6IHtcbiAgICBlbGVtZW50SUQ6IFN0cmluZ0lPXG4gIH1cbn0gKTtcblxudGFuZGVtTmFtZXNwYWNlLnJlZ2lzdGVyKCAnTGlua2VkRWxlbWVudElPJywgTGlua2VkRWxlbWVudElPICk7XG5leHBvcnQgZGVmYXVsdCBMaW5rZWRFbGVtZW50SU87Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE1BQU0sTUFBTSxhQUFhO0FBQ2hDLE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7QUFDbEQsT0FBT0MsTUFBTSxNQUFNLG1CQUFtQjtBQUN0QyxPQUFPQyxRQUFRLE1BQU0scUJBQXFCO0FBTTFDLE1BQU1DLGVBQWUsR0FBRyxJQUFJRixNQUFNLENBQUUsaUJBQWlCLEVBQUU7RUFDckRHLFlBQVksRUFBRUEsQ0FBQSxLQUFNLElBQUk7RUFDeEJDLGFBQWEsRUFBRSxpQkFBaUI7RUFDaENDLGFBQWEsRUFBRUMsYUFBYSxJQUFJO0lBQzlCQyxNQUFNLElBQUlULE1BQU0sQ0FBQ1UsVUFBVSxJQUFJRCxNQUFNLENBQUVELGFBQWEsQ0FBQ0csT0FBTyxDQUFDQyxvQkFBb0IsRUFBRSxFQUFFLHNDQUFzQyxDQUFFO0lBQzdILE9BQU87TUFBRUMsU0FBUyxFQUFFTCxhQUFhLENBQUNHLE9BQU8sQ0FBQ0csTUFBTSxDQUFDQztJQUFTLENBQUM7RUFDN0QsQ0FBQztFQUVEO0VBQ0E7RUFDQUMsVUFBVSxFQUFFQyxDQUFDLENBQUNDLElBQUk7RUFDbEJDLFdBQVcsRUFBRTtJQUNYTixTQUFTLEVBQUVWO0VBQ2I7QUFDRixDQUFDLENBQUU7QUFFSEYsZUFBZSxDQUFDbUIsUUFBUSxDQUFFLGlCQUFpQixFQUFFaEIsZUFBZSxDQUFFO0FBQzlELGVBQWVBLGVBQWUifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/phetioAPIValidation.js
// Copyright 2019-2022, University of Colorado Boulder

/**
 * This singleton is responsible for ensuring that the PhET-iO API is correct through the lifetime of the simulation.
 * The PhET-iO API is defined through multiple preloaded files. The "elements baseline" API holds an exact match of
 * what PhetioObject instances/metadata the sim should create on startup, where the "elements overrides" file is a
 * sparse list that can overwrite metadata without changing the code. See `grunt generate-phet-io-api` for
 * more information. The complete list of checks was decided on in https://github.com/phetsims/phet-io/issues/1453
 * (and later trimmed down) and is as follows:
 *
 * 1. After startup, only dynamic instances prescribed by the baseline API can be registered.
 * 2. Any static, registered PhetioObject can never be deregistered.
 * 3. Any schema entries in the overrides file must exist in the baseline API
 * 4. Any schema entries in the overrides file must be different from its baseline counterpart
 * 5. Dynamic element metadata should match the archetype in the API.
 *
 * Terminology:
 * schema: specified through preloads. The full schema is the baseline plus the overrides, but those parts can be
 *         referred to separately.
 * registered: the process of instrumenting a PhetioObject and it "becoming" a PhET-iO Element on the wrapper side.
 * static PhetioObject: A registered PhetioObject that exists for the lifetime of the sim. It should not be removed
 *                      (even intermittently) and must be created during startup so that it is immediately interoperable.
 * dynamic PhetioObject: A registered PhetioObject that can be created and/or destroyed at any point. Only dynamic
 *                       PhetioObjects can be created after startup.
 *
 * See https://github.com/phetsims/phet-io/issues/1443#issuecomment-484306552 for an explanation of how to maintain the
 * PhET-iO API for a simulation.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */




// constants
// The API-tracked and validated metadata keys
const KEYS_TO_CHECK = ['phetioDynamicElement', 'phetioEventType', 'phetioIsArchetype', 'phetioPlayback', 'phetioReadOnly', 'phetioState', 'phetioTypeName'];

// Feel free to add any other JSONifyable keys to this to make the error more clear! All mismatches are printed
// at once for clarity, see PhetioEngine.

class PhetioAPIValidation {
  apiMismatches = [];

  // keep track of when the sim has started.
  simHasStarted = false;

  // settable by qunitStart.js. Validation is only enabled when all screens are present.
  enabled = !!assert && js_Tandem.VALIDATION;

  // this must be all phet-io types so that the
  // following would fail: add a phetioType, then remove it, then add a different one under the same typeName.
  // A Note about memory: Every IOType that is loaded as a module is already loaded on the namespace. Therefore
  // this map doesn't add any memory by storing these. The exception to this is parametric IOTypes. It should be
  // double checked that anything being passed into a parametric type is memory safe. As of this writing, only IOTypes
  // are passed to parametric IOTypes, so this pattern remains memory leak free. Furthermore, this list is only
  // populated when `this.enabled`.
  everyPhetioType = {};

  /**
   * Callback when the simulation is ready to go, and all static PhetioObjects have been created.
   */
  onSimStarted() {
    if (this.enabled && phet.joist.sim.allScreensCreated) {
      this.validateOverridesFile();
      this.validatePreferencesModel();
    }
    if (phet.preloads.phetio.queryParameters.phetioPrintAPIProblems && this.apiMismatches) {
      console.log('PhET-iO api problems detected: ', this.apiMismatches);
    }

    // After the overrides validation to support ?phetioPrintAPIProblems on errors with overrides.
    this.simHasStarted = true;
  }

  /**
   * All core elements in the preferencesModel should be phetioReadOnly: false so they can be set over the API
   * or from within studio, but phetioState: false so they are not captured with save states.
   */
  validatePreferencesModel() {
    Object.keys(phet.phetio.phetioEngine.phetioObjectMap).filter(key => key.includes('.preferencesModel.')).forEach(preferencesKey => {
      let phetioObject = phet.phetio.phetioEngine.phetioObjectMap[preferencesKey];
      while (phetioObject instanceof LinkedElement) {
        phetioObject = phetioObject.element;
      }
      assert && assert(!phetioObject.phetioReadOnly, 'preferences model and its descendants should be phetioReadOnly: false, key=' + preferencesKey);

      // Audio manager, color profile property and localeProperty are supposed to be stateful. All other preferences
      // should be phetioState: false so they are not captured in the state
      assert && assert(phetioObject.phetioState === (phetioObject.phetioID.endsWith('.colorProfileProperty') || phetioObject.phetioID.endsWith('.audioEnabledProperty') || phetioObject.phetioID.endsWith('.localeProperty') ||
      // Sim preferences should also be stateful
      preferencesKey.includes('.simulationModel.')), 'most preferences should be phetioState: false, key=' + preferencesKey);
    });
  }

  /**
   * Checks if a removed phetioObject is part of a Group
   */
  onPhetioObjectRemoved(phetioObject) {
    if (!this.enabled) {
      return;
    }
    const phetioID = phetioObject.tandem.phetioID;

    // if it isn't dynamic, then it shouldn't be removed during the lifetime of the sim.
    if (!phetioObject.phetioDynamicElement) {
      this.assertAPIError({
        phetioID: phetioID,
        ruleInViolation: '2. Any static, registered PhetioObject can never be deregistered.'
      });
    }
  }

  /**
   * Should be called from phetioEngine when a PhetioObject is added to the PhET-iO
   */
  onPhetioObjectAdded(phetioObject) {
    if (!this.enabled) {
      return;
    }
    const newPhetioType = phetioObject.phetioType;
    const oldPhetioType = this.everyPhetioType[newPhetioType.typeName];
    if (!oldPhetioType) {
      // This may not be necessary, but may be helpful so that we don't overwrite if rule 10 is in violation
      this.everyPhetioType[newPhetioType.typeName] = newPhetioType;
    }
    if (this.simHasStarted) {
      // Here we need to kick this validation to the next frame to support construction in any order. Parent first, or
      // child first. Use namespace to avoid because timer is a PhetioObject.
      phet.axon.animationFrameTimer.runOnNextTick(() => {
        // The only instances that it's OK to create after startup are "dynamic instances" which are marked as such.
        if (!phetioObject.phetioDynamicElement) {
          this.assertAPIError({
            phetioID: phetioObject.tandem.phetioID,
            ruleInViolation: '1. After startup, only dynamic instances prescribed by the baseline file can be registered.'
          });
        } else {
          // Compare the dynamic element to the archetype if creating them this runtime. Don't check this if it has
          // already been disposed.
          if (phet.preloads.phetio.createArchetypes && !phetioObject.isDisposed) {
            const archetypeID = phetioObject.tandem.getArchetypalPhetioID();
            const archetypeMetadata = phet.phetio.phetioEngine.getPhetioObject(archetypeID).getMetadata();

            // Compare to the simulation-defined archetype
            this.checkDynamicInstanceAgainstArchetype(phetioObject, archetypeMetadata, 'simulation archetype');
          }
        }
      });
    }
  }
  validateOverridesFile() {
    // import phetioEngine causes a cycle and cannot be used, hence we must use the namespace
    const entireBaseline = phet.phetio.phetioEngine.getPhetioElementsBaseline();
    for (const phetioID in window.phet.preloads.phetio.phetioElementsOverrides) {
      const isArchetype = phetioID.includes(DYNAMIC_ARCHETYPE_NAME);
      if (!phet.preloads.phetio.createArchetypes && !entireBaseline.hasOwnProperty(phetioID)) {
        assert && assert(isArchetype, `phetioID missing from the baseline that was not an archetype: ${phetioID}`);
      } else {
        if (!entireBaseline.hasOwnProperty(phetioID)) {
          this.assertAPIError({
            phetioID: phetioID,
            ruleInViolation: '3. Any schema entries in the overrides file must exist in the baseline file.',
            message: 'phetioID expected in the baseline file but does not exist'
          });
        } else {
          const override = window.phet.preloads.phetio.phetioElementsOverrides[phetioID];
          const baseline = entireBaseline[phetioID];
          if (Object.keys(override).length === 0) {
            this.assertAPIError({
              phetioID: phetioID,
              ruleInViolation: '4. Any schema entries in the overrides file must be different from its baseline counterpart.',
              message: 'no metadata keys found for this override.'
            });
          }
          for (const metadataKey in override) {
            if (!baseline.hasOwnProperty(metadataKey)) {
              this.assertAPIError({
                phetioID: phetioID,
                ruleInViolation: '8. Any schema entries in the overrides file must be different from its baseline counterpart.',
                message: `phetioID metadata key not found in the baseline: ${metadataKey}`
              });
            }
            if (override[metadataKey] === baseline[metadataKey]) {
              this.assertAPIError({
                phetioID: phetioID,
                ruleInViolation: '8. Any schema entries in the overrides file must be different from its baseline counterpart.',
                message: 'phetioID metadata override value is the same as the corresponding metadata value in the baseline.'
              });
            }
          }
        }
      }
    }
  }

  /**
   * Assert out the failed API validation rule.
   */
  assertAPIError(apiErrorObject) {
    const mismatchMessage = apiErrorObject.phetioID ? `${apiErrorObject.phetioID}:  ${apiErrorObject.ruleInViolation}` : `${apiErrorObject.ruleInViolation}`;
    this.apiMismatches.push(apiErrorObject);

    // If ?phetioPrintAPIProblems is present, then ignore assertions until the sim has started up.
    if (this.simHasStarted || !phet.preloads.phetio.queryParameters.phetioPrintAPIProblems) {
      assert && assert(false, `PhET-iO API error:\n${mismatchMessage}`);
    }
  }

  /**
   * Compare a dynamic phetioObject's metadata to the expected metadata
   */
  checkDynamicInstanceAgainstArchetype(phetioObject, archetypeMetadata, source) {
    const actualMetadata = phetioObject.getMetadata();
    KEYS_TO_CHECK.forEach(key => {
      // These attributes are different for archetype vs actual
      if (key !== 'phetioDynamicElement' && key !== 'phetioArchetypePhetioID' && key !== 'phetioIsArchetype') {
        // @ts-expect-error - not sure how to be typesafe in the API files
        if (archetypeMetadata[key] !== actualMetadata[key] && phetioObject.tandem) {
          this.assertAPIError({
            phetioID: phetioObject.tandem.phetioID,
            ruleInViolation: '5. Dynamic element metadata should match the archetype in the API.',
            source: source,
            message: `mismatched metadata: ${key}`
          });
        }
      }
    });
  }
}
const phetioAPIValidation = new PhetioAPIValidation();
tandemNamespace.register('phetioAPIValidation', phetioAPIValidation);
/* harmony default export */ const js_phetioAPIValidation = (phetioAPIValidation);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/Disposable.js
// Copyright 2022-2023, University of Colorado Boulder

/**
 * Type to implement disposal strategies, with a disposer option and a disposeEmitter.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */



const DISPOSABLE_OPTION_KEYS = (/* unused pure expression or super */ null && (['disposer', 'disposeEmitter']));
class Disposable {
  // Called after all code that is directly in `dispose()` methods, be careful with mixing this pattern and the
  // `this.disposeMyClass()` pattern.
  _disposeEmitter = new TinyEmitter();
  isDisposed = false;
  _disposer = null;
  boundOnDisposer = null;
  constructor(providedOptions) {
    if (providedOptions && providedOptions.disposer) {
      this.disposer = providedOptions.disposer;
    }
    if (providedOptions && providedOptions.disposeEmitter) {
      this.disposeEmitter = providedOptions.disposeEmitter;
    }
    if (assert) {
      // Wrap the prototype dispose method with a check. NOTE: We will not catch devious cases where the dispose() is
      // overridden after the Node constructor (which may happen).
      const protoDispose = this.dispose;
      this.dispose = () => {
        assert && assert(!this.isDisposed, 'This Disposable has already been disposed, and cannot be disposed again');
        protoDispose.call(this);
        assert && assert(this.isDisposed, 'Disposable.dispose() call is missing from an overridden dispose method');
      };
    }
  }
  onDisposer() {
    !this.isDisposed && this.dispose(); // Disposable doesn't have to be in charge of disposal, just make sure it happens.

    this.clearDisposer();
  }
  getDisposer() {
    return this._disposer;
  }
  get disposer() {
    return this.getDisposer();
  }

  /**
   * @deprecated - Though this works, it is likely not the pattern of the future, please see https://github.com/phetsims/scenery/issues/1494
   */
  set disposer(disposer) {
    this.setDisposer(disposer);
  }

  /**
   * @deprecated - Though this works, it is likely not the pattern of the future, please see https://github.com/phetsims/scenery/issues/1494
   */
  setDisposer(disposer) {
    if (disposer !== this._disposer) {
      this.ensureBoundOnDisposer();
      this.clearDisposer();
      this._disposer = disposer;
      if (this._disposer) {
        assert && assert(this.boundOnDisposer, 'must have a boundOnDisposer');
        this.getDisposerEmitter().addListener(this.boundOnDisposer);
      }
    }
  }
  getDisposeEmitter() {
    return this._disposeEmitter;
  }
  get disposeEmitter() {
    return this.getDisposeEmitter();
  }
  set disposeEmitter(disposeEmitter) {
    this.setDisposeEmitter(disposeEmitter);
  }

  // Cannot be removed, please set appropriately
  setDisposeEmitter(disposeEmitter) {
    // No need to remove this listener because there is an assumption that the passed in disposeEmitter has the same lifetime
    // as this Disposable (i.e. this.disposeEmitter).
    this._disposeEmitter.addListener(disposeEmitter.emit.bind(disposeEmitter));
  }

  // Lazily create boundOnDisposer only when disposer is set
  ensureBoundOnDisposer() {
    this.boundOnDisposer = this.boundOnDisposer || this.onDisposer.bind(this);
  }
  getDisposerEmitter() {
    assert && assert(this._disposer, 'need a disposer set');

    // type case because instanceof check isn't flexible enough to check for all that implement TDisposable
    return this._disposer instanceof Disposable ? this._disposer._disposeEmitter : this._disposer;
  }
  clearDisposer() {
    // graceful
    if (this._disposer) {
      this.ensureBoundOnDisposer();
      assert && assert(this.boundOnDisposer, 'must have a boundOnDisposer');
      this.getDisposerEmitter().removeListener(this.boundOnDisposer);
      this._disposer = null;
    }
  }
  dispose() {
    assert && assert(!this.isDisposed, 'Disposable can only be disposed once');
    this._disposeEmitter.emit();
    this.isDisposed = true;
  }
}
js_axon.register('Disposable', Disposable);
/* harmony default export */ const js_Disposable = (Disposable);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/PhetioObject.js
// Copyright 2017-2023, University of Colorado Boulder

/**
 * Base type that provides PhET-iO features. An instrumented PhetioObject is referred to on the wrapper side/design side
 * as a "PhET-iO element".  Note that sims may have hundreds or thousands of PhetioObjects, so performance and memory
 * considerations are important.  For this reason, initializePhetioObject is only called in PhET-iO brand, which means
 * many of the getters such as `phetioState` and `phetioDocumentation` will not work in other brands. We have opted
 * to have these getters throw assertion errors in other brands to help identify problems if these are called
 * unexpectedly.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */















// constants
const PhetioObject_PHET_IO_ENABLED = js_Tandem.PHET_IO_ENABLED;
const IO_TYPE_VALIDATOR = {
  valueType: IOType,
  validationMessage: 'phetioType must be an IOType'
};
const BOOLEAN_VALIDATOR = {
  valueType: 'boolean'
};

// use "<br>" instead of newlines
const PHET_IO_DOCUMENTATION_VALIDATOR = {
  valueType: 'string',
  isValidValue: doc => !doc.includes('\n'),
  validationMessage: 'phetioDocumentation must be provided in the right format'
};
const PHET_IO_EVENT_TYPE_VALIDATOR = {
  valueType: js_EventType,
  validationMessage: 'invalid phetioEventType'
};
const OBJECT_VALIDATOR = {
  valueType: [Object, null]
};
const objectToPhetioID = phetioObject => phetioObject.tandem.phetioID;
// When an event is suppressed from the data stream, we keep track of it with this token.
const SKIPPING_MESSAGE = -1;
const DEFAULTS = {
  // Subtypes can use `Tandem.tandemRequired` to require a named tandem passed in
  tandem: js_Tandem.OPTIONAL,
  // Defines API methods, events and serialization
  phetioType: IOType.ObjectIO,
  // Useful notes about an instrumented PhetioObject, shown in the PhET-iO Studio Wrapper. It's an html
  // string, so "<br>" tags are required instead of "\n" characters for proper rendering in Studio
  phetioDocumentation: js_TandemConstants.PHET_IO_OBJECT_METADATA_DEFAULTS.phetioDocumentation,
  // When true, includes the PhetioObject in the PhET-iO state (not automatically recursive, must be specified for
  // children explicitly)
  phetioState: js_TandemConstants.PHET_IO_OBJECT_METADATA_DEFAULTS.phetioState,
  // This option controls how PhET-iO wrappers can interface with this PhetioObject. Predominately this occurs via
  // public methods defined on this PhetioObject's phetioType, in which some method are not executable when this flag
  // is true. See `ObjectIO.methods` for further documentation, especially regarding `invocableForReadOnlyElements`.
  phetioReadOnly: js_TandemConstants.PHET_IO_OBJECT_METADATA_DEFAULTS.phetioReadOnly,
  // Category of event type, can be overridden in phetioStartEvent options.  Cannot be supplied through TandemConstants because
  // that would create an import loop
  phetioEventType: js_EventType.MODEL,
  // High frequency events such as mouse moves can be omitted from data stream, see ?phetioEmitHighFrequencyEvents
  // and Client.launchSim option
  // @deprecated - see https://github.com/phetsims/phet-io/issues/1629#issuecomment-608002410
  phetioHighFrequency: js_TandemConstants.PHET_IO_OBJECT_METADATA_DEFAULTS.phetioHighFrequency,
  // When true, emits events for data streams for playback, see handlePlaybackEvent.js
  phetioPlayback: js_TandemConstants.PHET_IO_OBJECT_METADATA_DEFAULTS.phetioPlayback,
  // When true, this is categorized as an important "featured" element in Studio.
  phetioFeatured: js_TandemConstants.PHET_IO_OBJECT_METADATA_DEFAULTS.phetioFeatured,
  // indicates that an object may or may not have been created. Applies recursively automatically
  // and should only be set manually on the root dynamic element. Dynamic archetypes will have this overwritten to
  // false even if explicitly provided as true, as archetypes cannot be dynamic.
  phetioDynamicElement: js_TandemConstants.PHET_IO_OBJECT_METADATA_DEFAULTS.phetioDynamicElement,
  // Marking phetioDesigned: true opts-in to API change detection tooling that can be used to catch inadvertent
  // changes to a designed API.  A phetioDesigned:true PhetioObject (or any of its tandem descendants) will throw
  // assertion errors on CT (or when running with ?phetioCompareAPI) when the following are true:
  // (a) its package.json lists compareDesignedAPIChanges:true in the "phet-io" section
  // (b) the simulation is listed in perennial/data/phet-io-api-stable
  // (c) any of its metadata values deviate from the reference API
  phetioDesigned: js_TandemConstants.PHET_IO_OBJECT_METADATA_DEFAULTS.phetioDesigned,
  // delivered with each event, if specified. phetioPlayback is appended here, if true.
  // Note: unlike other options, this option can be mutated downstream, and hence should be created newly for each instance.
  phetioEventMetadata: null,
  tandemNameSuffix: null
};

// If you run into a type error here, feel free to add any type that is supported by the browsers "structured cloning algorithm" https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm

assert && assert(js_EventType.phetioType.toStateObject(DEFAULTS.phetioEventType) === js_TandemConstants.PHET_IO_OBJECT_METADATA_DEFAULTS.phetioEventType, 'phetioEventType must have the same default as the default metadata values.');

// Options for creating a PhetioObject

class PhetioObject extends js_Disposable {
  // assigned in initializePhetioObject - see docs at DEFAULTS declaration

  // track whether the object has been initialized.  This is necessary because initialization can happen in the
  // constructor or in a subsequent call to initializePhetioObject (to support scenery Node)

  // See documentation in DEFAULTS

  // Public only for PhetioObjectMetadataInput

  static DEFAULT_OPTIONS = DEFAULTS;
  constructor(options) {
    super(options);
    this.tandem = DEFAULTS.tandem;
    this.phetioID = this.tandem.phetioID;
    this.phetioObjectInitialized = false;
    if (options) {
      this.initializePhetioObject({}, options);
    }
  }

  /**
   * Like SCENERY/Node, PhetioObject can be configured during construction or later with a mutate call.
   * Noop if provided options keys don't intersect with any key in DEFAULTS; baseOptions are ignored for this calculation.
   */
  initializePhetioObject(baseOptions, providedOptions) {
    assert && assert(providedOptions, 'initializePhetioObject must be called with providedOptions');

    // call before we exit early to support logging unsupplied Tandems.
    providedOptions.tandem && js_Tandem.onMissingTandem(providedOptions.tandem);

    // Make sure that required tandems are supplied
    if (js_Tandem.VALIDATION && providedOptions.tandem && providedOptions.tandem.required) {
      assert && assert(providedOptions.tandem.supplied, 'required tandems must be supplied');
    }

    // The presence of `tandem` indicates if this PhetioObject can be initialized. If not yet initialized, perhaps
    // it will be initialized later on, as in Node.mutate().
    if (!(PhetioObject_PHET_IO_ENABLED && providedOptions.tandem && providedOptions.tandem.supplied)) {
      assert && !providedOptions.tandem && assert(!specifiesNonTandemPhetioObjectKey(providedOptions), 'only specify metadata when providing a Tandem');

      // In this case, the PhetioObject is not initialized, but still set tandem to maintain a consistent API for
      // creating the Tandem tree.
      if (providedOptions.tandem) {
        this.tandem = providedOptions.tandem;
        this.phetioID = this.tandem.phetioID;
      }
      return;
    }

    // assert this after the `specifiesPhetioObjectKey check to support something like:
    assert && assert(!this.phetioObjectInitialized, 'cannot initialize twice');

    // Guard validation on assert to avoid calling a large number of no-ops when assertions are disabled, see https://github.com/phetsims/tandem/issues/200
    assert && js_validate(providedOptions.tandem, {
      valueType: js_Tandem
    });
    const defaults = combineOptions({}, DEFAULTS, baseOptions);
    let options = optionize()(defaults, providedOptions);

    // validate options before assigning to properties
    assert && js_validate(options.phetioType, IO_TYPE_VALIDATOR);
    assert && js_validate(options.phetioState, js_merge({}, BOOLEAN_VALIDATOR, {
      validationMessage: 'phetioState must be a boolean'
    }));
    assert && js_validate(options.phetioReadOnly, js_merge({}, BOOLEAN_VALIDATOR, {
      validationMessage: 'phetioReadOnly must be a boolean'
    }));
    assert && js_validate(options.phetioEventType, PHET_IO_EVENT_TYPE_VALIDATOR);
    assert && js_validate(options.phetioDocumentation, PHET_IO_DOCUMENTATION_VALIDATOR);
    assert && js_validate(options.phetioHighFrequency, js_merge({}, BOOLEAN_VALIDATOR, {
      validationMessage: 'phetioHighFrequency must be a boolean'
    }));
    assert && js_validate(options.phetioPlayback, js_merge({}, BOOLEAN_VALIDATOR, {
      validationMessage: 'phetioPlayback must be a boolean'
    }));
    assert && js_validate(options.phetioFeatured, js_merge({}, BOOLEAN_VALIDATOR, {
      validationMessage: 'phetioFeatured must be a boolean'
    }));
    assert && js_validate(options.phetioEventMetadata, js_merge({}, OBJECT_VALIDATOR, {
      validationMessage: 'object literal expected'
    }));
    assert && js_validate(options.phetioDynamicElement, js_merge({}, BOOLEAN_VALIDATOR, {
      validationMessage: 'phetioDynamicElement must be a boolean'
    }));
    assert && js_validate(options.phetioDesigned, js_merge({}, BOOLEAN_VALIDATOR, {
      validationMessage: 'phetioDesigned must be a boolean'
    }));
    assert && assert(this.linkedElements !== null, 'this means addLinkedElement was called before instrumentation of this PhetioObject');

    // optional - Indicates that an object is a archetype for a dynamic class. Settable only by
    // PhetioEngine and by classes that create dynamic elements when creating their archetype (like PhetioGroup) through
    // PhetioObject.markDynamicElementArchetype().
    // if true, items will be excluded from phetioState. This applies recursively automatically.
    this.phetioIsArchetype = false;

    // (phetioEngine)
    // Store the full baseline for usage in validation or for usage in studio.  Do this before applying overrides. The
    // baseline is created when a sim is run with assertions to assist in phetioAPIValidation.  However, even when
    // assertions are disabled, some wrappers such as studio need to generate the baseline anyway.
    // not all metadata are passed through via options, so store baseline for these additional properties
    this.phetioBaselineMetadata = js_phetioAPIValidation.enabled || phet.preloads.phetio.queryParameters.phetioEmitAPIBaseline ? this.getMetadata(js_merge({
      phetioIsArchetype: this.phetioIsArchetype,
      phetioArchetypePhetioID: this.phetioArchetypePhetioID
    }, options)) : null;

    // Dynamic elements should compare to their "archetypal" counterparts.  For example, this means that a Particle
    // in a PhetioGroup will take its overrides from the PhetioGroup archetype.
    const archetypalPhetioID = options.tandem.getArchetypalPhetioID();

    // Overrides are only defined for simulations, not for unit tests.  See https://github.com/phetsims/phet-io/issues/1461
    // Patch in the desired values from overrides, if any.
    if (window.phet.preloads.phetio.phetioElementsOverrides) {
      const overrides = window.phet.preloads.phetio.phetioElementsOverrides[archetypalPhetioID];
      if (overrides) {
        // No need to make a new object, since this "options" variable was created in the previous merge call above.
        options = optionize()(options, overrides);
      }
    }

    // (read-only) see docs at DEFAULTS declaration
    this.tandem = options.tandem;
    this.phetioID = this.tandem.phetioID;

    // (read-only) see docs at DEFAULTS declaration
    this._phetioType = options.phetioType;

    // (read-only) see docs at DEFAULTS declaration
    this._phetioState = options.phetioState;

    // (read-only) see docs at DEFAULTS declaration
    this._phetioReadOnly = options.phetioReadOnly;

    // (read-only) see docs at DEFAULTS declaration
    this._phetioDocumentation = options.phetioDocumentation;

    // see docs at DEFAULTS declaration
    this._phetioEventType = options.phetioEventType;

    // see docs at DEFAULTS declaration
    this._phetioHighFrequency = options.phetioHighFrequency;

    // see docs at DEFAULTS declaration
    this._phetioPlayback = options.phetioPlayback;

    // (PhetioEngine) see docs at DEFAULTS declaration - in order to recursively pass this value to
    // children, the setPhetioDynamicElement() function must be used instead of setting this attribute directly
    this._phetioDynamicElement = options.phetioDynamicElement;

    // (read-only) see docs at DEFAULTS declaration
    this._phetioFeatured = options.phetioFeatured;
    this._phetioEventMetadata = options.phetioEventMetadata;
    this._phetioDesigned = options.phetioDesigned;

    // for phetioDynamicElements, the corresponding phetioID for the element in the archetype subtree
    this.phetioArchetypePhetioID = null;

    //keep track of LinkedElements for disposal. Null out to support asserting on
    // edge error cases, see this.addLinkedElement()
    this.linkedElements = [];

    // (phet-io) set to true when this PhetioObject has been sent over to the parent.
    this.phetioNotifiedObjectCreated = false;

    // tracks the indices of started messages so that dataStream can check that ends match starts.
    this.phetioMessageStack = [];

    // Make sure playback shows in the phetioEventMetadata
    if (this._phetioPlayback) {
      this._phetioEventMetadata = this._phetioEventMetadata || {};
      assert && assert(!this._phetioEventMetadata.hasOwnProperty('playback'), 'phetioEventMetadata.playback should not already exist');
      this._phetioEventMetadata.playback = true;
    }

    // Alert that this PhetioObject is ready for cross-frame communication (thus becoming a "PhET-iO element" on the wrapper side.
    this.tandem.addPhetioObject(this);
    this.phetioObjectInitialized = true;
    if (assert && js_Tandem.VALIDATION && this.isPhetioInstrumented() && options.tandemNameSuffix) {
      const suffixArray = Array.isArray(options.tandemNameSuffix) ? options.tandemNameSuffix : [options.tandemNameSuffix];
      const matches = suffixArray.filter(suffix => {
        return this.tandem.name.endsWith(suffix) || this.tandem.name.endsWith(PhetioObject.swapCaseOfFirstCharacter(suffix));
      });
      assert && assert(matches.length > 0, 'Incorrect Tandem suffix, expected = ' + suffixArray.join(', ') + '. actual = ' + this.tandem.phetioID);
    }
  }
  static swapCaseOfFirstCharacter(string) {
    const firstChar = string[0];
    const newFirstChar = firstChar === firstChar.toLowerCase() ? firstChar.toUpperCase() : firstChar.toLowerCase();
    return newFirstChar + string.substring(1);
  }

  // throws an assertion error in brands other than PhET-iO
  get phetioType() {
    assert && assert(PhetioObject_PHET_IO_ENABLED && this.isPhetioInstrumented(), 'phetioType only accessible for instrumented objects in PhET-iO brand.');
    return this._phetioType;
  }

  // throws an assertion error in brands other than PhET-iO
  get phetioState() {
    assert && assert(PhetioObject_PHET_IO_ENABLED && this.isPhetioInstrumented(), 'phetioState only accessible for instrumented objects in PhET-iO brand.');
    return this._phetioState;
  }

  // throws an assertion error in brands other than PhET-iO
  get phetioReadOnly() {
    assert && assert(PhetioObject_PHET_IO_ENABLED && this.isPhetioInstrumented(), 'phetioReadOnly only accessible for instrumented objects in PhET-iO brand.');
    return this._phetioReadOnly;
  }

  // throws an assertion error in brands other than PhET-iO
  get phetioDocumentation() {
    assert && assert(PhetioObject_PHET_IO_ENABLED && this.isPhetioInstrumented(), 'phetioDocumentation only accessible for instrumented objects in PhET-iO brand.');
    return this._phetioDocumentation;
  }

  // throws an assertion error in brands other than PhET-iO
  get phetioEventType() {
    assert && assert(PhetioObject_PHET_IO_ENABLED && this.isPhetioInstrumented(), 'phetioEventType only accessible for instrumented objects in PhET-iO brand.');
    return this._phetioEventType;
  }

  // throws an assertion error in brands other than PhET-iO
  get phetioHighFrequency() {
    assert && assert(PhetioObject_PHET_IO_ENABLED && this.isPhetioInstrumented(), 'phetioHighFrequency only accessible for instrumented objects in PhET-iO brand.');
    return this._phetioHighFrequency;
  }

  // throws an assertion error in brands other than PhET-iO
  get phetioPlayback() {
    assert && assert(PhetioObject_PHET_IO_ENABLED && this.isPhetioInstrumented(), 'phetioPlayback only accessible for instrumented objects in PhET-iO brand.');
    return this._phetioPlayback;
  }

  // throws an assertion error in brands other than PhET-iO
  get phetioDynamicElement() {
    assert && assert(PhetioObject_PHET_IO_ENABLED && this.isPhetioInstrumented(), 'phetioDynamicElement only accessible for instrumented objects in PhET-iO brand.');
    return this._phetioDynamicElement;
  }

  // throws an assertion error in brands other than PhET-iO
  get phetioFeatured() {
    assert && assert(PhetioObject_PHET_IO_ENABLED && this.isPhetioInstrumented(), 'phetioFeatured only accessible for instrumented objects in PhET-iO brand.');
    return this._phetioFeatured;
  }

  // throws an assertion error in brands other than PhET-iO
  get phetioEventMetadata() {
    assert && assert(PhetioObject_PHET_IO_ENABLED && this.isPhetioInstrumented(), 'phetioEventMetadata only accessible for instrumented objects in PhET-iO brand.');
    return this._phetioEventMetadata;
  }

  // throws an assertion error in brands other than PhET-iO
  get phetioDesigned() {
    assert && assert(PhetioObject_PHET_IO_ENABLED && this.isPhetioInstrumented(), 'phetioDesigned only accessible for instrumented objects in PhET-iO brand.');
    return this._phetioDesigned;
  }

  /**
   * Start an event for the nested PhET-iO data stream.
   *
   * @param event - the name of the event
   * @param [providedOptions]
   */
  phetioStartEvent(event, providedOptions) {
    if (PhetioObject_PHET_IO_ENABLED && this.isPhetioInstrumented()) {
      // only one or the other can be provided
      assert && js_assertMutuallyExclusiveOptions(providedOptions, ['data'], ['getData']);
      const options = optionize()({
        data: null,
        // function that, when called gets the data.
        getData: null
      }, providedOptions);
      assert && assert(this.phetioObjectInitialized, 'phetioObject should be initialized');
      assert && options.data && assert(typeof options.data === 'object');
      assert && options.getData && assert(typeof options.getData === 'function');
      assert && assert(arguments.length === 1 || arguments.length === 2, 'Prevent usage of incorrect signature');

      // TODO: don't drop PhET-iO events if they are created before we have a dataStream global. https://github.com/phetsims/phet-io/issues/1875
      if (!_.hasIn(window, 'phet.phetio.dataStream')) {
        // If you hit this, then it is likely related to https://github.com/phetsims/scenery/issues/1124 and we would like to know about it!
        // assert && assert( false, 'trying to create an event before the data stream exists' );

        this.phetioMessageStack.push(SKIPPING_MESSAGE);
        return;
      }

      // Opt out of certain events if queryParameter override is provided. Even for a low frequency data stream, high
      // frequency events can still be emitted when they have a low frequency ancestor.
      const skipHighFrequencyEvent = this.phetioHighFrequency && _.hasIn(window, 'phet.preloads.phetio.queryParameters') && !window.phet.preloads.phetio.queryParameters.phetioEmitHighFrequencyEvents && !phet.phetio.dataStream.isEmittingLowFrequencyEvent();

      // TODO: If there is no dataStream global defined, then we should handle this differently as to not drop the event that is triggered, see https://github.com/phetsims/phet-io/issues/1846
      const skipFromUndefinedDatastream = !assert && !_.hasIn(window, 'phet.phetio.dataStream');
      if (skipHighFrequencyEvent || this.phetioEventType === js_EventType.OPT_OUT || skipFromUndefinedDatastream) {
        this.phetioMessageStack.push(SKIPPING_MESSAGE);
        return;
      }

      // Only get the args if we are actually going to send the event.
      const data = options.getData ? options.getData() : options.data;
      this.phetioMessageStack.push(phet.phetio.dataStream.start(this.phetioEventType, this.tandem.phetioID, this.phetioType, event, data, this.phetioEventMetadata, this.phetioHighFrequency));

      // To support PhET-iO playback, any potential playback events downstream of this playback event must be marked as
      // non playback events. This is to prevent the PhET-iO playback engine from repeating those events. See
      // https://github.com/phetsims/phet-io/issues/1693
      this.phetioPlayback && phet.phetio.dataStream.pushNonPlaybackable();
    }
  }

  /**
   * End an event on the nested PhET-iO data stream. It this object was disposed or dataStream.start was not called,
   * this is a no-op.
   */
  phetioEndEvent() {
    if (PhetioObject_PHET_IO_ENABLED && this.isPhetioInstrumented()) {
      assert && assert(this.phetioMessageStack.length > 0, 'Must have messages to pop');
      const topMessageIndex = this.phetioMessageStack.pop();

      // The message was started as a high frequency event to be skipped, so the end is a no-op
      if (topMessageIndex === SKIPPING_MESSAGE) {
        return;
      }
      this.phetioPlayback && phet.phetio.dataStream.popNonPlaybackable();
      phet.phetio.dataStream.end(topMessageIndex);
    }
  }

  /**
   * Set any instrumented descendants of this PhetioObject to the same value as this.phetioDynamicElement.
   */
  propagateDynamicFlagsToDescendants() {
    assert && assert(js_Tandem.PHET_IO_ENABLED, 'phet-io should be enabled');
    assert && assert(phet.phetio && phet.phetio.phetioEngine, 'Dynamic elements cannot be created statically before phetioEngine exists.');
    const phetioEngine = phet.phetio.phetioEngine;

    // in the same order as bufferedPhetioObjects
    const unlaunchedPhetioIDs = !js_Tandem.launched ? js_Tandem.bufferedPhetioObjects.map(objectToPhetioID) : [];
    this.tandem.iterateDescendants(tandem => {
      const phetioID = tandem.phetioID;
      if (phetioEngine.hasPhetioObject(phetioID) || !js_Tandem.launched && unlaunchedPhetioIDs.includes(phetioID)) {
        assert && assert(this.isPhetioInstrumented());
        const phetioObject = phetioEngine.hasPhetioObject(phetioID) ? phetioEngine.getPhetioObject(phetioID) : js_Tandem.bufferedPhetioObjects[unlaunchedPhetioIDs.indexOf(phetioID)];
        assert && assert(phetioObject, 'should have a phetioObject here');

        // Order matters here! The phetioIsArchetype needs to be first to ensure that the setPhetioDynamicElement
        // setter can opt out for archetypes.
        phetioObject.phetioIsArchetype = this.phetioIsArchetype;
        phetioObject.setPhetioDynamicElement(this.phetioDynamicElement);
        if (phetioObject.phetioBaselineMetadata) {
          phetioObject.phetioBaselineMetadata.phetioIsArchetype = this.phetioIsArchetype;
        }
      }
    });
  }

  /**
   * Used in PhetioEngine
   */
  setPhetioDynamicElement(phetioDynamicElement) {
    assert && assert(!this.phetioNotifiedObjectCreated, 'should not change dynamic element flags after notifying this PhetioObject\'s creation.');
    assert && assert(this.isPhetioInstrumented());

    // All archetypes are static (non-dynamic)
    this._phetioDynamicElement = this.phetioIsArchetype ? false : phetioDynamicElement;

    // For dynamic elements, indicate the corresponding archetype element so that clients like Studio can leverage
    // the archetype metadata. Static elements don't have archetypes.
    this.phetioArchetypePhetioID = phetioDynamicElement ? this.tandem.getArchetypalPhetioID() : null;

    // Keep the baseline metadata in sync.
    if (this.phetioBaselineMetadata) {
      this.phetioBaselineMetadata.phetioDynamicElement = this.phetioDynamicElement;
    }
  }

  /**
   * Mark this PhetioObject as an archetype for dynamic elements.
   */
  markDynamicElementArchetype() {
    assert && assert(!this.phetioNotifiedObjectCreated, 'should not change dynamic element flags after notifying this PhetioObject\'s creation.');
    this.phetioIsArchetype = true;
    this.setPhetioDynamicElement(false); // because archetypes aren't dynamic elements

    if (this.phetioBaselineMetadata) {
      this.phetioBaselineMetadata.phetioIsArchetype = this.phetioIsArchetype;
    }

    // recompute for children also, but only if phet-io is enabled
    js_Tandem.PHET_IO_ENABLED && this.propagateDynamicFlagsToDescendants();
  }

  /**
   * A PhetioObject will only be instrumented if the tandem that was passed in was "supplied". See Tandem.supplied
   * for more info.
   */
  isPhetioInstrumented() {
    return this.tandem && this.tandem.supplied;
  }

  /**
   * When an instrumented PhetioObject is linked with another instrumented PhetioObject, this creates a one-way
   * association which is rendered in Studio as a "symbolic" link or hyperlink. Many common code UI elements use this
   * automatically. To keep client sites simple, this has a graceful opt-out mechanism which makes this function a
   * no-op if either this PhetioObject or the target PhetioObject is not instrumented.
   * @param element - the target element. Must be instrumented for a LinkedElement to be created-- otherwise gracefully opts out
   * @param [options]
   */
  addLinkedElement(element, options) {
    if (!this.isPhetioInstrumented()) {
      // set this to null so that you can't addLinkedElement on an uninitialized PhetioObject and then instrument
      // it afterwards.
      this.linkedElements = null;
      return;
    }

    // In some cases, UI components need to be wired up to a private (internal) Property which should neither be
    // instrumented nor linked.
    if (PhetioObject_PHET_IO_ENABLED && element.isPhetioInstrumented()) {
      assert && assert(Array.isArray(this.linkedElements), 'linkedElements should be an array');
      this.linkedElements.push(new LinkedElement(element, options));
    }
  }

  /**
   * Remove all linked elements linking to the provided PhetioObject. This will dispose all removed LinkedElements. This
   * will be graceful, and doesn't assume or assert that the provided PhetioObject has LinkedElement(s), it will just
   * remove them if they are there.
   */
  removeLinkedElements(potentiallyLinkedElement) {
    if (this.isPhetioInstrumented() && this.linkedElements) {
      assert && assert(potentiallyLinkedElement.isPhetioInstrumented());
      const toRemove = this.linkedElements.filter(linkedElement => linkedElement.element === potentiallyLinkedElement);
      toRemove.forEach(linkedElement => {
        linkedElement.dispose();
        js_arrayRemove(this.linkedElements, linkedElement);
      });
    }
  }

  /**
   * Performs cleanup after the sim's construction has finished.
   */
  onSimulationConstructionCompleted() {
    // deletes the phetioBaselineMetadata, as it's no longer needed since validation is complete.
    this.phetioBaselineMetadata = null;
  }

  /**
   * Remove this phetioObject from PhET-iO. After disposal, this object is no longer interoperable. Also release any
   * other references created during its lifetime.
   */
  dispose() {
    const descendants = [];
    if (js_Tandem.PHET_IO_ENABLED && this.tandem.supplied) {
      const phetioEngine = phet.phetio.phetioEngine;
      this.tandem.iterateDescendants(tandem => {
        if (phetioEngine.hasPhetioObject(tandem.phetioID)) {
          descendants.push(phetioEngine.getPhetioObject(tandem.phetioID));
        }
      });
    }

    // In order to support the structured data stream, PhetioObjects must end the messages in the correct
    // sequence, without being interrupted by dispose() calls.  Therefore, we do not clear out any of the state
    // related to the endEvent.  Note this means it is acceptable (and expected) for endEvent() to be called on
    // disposed PhetioObjects.
    //
    // The phetioEvent stack should resolve by the next frame, so that's when we check it.
    assert && js_animationFrameTimer.runOnNextTick(() => {
      // Uninstrumented PhetioObjects don't have a phetioMessageStack attribute.
      assert && assert(!this.hasOwnProperty('phetioMessageStack') || this.phetioMessageStack.length === 0, 'phetioMessageStack should be clear');
      descendants.forEach(descendant => {
        assert && assert(descendant.isDisposed, `All descendants must be disposed by the next frame: ${descendant.tandem.phetioID}`);
      });
    });

    // Detach from listeners and dispose the corresponding tandem. This must happen in PhET-iO brand and PhET brand
    // because in PhET brand, PhetioDynamicElementContainer dynamic elements would memory leak tandems (parent tandems
    // would retain references to their children).
    this.tandem.removePhetioObject(this);

    // Dispose LinkedElements
    if (this.linkedElements) {
      this.linkedElements.forEach(linkedElement => linkedElement.dispose());
      this.linkedElements.length = 0;
    }
    super.dispose();
  }

  /**
   * JSONifiable metadata that describes the nature of the PhetioObject.  We must be able to read this
   * for baseline (before object fully constructed we use object) and after fully constructed
   * which includes overrides.
   * @param [object] - used to get metadata keys, can be a PhetioObject, or an options object
   *                          (see usage initializePhetioObject). If not provided, will instead use the value of "this"
   * @returns - metadata plucked from the passed in parameter
   */
  getMetadata(object) {
    object = object || this;
    const metadata = {
      phetioTypeName: object.phetioType.typeName,
      phetioDocumentation: object.phetioDocumentation,
      phetioState: object.phetioState,
      phetioReadOnly: object.phetioReadOnly,
      phetioEventType: js_EventType.phetioType.toStateObject(object.phetioEventType),
      phetioHighFrequency: object.phetioHighFrequency,
      phetioPlayback: object.phetioPlayback,
      phetioDynamicElement: object.phetioDynamicElement,
      phetioIsArchetype: object.phetioIsArchetype,
      phetioFeatured: object.phetioFeatured,
      phetioDesigned: object.phetioDesigned
    };
    if (object.phetioArchetypePhetioID) {
      metadata.phetioArchetypePhetioID = object.phetioArchetypePhetioID;
    }
    return metadata;
  }
  static create(options) {
    return new PhetioObject(options);
  }
}

/**
 * Determine if any of the options keys are intended for PhetioObject. Semantically equivalent to
 * _.intersection( _.keys( options ), _.keys( DEFAULTS) ).length>0 but implemented imperatively to avoid memory or
 * performance issues. Also handles options.tandem differently.
 */
const specifiesNonTandemPhetioObjectKey = options => {
  for (const key in options) {
    if (key !== 'tandem' && options.hasOwnProperty(key) && DEFAULTS.hasOwnProperty(key)) {
      return true;
    }
  }
  return false;
};
/**
 * Internal class to avoid cyclic dependencies.
 */
class LinkedElement extends PhetioObject {
  constructor(coreElement, providedOptions) {
    assert && assert(!!coreElement, 'coreElement should be defined');
    const options = optionize()({
      phetioType: js_LinkedElementIO,
      phetioState: true
    }, providedOptions);

    // References cannot be changed by PhET-iO
    assert && assert(!options.hasOwnProperty('phetioReadOnly'), 'phetioReadOnly set by LinkedElement');
    options.phetioReadOnly = true;

    // By default, this linked element's baseline value is the overridden value of the coreElement. This allows
    // the them to be in sync by default, but also allows the linked element to be overridden in studio.
    assert && assert(!options.hasOwnProperty('phetioFeatured'), 'phetioFeatured set by LinkedElement');
    options.phetioFeatured = coreElement.phetioFeatured;
    super(options);
    this.element = coreElement;
  }

  /**
   * LinkedElements listen to their core elements for phetioFeatured, so to avoid a dependency on overrides metadata
   * (when the core element's phetioFeatured is specified in the overrides file), ignore phetioFeatured for LinkedElements.
   * @param object - used to get metadata keys, can be a PhetioObject, or an options object
   *                          (see usage initializePhetioObject)
   * @returns - metadata plucked from the passed in parameter
   */
  getMetadata(object) {
    const phetioObjectMetadata = super.getMetadata(object);
    delete phetioObjectMetadata.phetioFeatured;
    return phetioObjectMetadata;
  }
}
tandemNamespace.register('PhetioObject', PhetioObject);

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/types/ArrayIO.js
// Copyright 2018-2022, University of Colorado Boulder

/**
 * IO Type for JS's built-in Array type.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Andrew Adare (PhET Interactive Simulations)
 */






// Cache each parameterized IOType so that it is only created once.
const ArrayIO_cache = new Map();

/**
 * Parametric IO Type constructor.  Given an element type, this function returns an appropriate array IO Type.
 * This caching implementation should be kept in sync with the other parametric IO Type caching implementations.
 */
const ArrayIO = parameterType => {
  assert && assert(!!parameterType, 'parameterType should be defined');
  if (!ArrayIO_cache.has(parameterType)) {
    ArrayIO_cache.set(parameterType, new IOType(`ArrayIO<${parameterType.typeName}>`, {
      valueType: Array,
      isValidValue: array => {
        return _.every(array, element => Validation.isValueValid(element, parameterType.validator));
      },
      parameterTypes: [parameterType],
      toStateObject: array => array.map(parameterType.toStateObject),
      fromStateObject: stateObject => stateObject.map(parameterType.fromStateObject),
      documentation: 'IO Type for the built-in JS array type, with the element type specified.',
      stateSchema: StateSchema.asValue(`Array<${parameterType.typeName}>`, {
        isValidValue: array => _.every(array, element => parameterType.isStateObjectValid(element))
      })
    }));
  }
  return ArrayIO_cache.get(parameterType);
};
tandemNamespace.register('ArrayIO', ArrayIO);
/* harmony default export */ const types_ArrayIO = (ArrayIO);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWYWxpZGF0aW9uIiwidGFuZGVtTmFtZXNwYWNlIiwiSU9UeXBlIiwiU3RhdGVTY2hlbWEiLCJjYWNoZSIsIk1hcCIsIkFycmF5SU8iLCJwYXJhbWV0ZXJUeXBlIiwiYXNzZXJ0IiwiaGFzIiwic2V0IiwidHlwZU5hbWUiLCJ2YWx1ZVR5cGUiLCJBcnJheSIsImlzVmFsaWRWYWx1ZSIsImFycmF5IiwiXyIsImV2ZXJ5IiwiZWxlbWVudCIsImlzVmFsdWVWYWxpZCIsInZhbGlkYXRvciIsInBhcmFtZXRlclR5cGVzIiwidG9TdGF0ZU9iamVjdCIsIm1hcCIsImZyb21TdGF0ZU9iamVjdCIsInN0YXRlT2JqZWN0IiwiZG9jdW1lbnRhdGlvbiIsInN0YXRlU2NoZW1hIiwiYXNWYWx1ZSIsImlzU3RhdGVPYmplY3RWYWxpZCIsImdldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQXJyYXlJTy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBJTyBUeXBlIGZvciBKUydzIGJ1aWx0LWluIEFycmF5IHR5cGUuXG4gKlxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqIEBhdXRob3IgQW5kcmV3IEFkYXJlIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5cbmltcG9ydCBWYWxpZGF0aW9uIGZyb20gJy4uLy4uLy4uL2F4b24vanMvVmFsaWRhdGlvbi5qcyc7XG5pbXBvcnQgdGFuZGVtTmFtZXNwYWNlIGZyb20gJy4uL3RhbmRlbU5hbWVzcGFjZS5qcyc7XG5pbXBvcnQgSU9UeXBlIGZyb20gJy4vSU9UeXBlLmpzJztcbmltcG9ydCBTdGF0ZVNjaGVtYSBmcm9tICcuL1N0YXRlU2NoZW1hLmpzJztcblxuLy8gQ2FjaGUgZWFjaCBwYXJhbWV0ZXJpemVkIElPVHlwZSBzbyB0aGF0IGl0IGlzIG9ubHkgY3JlYXRlZCBvbmNlLlxuY29uc3QgY2FjaGUgPSBuZXcgTWFwPElPVHlwZSwgSU9UeXBlPigpO1xuXG4vKipcbiAqIFBhcmFtZXRyaWMgSU8gVHlwZSBjb25zdHJ1Y3Rvci4gIEdpdmVuIGFuIGVsZW1lbnQgdHlwZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIGFuIGFwcHJvcHJpYXRlIGFycmF5IElPIFR5cGUuXG4gKiBUaGlzIGNhY2hpbmcgaW1wbGVtZW50YXRpb24gc2hvdWxkIGJlIGtlcHQgaW4gc3luYyB3aXRoIHRoZSBvdGhlciBwYXJhbWV0cmljIElPIFR5cGUgY2FjaGluZyBpbXBsZW1lbnRhdGlvbnMuXG4gKi9cbmNvbnN0IEFycmF5SU8gPSA8UGFyYW1ldGVyVHlwZSwgUGFyYW1ldGVyU3RhdGVUeXBlPiggcGFyYW1ldGVyVHlwZTogSU9UeXBlPFBhcmFtZXRlclR5cGUsIFBhcmFtZXRlclN0YXRlVHlwZT4gKTogSU9UeXBlPFBhcmFtZXRlclR5cGVbXSwgUGFyYW1ldGVyU3RhdGVUeXBlW10+ID0+IHtcbiAgYXNzZXJ0ICYmIGFzc2VydCggISFwYXJhbWV0ZXJUeXBlLCAncGFyYW1ldGVyVHlwZSBzaG91bGQgYmUgZGVmaW5lZCcgKTtcbiAgaWYgKCAhY2FjaGUuaGFzKCBwYXJhbWV0ZXJUeXBlICkgKSB7XG4gICAgY2FjaGUuc2V0KCBwYXJhbWV0ZXJUeXBlLCBuZXcgSU9UeXBlPFBhcmFtZXRlclR5cGVbXSwgUGFyYW1ldGVyU3RhdGVUeXBlW10+KCBgQXJyYXlJTzwke3BhcmFtZXRlclR5cGUudHlwZU5hbWV9PmAsIHtcbiAgICAgIHZhbHVlVHlwZTogQXJyYXksXG4gICAgICBpc1ZhbGlkVmFsdWU6IGFycmF5ID0+IHtcbiAgICAgICAgcmV0dXJuIF8uZXZlcnkoIGFycmF5LCBlbGVtZW50ID0+IFZhbGlkYXRpb24uaXNWYWx1ZVZhbGlkKCBlbGVtZW50LCBwYXJhbWV0ZXJUeXBlLnZhbGlkYXRvciApICk7XG4gICAgICB9LFxuICAgICAgcGFyYW1ldGVyVHlwZXM6IFsgcGFyYW1ldGVyVHlwZSBdLFxuICAgICAgdG9TdGF0ZU9iamVjdDogYXJyYXkgPT4gYXJyYXkubWFwKCBwYXJhbWV0ZXJUeXBlLnRvU3RhdGVPYmplY3QgKSxcbiAgICAgIGZyb21TdGF0ZU9iamVjdDogc3RhdGVPYmplY3QgPT4gc3RhdGVPYmplY3QubWFwKCBwYXJhbWV0ZXJUeXBlLmZyb21TdGF0ZU9iamVjdCApLFxuICAgICAgZG9jdW1lbnRhdGlvbjogJ0lPIFR5cGUgZm9yIHRoZSBidWlsdC1pbiBKUyBhcnJheSB0eXBlLCB3aXRoIHRoZSBlbGVtZW50IHR5cGUgc3BlY2lmaWVkLicsXG4gICAgICBzdGF0ZVNjaGVtYTogU3RhdGVTY2hlbWEuYXNWYWx1ZSggYEFycmF5PCR7cGFyYW1ldGVyVHlwZS50eXBlTmFtZX0+YCwge1xuICAgICAgICBpc1ZhbGlkVmFsdWU6IGFycmF5ID0+IF8uZXZlcnkoIGFycmF5LCBlbGVtZW50ID0+IHBhcmFtZXRlclR5cGUuaXNTdGF0ZU9iamVjdFZhbGlkKCBlbGVtZW50ICkgKVxuICAgICAgfSApXG4gICAgfSApICk7XG4gIH1cblxuICByZXR1cm4gY2FjaGUuZ2V0KCBwYXJhbWV0ZXJUeXBlICkhO1xufTtcblxudGFuZGVtTmFtZXNwYWNlLnJlZ2lzdGVyKCAnQXJyYXlJTycsIEFycmF5SU8gKTtcbmV4cG9ydCBkZWZhdWx0IEFycmF5SU87Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLGdDQUFnQztBQUN2RCxPQUFPQyxlQUFlLE1BQU0sdUJBQXVCO0FBQ25ELE9BQU9DLE1BQU0sTUFBTSxhQUFhO0FBQ2hDLE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7O0FBRTFDO0FBQ0EsTUFBTUMsS0FBSyxHQUFHLElBQUlDLEdBQUcsRUFBa0I7O0FBRXZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsT0FBTyxHQUF3Q0MsYUFBd0QsSUFBcUQ7RUFDaEtDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUMsQ0FBQ0QsYUFBYSxFQUFFLGlDQUFpQyxDQUFFO0VBQ3RFLElBQUssQ0FBQ0gsS0FBSyxDQUFDSyxHQUFHLENBQUVGLGFBQWEsQ0FBRSxFQUFHO0lBQ2pDSCxLQUFLLENBQUNNLEdBQUcsQ0FBRUgsYUFBYSxFQUFFLElBQUlMLE1BQU0sQ0FBMEMsV0FBVUssYUFBYSxDQUFDSSxRQUFTLEdBQUUsRUFBRTtNQUNqSEMsU0FBUyxFQUFFQyxLQUFLO01BQ2hCQyxZQUFZLEVBQUVDLEtBQUssSUFBSTtRQUNyQixPQUFPQyxDQUFDLENBQUNDLEtBQUssQ0FBRUYsS0FBSyxFQUFFRyxPQUFPLElBQUlsQixVQUFVLENBQUNtQixZQUFZLENBQUVELE9BQU8sRUFBRVgsYUFBYSxDQUFDYSxTQUFTLENBQUUsQ0FBRTtNQUNqRyxDQUFDO01BQ0RDLGNBQWMsRUFBRSxDQUFFZCxhQUFhLENBQUU7TUFDakNlLGFBQWEsRUFBRVAsS0FBSyxJQUFJQSxLQUFLLENBQUNRLEdBQUcsQ0FBRWhCLGFBQWEsQ0FBQ2UsYUFBYSxDQUFFO01BQ2hFRSxlQUFlLEVBQUVDLFdBQVcsSUFBSUEsV0FBVyxDQUFDRixHQUFHLENBQUVoQixhQUFhLENBQUNpQixlQUFlLENBQUU7TUFDaEZFLGFBQWEsRUFBRSwwRUFBMEU7TUFDekZDLFdBQVcsRUFBRXhCLFdBQVcsQ0FBQ3lCLE9BQU8sQ0FBRyxTQUFRckIsYUFBYSxDQUFDSSxRQUFTLEdBQUUsRUFBRTtRQUNwRUcsWUFBWSxFQUFFQyxLQUFLLElBQUlDLENBQUMsQ0FBQ0MsS0FBSyxDQUFFRixLQUFLLEVBQUVHLE9BQU8sSUFBSVgsYUFBYSxDQUFDc0Isa0JBQWtCLENBQUVYLE9BQU8sQ0FBRTtNQUMvRixDQUFDO0lBQ0gsQ0FBQyxDQUFFLENBQUU7RUFDUDtFQUVBLE9BQU9kLEtBQUssQ0FBQzBCLEdBQUcsQ0FBRXZCLGFBQWEsQ0FBRTtBQUNuQyxDQUFDO0FBRUROLGVBQWUsQ0FBQzhCLFFBQVEsQ0FBRSxTQUFTLEVBQUV6QixPQUFPLENBQUU7QUFDOUMsZUFBZUEsT0FBTyJ9
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/types/FunctionIO.js
// Copyright 2018-2022, University of Colorado Boulder

/**
 * IO Type for JS's built-in function type.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Andrew Adare (PhET Interactive Simulations)
 */




// cache each parameterized IOType so that it is only created once
const FunctionIO_cache = new Map();

/**
 * Parametric IO Type constructor--given return type and parameter types, this function returns a type wrapped IO Type for
 * that "class" of functions. "Class" here refers to the supported parameter and return IO Types.
 * This caching implementation should be kept in sync with the other parametric IO Type caching implementations.
 * @param returnType - IO Type of the return type of the function that can support cross-frame serialization
 * @param functionParameterTypes - IO Types for the individual arguments of the function.
 */
const FunctionIO = (returnType, functionParameterTypes) => {
  for (let i = 0; i < functionParameterTypes.length; i++) {
    assert && assert(functionParameterTypes[i], 'parameter type was not truthy');
  }
  assert && assert(returnType, 'return type was not truthy');

  // REVIEW https://github.com/phetsims/tandem/issues/169 Why is this different than the typeName later in this file?
  const cacheKey = `${returnType.typeName}.${functionParameterTypes.map(type => type.typeName).join(',')}`;
  if (!FunctionIO_cache.has(cacheKey)) {
    // gather a list of argument names for the documentation string
    let argsString = functionParameterTypes.map(parameterType => parameterType.typeName).join(', ');
    if (argsString === '') {
      argsString = 'none';
    }
    const parameterTypesString = functionParameterTypes.map(parameterType => parameterType.typeName).join(',');
    FunctionIO_cache.set(cacheKey, new IOType(`FunctionIO(${parameterTypesString})=>${returnType.typeName}`, {
      valueType: 'function',
      isFunctionType: true,
      // These are the parameters to this FunctionIO, not to the function it wraps. That is why it includes the return type.
      // NOTE: the order is very important, for instance phetioCommandProcessor relies on the parameters being before
      // the return type.  If we decide this is too brittle, perhaps we should subclass IOType to FunctionIOType, and it
      // can track its functionParameterTypes separately from the returnType.
      parameterTypes: functionParameterTypes.concat([returnType]),
      documentation: `${'Wrapper for the built-in JS function type.<br>' + '<strong>Arguments:</strong> '}${argsString}<br>` + `<strong>Return Type:</strong> ${returnType.typeName}`
    }));
  }
  return FunctionIO_cache.get(cacheKey);
};
tandemNamespace.register('FunctionIO', FunctionIO);
/* harmony default export */ const types_FunctionIO = (FunctionIO);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0YW5kZW1OYW1lc3BhY2UiLCJJT1R5cGUiLCJjYWNoZSIsIk1hcCIsIkZ1bmN0aW9uSU8iLCJyZXR1cm5UeXBlIiwiZnVuY3Rpb25QYXJhbWV0ZXJUeXBlcyIsImkiLCJsZW5ndGgiLCJhc3NlcnQiLCJjYWNoZUtleSIsInR5cGVOYW1lIiwibWFwIiwidHlwZSIsImpvaW4iLCJoYXMiLCJhcmdzU3RyaW5nIiwicGFyYW1ldGVyVHlwZSIsInBhcmFtZXRlclR5cGVzU3RyaW5nIiwic2V0IiwidmFsdWVUeXBlIiwiaXNGdW5jdGlvblR5cGUiLCJwYXJhbWV0ZXJUeXBlcyIsImNvbmNhdCIsImRvY3VtZW50YXRpb24iLCJnZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkZ1bmN0aW9uSU8udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogSU8gVHlwZSBmb3IgSlMncyBidWlsdC1pbiBmdW5jdGlvbiB0eXBlLlxuICpcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKiBAYXV0aG9yIEFuZHJldyBBZGFyZSAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5pbXBvcnQgdGFuZGVtTmFtZXNwYWNlIGZyb20gJy4uL3RhbmRlbU5hbWVzcGFjZS5qcyc7XG5pbXBvcnQgSU9UeXBlIGZyb20gJy4vSU9UeXBlLmpzJztcblxuXG4vLyBjYWNoZSBlYWNoIHBhcmFtZXRlcml6ZWQgSU9UeXBlIHNvIHRoYXQgaXQgaXMgb25seSBjcmVhdGVkIG9uY2VcbmNvbnN0IGNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIElPVHlwZT4oKTtcblxuLyoqXG4gKiBQYXJhbWV0cmljIElPIFR5cGUgY29uc3RydWN0b3ItLWdpdmVuIHJldHVybiB0eXBlIGFuZCBwYXJhbWV0ZXIgdHlwZXMsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHR5cGUgd3JhcHBlZCBJTyBUeXBlIGZvclxuICogdGhhdCBcImNsYXNzXCIgb2YgZnVuY3Rpb25zLiBcIkNsYXNzXCIgaGVyZSByZWZlcnMgdG8gdGhlIHN1cHBvcnRlZCBwYXJhbWV0ZXIgYW5kIHJldHVybiBJTyBUeXBlcy5cbiAqIFRoaXMgY2FjaGluZyBpbXBsZW1lbnRhdGlvbiBzaG91bGQgYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlIG90aGVyIHBhcmFtZXRyaWMgSU8gVHlwZSBjYWNoaW5nIGltcGxlbWVudGF0aW9ucy5cbiAqIEBwYXJhbSByZXR1cm5UeXBlIC0gSU8gVHlwZSBvZiB0aGUgcmV0dXJuIHR5cGUgb2YgdGhlIGZ1bmN0aW9uIHRoYXQgY2FuIHN1cHBvcnQgY3Jvc3MtZnJhbWUgc2VyaWFsaXphdGlvblxuICogQHBhcmFtIGZ1bmN0aW9uUGFyYW1ldGVyVHlwZXMgLSBJTyBUeXBlcyBmb3IgdGhlIGluZGl2aWR1YWwgYXJndW1lbnRzIG9mIHRoZSBmdW5jdGlvbi5cbiAqL1xuY29uc3QgRnVuY3Rpb25JTyA9ICggcmV0dXJuVHlwZTogSU9UeXBlLCBmdW5jdGlvblBhcmFtZXRlclR5cGVzOiBJT1R5cGVbXSApOiBJT1R5cGUgPT4ge1xuICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBmdW5jdGlvblBhcmFtZXRlclR5cGVzLmxlbmd0aDsgaSsrICkge1xuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZ1bmN0aW9uUGFyYW1ldGVyVHlwZXNbIGkgXSwgJ3BhcmFtZXRlciB0eXBlIHdhcyBub3QgdHJ1dGh5JyApO1xuICB9XG4gIGFzc2VydCAmJiBhc3NlcnQoIHJldHVyblR5cGUsICdyZXR1cm4gdHlwZSB3YXMgbm90IHRydXRoeScgKTtcblxuICAvLyBSRVZJRVcgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3RhbmRlbS9pc3N1ZXMvMTY5IFdoeSBpcyB0aGlzIGRpZmZlcmVudCB0aGFuIHRoZSB0eXBlTmFtZSBsYXRlciBpbiB0aGlzIGZpbGU/XG4gIGNvbnN0IGNhY2hlS2V5ID0gYCR7cmV0dXJuVHlwZS50eXBlTmFtZX0uJHtmdW5jdGlvblBhcmFtZXRlclR5cGVzLm1hcCggdHlwZSA9PiB0eXBlLnR5cGVOYW1lICkuam9pbiggJywnICl9YDtcblxuICBpZiAoICFjYWNoZS5oYXMoIGNhY2hlS2V5ICkgKSB7XG5cbiAgICAvLyBnYXRoZXIgYSBsaXN0IG9mIGFyZ3VtZW50IG5hbWVzIGZvciB0aGUgZG9jdW1lbnRhdGlvbiBzdHJpbmdcbiAgICBsZXQgYXJnc1N0cmluZyA9IGZ1bmN0aW9uUGFyYW1ldGVyVHlwZXMubWFwKCBwYXJhbWV0ZXJUeXBlID0+IHBhcmFtZXRlclR5cGUudHlwZU5hbWUgKS5qb2luKCAnLCAnICk7XG4gICAgaWYgKCBhcmdzU3RyaW5nID09PSAnJyApIHtcbiAgICAgIGFyZ3NTdHJpbmcgPSAnbm9uZSc7XG4gICAgfVxuICAgIGNvbnN0IHBhcmFtZXRlclR5cGVzU3RyaW5nID0gZnVuY3Rpb25QYXJhbWV0ZXJUeXBlcy5tYXAoIHBhcmFtZXRlclR5cGUgPT4gcGFyYW1ldGVyVHlwZS50eXBlTmFtZSApLmpvaW4oICcsJyApO1xuXG4gICAgY2FjaGUuc2V0KCBjYWNoZUtleSwgbmV3IElPVHlwZSggYEZ1bmN0aW9uSU8oJHtwYXJhbWV0ZXJUeXBlc1N0cmluZ30pPT4ke3JldHVyblR5cGUudHlwZU5hbWV9YCwge1xuICAgICAgdmFsdWVUeXBlOiAnZnVuY3Rpb24nLFxuXG4gICAgICBpc0Z1bmN0aW9uVHlwZTogdHJ1ZSxcblxuICAgICAgLy8gVGhlc2UgYXJlIHRoZSBwYXJhbWV0ZXJzIHRvIHRoaXMgRnVuY3Rpb25JTywgbm90IHRvIHRoZSBmdW5jdGlvbiBpdCB3cmFwcy4gVGhhdCBpcyB3aHkgaXQgaW5jbHVkZXMgdGhlIHJldHVybiB0eXBlLlxuICAgICAgLy8gTk9URTogdGhlIG9yZGVyIGlzIHZlcnkgaW1wb3J0YW50LCBmb3IgaW5zdGFuY2UgcGhldGlvQ29tbWFuZFByb2Nlc3NvciByZWxpZXMgb24gdGhlIHBhcmFtZXRlcnMgYmVpbmcgYmVmb3JlXG4gICAgICAvLyB0aGUgcmV0dXJuIHR5cGUuICBJZiB3ZSBkZWNpZGUgdGhpcyBpcyB0b28gYnJpdHRsZSwgcGVyaGFwcyB3ZSBzaG91bGQgc3ViY2xhc3MgSU9UeXBlIHRvIEZ1bmN0aW9uSU9UeXBlLCBhbmQgaXRcbiAgICAgIC8vIGNhbiB0cmFjayBpdHMgZnVuY3Rpb25QYXJhbWV0ZXJUeXBlcyBzZXBhcmF0ZWx5IGZyb20gdGhlIHJldHVyblR5cGUuXG4gICAgICBwYXJhbWV0ZXJUeXBlczogZnVuY3Rpb25QYXJhbWV0ZXJUeXBlcy5jb25jYXQoIFsgcmV0dXJuVHlwZSBdICksXG4gICAgICBkb2N1bWVudGF0aW9uOiBgJHsnV3JhcHBlciBmb3IgdGhlIGJ1aWx0LWluIEpTIGZ1bmN0aW9uIHR5cGUuPGJyPicgK1xuICAgICAgICAgICAgICAgICAgICAgJzxzdHJvbmc+QXJndW1lbnRzOjwvc3Ryb25nPiAnfSR7YXJnc1N0cmluZ308YnI+YCArXG4gICAgICAgICAgICAgICAgICAgICBgPHN0cm9uZz5SZXR1cm4gVHlwZTo8L3N0cm9uZz4gJHtyZXR1cm5UeXBlLnR5cGVOYW1lfWBcbiAgICB9ICkgKTtcbiAgfVxuXG4gIHJldHVybiBjYWNoZS5nZXQoIGNhY2hlS2V5ICkhO1xufTtcblxudGFuZGVtTmFtZXNwYWNlLnJlZ2lzdGVyKCAnRnVuY3Rpb25JTycsIEZ1bmN0aW9uSU8gKTtcbmV4cG9ydCBkZWZhdWx0IEZ1bmN0aW9uSU87Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHVCQUF1QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sYUFBYTs7QUFHaEM7QUFDQSxNQUFNQyxLQUFLLEdBQUcsSUFBSUMsR0FBRyxFQUFrQjs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyxVQUFVLEdBQUdBLENBQUVDLFVBQWtCLEVBQUVDLHNCQUFnQyxLQUFjO0VBQ3JGLEtBQU0sSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHRCxzQkFBc0IsQ0FBQ0UsTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRztJQUN4REUsTUFBTSxJQUFJQSxNQUFNLENBQUVILHNCQUFzQixDQUFFQyxDQUFDLENBQUUsRUFBRSwrQkFBK0IsQ0FBRTtFQUNsRjtFQUNBRSxNQUFNLElBQUlBLE1BQU0sQ0FBRUosVUFBVSxFQUFFLDRCQUE0QixDQUFFOztFQUU1RDtFQUNBLE1BQU1LLFFBQVEsR0FBSSxHQUFFTCxVQUFVLENBQUNNLFFBQVMsSUFBR0wsc0JBQXNCLENBQUNNLEdBQUcsQ0FBRUMsSUFBSSxJQUFJQSxJQUFJLENBQUNGLFFBQVEsQ0FBRSxDQUFDRyxJQUFJLENBQUUsR0FBRyxDQUFHLEVBQUM7RUFFNUcsSUFBSyxDQUFDWixLQUFLLENBQUNhLEdBQUcsQ0FBRUwsUUFBUSxDQUFFLEVBQUc7SUFFNUI7SUFDQSxJQUFJTSxVQUFVLEdBQUdWLHNCQUFzQixDQUFDTSxHQUFHLENBQUVLLGFBQWEsSUFBSUEsYUFBYSxDQUFDTixRQUFRLENBQUUsQ0FBQ0csSUFBSSxDQUFFLElBQUksQ0FBRTtJQUNuRyxJQUFLRSxVQUFVLEtBQUssRUFBRSxFQUFHO01BQ3ZCQSxVQUFVLEdBQUcsTUFBTTtJQUNyQjtJQUNBLE1BQU1FLG9CQUFvQixHQUFHWixzQkFBc0IsQ0FBQ00sR0FBRyxDQUFFSyxhQUFhLElBQUlBLGFBQWEsQ0FBQ04sUUFBUSxDQUFFLENBQUNHLElBQUksQ0FBRSxHQUFHLENBQUU7SUFFOUdaLEtBQUssQ0FBQ2lCLEdBQUcsQ0FBRVQsUUFBUSxFQUFFLElBQUlULE1BQU0sQ0FBRyxjQUFhaUIsb0JBQXFCLE1BQUtiLFVBQVUsQ0FBQ00sUUFBUyxFQUFDLEVBQUU7TUFDOUZTLFNBQVMsRUFBRSxVQUFVO01BRXJCQyxjQUFjLEVBQUUsSUFBSTtNQUVwQjtNQUNBO01BQ0E7TUFDQTtNQUNBQyxjQUFjLEVBQUVoQixzQkFBc0IsQ0FBQ2lCLE1BQU0sQ0FBRSxDQUFFbEIsVUFBVSxDQUFFLENBQUU7TUFDL0RtQixhQUFhLEVBQUcsR0FBRSxnREFBZ0QsR0FDbkQsOEJBQStCLEdBQUVSLFVBQVcsTUFBSyxHQUNoRCxpQ0FBZ0NYLFVBQVUsQ0FBQ00sUUFBUztJQUN0RSxDQUFDLENBQUUsQ0FBRTtFQUNQO0VBRUEsT0FBT1QsS0FBSyxDQUFDdUIsR0FBRyxDQUFFZixRQUFRLENBQUU7QUFDOUIsQ0FBQztBQUVEVixlQUFlLENBQUMwQixRQUFRLENBQUUsWUFBWSxFQUFFdEIsVUFBVSxDQUFFO0FBQ3BELGVBQWVBLFVBQVUifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/types/NullableIO.js
// Copyright 2018-2022, University of Colorado Boulder

/**
 * Parametric IO Type that adds support for null values in toStateObject/fromStateObject. This type is to
 * prevent the propagation of null handling, mainly in to/fromStateObject, in each type. This also makes null
 * explicit for phet-io.
 *
 * Sample usage:
 *
 *  this.ageProperty = new Property( null, {
 *    tandem: tandem.createTandem( 'ageProperty' ),
 *    phetioValueType: NullableIO( NumberIO ) // signifies that the Property can be Number or null
 * } );
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */






// Cache each parameterized IOType so that it is only created once
const NullableIO_cache = new Map();
const NullableIO = parameterType => {
  assert && assert(parameterType, 'NullableIO needs parameterType');
  if (!NullableIO_cache.has(parameterType)) {
    NullableIO_cache.set(parameterType, new IOType(`NullableIO<${parameterType.typeName}>`, {
      documentation: 'An IOType adding support for null in addition to the behavior of its parameter.',
      isValidValue: instance => instance === null || Validation.isValueValid(instance, parameterType.validator),
      parameterTypes: [parameterType],
      // If the argument is null, returns null. Otherwise, converts the instance to a state object for serialization.
      toStateObject: instance => instance === null ? null : parameterType.toStateObject(instance),
      // If the argument is null, returns null. Otherwise, converts a state object to an instance of the underlying type.
      fromStateObject: stateObject => stateObject === null ? null : parameterType.fromStateObject(stateObject),
      stateSchema: StateSchema.asValue(`null|<${parameterType.typeName}>`, {
        isValidValue: value => value === null || parameterType.isStateObjectValid(value)
      })
    }));
  }
  return NullableIO_cache.get(parameterType);
};
tandemNamespace.register('NullableIO', NullableIO);
/* harmony default export */ const types_NullableIO = (NullableIO);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWYWxpZGF0aW9uIiwidGFuZGVtTmFtZXNwYWNlIiwiSU9UeXBlIiwiU3RhdGVTY2hlbWEiLCJjYWNoZSIsIk1hcCIsIk51bGxhYmxlSU8iLCJwYXJhbWV0ZXJUeXBlIiwiYXNzZXJ0IiwiaGFzIiwic2V0IiwidHlwZU5hbWUiLCJkb2N1bWVudGF0aW9uIiwiaXNWYWxpZFZhbHVlIiwiaW5zdGFuY2UiLCJpc1ZhbHVlVmFsaWQiLCJ2YWxpZGF0b3IiLCJwYXJhbWV0ZXJUeXBlcyIsInRvU3RhdGVPYmplY3QiLCJmcm9tU3RhdGVPYmplY3QiLCJzdGF0ZU9iamVjdCIsInN0YXRlU2NoZW1hIiwiYXNWYWx1ZSIsInZhbHVlIiwiaXNTdGF0ZU9iamVjdFZhbGlkIiwiZ2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJOdWxsYWJsZUlPLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIFBhcmFtZXRyaWMgSU8gVHlwZSB0aGF0IGFkZHMgc3VwcG9ydCBmb3IgbnVsbCB2YWx1ZXMgaW4gdG9TdGF0ZU9iamVjdC9mcm9tU3RhdGVPYmplY3QuIFRoaXMgdHlwZSBpcyB0b1xuICogcHJldmVudCB0aGUgcHJvcGFnYXRpb24gb2YgbnVsbCBoYW5kbGluZywgbWFpbmx5IGluIHRvL2Zyb21TdGF0ZU9iamVjdCwgaW4gZWFjaCB0eXBlLiBUaGlzIGFsc28gbWFrZXMgbnVsbFxuICogZXhwbGljaXQgZm9yIHBoZXQtaW8uXG4gKlxuICogU2FtcGxlIHVzYWdlOlxuICpcbiAqICB0aGlzLmFnZVByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCBudWxsLCB7XG4gKiAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdhZ2VQcm9wZXJ0eScgKSxcbiAqICAgIHBoZXRpb1ZhbHVlVHlwZTogTnVsbGFibGVJTyggTnVtYmVySU8gKSAvLyBzaWduaWZpZXMgdGhhdCB0aGUgUHJvcGVydHkgY2FuIGJlIE51bWJlciBvciBudWxsXG4gKiB9ICk7XG4gKlxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5pbXBvcnQgVmFsaWRhdGlvbiBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1ZhbGlkYXRpb24uanMnO1xuaW1wb3J0IHRhbmRlbU5hbWVzcGFjZSBmcm9tICcuLi90YW5kZW1OYW1lc3BhY2UuanMnO1xuaW1wb3J0IElPVHlwZSBmcm9tICcuL0lPVHlwZS5qcyc7XG5pbXBvcnQgU3RhdGVTY2hlbWEgZnJvbSAnLi9TdGF0ZVNjaGVtYS5qcyc7XG5cbi8vIENhY2hlIGVhY2ggcGFyYW1ldGVyaXplZCBJT1R5cGUgc28gdGhhdCBpdCBpcyBvbmx5IGNyZWF0ZWQgb25jZVxuY29uc3QgY2FjaGUgPSBuZXcgTWFwPElPVHlwZSwgSU9UeXBlPigpO1xuXG5jb25zdCBOdWxsYWJsZUlPID0gPFBhcmFtZXRlclR5cGUsIFBhcmFtZXRlclN0YXRlVHlwZT4oIHBhcmFtZXRlclR5cGU6IElPVHlwZTxQYXJhbWV0ZXJUeXBlLCBQYXJhbWV0ZXJTdGF0ZVR5cGU+ICk6IElPVHlwZSA9PiB7XG5cbiAgYXNzZXJ0ICYmIGFzc2VydCggcGFyYW1ldGVyVHlwZSwgJ051bGxhYmxlSU8gbmVlZHMgcGFyYW1ldGVyVHlwZScgKTtcblxuICBpZiAoICFjYWNoZS5oYXMoIHBhcmFtZXRlclR5cGUgKSApIHtcbiAgICBjYWNoZS5zZXQoIHBhcmFtZXRlclR5cGUsIG5ldyBJT1R5cGU8UGFyYW1ldGVyVHlwZSB8IG51bGwsIFBhcmFtZXRlclN0YXRlVHlwZSB8IG51bGw+KCBgTnVsbGFibGVJTzwke3BhcmFtZXRlclR5cGUudHlwZU5hbWV9PmAsIHtcbiAgICAgIGRvY3VtZW50YXRpb246ICdBbiBJT1R5cGUgYWRkaW5nIHN1cHBvcnQgZm9yIG51bGwgaW4gYWRkaXRpb24gdG8gdGhlIGJlaGF2aW9yIG9mIGl0cyBwYXJhbWV0ZXIuJyxcbiAgICAgIGlzVmFsaWRWYWx1ZTogaW5zdGFuY2UgPT4gaW5zdGFuY2UgPT09IG51bGwgfHwgVmFsaWRhdGlvbi5pc1ZhbHVlVmFsaWQoIGluc3RhbmNlLCBwYXJhbWV0ZXJUeXBlLnZhbGlkYXRvciApLFxuICAgICAgcGFyYW1ldGVyVHlwZXM6IFsgcGFyYW1ldGVyVHlwZSBdLFxuXG4gICAgICAvLyBJZiB0aGUgYXJndW1lbnQgaXMgbnVsbCwgcmV0dXJucyBudWxsLiBPdGhlcndpc2UsIGNvbnZlcnRzIHRoZSBpbnN0YW5jZSB0byBhIHN0YXRlIG9iamVjdCBmb3Igc2VyaWFsaXphdGlvbi5cbiAgICAgIHRvU3RhdGVPYmplY3Q6IGluc3RhbmNlID0+IGluc3RhbmNlID09PSBudWxsID8gbnVsbCA6IHBhcmFtZXRlclR5cGUudG9TdGF0ZU9iamVjdCggaW5zdGFuY2UgKSxcblxuICAgICAgLy8gSWYgdGhlIGFyZ3VtZW50IGlzIG51bGwsIHJldHVybnMgbnVsbC4gT3RoZXJ3aXNlLCBjb252ZXJ0cyBhIHN0YXRlIG9iamVjdCB0byBhbiBpbnN0YW5jZSBvZiB0aGUgdW5kZXJseWluZyB0eXBlLlxuICAgICAgZnJvbVN0YXRlT2JqZWN0OiBzdGF0ZU9iamVjdCA9PiBzdGF0ZU9iamVjdCA9PT0gbnVsbCA/IG51bGwgOiBwYXJhbWV0ZXJUeXBlLmZyb21TdGF0ZU9iamVjdCggc3RhdGVPYmplY3QgKSxcbiAgICAgIHN0YXRlU2NoZW1hOiBTdGF0ZVNjaGVtYS5hc1ZhbHVlKCBgbnVsbHw8JHtwYXJhbWV0ZXJUeXBlLnR5cGVOYW1lfT5gLCB7XG4gICAgICAgICAgaXNWYWxpZFZhbHVlOiB2YWx1ZSA9PiB2YWx1ZSA9PT0gbnVsbCB8fCBwYXJhbWV0ZXJUeXBlLmlzU3RhdGVPYmplY3RWYWxpZCggdmFsdWUgKVxuICAgICAgICB9XG4gICAgICApXG4gICAgfSApICk7XG4gIH1cblxuICByZXR1cm4gY2FjaGUuZ2V0KCBwYXJhbWV0ZXJUeXBlICkhO1xufTtcblxudGFuZGVtTmFtZXNwYWNlLnJlZ2lzdGVyKCAnTnVsbGFibGVJTycsIE51bGxhYmxlSU8gKTtcbmV4cG9ydCBkZWZhdWx0IE51bGxhYmxlSU87Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLGdDQUFnQztBQUN2RCxPQUFPQyxlQUFlLE1BQU0sdUJBQXVCO0FBQ25ELE9BQU9DLE1BQU0sTUFBTSxhQUFhO0FBQ2hDLE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7O0FBRTFDO0FBQ0EsTUFBTUMsS0FBSyxHQUFHLElBQUlDLEdBQUcsRUFBa0I7QUFFdkMsTUFBTUMsVUFBVSxHQUF3Q0MsYUFBd0QsSUFBYztFQUU1SEMsTUFBTSxJQUFJQSxNQUFNLENBQUVELGFBQWEsRUFBRSxnQ0FBZ0MsQ0FBRTtFQUVuRSxJQUFLLENBQUNILEtBQUssQ0FBQ0ssR0FBRyxDQUFFRixhQUFhLENBQUUsRUFBRztJQUNqQ0gsS0FBSyxDQUFDTSxHQUFHLENBQUVILGFBQWEsRUFBRSxJQUFJTCxNQUFNLENBQW9ELGNBQWFLLGFBQWEsQ0FBQ0ksUUFBUyxHQUFFLEVBQUU7TUFDOUhDLGFBQWEsRUFBRSxpRkFBaUY7TUFDaEdDLFlBQVksRUFBRUMsUUFBUSxJQUFJQSxRQUFRLEtBQUssSUFBSSxJQUFJZCxVQUFVLENBQUNlLFlBQVksQ0FBRUQsUUFBUSxFQUFFUCxhQUFhLENBQUNTLFNBQVMsQ0FBRTtNQUMzR0MsY0FBYyxFQUFFLENBQUVWLGFBQWEsQ0FBRTtNQUVqQztNQUNBVyxhQUFhLEVBQUVKLFFBQVEsSUFBSUEsUUFBUSxLQUFLLElBQUksR0FBRyxJQUFJLEdBQUdQLGFBQWEsQ0FBQ1csYUFBYSxDQUFFSixRQUFRLENBQUU7TUFFN0Y7TUFDQUssZUFBZSxFQUFFQyxXQUFXLElBQUlBLFdBQVcsS0FBSyxJQUFJLEdBQUcsSUFBSSxHQUFHYixhQUFhLENBQUNZLGVBQWUsQ0FBRUMsV0FBVyxDQUFFO01BQzFHQyxXQUFXLEVBQUVsQixXQUFXLENBQUNtQixPQUFPLENBQUcsU0FBUWYsYUFBYSxDQUFDSSxRQUFTLEdBQUUsRUFBRTtRQUNsRUUsWUFBWSxFQUFFVSxLQUFLLElBQUlBLEtBQUssS0FBSyxJQUFJLElBQUloQixhQUFhLENBQUNpQixrQkFBa0IsQ0FBRUQsS0FBSztNQUNsRixDQUFDO0lBRUwsQ0FBQyxDQUFFLENBQUU7RUFDUDtFQUVBLE9BQU9uQixLQUFLLENBQUNxQixHQUFHLENBQUVsQixhQUFhLENBQUU7QUFDbkMsQ0FBQztBQUVETixlQUFlLENBQUN5QixRQUFRLENBQUUsWUFBWSxFQUFFcEIsVUFBVSxDQUFFO0FBQ3BELGVBQWVBLFVBQVUifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/types/VoidIO.js
// Copyright 2018-2022, University of Colorado Boulder

/**
 * IO Type use to signify a function has no return value.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Andrew Adare (PhET Interactive Simulations)
 */




/**
 * We sometimes use VoidIO as a workaround to indicate that an argument is passed in the simulation side, but
 * that it shouldn't be leaked to the PhET-iO client.
 */
const VoidIO = new IOType('VoidIO', {
  isValidValue: () => true,
  documentation: 'Type for which there is no instance, usually to mark functions without a return value',
  toStateObject: () => undefined
});
tandemNamespace.register('VoidIO', VoidIO);
/* harmony default export */ const types_VoidIO = (VoidIO);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0YW5kZW1OYW1lc3BhY2UiLCJJT1R5cGUiLCJWb2lkSU8iLCJpc1ZhbGlkVmFsdWUiLCJkb2N1bWVudGF0aW9uIiwidG9TdGF0ZU9iamVjdCIsInVuZGVmaW5lZCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVm9pZElPLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIElPIFR5cGUgdXNlIHRvIHNpZ25pZnkgYSBmdW5jdGlvbiBoYXMgbm8gcmV0dXJuIHZhbHVlLlxuICpcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKiBAYXV0aG9yIEFuZHJldyBBZGFyZSAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5pbXBvcnQgdGFuZGVtTmFtZXNwYWNlIGZyb20gJy4uL3RhbmRlbU5hbWVzcGFjZS5qcyc7XG5pbXBvcnQgSU9UeXBlIGZyb20gJy4vSU9UeXBlLmpzJztcblxuLyoqXG4gKiBXZSBzb21ldGltZXMgdXNlIFZvaWRJTyBhcyBhIHdvcmthcm91bmQgdG8gaW5kaWNhdGUgdGhhdCBhbiBhcmd1bWVudCBpcyBwYXNzZWQgaW4gdGhlIHNpbXVsYXRpb24gc2lkZSwgYnV0XG4gKiB0aGF0IGl0IHNob3VsZG4ndCBiZSBsZWFrZWQgdG8gdGhlIFBoRVQtaU8gY2xpZW50LlxuICovXG5jb25zdCBWb2lkSU8gPSBuZXcgSU9UeXBlKCAnVm9pZElPJywge1xuICBpc1ZhbGlkVmFsdWU6ICgpID0+IHRydWUsXG4gIGRvY3VtZW50YXRpb246ICdUeXBlIGZvciB3aGljaCB0aGVyZSBpcyBubyBpbnN0YW5jZSwgdXN1YWxseSB0byBtYXJrIGZ1bmN0aW9ucyB3aXRob3V0IGEgcmV0dXJuIHZhbHVlJyxcbiAgdG9TdGF0ZU9iamVjdDogKCkgPT4gdW5kZWZpbmVkXG59ICk7XG5cbnRhbmRlbU5hbWVzcGFjZS5yZWdpc3RlciggJ1ZvaWRJTycsIFZvaWRJTyApO1xuZXhwb3J0IGRlZmF1bHQgVm9pZElPOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx1QkFBdUI7QUFDbkQsT0FBT0MsTUFBTSxNQUFNLGFBQWE7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsTUFBTSxHQUFHLElBQUlELE1BQU0sQ0FBRSxRQUFRLEVBQUU7RUFDbkNFLFlBQVksRUFBRUEsQ0FBQSxLQUFNLElBQUk7RUFDeEJDLGFBQWEsRUFBRSx1RkFBdUY7RUFDdEdDLGFBQWEsRUFBRUEsQ0FBQSxLQUFNQztBQUN2QixDQUFDLENBQUU7QUFFSE4sZUFBZSxDQUFDTyxRQUFRLENBQUUsUUFBUSxFQUFFTCxNQUFNLENBQUU7QUFDNUMsZUFBZUEsTUFBTSJ9
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/PropertyStatePhase.js
// Copyright 2020-2022, University of Colorado Boulder

/**
 * Describes the phases that a Property can go through in its value setting and notification lifecycle.
 *
 * UNDEFER - the phase when `Property.setDeferred(false)` is called and Property.value becomes accurate
 * NOTIFY - the phase when notifications are fired for Properties that have had a value change since becoming deferred
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */




class PropertyStatePhase extends js_EnumerationValue {
  static UNDEFER = new PropertyStatePhase();
  static NOTIFY = new PropertyStatePhase();
  static enumeration = new js_Enumeration(PropertyStatePhase);
}
js_axon.register('PropertyStatePhase', PropertyStatePhase);
/* harmony default export */ const js_PropertyStatePhase = (PropertyStatePhase);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbnVtZXJhdGlvbiIsIkVudW1lcmF0aW9uVmFsdWUiLCJheG9uIiwiUHJvcGVydHlTdGF0ZVBoYXNlIiwiVU5ERUZFUiIsIk5PVElGWSIsImVudW1lcmF0aW9uIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQcm9wZXJ0eVN0YXRlUGhhc2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBwaGFzZXMgdGhhdCBhIFByb3BlcnR5IGNhbiBnbyB0aHJvdWdoIGluIGl0cyB2YWx1ZSBzZXR0aW5nIGFuZCBub3RpZmljYXRpb24gbGlmZWN5Y2xlLlxuICpcbiAqIFVOREVGRVIgLSB0aGUgcGhhc2Ugd2hlbiBgUHJvcGVydHkuc2V0RGVmZXJyZWQoZmFsc2UpYCBpcyBjYWxsZWQgYW5kIFByb3BlcnR5LnZhbHVlIGJlY29tZXMgYWNjdXJhdGVcbiAqIE5PVElGWSAtIHRoZSBwaGFzZSB3aGVuIG5vdGlmaWNhdGlvbnMgYXJlIGZpcmVkIGZvciBQcm9wZXJ0aWVzIHRoYXQgaGF2ZSBoYWQgYSB2YWx1ZSBjaGFuZ2Ugc2luY2UgYmVjb21pbmcgZGVmZXJyZWRcbiAqXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKi9cblxuaW1wb3J0IEVudW1lcmF0aW9uIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9FbnVtZXJhdGlvbi5qcyc7XG5pbXBvcnQgRW51bWVyYXRpb25WYWx1ZSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvRW51bWVyYXRpb25WYWx1ZS5qcyc7XG5pbXBvcnQgYXhvbiBmcm9tICcuL2F4b24uanMnO1xuXG5jbGFzcyBQcm9wZXJ0eVN0YXRlUGhhc2UgZXh0ZW5kcyBFbnVtZXJhdGlvblZhbHVlIHtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBVTkRFRkVSID0gbmV3IFByb3BlcnR5U3RhdGVQaGFzZSgpO1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE5PVElGWSA9IG5ldyBQcm9wZXJ0eVN0YXRlUGhhc2UoKTtcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGVudW1lcmF0aW9uID0gbmV3IEVudW1lcmF0aW9uKCBQcm9wZXJ0eVN0YXRlUGhhc2UgKTtcbn1cblxuYXhvbi5yZWdpc3RlciggJ1Byb3BlcnR5U3RhdGVQaGFzZScsIFByb3BlcnR5U3RhdGVQaGFzZSApO1xuZXhwb3J0IGRlZmF1bHQgUHJvcGVydHlTdGF0ZVBoYXNlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxXQUFXLE1BQU0sbUNBQW1DO0FBQzNELE9BQU9DLGdCQUFnQixNQUFNLHdDQUF3QztBQUNyRSxPQUFPQyxJQUFJLE1BQU0sV0FBVztBQUU1QixNQUFNQyxrQkFBa0IsU0FBU0YsZ0JBQWdCLENBQUM7RUFDaEQsT0FBdUJHLE9BQU8sR0FBRyxJQUFJRCxrQkFBa0IsRUFBRTtFQUN6RCxPQUF1QkUsTUFBTSxHQUFHLElBQUlGLGtCQUFrQixFQUFFO0VBRXhELE9BQXVCRyxXQUFXLEdBQUcsSUFBSU4sV0FBVyxDQUFFRyxrQkFBa0IsQ0FBRTtBQUM1RTtBQUVBRCxJQUFJLENBQUNLLFFBQVEsQ0FBRSxvQkFBb0IsRUFBRUosa0JBQWtCLENBQUU7QUFDekQsZUFBZUEsa0JBQWtCIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/PropertyStateHandler.js
// Copyright 2020-2023, University of Colorado Boulder

/**
 * Responsible for handling Property-specific logic associated with setting PhET-iO state. This file will defer Properties
 * from taking their final value, and notifying on that value until after state has been set on every Property. It is
 * also responsible for keeping track of order dependencies between different Properties, and making sure that undeferral
 * and notifications go out in the appropriate orders. See https://github.com/phetsims/axon/issues/276 for implementation details.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */





class PropertyStateHandler {
  initialized = false;
  constructor() {
    // Properties support setDeferred(). We defer setting their values so all changes take effect
    // at once. This keeps track of finalization actions (embodied in a PhaseCallback) that must take place after all
    // Property values have changed. This keeps track of both types of PropertyStatePhase: undeferring and notification.
    this.phaseCallbackSets = new PhaseCallbackSets();

    // each pair has a Map optimized for looking up based on the "before phetioID" and the "after phetioID"
    // of the dependency. Having a data structure set up for both directions of look-up makes each operation O(1). See https://github.com/phetsims/axon/issues/316
    this.undeferBeforeUndeferMapPair = new OrderDependencyMapPair(js_PropertyStatePhase.UNDEFER, js_PropertyStatePhase.UNDEFER);
    this.undeferBeforeNotifyMapPair = new OrderDependencyMapPair(js_PropertyStatePhase.UNDEFER, js_PropertyStatePhase.NOTIFY);
    this.notifyBeforeUndeferMapPair = new OrderDependencyMapPair(js_PropertyStatePhase.NOTIFY, js_PropertyStatePhase.UNDEFER);
    this.notifyBeforeNotifyMapPair = new OrderDependencyMapPair(js_PropertyStatePhase.NOTIFY, js_PropertyStatePhase.NOTIFY);

    // keep a list of all map pairs for easier iteration
    this.mapPairs = [this.undeferBeforeUndeferMapPair, this.undeferBeforeNotifyMapPair, this.notifyBeforeUndeferMapPair, this.notifyBeforeNotifyMapPair];
  }
  initialize(phetioStateEngine) {
    assert && assert(!this.initialized, 'cannot initialize twice');
    phetioStateEngine.onBeforeApplyStateEmitter.addListener(phetioObject => {
      // withhold AXON/Property notifications until all values have been set to avoid inconsistent intermediate states,
      // see https://github.com/phetsims/phet-io-wrappers/issues/229
      // only do this if the PhetioObject is already not deferred
      if (phetioObject instanceof ReadOnlyProperty && !phetioObject.isDeferred) {
        phetioObject.setDeferred(true);
        const phetioID = phetioObject.tandem.phetioID;
        const listener = () => {
          const potentialListener = phetioObject.setDeferred(false);

          // Always add a PhaseCallback so that we can track the order dependency, even though setDeferred can return null.
          this.phaseCallbackSets.addNotifyPhaseCallback(new PhaseCallback(phetioID, js_PropertyStatePhase.NOTIFY, potentialListener || _.noop));
        };
        this.phaseCallbackSets.addUndeferPhaseCallback(new PhaseCallback(phetioID, js_PropertyStatePhase.UNDEFER, listener));
      }
    });
    phetioStateEngine.stateSetEmitter.addListener(state => {
      // Properties set to final values and notify of any value changes.
      this.undeferAndNotifyProperties(new Set(Object.keys(state)));
    });
    phetioStateEngine.isSettingStateProperty.lazyLink(isSettingState => {
      assert && !isSettingState && assert(this.phaseCallbackSets.size === 0, 'PhaseCallbacks should have all been applied');
    });
    this.initialized = true;
  }
  static validateInstrumentedProperty(property) {
    assert && js_Tandem.VALIDATION && assert(property instanceof ReadOnlyProperty && property.isPhetioInstrumented(), `must be an instrumented Property: ${property}`);
  }
  validatePropertyPhasePair(property, phase) {
    PropertyStateHandler.validateInstrumentedProperty(property);
  }

  /**
   * Get the MapPair associated with the proved PropertyStatePhases
   */
  getMapPairFromPhases(beforePhase, afterPhase) {
    const matchedPairs = this.mapPairs.filter(mapPair => beforePhase === mapPair.beforePhase && afterPhase === mapPair.afterPhase);
    assert && assert(matchedPairs.length === 1, 'one and only one map should match the provided phases');
    return matchedPairs[0];
  }

  /**
   * Register that one Property must have a "Phase" applied for PhET-iO state before another Property's Phase. A Phase
   * is an ending state in PhET-iO state set where Property values solidify, notifications for value changes are called.
   * The PhET-iO state engine will always undefer a Property before it notifies its listeners. This is for registering
   * two different Properties.
   *
   * @param beforeProperty - the Property that needs to be set before the second; must be instrumented for PhET-iO
   * @param beforePhase
   * @param afterProperty - must be instrumented for PhET-iO
   * @param afterPhase
   */
  registerPhetioOrderDependency(beforeProperty, beforePhase, afterProperty, afterPhase) {
    if (js_Tandem.PHET_IO_ENABLED) {
      this.validatePropertyPhasePair(beforeProperty, beforePhase);
      this.validatePropertyPhasePair(afterProperty, afterPhase);
      assert && beforeProperty === afterProperty && assert(beforePhase !== afterPhase, 'cannot set same Property to same phase');
      const mapPair = this.getMapPairFromPhases(beforePhase, afterPhase);
      mapPair.addOrderDependency(beforeProperty.tandem.phetioID, afterProperty.tandem.phetioID);
    }
  }

  /**
   * {Property} property - must be instrumented for PhET-iO
   * {boolean} - true if Property is in any order dependency
   */
  propertyInAnOrderDependency(property) {
    PropertyStateHandler.validateInstrumentedProperty(property);
    return _.some(this.mapPairs, mapPair => mapPair.usesPhetioID(property.tandem.phetioID));
  }

  /**
   * Unregisters all order dependencies for the given Property
   * {ReadOnlyProperty} property - must be instrumented for PhET-iO
   */
  unregisterOrderDependenciesForProperty(property) {
    if (js_Tandem.PHET_IO_ENABLED) {
      PropertyStateHandler.validateInstrumentedProperty(property);

      // Be graceful if given a Property that is not registered in an order dependency.
      if (this.propertyInAnOrderDependency(property)) {
        assert && assert(this.propertyInAnOrderDependency(property), 'Property must be registered in an order dependency to be unregistered');
        this.mapPairs.forEach(mapPair => mapPair.unregisterOrderDependenciesForProperty(property));
      }
    }
  }

  /**
   * Given registered Property Phase order dependencies, undefer all AXON/Property PhET-iO elements to take their
   * correct values and have each notify their listeners.
   * {Set.<string>} phetioIDsInState - set of phetioIDs that were set in state
   */
  undeferAndNotifyProperties(phetioIDsInState) {
    assert && assert(this.initialized, 'must be initialized before getting called');

    // {Object.<string,boolean>} - true if a phetioID + phase pair has been applied, keys are the combination of
    // phetioIDs and phase, see PhaseCallback.getTerm()
    const completedPhases = {};

    // to support failing out instead of infinite loop
    let numberOfIterations = 0;

    // Normally we would like to undefer things before notify, but make sure this is done in accordance with the order dependencies.
    while (this.phaseCallbackSets.size > 0) {
      numberOfIterations++;

      // Error case logging
      if (numberOfIterations > 5000) {
        this.errorInUndeferAndNotifyStep(completedPhases);
      }

      // Try to undefer as much as possible before notifying
      this.attemptToApplyPhases(js_PropertyStatePhase.UNDEFER, completedPhases, phetioIDsInState);
      this.attemptToApplyPhases(js_PropertyStatePhase.NOTIFY, completedPhases, phetioIDsInState);
    }
  }
  errorInUndeferAndNotifyStep(completedPhases) {
    // combine phetioID and Phase into a single string to keep this process specific.
    const stillToDoIDPhasePairs = [];
    this.phaseCallbackSets.forEach(phaseCallback => stillToDoIDPhasePairs.push(phaseCallback.getTerm()));
    const relevantOrderDependencies = [];
    this.mapPairs.forEach(mapPair => {
      const beforeMap = mapPair.beforeMap;
      for (const [beforePhetioID, afterPhetioIDs] of beforeMap) {
        afterPhetioIDs.forEach(afterPhetioID => {
          const beforeTerm = beforePhetioID + beforeMap.beforePhase;
          const afterTerm = afterPhetioID + beforeMap.afterPhase;
          if (stillToDoIDPhasePairs.includes(beforeTerm) || stillToDoIDPhasePairs.includes(afterTerm)) {
            relevantOrderDependencies.push({
              beforeTerm: beforeTerm,
              afterTerm: afterTerm
            });
          }
        });
      }
    });
    let string = '';
    console.log('still to be undeferred', this.phaseCallbackSets.undeferSet);
    console.log('still to be notified', this.phaseCallbackSets.notifySet);
    console.log('order dependencies that apply to the still todos', relevantOrderDependencies);
    relevantOrderDependencies.forEach(orderDependency => {
      string += `${orderDependency.beforeTerm}\t${orderDependency.afterTerm}\n`;
    });
    console.log('\n\nin graphable form:\n\n', string);
    const assertMessage = 'Impossible set state: from undeferAndNotifyProperties; ordering constraints cannot be satisfied';
    assert && assert(false, assertMessage);

    // We must exit here even if assertions are disabled so it wouldn't lock up the browser.
    if (!assert) {
      throw new Error(assertMessage);
    }
  }

  /**
   * Only for Testing!
   * Get the number of order dependencies registered in this class
   *
   */
  getNumberOfOrderDependencies() {
    let count = 0;
    this.mapPairs.forEach(mapPair => {
      mapPair.afterMap.forEach(valueSet => {
        count += valueSet.size;
      });
    });
    return count;
  }

  /**
   * Go through all phases still to be applied, and apply them if the order dependencies allow it. Only apply for the
   * particular phase provided. In general UNDEFER must occur before the same phetioID gets NOTIFY.
   *
   * @param phase - only apply PhaseCallbacks for this particular PropertyStatePhase
   * @param completedPhases - map that keeps track of completed phases
   * @param phetioIDsInState - set of phetioIDs that were set in state
   */
  attemptToApplyPhases(phase, completedPhases, phetioIDsInState) {
    const phaseCallbackSet = this.phaseCallbackSets.getSetFromPhase(phase);
    for (const phaseCallbackToPotentiallyApply of phaseCallbackSet) {
      assert && assert(phaseCallbackToPotentiallyApply.phase === phase, 'phaseCallbackSet should only include callbacks for provided phase');

      // only try to check the order dependencies to see if this has to be after something that is incomplete.
      if (this.phetioIDCanApplyPhase(phaseCallbackToPotentiallyApply.phetioID, phase, completedPhases, phetioIDsInState)) {
        // Fire the listener;
        phaseCallbackToPotentiallyApply.listener();

        // Remove it from the master list so that it doesn't get called again.
        phaseCallbackSet.delete(phaseCallbackToPotentiallyApply);

        // Keep track of all completed PhaseCallbacks
        completedPhases[phaseCallbackToPotentiallyApply.getTerm()] = true;
      }
    }
  }

  /**
   * @param phetioID - think of this as the "afterPhetioID" since there may be some phases that need to be applied before it has this phase done.
   * @param phase
   * @param completedPhases - map that keeps track of completed phases
   * @param phetioIDsInState - set of phetioIDs that were set in state
   * @param - if the provided phase can be applied given the dependency order dependencies of the state engine.
   */
  phetioIDCanApplyPhase(phetioID, phase, completedPhases, phetioIDsInState) {
    // Undefer must happen before notify
    if (phase === js_PropertyStatePhase.NOTIFY && !completedPhases[phetioID + js_PropertyStatePhase.UNDEFER]) {
      return false;
    }

    // Get a list of the maps for this phase being applies.
    const mapsToCheck = [];
    this.mapPairs.forEach(mapPair => {
      if (mapPair.afterPhase === phase) {
        // Use the "afterMap" because below looks up what needs to come before.
        mapsToCheck.push(mapPair.afterMap);
      }
    });

    // O(2)
    for (let i = 0; i < mapsToCheck.length; i++) {
      const mapToCheck = mapsToCheck[i];
      if (!mapToCheck.has(phetioID)) {
        return true;
      }
      const setOfThingsThatShouldComeFirst = mapToCheck.get(phetioID);
      assert && assert(setOfThingsThatShouldComeFirst, 'must have this set');

      // O(K) where K is the number of elements that should come before Property X
      for (const beforePhetioID of setOfThingsThatShouldComeFirst) {
        // check if the before phase for this order dependency has already been completed
        // Make sure that we only care about elements that were actually set during this state set
        if (!completedPhases[beforePhetioID + mapToCheck.beforePhase] && phetioIDsInState.has(beforePhetioID) && phetioIDsInState.has(phetioID)) {
          return false;
        }
      }
    }
    return true;
  }
}

// POJSO for a callback for a specific Phase in a Property's state set lifecycle. See undeferAndNotifyProperties()
class PhaseCallback {
  constructor(phetioID, phase, listener = _.noop) {
    this.phetioID = phetioID;
    this.phase = phase;
    this.listener = listener;
  }

  /**
   * {string} - unique term for the id/phase pair
   */
  getTerm() {
    return this.phetioID + this.phase;
  }
}
class OrderDependencyMapPair {
  constructor(beforePhase, afterPhase) {
    // @ts-expect-error, it is easiest to fudge here since we are adding the PhaseMap properties just below here.
    this.beforeMap = new Map();
    this.beforeMap.beforePhase = beforePhase;
    this.beforeMap.afterPhase = afterPhase;

    // @ts-expect-error, it is easiest to fudge here since we are adding the PhaseMap properties just below here.
    this.afterMap = new Map();
    this.afterMap.beforePhase = beforePhase;
    this.afterMap.afterPhase = afterPhase;
    this.beforeMap.otherMap = this.afterMap;
    this.afterMap.otherMap = this.beforeMap;
    this.beforePhase = beforePhase;
    this.afterPhase = afterPhase;
  }

  /**
   * Register an order dependency between two phetioIDs. This will add data to maps in "both direction". If accessing
   * with just the beforePhetioID, or with the afterPhetioID.
   */
  addOrderDependency(beforePhetioID, afterPhetioID) {
    if (!this.beforeMap.has(beforePhetioID)) {
      this.beforeMap.set(beforePhetioID, new Set());
    }
    this.beforeMap.get(beforePhetioID).add(afterPhetioID);
    if (!this.afterMap.has(afterPhetioID)) {
      this.afterMap.set(afterPhetioID, new Set());
    }
    this.afterMap.get(afterPhetioID).add(beforePhetioID);
  }

  /**
   * Unregister all order dependencies for the provided Property
   */
  unregisterOrderDependenciesForProperty(property) {
    const phetioIDToRemove = property.tandem.phetioID;
    [this.beforeMap, this.afterMap].forEach(map => {
      map.has(phetioIDToRemove) && map.get(phetioIDToRemove).forEach(phetioID => {
        const setOfAfterMapIDs = map.otherMap.get(phetioID);
        setOfAfterMapIDs && setOfAfterMapIDs.delete(phetioIDToRemove);

        // Clear out empty entries to avoid having lots of empty Sets sitting around
        setOfAfterMapIDs.size === 0 && map.otherMap.delete(phetioID);
      });
      map.delete(phetioIDToRemove);
    });

    // Look through every dependency and make sure the phetioID to remove has been completely removed.
    assertSlow && [this.beforeMap, this.afterMap].forEach(map => {
      map.forEach((valuePhetioIDs, key) => {
        assertSlow && assertSlow(key !== phetioIDToRemove, 'should not be a key');
        assertSlow && assertSlow(!valuePhetioIDs.has(phetioIDToRemove), 'should not be in a value list');
      });
    });
  }
  usesPhetioID(phetioID) {
    return this.beforeMap.has(phetioID) || this.afterMap.has(phetioID);
  }
}

// POJSO to keep track of PhaseCallbacks while providing O(1) lookup time because it is built on Set
class PhaseCallbackSets {
  undeferSet = new Set();
  notifySet = new Set();
  get size() {
    return this.undeferSet.size + this.notifySet.size;
  }
  forEach(callback) {
    this.undeferSet.forEach(callback);
    this.notifySet.forEach(callback);
  }
  addUndeferPhaseCallback(phaseCallback) {
    this.undeferSet.add(phaseCallback);
  }
  addNotifyPhaseCallback(phaseCallback) {
    this.notifySet.add(phaseCallback);
  }
  getSetFromPhase(phase) {
    return phase === js_PropertyStatePhase.NOTIFY ? this.notifySet : this.undeferSet;
  }
}
js_axon.register('PropertyStateHandler', PropertyStateHandler);
/* harmony default export */ const js_PropertyStateHandler = (PropertyStateHandler);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/propertyStateHandlerSingleton.js
// Copyright 2020-2022, University of Colorado Boulder

/**
 * Singleton responsible for AXON/Property specific state logic. Use this global for the project to have a single
 * place to tap into the PhetioStateEngine, as well as a single point to register any order dependencies that Properties
 * have between each other when setting their state and applying their values/notifying.
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */



const propertyStateHandlerSingleton = new js_PropertyStateHandler();
js_axon.register('propertyStateHandlerSingleton', propertyStateHandlerSingleton);
/* harmony default export */ const js_propertyStateHandlerSingleton = (propertyStateHandlerSingleton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheG9uIiwiUHJvcGVydHlTdGF0ZUhhbmRsZXIiLCJwcm9wZXJ0eVN0YXRlSGFuZGxlclNpbmdsZXRvbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsicHJvcGVydHlTdGF0ZUhhbmRsZXJTaW5nbGV0b24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogU2luZ2xldG9uIHJlc3BvbnNpYmxlIGZvciBBWE9OL1Byb3BlcnR5IHNwZWNpZmljIHN0YXRlIGxvZ2ljLiBVc2UgdGhpcyBnbG9iYWwgZm9yIHRoZSBwcm9qZWN0IHRvIGhhdmUgYSBzaW5nbGVcbiAqIHBsYWNlIHRvIHRhcCBpbnRvIHRoZSBQaGV0aW9TdGF0ZUVuZ2luZSwgYXMgd2VsbCBhcyBhIHNpbmdsZSBwb2ludCB0byByZWdpc3RlciBhbnkgb3JkZXIgZGVwZW5kZW5jaWVzIHRoYXQgUHJvcGVydGllc1xuICogaGF2ZSBiZXR3ZWVuIGVhY2ggb3RoZXIgd2hlbiBzZXR0aW5nIHRoZWlyIHN0YXRlIGFuZCBhcHBseWluZyB0aGVpciB2YWx1ZXMvbm90aWZ5aW5nLlxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5cbmltcG9ydCBheG9uIGZyb20gJy4vYXhvbi5qcyc7XG5pbXBvcnQgUHJvcGVydHlTdGF0ZUhhbmRsZXIgZnJvbSAnLi9Qcm9wZXJ0eVN0YXRlSGFuZGxlci5qcyc7XG5cbmNvbnN0IHByb3BlcnR5U3RhdGVIYW5kbGVyU2luZ2xldG9uID0gbmV3IFByb3BlcnR5U3RhdGVIYW5kbGVyKCk7XG5heG9uLnJlZ2lzdGVyKCAncHJvcGVydHlTdGF0ZUhhbmRsZXJTaW5nbGV0b24nLCBwcm9wZXJ0eVN0YXRlSGFuZGxlclNpbmdsZXRvbiApO1xuZXhwb3J0IGRlZmF1bHQgcHJvcGVydHlTdGF0ZUhhbmRsZXJTaW5nbGV0b247Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsSUFBSSxNQUFNLFdBQVc7QUFDNUIsT0FBT0Msb0JBQW9CLE1BQU0sMkJBQTJCO0FBRTVELE1BQU1DLDZCQUE2QixHQUFHLElBQUlELG9CQUFvQixFQUFFO0FBQ2hFRCxJQUFJLENBQUNHLFFBQVEsQ0FBRSwrQkFBK0IsRUFBRUQsNkJBQTZCLENBQUU7QUFDL0UsZUFBZUEsNkJBQTZCIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/TinyProperty.js
// Copyright 2020-2023, University of Colorado Boulder

/**
 * A lightweight version of Property (that satisfies some of the interface), meant for high-performance applications
 * where validation, phet-io support and other things are not needed.
 *
 * This directly extends TinyEmitter in order to save memory.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



class TinyProperty extends TinyEmitter {
  // Store the internal value -- NOT for general use (but used in Scenery for performance)

  // Forces use of the deep equality checks. Keeps some compatibility with the Property interface to have the equality
  // check in this type too. Not defining in the general case for memory usage, only using if we notice this flag set.

  /**
   * @param value - The initial value of the property
   * @param [onBeforeNotify]
   */
  constructor(value, onBeforeNotify) {
    super(onBeforeNotify);
    this._value = value;
  }

  /**
   * Returns the value.
   *
   * You can also use the es5 getter (property.value) but this means is provided for inner loops
   * or internal code that must be fast.
   */
  get() {
    return this._value;
  }

  /**
   * Returns the value.
   */
  get value() {
    return this.get();
  }

  /**
   * Sets the value.
   */
  set value(newValue) {
    this.set(newValue);
  }

  /**
   * Sets the value and notifies listeners, unless deferred or disposed. You can also use the es5 getter
   * (property.value) but this means is provided for inner loops or internal code that must be fast. If the value
   * hasn't changed, this is a no-op.
   */
  set(value) {
    if (!this.equalsValue(value)) {
      const oldValue = this._value;
      this.setPropertyValue(value);
      this.notifyListeners(oldValue);
    }
  }

  /**
   * Sets the value without notifying any listeners. This is a place to override if a subtype performs additional work
   * when setting the value.
   */
  setPropertyValue(value) {
    this._value = value;
  }

  /**
   * Returns true if and only if the specified value equals the value of this property
   */
  equalsValue(value) {
    return this.areValuesEqual(value, this._value);
  }

  /**
   * Determines equality semantics for the wrapped type, including whether notifications are sent out when the
   * wrapped value changes, and whether onValue is triggered.
   * (Property)
   *
   * useDeepEquality: true => Use the `equals` method on the values
   * useDeepEquality: false => Use === for equality test
   *
   * Alternatively different implementation can be provided by subclasses or instances to change the equals
   * definition. See #10 and #73 and #115
   */
  areValuesEqual(a, b) {
    if (this.useDeepEquality) {
      const aObject = a;
      const bObject = b;
      if (aObject && bObject && aObject.constructor === bObject.constructor) {
        assert && assert(!!aObject.equals, 'no equals function for 1st arg');
        assert && assert(!!bObject.equals, 'no equals function for 2nd arg');
        assert && assert(aObject.equals(bObject) === bObject.equals(aObject), 'incompatible equality checks');
        return aObject.equals(bObject);
      }
    }

    // Reference equality for objects, value equality for primitives
    return a === b;
  }

  /**
   * Directly notifies listeners of changes.
   */
  notifyListeners(oldValue) {
    // We use this._value here for performance, AND to avoid calling onAccessAttempt unnecessarily.
    this.emit(this._value, oldValue, this);
  }

  /**
   * Adds listener and calls it immediately. If listener is already registered, this is a no-op. The initial
   * notification provides the current value for newValue and null for oldValue.
   */
  link(listener) {
    this.addListener(listener);
    listener(this._value, null, this); // null should be used when an object is expected but unavailable
  }

  /**
   * Add an listener to the TinyProperty, without calling it back right away. This is used when you need to register a
   * listener without an immediate callback.
   */
  lazyLink(listener) {
    this.addListener(listener); // Because it's a lazy link, it will never be called with null
  }

  /**
   * Removes a listener. If listener is not registered, this is a no-op.
   */
  unlink(listener) {
    this.removeListener(listener);
  }

  /**
   * Removes all listeners. If no listeners are registered, this is a no-op.
   */
  unlinkAll() {
    this.removeAllListeners();
  }

  /**
   * Links an object's named attribute to this TinyProperty.  Returns a handle so it can be removed using
   * TinyProperty.unlink();
   * Example: modelVisibleProperty.linkAttribute(view, 'visible');
   *
   * NOTE: Duplicated with Property.linkAttribute
   */
  linkAttribute(object, attributeName) {
    const handle = value => {
      object[attributeName] = value;
    };
    this.link(handle);
    return handle;
  }

  /**
   * Returns true if the value can be set externally, using .value= or set()
   */
  isSettable() {
    return true;
  }

  /**
   * Releases references.
   */
  dispose() {
    // Remove any listeners that are still attached (note that the emitter dispose would do this also, but without the
    // potentially-needed extra logic of changeCount, etc.)
    this.unlinkAll();
    super.dispose();
  }
}
js_axon.register('TinyProperty', TinyProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/units.js
// Copyright 2018-2022, University of Colorado Boulder

/**
 * These are the units that can be associated with Property instances.
 *
 * When adding units to this file, please add abbreviations, preferably SI abbreviations.
 * And keep the array alphabetized by value.
 * See https://github.com/phetsims/phet-io/issues/530
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */


const units = {
  values: ['1/(cm*M)',
  // molar absorptivity
  '%',
  // percent
  'A',
  // amperes
  'AMU',
  // atomic mass unit
  'atm',
  // atmospheres
  'cm',
  // centimeters
  'cm^2',
  // centimeters squared
  'C',
  // coulombs
  '\u00B0',
  // °, degrees (angle)
  '\u00B0C',
  // °C, degrees Celsius
  'F',
  // farad
  'g',
  // grams
  'Hz',
  // hertz
  'J',
  // Joules
  'K',
  // Kelvin
  'kg',
  // kilograms
  'kg/m^3',
  // kg/cubic meter
  'kg\u00b7m/s',
  // kg·m/s, kilogram-meters/second
  'kPa',
  // kilopascals
  'L', 'L/s', 'm',
  // meters
  'm^3',
  // cubic meter
  'm/s',
  // meters/second
  'm/s/s',
  // meters/second/second
  'm/s^2',
  // meters/seconds squared
  'mA',
  // milliampere
  'mm',
  //millimeters
  'mol', 'mol/L', 'mol/s', 'M',
  // molar
  'N',
  // Newtons
  'N/m',
  // Newtons/meter
  'nm',
  // nanometers
  'nm/ps',
  // nanometers/picosecond
  'N\u00b7s/m',
  // N·s/m, Newton-seconds/meter
  '\u2126',
  // Ω, ohms - don't use the one in MathSymbols to prevent a dependency on scenery-phet
  '\u2126\u00b7cm',
  // Ω·cm, ohm-centimeters
  'Pa\u00b7s',
  // Pascal-seconds
  'particles/ps',
  // particles/picosecond
  'pm',
  // picometers
  'pm/ps',
  // picometers/picosecond
  'pm/s',
  // picometers/second
  'pm/s^2',
  // picometers/second-squared
  'pm^3',
  // picometers cubed
  'ps',
  // picoseconds
  'radians',
  // radians - note this has the same abbreviation as the radiation term "rad" so we use the full term
  'radians/s',
  // radians/second
  's',
  // seconds
  'V',
  // volts
  'view-coordinates/s', 'W' // watts
  ],

  isValidUnits: function (unit) {
    return _.includes(units.values, unit);
  }
};
js_axon.register('units', units);
/* harmony default export */ const js_units = (units);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheG9uIiwidW5pdHMiLCJ2YWx1ZXMiLCJpc1ZhbGlkVW5pdHMiLCJ1bml0IiwiXyIsImluY2x1ZGVzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJ1bml0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIHVuaXRzIHRoYXQgY2FuIGJlIGFzc29jaWF0ZWQgd2l0aCBQcm9wZXJ0eSBpbnN0YW5jZXMuXG4gKlxuICogV2hlbiBhZGRpbmcgdW5pdHMgdG8gdGhpcyBmaWxlLCBwbGVhc2UgYWRkIGFiYnJldmlhdGlvbnMsIHByZWZlcmFibHkgU0kgYWJicmV2aWF0aW9ucy5cbiAqIEFuZCBrZWVwIHRoZSBhcnJheSBhbHBoYWJldGl6ZWQgYnkgdmFsdWUuXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3BoZXQtaW8vaXNzdWVzLzUzMFxuICpcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKi9cblxuaW1wb3J0IGF4b24gZnJvbSAnLi9heG9uLmpzJztcblxuY29uc3QgdW5pdHMgPSB7XG4gIHZhbHVlczogW1xuICAgICcxLyhjbSpNKScsIC8vIG1vbGFyIGFic29ycHRpdml0eVxuICAgICclJywgLy8gcGVyY2VudFxuICAgICdBJywgLy8gYW1wZXJlc1xuICAgICdBTVUnLCAvLyBhdG9taWMgbWFzcyB1bml0XG4gICAgJ2F0bScsIC8vIGF0bW9zcGhlcmVzXG4gICAgJ2NtJywgLy8gY2VudGltZXRlcnNcbiAgICAnY21eMicsIC8vIGNlbnRpbWV0ZXJzIHNxdWFyZWRcbiAgICAnQycsIC8vIGNvdWxvbWJzXG4gICAgJ1xcdTAwQjAnLCAvLyDCsCwgZGVncmVlcyAoYW5nbGUpXG4gICAgJ1xcdTAwQjBDJywgLy8gwrBDLCBkZWdyZWVzIENlbHNpdXNcbiAgICAnRicsIC8vIGZhcmFkXG4gICAgJ2cnLCAvLyBncmFtc1xuICAgICdIeicsIC8vIGhlcnR6XG4gICAgJ0onLCAvLyBKb3VsZXNcbiAgICAnSycsIC8vIEtlbHZpblxuICAgICdrZycsIC8vIGtpbG9ncmFtc1xuICAgICdrZy9tXjMnLCAvLyBrZy9jdWJpYyBtZXRlclxuICAgICdrZ1xcdTAwYjdtL3MnLCAvLyBrZ8K3bS9zLCBraWxvZ3JhbS1tZXRlcnMvc2Vjb25kXG4gICAgJ2tQYScsIC8vIGtpbG9wYXNjYWxzXG4gICAgJ0wnLFxuICAgICdML3MnLFxuICAgICdtJywgLy8gbWV0ZXJzXG4gICAgJ21eMycsIC8vIGN1YmljIG1ldGVyXG4gICAgJ20vcycsIC8vIG1ldGVycy9zZWNvbmRcbiAgICAnbS9zL3MnLCAvLyBtZXRlcnMvc2Vjb25kL3NlY29uZFxuICAgICdtL3NeMicsIC8vIG1ldGVycy9zZWNvbmRzIHNxdWFyZWRcbiAgICAnbUEnLCAvLyBtaWxsaWFtcGVyZVxuICAgICdtbScsIC8vbWlsbGltZXRlcnNcbiAgICAnbW9sJyxcbiAgICAnbW9sL0wnLFxuICAgICdtb2wvcycsXG4gICAgJ00nLCAvLyBtb2xhclxuICAgICdOJywgLy8gTmV3dG9uc1xuICAgICdOL20nLCAvLyBOZXd0b25zL21ldGVyXG4gICAgJ25tJywgLy8gbmFub21ldGVyc1xuICAgICdubS9wcycsIC8vIG5hbm9tZXRlcnMvcGljb3NlY29uZFxuICAgICdOXFx1MDBiN3MvbScsIC8vIE7Ct3MvbSwgTmV3dG9uLXNlY29uZHMvbWV0ZXJcbiAgICAnXFx1MjEyNicsIC8vIM6pLCBvaG1zIC0gZG9uJ3QgdXNlIHRoZSBvbmUgaW4gTWF0aFN5bWJvbHMgdG8gcHJldmVudCBhIGRlcGVuZGVuY3kgb24gc2NlbmVyeS1waGV0XG4gICAgJ1xcdTIxMjZcXHUwMGI3Y20nLCAvLyDOqcK3Y20sIG9obS1jZW50aW1ldGVyc1xuICAgICdQYVxcdTAwYjdzJywgLy8gUGFzY2FsLXNlY29uZHNcbiAgICAncGFydGljbGVzL3BzJywgLy8gcGFydGljbGVzL3BpY29zZWNvbmRcbiAgICAncG0nLCAvLyBwaWNvbWV0ZXJzXG4gICAgJ3BtL3BzJywgLy8gcGljb21ldGVycy9waWNvc2Vjb25kXG4gICAgJ3BtL3MnLCAvLyBwaWNvbWV0ZXJzL3NlY29uZFxuICAgICdwbS9zXjInLCAvLyBwaWNvbWV0ZXJzL3NlY29uZC1zcXVhcmVkXG4gICAgJ3BtXjMnLCAvLyBwaWNvbWV0ZXJzIGN1YmVkXG4gICAgJ3BzJywgLy8gcGljb3NlY29uZHNcbiAgICAncmFkaWFucycsIC8vIHJhZGlhbnMgLSBub3RlIHRoaXMgaGFzIHRoZSBzYW1lIGFiYnJldmlhdGlvbiBhcyB0aGUgcmFkaWF0aW9uIHRlcm0gXCJyYWRcIiBzbyB3ZSB1c2UgdGhlIGZ1bGwgdGVybVxuICAgICdyYWRpYW5zL3MnLCAvLyByYWRpYW5zL3NlY29uZFxuICAgICdzJywgLy8gc2Vjb25kc1xuICAgICdWJywgLy8gdm9sdHNcbiAgICAndmlldy1jb29yZGluYXRlcy9zJyxcbiAgICAnVycgLy8gd2F0dHNcbiAgXSxcblxuICBpc1ZhbGlkVW5pdHM6IGZ1bmN0aW9uKCB1bml0OiBzdHJpbmcgKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIF8uaW5jbHVkZXMoIHVuaXRzLnZhbHVlcywgdW5pdCApO1xuICB9XG59O1xuXG5heG9uLnJlZ2lzdGVyKCAndW5pdHMnLCB1bml0cyApO1xuXG5leHBvcnQgZGVmYXVsdCB1bml0czsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxJQUFJLE1BQU0sV0FBVztBQUU1QixNQUFNQyxLQUFLLEdBQUc7RUFDWkMsTUFBTSxFQUFFLENBQ04sVUFBVTtFQUFFO0VBQ1osR0FBRztFQUFFO0VBQ0wsR0FBRztFQUFFO0VBQ0wsS0FBSztFQUFFO0VBQ1AsS0FBSztFQUFFO0VBQ1AsSUFBSTtFQUFFO0VBQ04sTUFBTTtFQUFFO0VBQ1IsR0FBRztFQUFFO0VBQ0wsUUFBUTtFQUFFO0VBQ1YsU0FBUztFQUFFO0VBQ1gsR0FBRztFQUFFO0VBQ0wsR0FBRztFQUFFO0VBQ0wsSUFBSTtFQUFFO0VBQ04sR0FBRztFQUFFO0VBQ0wsR0FBRztFQUFFO0VBQ0wsSUFBSTtFQUFFO0VBQ04sUUFBUTtFQUFFO0VBQ1YsYUFBYTtFQUFFO0VBQ2YsS0FBSztFQUFFO0VBQ1AsR0FBRyxFQUNILEtBQUssRUFDTCxHQUFHO0VBQUU7RUFDTCxLQUFLO0VBQUU7RUFDUCxLQUFLO0VBQUU7RUFDUCxPQUFPO0VBQUU7RUFDVCxPQUFPO0VBQUU7RUFDVCxJQUFJO0VBQUU7RUFDTixJQUFJO0VBQUU7RUFDTixLQUFLLEVBQ0wsT0FBTyxFQUNQLE9BQU8sRUFDUCxHQUFHO0VBQUU7RUFDTCxHQUFHO0VBQUU7RUFDTCxLQUFLO0VBQUU7RUFDUCxJQUFJO0VBQUU7RUFDTixPQUFPO0VBQUU7RUFDVCxZQUFZO0VBQUU7RUFDZCxRQUFRO0VBQUU7RUFDVixnQkFBZ0I7RUFBRTtFQUNsQixXQUFXO0VBQUU7RUFDYixjQUFjO0VBQUU7RUFDaEIsSUFBSTtFQUFFO0VBQ04sT0FBTztFQUFFO0VBQ1QsTUFBTTtFQUFFO0VBQ1IsUUFBUTtFQUFFO0VBQ1YsTUFBTTtFQUFFO0VBQ1IsSUFBSTtFQUFFO0VBQ04sU0FBUztFQUFFO0VBQ1gsV0FBVztFQUFFO0VBQ2IsR0FBRztFQUFFO0VBQ0wsR0FBRztFQUFFO0VBQ0wsb0JBQW9CLEVBQ3BCLEdBQUcsQ0FBQztFQUFBLENBQ0w7O0VBRURDLFlBQVksRUFBRSxTQUFBQSxDQUFVQyxJQUFZLEVBQVk7SUFDOUMsT0FBT0MsQ0FBQyxDQUFDQyxRQUFRLENBQUVMLEtBQUssQ0FBQ0MsTUFBTSxFQUFFRSxJQUFJLENBQUU7RUFDekM7QUFDRixDQUFDO0FBRURKLElBQUksQ0FBQ08sUUFBUSxDQUFFLE9BQU8sRUFBRU4sS0FBSyxDQUFFO0FBRS9CLGVBQWVBLEtBQUsifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/ReadOnlyProperty.js
// Copyright 2013-2023, University of Colorado Boulder
/**
 * An observable property which notifies listeners when the value changes.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chris Malley (PixelZoom, Inc.)
 */


















// constants
const ReadOnlyProperty_VALIDATE_OPTIONS_FALSE = {
  validateValidator: false
};

// variables
let globalId = 0; // auto-incremented for unique IDs

// Cache each parameterized PropertyIO based on the parameter type, so that it is only created once
const ReadOnlyProperty_cache = new Map();
/**
 * Base class for Property, DerivedProperty, DynamicProperty.  Set methods are protected/not part of the public
 * interface.  Initial value and resetting is not defined here.
 */
class ReadOnlyProperty extends PhetioObject {
  // Unique identifier for this Property.

  // (phet-io) Units, if any.  See units.js for valid values

  // emit is called when the value changes (or on link)

  // whether we are in the process of notifying listeners; changed in some Property test files with @ts-expect-error

  // whether to allow reentry of calls to set

  // while deferred, new values neither take effect nor send notifications.  When isDeferred changes from
  // true to false, the final deferred value becomes the Property value.  An action is created which can be invoked to
  // send notifications.

  // the value that this Property will take after no longer deferred

  // whether a deferred value has been set

  static TANDEM_NAME_SUFFIX = 'Property';

  /**
   * This is protected to indicate to clients that subclasses should be used instead.
   * @param value - the initial value of the property
   * @param [providedOptions]
   */
  constructor(value, providedOptions) {
    const options = optionize()({
      units: null,
      reentrant: false,
      // phet-io
      tandem: js_Tandem.OPTIONAL,
      phetioOuterType: ReadOnlyProperty.PropertyIO,
      phetioValueType: IOType.ObjectIO
    }, providedOptions);

    // Support non-validated Property
    if (!Validation.containsValidatorKey(options)) {
      options.isValidValue = () => true;
    }
    assert && options.units && assert(js_units.isValidUnits(options.units), `invalid units: ${options.units}`);
    if (options.units) {
      options.phetioEventMetadata = options.phetioEventMetadata || {};
      assert && assert(!options.phetioEventMetadata.hasOwnProperty('units'), 'units should be supplied by Property, not elsewhere');
      options.phetioEventMetadata.units = options.units;
    }
    if (assert && providedOptions) {
      // @ts-expect-error -- for checking JS code
      assert && assert(!providedOptions.phetioType, 'Set phetioType via phetioValueType');
    }

    // Construct the IO Type
    if (options.phetioOuterType && options.phetioValueType) {
      options.phetioType = options.phetioOuterType(options.phetioValueType);
    }
    super(options);
    this.id = globalId++;
    this.units = options.units;

    // When running as phet-io, if the tandem is specified, the type must be specified.
    if (js_Tandem.VALIDATION && this.isPhetioInstrumented()) {
      // This assertion helps in instrumenting code that has the tandem but not type
      assert && assert(this.phetioType, `phetioType passed to Property must be specified. Tandem.phetioID: ${this.tandem.phetioID}`);
      assert && assert(options.phetioType.parameterTypes[0], `phetioType parameter type must be specified (only one). Tandem.phetioID: ${this.tandem.phetioID}`);
    }
    assert && assert(!this.isPhetioInstrumented() || options.tandem.name.endsWith(ReadOnlyProperty.TANDEM_NAME_SUFFIX) || options.tandem.name === 'property', `Property tandem.name must end with Property: ${options.tandem.phetioID}`);
    this.validValues = options.validValues;
    this.tinyProperty = new TinyProperty(value);

    // Since we are already in the heavyweight Property, we always assign TinyProperty.useDeepEquality for clarity.
    // @ts-expect-error
    this.tinyProperty.useDeepEquality = options.valueComparisonStrategy && options.valueComparisonStrategy === 'equalsFunction';
    this.notifying = false;
    this.reentrant = options.reentrant;
    this.isDeferred = false;
    this.deferredValue = null;
    this.hasDeferredValue = false;
    this.valueValidator = _.pick(options, Validation.VALIDATOR_KEYS);
    this.valueValidator.validationMessage = this.valueValidator.validationMessage || 'Property value not valid';
    if (this.valueValidator.phetioType) {
      // Validate the value type's phetioType of the Property, not the PropertyIO itself.
      // For example, for PropertyIO( BooleanIO ), assign this valueValidator's phetioType to be BooleanIO's validator.
      assert && assert(!!this.valueValidator.phetioType.parameterTypes[0], 'unexpected number of parameters for Property');

      // This is the validator for the value, not for the Property itself
      this.valueValidator.phetioType = this.valueValidator.phetioType.parameterTypes[0];
    }

    // Assertions regarding value validation
    if (assert) {
      Validation.validateValidator(this.valueValidator);

      // validate the initial value as well as any changes in the future
      this.link(value => js_validate(value, this.valueValidator, ReadOnlyProperty_VALIDATE_OPTIONS_FALSE));
      if (js_Tandem.PHET_IO_ENABLED && this.isPhetioInstrumented() && this.phetioState && js_Tandem.VALIDATION) {
        assert && assert(options.phetioValueType !== IOType.ObjectIO, 'Stateful PhET-iO Properties must specify a phetioValueType: ' + this.phetioID);
      }
    }
  }

  /**
   * Returns true if the value can be set externally, using .value= or set()
   */
  isSettable() {
    return false;
  }

  /**
   * Gets the value.
   * You can also use the es5 getter (property.value) but this means is provided for inner loops
   * or internal code that must be fast.
   */
  get() {
    return this.tinyProperty.get();
  }

  /**
   * Sets the value and notifies listeners, unless deferred or disposed. You can also use the es5 getter
   * (property.value) but this means is provided for inner loops or internal code that must be fast. If the value
   * hasn't changed, this is a no-op.  For PhET-iO instrumented Properties that are phetioState: true, the value is only
   * set by the state and cannot be modified by other code while isSettingPhetioStateProperty === true
   */
  set(value) {
    // state is managed by the PhetioStateEngine.
    // We still want to set Properties when clearing dynamic elements, see https://github.com/phetsims/phet-io/issues/1906
    const setManagedByPhetioState = _.hasIn(window, 'phet.joist.sim.isSettingPhetioStateProperty') && phet.joist.sim.isSettingPhetioStateProperty.value && _.hasIn(window, 'phet.joist.sim.isClearingPhetioDynamicElementsProperty') && !phet.joist.sim.isClearingPhetioDynamicElementsProperty.value && this.isPhetioInstrumented() && this.phetioState &&
    // However, DerivedProperty should be able to update during PhET-iO state set
    this.isSettable();
    if (!setManagedByPhetioState) {
      this.unguardedSet(value);
    }
  }

  /**
   * For usage by the IO Type during PhET-iO state setting.
   */
  unguardedSet(value) {
    if (!this.isDisposed) {
      if (this.isDeferred) {
        this.deferredValue = value;
        this.hasDeferredValue = true;
      } else if (!this.equalsValue(value)) {
        const oldValue = this.get();
        this.setPropertyValue(value);
        this._notifyListeners(oldValue);
      }
    }
  }

  /**
   * Sets the value without notifying any listeners. This is a place to override if a subtype performs additional work
   * when setting the value.
   */
  setPropertyValue(value) {
    this.tinyProperty.setPropertyValue(value);
  }

  /**
   * Returns true if and only if the specified value equals the value of this property
   */
  equalsValue(value) {
    return this.areValuesEqual(value, this.get());
  }

  /**
   * See TinyProperty.areValuesEqual
   */
  areValuesEqual(a, b) {
    return this.tinyProperty.areValuesEqual(a, b);
  }

  /**
   * NOTE: a few sims are calling this even though they shouldn't
   */
  _notifyListeners(oldValue) {
    const newValue = this.get();

    // Although this is not the idiomatic pattern (since it is guarded in the phetioStartEvent), this function is
    // called so many times that it is worth the optimization for PhET brand.
    js_Tandem.PHET_IO_ENABLED && this.isPhetioInstrumented() && this.phetioStartEvent(ReadOnlyProperty.CHANGED_EVENT_NAME, {
      getData: () => {
        const parameterType = this.phetioType.parameterTypes[0];
        return {
          oldValue: types_NullableIO(parameterType).toStateObject(oldValue),
          newValue: parameterType.toStateObject(newValue)
        };
      }
    });

    // notify listeners, optionally detect loops where this Property is set again before this completes.
    assert && assert(!this.notifying || this.reentrant, `reentry detected, value=${newValue}, oldValue=${oldValue}`);
    this.notifying = true;
    this.tinyProperty.emit(newValue, oldValue, this); // cannot use tinyProperty.notifyListeners because it uses the wrong this
    this.notifying = false;
    js_Tandem.PHET_IO_ENABLED && this.isPhetioInstrumented() && this.phetioEndEvent();
  }

  /**
   * Use this method when mutating a value (not replacing with a new instance) and you want to send notifications about the change.
   * This is different from the normal axon strategy, but may be necessary to prevent memory allocations.
   * This method is unsafe for removing listeners because it assumes the listener list not modified, to save another allocation
   * Only provides the new reference as a callback (no oldvalue)
   * See https://github.com/phetsims/axon/issues/6
   */
  notifyListenersStatic() {
    this._notifyListeners(null);
  }

  /**
   * When deferred, set values do not take effect or send out notifications.  After defer ends, the Property takes
   * its deferred value (if any), and a follow-up action (return value) can be invoked to send out notifications
   * once other Properties have also taken their deferred values.
   *
   * @param isDeferred - whether the Property should be deferred or not
   * @returns - function to notify listeners after calling setDeferred(false),
   *          - null if isDeferred is true, or if the value is unchanged since calling setDeferred(true)
   */
  setDeferred(isDeferred) {
    assert && assert(!this.isDisposed, 'cannot defer Property if already disposed.');
    if (isDeferred) {
      assert && assert(!this.isDeferred, 'Property already deferred');
      this.isDeferred = true;
    } else {
      assert && assert(this.isDeferred, 'Property wasn\'t deferred');
      this.isDeferred = false;
      const oldValue = this.get();

      // Take the new value
      if (this.hasDeferredValue) {
        this.setPropertyValue(this.deferredValue);
        this.hasDeferredValue = false;
        this.deferredValue = null;
      }

      // If the value has changed, prepare to send out notifications (after all other Properties in this transaction
      // have their final values)
      if (!this.equalsValue(oldValue)) {
        return () => !this.isDisposed && this._notifyListeners(oldValue);
      }
    }

    // no action to signify change
    return null;
  }
  get value() {
    return this.get();
  }
  set value(newValue) {
    this.set(newValue);
  }

  /**
   * This function registers an order dependency between this Property and another. Basically this says that when
   * setting PhET-iO state, each dependency must take its final value before this Property fires its notifications.
   * See propertyStateHandlerSingleton.registerPhetioOrderDependency and https://github.com/phetsims/axon/issues/276 for more info.
   */
  addPhetioStateDependencies(dependencies) {
    assert && assert(Array.isArray(dependencies), 'Array expected');
    for (let i = 0; i < dependencies.length; i++) {
      const dependencyProperty = dependencies[i];

      // only if running in PhET-iO brand and both Properties are instrumenting
      if (dependencyProperty instanceof ReadOnlyProperty && dependencyProperty.isPhetioInstrumented() && this.isPhetioInstrumented()) {
        // The dependency should undefer (taking deferred value) before this Property notifies.
        js_propertyStateHandlerSingleton.registerPhetioOrderDependency(dependencyProperty, js_PropertyStatePhase.UNDEFER, this, js_PropertyStatePhase.NOTIFY);
      }
    }
  }

  /**
   * Adds listener and calls it immediately. If listener is already registered, this is a no-op. The initial
   * notification provides the current value for newValue and null for oldValue.
   *
   * @param listener - a function that takes a new value, old value, and this Property as arguments
   * @param [options]
   */
  link(listener, options) {
    if (options && options.phetioDependencies) {
      this.addPhetioStateDependencies(options.phetioDependencies);
    }
    this.tinyProperty.addListener(listener); // cannot use tinyProperty.link() because of wrong this
    listener(this.get(), null, this); // null should be used when an object is expected but unavailable
  }

  /**
   * Add a listener to the Property, without calling it back right away. This is used when you need to register a
   * listener without an immediate callback.
   */
  lazyLink(listener, options) {
    if (options && options.phetioDependencies) {
      this.addPhetioStateDependencies(options.phetioDependencies);
    }
    this.tinyProperty.lazyLink(listener);
  }

  /**
   * Removes a listener. If listener is not registered, this is a no-op.
   */
  unlink(listener) {
    this.tinyProperty.unlink(listener);
  }

  /**
   * Removes all listeners. If no listeners are registered, this is a no-op.
   */
  unlinkAll() {
    this.tinyProperty.unlinkAll();
  }

  /**
   * Links an object's named attribute to this property.  Returns a handle so it can be removed using Property.unlink();
   * Example: modelVisibleProperty.linkAttribute(view,'visible');
   *
   * NOTE: Duplicated with TinyProperty.linkAttribute
   */
  linkAttribute(object, attributeName) {
    const handle = value => {
      object[attributeName] = value;
    };
    this.link(handle);
    return handle;
  }

  /**
   * Provide toString for console debugging, see http://stackoverflow.com/questions/2485632/valueof-vs-tostring-in-javascript
   */
  toString() {
    return `Property#${this.id}{${this.get()}}`;
  }

  /**
   * Convenience function for debugging a Property's value. It prints the new value on registration and when changed.
   * @param name - debug name to be printed on the console
   * @returns - the handle to the linked listener in case it needs to be removed later
   */
  debug(name) {
    const listener = value => console.log(name, value);
    this.link(listener);
    return listener;
  }
  isValueValid(value) {
    return this.getValidationError(value) === null;
  }
  getValidationError(value) {
    return Validation.getValidationError(value, this.valueValidator, ReadOnlyProperty_VALIDATE_OPTIONS_FALSE);
  }

  // Ensures that the Property is eligible for GC
  dispose() {
    // unregister any order dependencies for this Property for PhET-iO state
    if (this.isPhetioInstrumented()) {
      js_propertyStateHandlerSingleton.unregisterOrderDependenciesForProperty(this);
    }
    super.dispose();
    this.tinyProperty.dispose();
  }

  /**
   * Checks whether a listener is registered with this Property
   */
  hasListener(listener) {
    return this.tinyProperty.hasListener(listener);
  }

  /**
   * Returns the number of listeners.
   */
  getListenerCount() {
    return this.tinyProperty.getListenerCount();
  }

  /**
   * Invokes a callback once for each listener
   * @param callback - takes the listener as an argument
   */
  forEachListener(callback) {
    this.tinyProperty.forEachListener(callback);
  }

  /**
   * Returns true if there are any listeners.
   */
  hasListeners() {
    assert && assert(arguments.length === 0, 'Property.hasListeners should be called without arguments');
    return this.tinyProperty.hasListeners();
  }

  /**
   * An observable Property that triggers notifications when the value changes.
   * This caching implementation should be kept in sync with the other parametric IO Type caching implementations.
   */
  static PropertyIO(parameterType) {
    assert && assert(parameterType, 'PropertyIO needs parameterType');
    if (!ReadOnlyProperty_cache.has(parameterType)) {
      ReadOnlyProperty_cache.set(parameterType, new IOType(`PropertyIO<${parameterType.typeName}>`, {
        // We want PropertyIO to work for DynamicProperty and DerivedProperty, but they extend ReadOnlyProperty
        valueType: ReadOnlyProperty,
        documentation: 'Observable values that send out notifications when the value changes. This differs from the ' + 'traditional listener pattern in that added listeners also receive a callback with the current value ' + 'when the listeners are registered. This is a widely-used pattern in PhET-iO simulations.',
        methodOrder: ['link', 'lazyLink'],
        events: [ReadOnlyProperty.CHANGED_EVENT_NAME],
        parameterTypes: [parameterType],
        toStateObject: property => {
          assert && assert(parameterType.toStateObject, `toStateObject doesn't exist for ${parameterType.typeName}`);
          const stateObject = {
            value: parameterType.toStateObject(property.value),
            // Only include validValues if specified, so they only show up in PhET-iO Studio when supplied.
            validValues: property.validValues ? property.validValues.map(v => {
              return parameterType.toStateObject(v);
            }) : null,
            units: types_NullableIO(types_StringIO).toStateObject(property.units)
          };
          return stateObject;
        },
        applyState: (property, stateObject) => {
          const units = types_NullableIO(types_StringIO).fromStateObject(stateObject.units);
          assert && assert(property.units === units, 'Property units do not match');
          assert && assert(property.isSettable(), 'Property should be settable');
          property.unguardedSet(parameterType.fromStateObject(stateObject.value));
          if (stateObject.validValues) {
            property.validValues = stateObject.validValues.map(validValue => parameterType.fromStateObject(validValue));
          }
        },
        stateSchema: {
          value: parameterType,
          validValues: types_NullableIO(types_ArrayIO(parameterType)),
          units: types_NullableIO(types_StringIO)
        },
        methods: {
          getValue: {
            returnType: parameterType,
            parameterTypes: [],
            implementation: ReadOnlyProperty.prototype.get,
            documentation: 'Gets the current value.'
          },
          getValidationError: {
            returnType: types_NullableIO(types_StringIO),
            parameterTypes: [parameterType],
            implementation: ReadOnlyProperty.prototype.getValidationError,
            documentation: 'Checks to see if a proposed value is valid. Returns the first validation error, or null if the value is valid.'
          },
          setValue: {
            returnType: types_VoidIO,
            parameterTypes: [parameterType],
            implementation: function (value) {
              const validationError = Validation.getValidationError(value, this.valueValidator, ReadOnlyProperty_VALIDATE_OPTIONS_FALSE);
              if (validationError) {
                throw new Error(`Validation error: ${validationError}`);
              } else {
                this.set(value);
              }
            },
            documentation: 'Sets the value of the Property. If the value differs from the previous value, listeners are ' + 'notified with the new value.',
            invocableForReadOnlyElements: false
          },
          link: {
            returnType: types_VoidIO,
            // oldValue will start as "null" the first time called
            parameterTypes: [types_FunctionIO(types_VoidIO, [parameterType, types_NullableIO(parameterType)])],
            implementation: ReadOnlyProperty.prototype.link,
            documentation: 'Adds a listener which will be called when the value changes. On registration, the listener is ' + 'also called with the current value. The listener takes two arguments, the new value and the ' + 'previous value.'
          },
          lazyLink: {
            returnType: types_VoidIO,
            // oldValue will start as "null" the first time called
            parameterTypes: [types_FunctionIO(types_VoidIO, [parameterType, types_NullableIO(parameterType)])],
            implementation: ReadOnlyProperty.prototype.lazyLink,
            documentation: 'Adds a listener which will be called when the value changes. This method is like "link", but ' + 'without the current-value callback on registration. The listener takes two arguments, the new ' + 'value and the previous value.'
          },
          unlink: {
            returnType: types_VoidIO,
            parameterTypes: [types_FunctionIO(types_VoidIO, [parameterType])],
            implementation: ReadOnlyProperty.prototype.unlink,
            documentation: 'Removes a listener.'
          }
        }
      }));
    }
    return ReadOnlyProperty_cache.get(parameterType);
  }
  static CHANGED_EVENT_NAME = 'changed';
}
js_axon.register('ReadOnlyProperty', ReadOnlyProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/Property.js
// Copyright 2022, University of Colorado Boulder




/**
 * Adds initial value and reset, and a mutable interface.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */
class Property extends ReadOnlyProperty {
  constructor(value, providedOptions) {
    super(value, providedOptions);
    this._initialValue = value;
  }

  /**
   * Returns the initial value of this Property.
   */
  getInitialValue() {
    return this._initialValue;
  }
  get initialValue() {
    return this.getInitialValue();
  }

  /**
   * Stores the specified value as the initial value, which will be taken on reset. Sims should use this sparingly,
   * typically only in situations where the initial value is unknowable at instantiation.
   */
  setInitialValue(initialValue) {
    this._initialValue = initialValue;
  }

  /**
   * Overridden to make public
   */
  get value() {
    return super.value;
  }

  /**
   * Overridden to make public
   * We ran performance tests on Chrome, and determined that calling super.value = newValue is statistically significantly
   * slower at the p = 0.10 level( looping over 10,000 value calls). Therefore, we prefer this optimization.
   */
  set value(newValue) {
    super.set(newValue);
  }
  reset() {
    this.set(this._initialValue);
  }

  /**
   * Overridden to make public
   */
  set(value) {
    super.set(value);
  }
  isSettable() {
    return true;
  }
}
js_axon.register('Property', Property);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFkT25seVByb3BlcnR5IiwiYXhvbiIsIlByb3BlcnR5IiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsInByb3ZpZGVkT3B0aW9ucyIsIl9pbml0aWFsVmFsdWUiLCJnZXRJbml0aWFsVmFsdWUiLCJpbml0aWFsVmFsdWUiLCJzZXRJbml0aWFsVmFsdWUiLCJuZXdWYWx1ZSIsInNldCIsInJlc2V0IiwiaXNTZXR0YWJsZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUHJvcGVydHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG5pbXBvcnQgVFByb3BlcnR5IGZyb20gJy4vVFByb3BlcnR5LmpzJztcbmltcG9ydCBSZWFkT25seVByb3BlcnR5LCB7IFByb3BlcnR5T3B0aW9ucyB9IGZyb20gJy4vUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgYXhvbiBmcm9tICcuL2F4b24uanMnO1xuXG4vKipcbiAqIEFkZHMgaW5pdGlhbCB2YWx1ZSBhbmQgcmVzZXQsIGFuZCBhIG11dGFibGUgaW50ZXJmYWNlLlxuICpcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb3BlcnR5PFQ+IGV4dGVuZHMgUmVhZE9ubHlQcm9wZXJ0eTxUPiBpbXBsZW1lbnRzIFRQcm9wZXJ0eTxUPiB7XG5cbiAgcHJvdGVjdGVkIF9pbml0aWFsVmFsdWU6IFQ7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCB2YWx1ZTogVCwgcHJvdmlkZWRPcHRpb25zPzogUHJvcGVydHlPcHRpb25zPFQ+ICkge1xuICAgIHN1cGVyKCB2YWx1ZSwgcHJvdmlkZWRPcHRpb25zICk7XG5cbiAgICB0aGlzLl9pbml0aWFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpbml0aWFsIHZhbHVlIG9mIHRoaXMgUHJvcGVydHkuXG4gICAqL1xuICBwdWJsaWMgZ2V0SW5pdGlhbFZhbHVlKCk6IFQge1xuICAgIHJldHVybiB0aGlzLl9pbml0aWFsVmFsdWU7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGluaXRpYWxWYWx1ZSgpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbml0aWFsVmFsdWUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9yZXMgdGhlIHNwZWNpZmllZCB2YWx1ZSBhcyB0aGUgaW5pdGlhbCB2YWx1ZSwgd2hpY2ggd2lsbCBiZSB0YWtlbiBvbiByZXNldC4gU2ltcyBzaG91bGQgdXNlIHRoaXMgc3BhcmluZ2x5LFxuICAgKiB0eXBpY2FsbHkgb25seSBpbiBzaXR1YXRpb25zIHdoZXJlIHRoZSBpbml0aWFsIHZhbHVlIGlzIHVua25vd2FibGUgYXQgaW5zdGFudGlhdGlvbi5cbiAgICovXG4gIHB1YmxpYyBzZXRJbml0aWFsVmFsdWUoIGluaXRpYWxWYWx1ZTogVCApOiB2b2lkIHtcbiAgICB0aGlzLl9pbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogT3ZlcnJpZGRlbiB0byBtYWtlIHB1YmxpY1xuICAgKi9cbiAgcHVibGljIG92ZXJyaWRlIGdldCB2YWx1ZSgpOiBUIHtcbiAgICByZXR1cm4gc3VwZXIudmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogT3ZlcnJpZGRlbiB0byBtYWtlIHB1YmxpY1xuICAgKiBXZSByYW4gcGVyZm9ybWFuY2UgdGVzdHMgb24gQ2hyb21lLCBhbmQgZGV0ZXJtaW5lZCB0aGF0IGNhbGxpbmcgc3VwZXIudmFsdWUgPSBuZXdWYWx1ZSBpcyBzdGF0aXN0aWNhbGx5IHNpZ25pZmljYW50bHlcbiAgICogc2xvd2VyIGF0IHRoZSBwID0gMC4xMCBsZXZlbCggbG9vcGluZyBvdmVyIDEwLDAwMCB2YWx1ZSBjYWxscykuIFRoZXJlZm9yZSwgd2UgcHJlZmVyIHRoaXMgb3B0aW1pemF0aW9uLlxuICAgKi9cbiAgcHVibGljIG92ZXJyaWRlIHNldCB2YWx1ZSggbmV3VmFsdWU6IFQgKSB7XG4gICAgc3VwZXIuc2V0KCBuZXdWYWx1ZSApO1xuICB9XG5cbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xuICAgIHRoaXMuc2V0KCB0aGlzLl9pbml0aWFsVmFsdWUgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPdmVycmlkZGVuIHRvIG1ha2UgcHVibGljXG4gICAqL1xuICBwdWJsaWMgb3ZlcnJpZGUgc2V0KCB2YWx1ZTogVCApOiB2b2lkIHtcbiAgICBzdXBlci5zZXQoIHZhbHVlICk7XG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgaXNTZXR0YWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSB7IFByb3BlcnR5T3B0aW9ucyB9O1xuXG5heG9uLnJlZ2lzdGVyKCAnUHJvcGVydHknLCBQcm9wZXJ0eSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBR0EsT0FBT0EsZ0JBQWdCLE1BQTJCLHVCQUF1QjtBQUN6RSxPQUFPQyxJQUFJLE1BQU0sV0FBVzs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTUMsUUFBUSxTQUFZRixnQkFBZ0IsQ0FBNEI7RUFJNUVHLFdBQVdBLENBQUVDLEtBQVEsRUFBRUMsZUFBb0MsRUFBRztJQUNuRSxLQUFLLENBQUVELEtBQUssRUFBRUMsZUFBZSxDQUFFO0lBRS9CLElBQUksQ0FBQ0MsYUFBYSxHQUFHRixLQUFLO0VBQzVCOztFQUVBO0FBQ0Y7QUFDQTtFQUNTRyxlQUFlQSxDQUFBLEVBQU07SUFDMUIsT0FBTyxJQUFJLENBQUNELGFBQWE7RUFDM0I7RUFFQSxJQUFXRSxZQUFZQSxDQUFBLEVBQU07SUFDM0IsT0FBTyxJQUFJLENBQUNELGVBQWUsRUFBRTtFQUMvQjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNTRSxlQUFlQSxDQUFFRCxZQUFlLEVBQVM7SUFDOUMsSUFBSSxDQUFDRixhQUFhLEdBQUdFLFlBQVk7RUFDbkM7O0VBRUE7QUFDRjtBQUNBO0VBQ0UsSUFBb0JKLEtBQUtBLENBQUEsRUFBTTtJQUM3QixPQUFPLEtBQUssQ0FBQ0EsS0FBSztFQUNwQjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0UsSUFBb0JBLEtBQUtBLENBQUVNLFFBQVcsRUFBRztJQUN2QyxLQUFLLENBQUNDLEdBQUcsQ0FBRUQsUUFBUSxDQUFFO0VBQ3ZCO0VBRU9FLEtBQUtBLENBQUEsRUFBUztJQUNuQixJQUFJLENBQUNELEdBQUcsQ0FBRSxJQUFJLENBQUNMLGFBQWEsQ0FBRTtFQUNoQzs7RUFFQTtBQUNGO0FBQ0E7RUFDa0JLLEdBQUdBLENBQUVQLEtBQVEsRUFBUztJQUNwQyxLQUFLLENBQUNPLEdBQUcsQ0FBRVAsS0FBSyxDQUFFO0VBQ3BCO0VBRWdCUyxVQUFVQSxDQUFBLEVBQVk7SUFDcEMsT0FBTyxJQUFJO0VBQ2I7QUFDRjtBQUlBWixJQUFJLENBQUNhLFFBQVEsQ0FBRSxVQUFVLEVBQUVaLFFBQVEsQ0FBRSJ9
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/BooleanProperty.js
// Copyright 2016-2022, University of Colorado Boulder

/**
 * Property whose value must be true or false. Truthy/falsy values are invalid.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chris Malley (PixelZoom, Inc.)
 */





class BooleanProperty extends Property {
  constructor(value, providedOptions) {
    // Fill in superclass options that are controlled by BooleanProperty.
    const options = optionize()({
      valueType: 'boolean',
      phetioValueType: types_BooleanIO
    }, providedOptions);
    super(value, options);
  }
  toggle() {
    this.value = !this.value;
  }
}
js_axon.register('BooleanProperty', BooleanProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJCb29sZWFuSU8iLCJheG9uIiwiUHJvcGVydHkiLCJCb29sZWFuUHJvcGVydHkiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInZhbHVlVHlwZSIsInBoZXRpb1ZhbHVlVHlwZSIsInRvZ2dsZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQm9vbGVhblByb3BlcnR5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIFByb3BlcnR5IHdob3NlIHZhbHVlIG11c3QgYmUgdHJ1ZSBvciBmYWxzZS4gVHJ1dGh5L2ZhbHN5IHZhbHVlcyBhcmUgaW52YWxpZC5cbiAqXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcbiAqL1xuXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcbmltcG9ydCBCb29sZWFuSU8gZnJvbSAnLi4vLi4vdGFuZGVtL2pzL3R5cGVzL0Jvb2xlYW5JTy5qcyc7XG5pbXBvcnQgYXhvbiBmcm9tICcuL2F4b24uanMnO1xuaW1wb3J0IFByb3BlcnR5LCB7IFByb3BlcnR5T3B0aW9ucyB9IGZyb20gJy4vUHJvcGVydHkuanMnO1xuXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcblxuLy8gY2xpZW50IGNhbm5vdCBzcGVjaWZ5IHN1cGVyY2xhc3Mgb3B0aW9ucyB0aGF0IGFyZSBjb250cm9sbGVkIGJ5IEJvb2xlYW5Qcm9wZXJ0eVxuZXhwb3J0IHR5cGUgQm9vbGVhblByb3BlcnR5T3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxQcm9wZXJ0eU9wdGlvbnM8Ym9vbGVhbj4sICdpc1ZhbGlkVmFsdWUnIHwgJ3ZhbHVlVHlwZScgfCAncGhldGlvVmFsdWVUeXBlJz47XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb2xlYW5Qcm9wZXJ0eSBleHRlbmRzIFByb3BlcnR5PGJvb2xlYW4+IHtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoIHZhbHVlOiBib29sZWFuLCBwcm92aWRlZE9wdGlvbnM/OiBCb29sZWFuUHJvcGVydHlPcHRpb25zICkge1xuXG4gICAgLy8gRmlsbCBpbiBzdXBlcmNsYXNzIG9wdGlvbnMgdGhhdCBhcmUgY29udHJvbGxlZCBieSBCb29sZWFuUHJvcGVydHkuXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxCb29sZWFuUHJvcGVydHlPcHRpb25zLCBTZWxmT3B0aW9ucywgUHJvcGVydHlPcHRpb25zPGJvb2xlYW4+PigpKCB7XG4gICAgICB2YWx1ZVR5cGU6ICdib29sZWFuJyxcbiAgICAgIHBoZXRpb1ZhbHVlVHlwZTogQm9vbGVhbklPXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XG5cbiAgICBzdXBlciggdmFsdWUsIG9wdGlvbnMgKTtcbiAgfVxuXG4gIHB1YmxpYyB0b2dnbGUoKTogdm9pZCB7XG4gICAgdGhpcy52YWx1ZSA9ICF0aGlzLnZhbHVlO1xuICB9XG59XG5cbmF4b24ucmVnaXN0ZXIoICdCb29sZWFuUHJvcGVydHknLCBCb29sZWFuUHJvcGVydHkgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQTRCLGlDQUFpQztBQUU3RSxPQUFPQyxTQUFTLE1BQU0sb0NBQW9DO0FBQzFELE9BQU9DLElBQUksTUFBTSxXQUFXO0FBQzVCLE9BQU9DLFFBQVEsTUFBMkIsZUFBZTtBQU96RCxlQUFlLE1BQU1DLGVBQWUsU0FBU0QsUUFBUSxDQUFVO0VBRXRERSxXQUFXQSxDQUFFQyxLQUFjLEVBQUVDLGVBQXdDLEVBQUc7SUFFN0U7SUFDQSxNQUFNQyxPQUFPLEdBQUdSLFNBQVMsRUFBaUUsQ0FBRTtNQUMxRlMsU0FBUyxFQUFFLFNBQVM7TUFDcEJDLGVBQWUsRUFBRVQ7SUFDbkIsQ0FBQyxFQUFFTSxlQUFlLENBQUU7SUFFcEIsS0FBSyxDQUFFRCxLQUFLLEVBQUVFLE9BQU8sQ0FBRTtFQUN6QjtFQUVPRyxNQUFNQSxDQUFBLEVBQVM7SUFDcEIsSUFBSSxDQUFDTCxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUNBLEtBQUs7RUFDMUI7QUFDRjtBQUVBSixJQUFJLENBQUNVLFFBQVEsQ0FBRSxpQkFBaUIsRUFBRVIsZUFBZSxDQUFFIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/stepTimer.js
// Copyright 2020-2022, University of Colorado Boulder




/**
 * Register and return a singleton timer, which can be used to schedule events. This ticks under the following circumstances:
 * 1) When a JOIST/Sim is active, during the step event
 * 2) In various accessibility tests that require timing
 * 3) In SCENERY/Display's animation loop, which is run by various test and example HTML files
 *
 * In order to run an event when a simulation is inactive and not stepping, see animationFrameTimer.
 *
 * Listeners added with addListener are called with a {number} dt argument (in seconds) via timer.emit in
 * Sim.stepSimulation. Listeners added with setTimeout/setInterval are called with no arguments. This is not specific
 * to the running screen, it is global across all screens.
 */
const stepTimer = new Timer();
js_axon.register('stepTimer', stepTimer);
/* harmony default export */ const js_stepTimer = (stepTimer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheG9uIiwiVGltZXIiLCJzdGVwVGltZXIiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbInN0ZXBUaW1lci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuaW1wb3J0IGF4b24gZnJvbSAnLi9heG9uLmpzJztcbmltcG9ydCBUaW1lciBmcm9tICcuL1RpbWVyLmpzJztcblxuLyoqXG4gKiBSZWdpc3RlciBhbmQgcmV0dXJuIGEgc2luZ2xldG9uIHRpbWVyLCB3aGljaCBjYW4gYmUgdXNlZCB0byBzY2hlZHVsZSBldmVudHMuIFRoaXMgdGlja3MgdW5kZXIgdGhlIGZvbGxvd2luZyBjaXJjdW1zdGFuY2VzOlxuICogMSkgV2hlbiBhIEpPSVNUL1NpbSBpcyBhY3RpdmUsIGR1cmluZyB0aGUgc3RlcCBldmVudFxuICogMikgSW4gdmFyaW91cyBhY2Nlc3NpYmlsaXR5IHRlc3RzIHRoYXQgcmVxdWlyZSB0aW1pbmdcbiAqIDMpIEluIFNDRU5FUlkvRGlzcGxheSdzIGFuaW1hdGlvbiBsb29wLCB3aGljaCBpcyBydW4gYnkgdmFyaW91cyB0ZXN0IGFuZCBleGFtcGxlIEhUTUwgZmlsZXNcbiAqXG4gKiBJbiBvcmRlciB0byBydW4gYW4gZXZlbnQgd2hlbiBhIHNpbXVsYXRpb24gaXMgaW5hY3RpdmUgYW5kIG5vdCBzdGVwcGluZywgc2VlIGFuaW1hdGlvbkZyYW1lVGltZXIuXG4gKlxuICogTGlzdGVuZXJzIGFkZGVkIHdpdGggYWRkTGlzdGVuZXIgYXJlIGNhbGxlZCB3aXRoIGEge251bWJlcn0gZHQgYXJndW1lbnQgKGluIHNlY29uZHMpIHZpYSB0aW1lci5lbWl0IGluXG4gKiBTaW0uc3RlcFNpbXVsYXRpb24uIExpc3RlbmVycyBhZGRlZCB3aXRoIHNldFRpbWVvdXQvc2V0SW50ZXJ2YWwgYXJlIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cy4gVGhpcyBpcyBub3Qgc3BlY2lmaWNcbiAqIHRvIHRoZSBydW5uaW5nIHNjcmVlbiwgaXQgaXMgZ2xvYmFsIGFjcm9zcyBhbGwgc2NyZWVucy5cbiAqL1xuY29uc3Qgc3RlcFRpbWVyID0gbmV3IFRpbWVyKCk7XG5cbmF4b24ucmVnaXN0ZXIoICdzdGVwVGltZXInLCBzdGVwVGltZXIgKTtcbmV4cG9ydCBkZWZhdWx0IHN0ZXBUaW1lcjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE9BQU9BLElBQUksTUFBTSxXQUFXO0FBQzVCLE9BQU9DLEtBQUssTUFBTSxZQUFZOztBQUU5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyxTQUFTLEdBQUcsSUFBSUQsS0FBSyxFQUFFO0FBRTdCRCxJQUFJLENBQUNHLFFBQVEsQ0FBRSxXQUFXLEVBQUVELFNBQVMsQ0FBRTtBQUN2QyxlQUFlQSxTQUFTIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/CallbackTimer.js
// Copyright 2019-2022, University of Colorado Boulder

/**
 * CallbackTimer is a timer that calls a set of registered callbacks.
 * It utilizes AXON/stepTimer, but provides a higher level of abstraction, hiding the details of managing stepTimer.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */




class CallbackTimer {
  // initial delay between when start is called and the timer first fires, in ms

  // fire the timer at this continuous interval, in ms

  // identifier for timer associated with the initial delay

  // identifier for timer associated with the continuous interval

  // has the timer fired since it was started?

  constructor(providedOptions) {
    const options = optionize()({
      delay: 400,
      interval: 100
    }, providedOptions);

    // validate options
    assert && assert(options.delay >= 0, `bad value for delay: ${options.delay}`);
    assert && assert(options.interval > 0, `bad value for interval: ${options.interval}`);
    this.delay = options.delay;
    this.interval = options.interval;
    this.callbacks = [];
    if (options.callback) {
      this.callbacks.push(options.callback);
    }
    this.delayID = null;
    this.intervalID = null;
    this.fired = false;
  }
  isRunning() {
    return this.delayID !== null || this.intervalID !== null;
  }
  start() {
    if (!this.isRunning()) {
      this.fired = false;
      this.delayID = js_stepTimer.setTimeout(() => {
        this.delayID = null;
        this.intervalID = js_stepTimer.setInterval(() => this.fire(), this.interval);

        // fire after scheduling the intervalID, so that isRunning will be true for callbacks, see sun#216
        this.fire();
      }, this.delay);
    }
  }

  /**
   * Stops the timer.
   * @param fire - should we fire if we haven't fired already?
   */
  stop(fire) {
    if (this.isRunning()) {
      if (this.delayID) {
        js_stepTimer.clearTimeout(this.delayID);
        this.delayID = null;
      }
      if (this.intervalID) {
        js_stepTimer.clearInterval(this.intervalID);
        this.intervalID = null;
      }
      if (fire && !this.fired) {
        this.fire();
      }
    }
  }
  addCallback(callback) {
    if (!this.callbacks.includes(callback)) {
      this.callbacks.push(callback);
    }
  }
  removeCallback(callback) {
    const index = this.callbacks.indexOf(callback);
    if (index !== -1) {
      this.callbacks.splice(index, 1);
    }
  }

  /**
   * Calls all callbacks. Clients are free to call this when the timer is not running.
   */
  fire() {
    const callbacksCopy = this.callbacks.slice(0);
    for (let i = 0; i < callbacksCopy.length; i++) {
      callbacksCopy[i]();
    }
    this.fired = true;
  }
  dispose() {
    this.stop(false);
    this.callbacks.length = 0;
  }
}
js_axon.register('CallbackTimer', CallbackTimer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/PhetioDataHandler.js
// Copyright 2022, University of Colorado Boulder

/**
 * Helper type that supports a `parameters` member.
 * This is mostly useful for PhET-iO instrumented sub-class to use that takes a variable number of parameters in their
 * IOType. With this function you gain parameter validation, PhET-iO documentation, and data stream support.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */








const PhetioDataHandler_VALIDATE_OPTIONS_FALSE = {
  validateValidator: false
};
// Simulations have thousands of Emitters, so we re-use objects where possible.
const EMPTY_ARRAY = [];
assert && Object.freeze(EMPTY_ARRAY);

// allowed keys to options.parameters
const PARAMETER_KEYS = ['name',
// required for phet-io instrumented Actions
'phetioType',
// required for phet-io instrumented Actions
'phetioDocumentation',
// optional, additional documentation for this specific parameter

// specify this to keep the parameter private to the PhET-iO API. To support emitting and executing over
// the PhET-iO API, phetioPrivate parameters must not ever be before a public one. For example
// `emit1( public1, private1, public2)` is not allowed. Instead it must be ordered like `emit( public1, public2, private1 )`
'phetioPrivate'].concat(Validation.VALIDATOR_KEYS);

// helper closures
const paramToPhetioType = param => param.phetioType;
const paramToName = param => param.name;
class PhetioDataHandler extends PhetioObject {
  constructor(providedOptions) {
    const options = optionize()({
      // see PARAMETER_KEYS for a list of legal keys, their types, and documentation
      parameters: EMPTY_ARRAY,
      // phet-io - see PhetioObject.js for doc
      tandem: js_Tandem.OPTIONAL,
      phetioPlayback: PhetioObject.DEFAULT_OPTIONS.phetioPlayback,
      phetioEventMetadata: PhetioObject.DEFAULT_OPTIONS.phetioEventMetadata,
      phetioDocumentation: ''
    }, providedOptions);
    assert && PhetioDataHandler.validateParameters(options.parameters, options.tandem.supplied);
    assert && assert(options.phetioType === undefined, 'PhetioDataHandler sets its own phetioType. Instead provide parameter phetioTypes through `options.parameters` with a phetioOuterType');

    // list of parameters, see options.parameters. Filter out phetioPrivate parameters, all `phetioPrivate`
    // parameters will not have a `phetioType`, see `validateParameters`.
    const phetioPublicParameters = options.parameters.filter(paramToPhetioType);
    options.phetioType = options.phetioOuterType(phetioPublicParameters.map(paramToPhetioType));

    // phetioPlayback events need to know the order the arguments occur in order to call EmitterIO.emit()
    // Indicate whether the event is for playback, but leave this "sparse"--only indicate when this happens to be true
    if (options.phetioPlayback) {
      options.phetioEventMetadata = options.phetioEventMetadata || {}; // phetioEventMetadata defaults to null

      assert && assert(!options.phetioEventMetadata.hasOwnProperty('dataKeys'), 'dataKeys should be supplied by PhetioDataHandler, not elsewhere');
      options.phetioEventMetadata.dataKeys = options.parameters.map(paramToName);
    }
    options.phetioDocumentation = PhetioDataHandler.getPhetioDocumentation(options.phetioDocumentation, phetioPublicParameters);
    super(options);

    // Note: one test indicates stripping this out via assert && in builds may save around 300kb heap
    this.parameters = options.parameters;
  }

  /**
   * @param parameters
   * @param tandemSupplied - proxy for whether the PhetioObject is instrumented.  We cannot call
   *                                 - PhetioObject.isPhetioInstrumented() until after the supercall, so we use this beforehand.
   */
  static validateParameters(parameters, tandemSupplied) {
    // validate the parameters object
    js_validate(parameters, {
      valueType: Array
    });

    // PhetioDataHandler only supports phetioPrivate parameters at the end of the emit call, so once we hit the first phetioPrivate
    // parameter, then assert that the rest of them afterwards are as well.
    let reachedPhetioPrivate = false;

    // we must iterate from the first parameter to the last parameter to support phetioPrivate
    for (let i = 0; i < parameters.length; i++) {
      const parameter = parameters[i]; // metadata about a single parameter

      assert && assert(Object.getPrototypeOf(parameter) === Object.prototype, 'Extra prototype on parameter object is a code smell');
      reachedPhetioPrivate = reachedPhetioPrivate || parameter.phetioPrivate;
      assert && reachedPhetioPrivate && assert(parameter.phetioPrivate, 'after first phetioPrivate parameter, all subsequent parameters must be phetioPrivate');
      assert && tandemSupplied && js_Tandem.VALIDATION && assert(parameter.phetioType || parameter.phetioPrivate, 'instrumented Emitters must include phetioType for each parameter or be marked as `phetioPrivate`.');
      assert && parameter.phetioType && assert(parameter.name, '`name` is a required parameter for phet-io instrumented parameters.');
      assert && js_assertMutuallyExclusiveOptions(parameter, ['phetioPrivate'], ['name', 'phetioType', 'phetioDocumentation']);
      assert && assert(_.intersection(Object.keys(parameter), Validation.VALIDATOR_KEYS).length > 0, `validator must be specified for parameter ${i}`);
      for (const key in parameter) {
        assert && assert(PARAMETER_KEYS.includes(key), `unrecognized parameter key: ${key}`);
      }

      // Changing after construction indicates a logic error.
      assert && Object.freeze(parameters[i]);

      // validate the options passed in to validate each PhetioDataHandler argument
      Validation.validateValidator(parameter);
    }

    // Changing after construction indicates a logic error.
    assert && Object.freeze(parameters);
  }

  /**
   * Validate that provided args match the expected schema given via options.parameters.
   */
  validateArguments(...args) {
    assert && assert(args.length === this.parameters.length, `Emitted unexpected number of args. Expected: ${this.parameters.length} and received ${args.length}`);
    for (let i = 0; i < this.parameters.length; i++) {
      const parameter = this.parameters[i];
      assert && js_validate(args[i], parameter, PhetioDataHandler_VALIDATE_OPTIONS_FALSE);

      // valueType overrides the phetioType validator so we don't use that one if there is a valueType
      if (parameter.phetioType && !parameter.valueType) {
        assert && js_validate(args[i], parameter.phetioType.validator, PhetioDataHandler_VALIDATE_OPTIONS_FALSE);
      }
    }
  }

  /**
   * Validate that provided args match the expected schema given via options.parameters.
   */
  getValidationErrors(...args) {
    assert && assert(args.length === this.parameters.length, `Emitted unexpected number of args. Expected: ${this.parameters.length} and received ${args.length}`);
    const errors = [];
    for (let i = 0; i < this.parameters.length; i++) {
      const parameter = this.parameters[i];
      let error = Validation.getValidationError(args[i], parameter, PhetioDataHandler_VALIDATE_OPTIONS_FALSE);
      error !== null && errors.push(error);

      // valueType overrides the phetioType validator so we don't use that one if there is a valueType
      if (parameter.phetioType && !parameter.valueType) {
        error = Validation.getValidationError(args[i], parameter.phetioType.validator, PhetioDataHandler_VALIDATE_OPTIONS_FALSE);
        error !== null && errors.push(error);
      }
    }
    return errors;
  }

  /**
   * Gets the data that will be emitted to the PhET-iO data stream, for an instrumented simulation.
   * @returns the data, keys dependent on parameter metadata
   */
  getPhetioData(...args) {
    assert && assert(js_Tandem.PHET_IO_ENABLED, 'should only get phet-io data in phet-io brand');

    // null if there are no arguments. dataStream.js omits null values for data
    let data = null;
    if (this.parameters.length > 0) {
      // Enumerate named argsObject for the data stream.
      data = {};
      for (let i = 0; i < this.parameters.length; i++) {
        const element = this.parameters[i];
        if (!element.phetioPrivate) {
          assert && assert(element.name, 'name required');
          data[element.name] = element.phetioType.toStateObject(args[i]);
        }
      }
    }
    return data;
  }

  /**
   * Get the phetioDocumentation compiled from all the parameters
   */
  static getPhetioDocumentation(currentPhetioDocumentation, parameters) {
    const paramToDocString = param => {
      const docText = param.phetioDocumentation ? ` - ${param.phetioDocumentation}` : '';
      return `<li>${param.name}: ${param.phetioType.typeName}${docText}</li>`;
    };
    return currentPhetioDocumentation + (parameters.length === 0 ? '<br>No parameters.' : `${'<br>The parameters are:<br/>' + '<ol>'}${parameters.map(paramToDocString).join('<br/>')}</ol>`);
  }
}
js_axon.register('PhetioDataHandler', PhetioDataHandler);
/* harmony default export */ const js_PhetioDataHandler = (PhetioDataHandler);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/Emitter.js
// Copyright 2019-2022, University of Colorado Boulder

/**
 * Event & listener abstraction for a single "event" type. The type provides extra functionality beyond just notifying
 * listeners. It adds PhET-iO instrumentation capabilities as well as validation. For the lightest-weight, fastest
 * solution with the smallest memory footprint, see `TinyEmitter`.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */









// By default, Emitters are not stateful
const PHET_IO_STATE_DEFAULT = false;
class Emitter extends js_PhetioDataHandler {
  // provide Emitter functionality via composition

  /**
   * IO Type for Emitter.
   *
   * Providing validators to instrumented Emitters:
   * Instrumented Emitters should have their `validators` for each argument passed via EmitterIO (the phetioType).
   * To provide validators, there are two methods. First, by default each IOType has its own
   * validator that will be used. So specifying an argument object like `{ type: NumberIO }` will automatically use
   * `NumberIO.validator` as the validator. This can be overridden with the `validator` key (second option), like
   * { type: NumberIO, validator: { isValidValue: v=> typeof v === 'number' &&  v < 5 } }`
   * NOTE: currently the implementation is either/or, if a validator is provided via the `validator` key, the validator
   * from the `type` will be ignored.
   * see https://github.com/phetsims/axon/issues/204 for more details.
   *
   * @author Sam Reid (PhET Interactive Simulations)
   * @author Michael Kauzmann (PhET Interactive Simulations)
   * @author Andrew Adare (PhET Interactive Simulations)
   */
  static EmitterIO = parameterTypes => {
    const key = parameterTypes.map(getTypeName).join(',');
    if (!Emitter_cache.has(key)) {
      Emitter_cache.set(key, new IOType(`EmitterIO<${parameterTypes.map(getTypeName).join(', ')}>`, {
        valueType: Emitter,
        documentation: 'Emits when an event occurs and calls added listeners.',
        parameterTypes: parameterTypes,
        events: ['emitted'],
        metadataDefaults: {
          phetioState: PHET_IO_STATE_DEFAULT
        },
        methods: {
          addListener: {
            returnType: types_VoidIO,
            parameterTypes: [types_FunctionIO(types_VoidIO, parameterTypes)],
            implementation: Emitter.prototype.addListener,
            documentation: 'Adds a listener which will be called when the emitter emits.'
          },
          removeListener: {
            returnType: types_VoidIO,
            parameterTypes: [types_FunctionIO(types_VoidIO, parameterTypes)],
            implementation: Emitter.prototype.removeListener,
            documentation: 'Remove a listener.'
          },
          emit: {
            returnType: types_VoidIO,
            parameterTypes: parameterTypes,
            // Match `Emitter.emit`'s dynamic number of arguments
            implementation: function (...values) {
              const errors = this.getValidationErrors(...values);
              if (errors.length > 0) {
                throw new Error(`Validation errors: ${errors.join(', ')}`);
              } else {
                this.emit(values);
              }
            },
            documentation: 'Emits a single event to all listeners.',
            invocableForReadOnlyElements: false
          }
        }
      }));
    }
    return Emitter_cache.get(key);
  };
  constructor(providedOptions) {
    const options = optionize()({
      phetioOuterType: Emitter.EmitterIO,
      phetioState: PHET_IO_STATE_DEFAULT
    }, providedOptions);
    super(options);
    this.tinyEmitter = new TinyEmitter();
  }

  /**
   * Emit to notify listeners
   */
  emit(...args) {
    assert && assert(this.tinyEmitter instanceof TinyEmitter, 'Emitter should not emit until constructor complete');
    assert && this.validateArguments(...args);

    // Although this is not the idiomatic pattern (since it is guarded in the phetioStartEvent), this function is
    // called so many times that it is worth the optimization for PhET brand.
    js_Tandem.PHET_IO_ENABLED && this.isPhetioInstrumented() && this.phetioStartEvent('emitted', {
      data: this.getPhetioData(...args)
    });
    this.tinyEmitter.emit(...args);
    js_Tandem.PHET_IO_ENABLED && this.isPhetioInstrumented() && this.phetioEndEvent();
  }

  /**
   * Disposes an Emitter. All listeners are removed.
   */
  dispose() {
    this.tinyEmitter.dispose();
    super.dispose();
  }

  /**
   * Adds a listener which will be called during emit.
   */
  addListener(listener) {
    this.tinyEmitter.addListener(listener);
  }

  /**
   * Removes a listener
   */
  removeListener(listener) {
    this.tinyEmitter.removeListener(listener);
  }

  /**
   * Removes all the listeners
   */
  removeAllListeners() {
    this.tinyEmitter.removeAllListeners();
  }

  /**
   * Checks whether a listener is registered with this Emitter
   */
  hasListener(listener) {
    return this.tinyEmitter.hasListener(listener);
  }

  /**
   * Returns true if there are any listeners.
   */
  hasListeners() {
    return this.tinyEmitter.hasListeners();
  }

  /**
   * Returns the number of listeners.
   */
  getListenerCount() {
    return this.tinyEmitter.getListenerCount();
  }

  /**
   * Convenience function for debugging a Property's value. It prints the new value on registration and when changed.
   * @param name - debug name to be printed on the console
   * @returns - the handle to the listener added in case it needs to be removed later
   */
  debug(name) {
    const listener = (...args) => console.log(name, ...args);
    this.addListener(listener);
    return listener;
  }
}
const getTypeName = ioType => ioType.typeName;

// {Map.<string, IOType>} - Cache each parameterized IOType so that
// it is only created once.
const Emitter_cache = new Map();
js_axon.register('Emitter', Emitter);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/types/InfiniteNumberIO.js
// Copyright 2018-2022, University of Colorado Boulder

/**
 * IO Type for JS's built-in number type, but adds explicit support for positive and negative infinity.
 * Typical use cases should use NumberIO, but if you have a case that must support infinities, please
 * use this instead.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */




const InfiniteNumberIO = new IOType('InfiniteNumberIO', {
  valueType: 'number',
  documentation: 'IO Type for Javascript\'s number primitive type',
  toStateObject: value => value === Number.POSITIVE_INFINITY ? 'POSITIVE_INFINITY' : value === Number.NEGATIVE_INFINITY ? 'NEGATIVE_INFINITY' : value,
  fromStateObject: stateObject => stateObject === 'POSITIVE_INFINITY' ? Number.POSITIVE_INFINITY : stateObject === 'NEGATIVE_INFINITY' ? Number.NEGATIVE_INFINITY : stateObject,
  stateSchema: StateSchema.asValue('\'POSITIVE_INFINITY\'|\'NEGATIVE_INFINITY\'|number', {
    isValidValue: value => value === 'POSITIVE_INFINITY' || value === 'NEGATIVE_INFINITY' || typeof value === 'number' && !isNaN(value)
  })
});
tandemNamespace.register('InfiniteNumberIO', InfiniteNumberIO);
/* harmony default export */ const types_InfiniteNumberIO = (InfiniteNumberIO);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0YW5kZW1OYW1lc3BhY2UiLCJJT1R5cGUiLCJTdGF0ZVNjaGVtYSIsIkluZmluaXRlTnVtYmVySU8iLCJ2YWx1ZVR5cGUiLCJkb2N1bWVudGF0aW9uIiwidG9TdGF0ZU9iamVjdCIsInZhbHVlIiwiTnVtYmVyIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJORUdBVElWRV9JTkZJTklUWSIsImZyb21TdGF0ZU9iamVjdCIsInN0YXRlT2JqZWN0Iiwic3RhdGVTY2hlbWEiLCJhc1ZhbHVlIiwiaXNWYWxpZFZhbHVlIiwiaXNOYU4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkluZmluaXRlTnVtYmVySU8udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogSU8gVHlwZSBmb3IgSlMncyBidWlsdC1pbiBudW1iZXIgdHlwZSwgYnV0IGFkZHMgZXhwbGljaXQgc3VwcG9ydCBmb3IgcG9zaXRpdmUgYW5kIG5lZ2F0aXZlIGluZmluaXR5LlxuICogVHlwaWNhbCB1c2UgY2FzZXMgc2hvdWxkIHVzZSBOdW1iZXJJTywgYnV0IGlmIHlvdSBoYXZlIGEgY2FzZSB0aGF0IG11c3Qgc3VwcG9ydCBpbmZpbml0aWVzLCBwbGVhc2VcbiAqIHVzZSB0aGlzIGluc3RlYWQuXG4gKlxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5pbXBvcnQgdGFuZGVtTmFtZXNwYWNlIGZyb20gJy4uL3RhbmRlbU5hbWVzcGFjZS5qcyc7XG5pbXBvcnQgSU9UeXBlIGZyb20gJy4vSU9UeXBlLmpzJztcbmltcG9ydCBTdGF0ZVNjaGVtYSBmcm9tICcuL1N0YXRlU2NoZW1hLmpzJztcblxuZXhwb3J0IHR5cGUgSW5maW5pdGVOdW1iZXJTdGF0ZU9iamVjdCA9IG51bWJlciB8ICdQT1NJVElWRV9JTkZJTklUWScgfCAnTkVHQVRJVkVfSU5GSU5JVFknO1xuXG5jb25zdCBJbmZpbml0ZU51bWJlcklPID0gbmV3IElPVHlwZTxudW1iZXIsIEluZmluaXRlTnVtYmVyU3RhdGVPYmplY3Q+KCAnSW5maW5pdGVOdW1iZXJJTycsIHtcbiAgdmFsdWVUeXBlOiAnbnVtYmVyJyxcbiAgZG9jdW1lbnRhdGlvbjogJ0lPIFR5cGUgZm9yIEphdmFzY3JpcHRcXCdzIG51bWJlciBwcmltaXRpdmUgdHlwZScsXG4gIHRvU3RhdGVPYmplY3Q6IHZhbHVlID0+IHZhbHVlID09PSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgPyAnUE9TSVRJVkVfSU5GSU5JVFknIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPT09IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSA/ICdORUdBVElWRV9JTkZJTklUWScgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgZnJvbVN0YXRlT2JqZWN0OiBzdGF0ZU9iamVjdCA9PiBzdGF0ZU9iamVjdCA9PT0gJ1BPU0lUSVZFX0lORklOSVRZJyA/IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVPYmplY3QgPT09ICdORUdBVElWRV9JTkZJTklUWScgPyBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlT2JqZWN0LFxuICBzdGF0ZVNjaGVtYTogU3RhdGVTY2hlbWEuYXNWYWx1ZTxudW1iZXIsIEluZmluaXRlTnVtYmVyU3RhdGVPYmplY3Q+KCAnXFwnUE9TSVRJVkVfSU5GSU5JVFlcXCd8XFwnTkVHQVRJVkVfSU5GSU5JVFlcXCd8bnVtYmVyJywge1xuICAgIGlzVmFsaWRWYWx1ZTogKCB2YWx1ZTogSW5maW5pdGVOdW1iZXJTdGF0ZU9iamVjdCApID0+IHZhbHVlID09PSAnUE9TSVRJVkVfSU5GSU5JVFknIHx8IHZhbHVlID09PSAnTkVHQVRJVkVfSU5GSU5JVFknIHx8ICggdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiAhaXNOYU4oIHZhbHVlICkgKVxuICB9IClcbn0gKTtcblxudGFuZGVtTmFtZXNwYWNlLnJlZ2lzdGVyKCAnSW5maW5pdGVOdW1iZXJJTycsIEluZmluaXRlTnVtYmVySU8gKTtcbmV4cG9ydCBkZWZhdWx0IEluZmluaXRlTnVtYmVySU87Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx1QkFBdUI7QUFDbkQsT0FBT0MsTUFBTSxNQUFNLGFBQWE7QUFDaEMsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUkxQyxNQUFNQyxnQkFBZ0IsR0FBRyxJQUFJRixNQUFNLENBQXFDLGtCQUFrQixFQUFFO0VBQzFGRyxTQUFTLEVBQUUsUUFBUTtFQUNuQkMsYUFBYSxFQUFFLGlEQUFpRDtFQUNoRUMsYUFBYSxFQUFFQyxLQUFLLElBQUlBLEtBQUssS0FBS0MsTUFBTSxDQUFDQyxpQkFBaUIsR0FBRyxtQkFBbUIsR0FDeERGLEtBQUssS0FBS0MsTUFBTSxDQUFDRSxpQkFBaUIsR0FBRyxtQkFBbUIsR0FDeERILEtBQUs7RUFDN0JJLGVBQWUsRUFBRUMsV0FBVyxJQUFJQSxXQUFXLEtBQUssbUJBQW1CLEdBQUdKLE1BQU0sQ0FBQ0MsaUJBQWlCLEdBQzlERyxXQUFXLEtBQUssbUJBQW1CLEdBQUdKLE1BQU0sQ0FBQ0UsaUJBQWlCLEdBQzlERSxXQUFXO0VBQzNDQyxXQUFXLEVBQUVYLFdBQVcsQ0FBQ1ksT0FBTyxDQUFxQyxvREFBb0QsRUFBRTtJQUN6SEMsWUFBWSxFQUFJUixLQUFnQyxJQUFNQSxLQUFLLEtBQUssbUJBQW1CLElBQUlBLEtBQUssS0FBSyxtQkFBbUIsSUFBTSxPQUFPQSxLQUFLLEtBQUssUUFBUSxJQUFJLENBQUNTLEtBQUssQ0FBRVQsS0FBSztFQUN0SyxDQUFDO0FBQ0gsQ0FBQyxDQUFFO0FBRUhQLGVBQWUsQ0FBQ2lCLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRWQsZ0JBQWdCLENBQUU7QUFDaEUsZUFBZUEsZ0JBQWdCIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/dot.js
// Copyright 2013-2022, University of Colorado Boulder


const dot_dot = new js_Namespace('dot');

// TODO: performance: check browser speed to compare how fast this is. We may need to add a 32 option for GL ES.
dot_dot.register('FastArray', window.Float64Array ? window.Float64Array : window.Array);

// will be filled in by other modules
/* harmony default export */ const js_dot = (dot_dot);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOYW1lc3BhY2UiLCJkb3QiLCJyZWdpc3RlciIsIndpbmRvdyIsIkZsb2F0NjRBcnJheSIsIkFycmF5Il0sInNvdXJjZXMiOlsiZG90LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG5cbmltcG9ydCBOYW1lc3BhY2UgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL05hbWVzcGFjZS5qcyc7XG5cbmNvbnN0IGRvdCA9IG5ldyBOYW1lc3BhY2UoICdkb3QnICk7XG5cbi8vIFRPRE86IHBlcmZvcm1hbmNlOiBjaGVjayBicm93c2VyIHNwZWVkIHRvIGNvbXBhcmUgaG93IGZhc3QgdGhpcyBpcy4gV2UgbWF5IG5lZWQgdG8gYWRkIGEgMzIgb3B0aW9uIGZvciBHTCBFUy5cbmRvdC5yZWdpc3RlciggJ0Zhc3RBcnJheScsIHdpbmRvdy5GbG9hdDY0QXJyYXkgPyB3aW5kb3cuRmxvYXQ2NEFycmF5IDogd2luZG93LkFycmF5ICk7XG5cbi8vIHdpbGwgYmUgZmlsbGVkIGluIGJ5IG90aGVyIG1vZHVsZXNcbmV4cG9ydCBkZWZhdWx0IGRvdDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUdBLE9BQU9BLFNBQVMsTUFBTSxpQ0FBaUM7QUFFdkQsTUFBTUMsR0FBRyxHQUFHLElBQUlELFNBQVMsQ0FBRSxLQUFLLENBQUU7O0FBRWxDO0FBQ0FDLEdBQUcsQ0FBQ0MsUUFBUSxDQUFFLFdBQVcsRUFBRUMsTUFBTSxDQUFDQyxZQUFZLEdBQUdELE1BQU0sQ0FBQ0MsWUFBWSxHQUFHRCxNQUFNLENBQUNFLEtBQUssQ0FBRTs7QUFFckY7QUFDQSxlQUFlSixHQUFHIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Range.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * A numeric range.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Andrew Adare
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */




class Range {
  // the minimum value of the range

  // the maximum value of the range

  /**
   * @param min - the minimum value of the range
   * @param max - the maximum value of the range
   */
  constructor(min, max) {
    this._min = min;
    this._max = max;
  }

  /**
   * Getter for min
   */
  getMin() {
    return this._min;
  }
  get min() {
    return this.getMin();
  }
  set min(min) {
    this.setMin(min);
  }

  /**
   * TODO: Allow chaining, https://github.com/phetsims/sun/issues/792
   * Setter for min
   */
  setMin(min) {
    assert && assert(min <= this._max, `min must be <= max: ${min}`);
    this._min = min;
  }

  /**
   * Getter for max
   */
  getMax() {
    return this._max;
  }
  get max() {
    return this.getMax();
  }
  set max(max) {
    this.setMax(max);
  }

  /**
   * Setter for max
   */
  setMax(max) {
    assert && assert(this._min <= max, `max must be >= to min: ${max}`);
    this._max = max;
  }

  /**
   * Sets the minimum and maximum value of the range
   */
  setMinMax(min, max) {
    assert && assert(min <= max, `max must be >= to min. min: ${min}, max: ${max}`);
    this._min = min;
    this._max = max;
    return this;
  }

  /**
   * Makes a copy of this range
   */
  copy() {
    return new Range(this._min, this._max); // eslint-disable-line no-html-constructors
  }

  /**
   * Gets the length of this range, that is the difference between the maximum and minimum value of this range
   */
  getLength() {
    return this._max - this._min;
  }

  /**
   * Gets the center of this range, that is the average value of the maximum and minimum value of this range
   */
  getCenter() {
    return (this._max + this._min) / 2;
  }

  /**
   * Determines if this range contains the value
   */
  contains(value) {
    return value >= this._min && value <= this._max;
  }

  /**
   * Does this range contain the specified range?
   */
  containsRange(range) {
    return this._min <= range.min && this._max >= range.max;
  }

  /**
   * Determine if this range overlaps (intersects) with another range
   */
  intersects(range) {
    return this._max >= range.min && range.max >= this._min;
  }

  /**
   * Do the two ranges overlap with one another?  Note that this assumes that
   * This is a open interval.
   */
  intersectsExclusive(range) {
    return this._max > range.min && range.max > this._min;
  }

  /**
   *
   * REVIEW: The naming is not helping me understand that this function is just the immutable version of includeRange().
   *
   * The smallest range that contains both this range and the input range, returned as a copy.
   *
   * The method below is the immutable form of the function includeRange(). The method will return a new range, and will not modify
   * this range.
   */
  union(range) {
    return new Range(
    // eslint-disable-line no-html-constructors
    Math.min(this.min, range.min), Math.max(this.max, range.max));
  }

  /**
   * REVIEW: The naming is not helping me understand that this function is just the immutable version of constrainRange().
   *
   * The smallest range that is contained by both this range and the input range, returned as a copy.
   *
   * The method below the immutable form of the function constrainRange(). The method below will return a new range, and will not modify
   * this range.
   */
  intersection(range) {
    return new Range(
    // eslint-disable-line no-html-constructors
    Math.max(this.min, range.min), Math.min(this.max, range.max));
  }

  /**
   * Modifies this range so that it contains both its original range and the input range.
   *
   * This is the mutable form of the function union(). This will mutate (change) this range, in addition to returning
   * this range itself.
   */
  includeRange(range) {
    return this.setMinMax(Math.min(this.min, range.min), Math.max(this.max, range.max));
  }

  /**
   * Modifies this range so that it is the largest range contained both in its original range and in the input range.
   *
   * This is the mutable form of the function intersection(). This will mutate (change) this range, in addition to returning
   * this range itself.
   */
  constrainRange(range) {
    return this.setMinMax(Math.max(this.min, range.min), Math.min(this.max, range.max));
  }

  /**
   * REVIEW: do we also need a mutable form of shifted?
   *
   * Returns a new range that is the same as this range, but shifted by the specified amount.
   */
  shifted(n) {
    return new Range(this.min + n, this.max + n); // eslint-disable-line no-html-constructors
  }

  /**
   * Converts the attributes of this range to a string
   */
  toString() {
    return `[Range (min:${this._min} max:${this._max})]`;
  }

  /**
   * Constrains a value to the range.
   */
  constrainValue(value) {
    return Math.min(Math.max(value, this._min), this._max);
  }

  /**
   * Determines if this Range is equal to some object.
   */
  equals(object) {
    return this.constructor === object.constructor && this._min === object.min && this._max === object.max;
  }

  /**
   * Given a value, normalize it to this Range's length, returning a value between 0 and 1 for values contained in
   * the Range. If the value is not contained in Range, then the return value will not be between 0 and 1.
   */
  getNormalizedValue(value) {
    assert && assert(this.getLength() !== 0, 'cannot get normalized value without a range length');
    return (value - this.min) / this.getLength();
  }

  /**
   * Compute the opposite of a normalized value. Given a normalized value (between 0 and 1). Worked with any number
   * though, (even outside of the range). It is the client's responsibility to clamp if that is important to the
   * usage.
   */
  expandNormalizedValue(normalizedValue) {
    assert && assert(this.getLength() !== 0, 'cannot get expand normalized value without a range length');
    return normalizedValue * this.getLength() + this.min;
  }

  /**
   * In https://github.com/phetsims/dot/issues/57, defaultValue was moved to RangeWithValue.
   * This ES5 getter catches programming errors where defaultValue is still used with Range.
   */
  get defaultValue() {
    throw new Error('defaultValue is undefined, did you mean to use RangeWithValue?');
  }
  static RangeIO = new IOType('RangeIO', {
    valueType: Range,
    documentation: 'A range with "min" and a "max" members.',
    toStateObject: range => ({
      min: types_InfiniteNumberIO.toStateObject(range.min),
      max: types_InfiniteNumberIO.toStateObject(range.max)
    }),
    // eslint-disable-next-line no-html-constructors
    fromStateObject: stateObject => new Range(types_InfiniteNumberIO.fromStateObject(stateObject.min), types_InfiniteNumberIO.fromStateObject(stateObject.max)),
    stateSchema: {
      min: types_InfiniteNumberIO,
      max: types_InfiniteNumberIO
    }
  });
  static EVERYTHING = new Range(Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY); // eslint-disable-line no-html-constructors
  static NOTHING = new Range(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY); // eslint-disable-line no-html-constructors
}

js_dot.register('Range', Range);
/* harmony default export */ const js_Range = (Range);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/tandem/js/types/NumberIO.js
// Copyright 2018-2022, University of Colorado Boulder

/**
 * IO Type for JS's built-in number type.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Andrew Adare (PhET Interactive Simulations)
 */




const NumberIO = new IOType('NumberIO', {
  valueType: 'number',
  documentation: 'IO Type for Javascript\'s number primitive type',
  toStateObject: _.identity,
  fromStateObject: stateObject => stateObject,
  stateSchema: StateSchema.asValue('number', {
    isValidValue: value => typeof value === 'number' && !isNaN(value) && value !== Number.POSITIVE_INFINITY && value !== Number.NEGATIVE_INFINITY
  })
});
tandemNamespace.register('NumberIO', NumberIO);
/* harmony default export */ const types_NumberIO = (NumberIO);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0YW5kZW1OYW1lc3BhY2UiLCJJT1R5cGUiLCJTdGF0ZVNjaGVtYSIsIk51bWJlcklPIiwidmFsdWVUeXBlIiwiZG9jdW1lbnRhdGlvbiIsInRvU3RhdGVPYmplY3QiLCJfIiwiaWRlbnRpdHkiLCJmcm9tU3RhdGVPYmplY3QiLCJzdGF0ZU9iamVjdCIsInN0YXRlU2NoZW1hIiwiYXNWYWx1ZSIsImlzVmFsaWRWYWx1ZSIsInZhbHVlIiwiaXNOYU4iLCJOdW1iZXIiLCJQT1NJVElWRV9JTkZJTklUWSIsIk5FR0FUSVZFX0lORklOSVRZIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJOdW1iZXJJTy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBJTyBUeXBlIGZvciBKUydzIGJ1aWx0LWluIG51bWJlciB0eXBlLlxuICpcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKiBAYXV0aG9yIEFuZHJldyBBZGFyZSAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5pbXBvcnQgdGFuZGVtTmFtZXNwYWNlIGZyb20gJy4uL3RhbmRlbU5hbWVzcGFjZS5qcyc7XG5pbXBvcnQgSU9UeXBlIGZyb20gJy4vSU9UeXBlLmpzJztcbmltcG9ydCBTdGF0ZVNjaGVtYSBmcm9tICcuL1N0YXRlU2NoZW1hLmpzJztcblxuY29uc3QgTnVtYmVySU8gPSBuZXcgSU9UeXBlPG51bWJlciwgbnVtYmVyPiggJ051bWJlcklPJywge1xuICB2YWx1ZVR5cGU6ICdudW1iZXInLFxuICBkb2N1bWVudGF0aW9uOiAnSU8gVHlwZSBmb3IgSmF2YXNjcmlwdFxcJ3MgbnVtYmVyIHByaW1pdGl2ZSB0eXBlJyxcbiAgdG9TdGF0ZU9iamVjdDogXy5pZGVudGl0eSxcbiAgZnJvbVN0YXRlT2JqZWN0OiBzdGF0ZU9iamVjdCA9PiBzdGF0ZU9iamVjdCxcbiAgc3RhdGVTY2hlbWE6IFN0YXRlU2NoZW1hLmFzVmFsdWU8bnVtYmVyLCBudW1iZXI+KCAnbnVtYmVyJywge1xuICAgIGlzVmFsaWRWYWx1ZTogKCB2YWx1ZTogbnVtYmVyICkgPT4gKCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmICFpc05hTiggdmFsdWUgKSAmJiB2YWx1ZSAhPT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZICYmIHZhbHVlICE9PSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkgKVxuICB9IClcbn0gKTtcblxudGFuZGVtTmFtZXNwYWNlLnJlZ2lzdGVyKCAnTnVtYmVySU8nLCBOdW1iZXJJTyApO1xuZXhwb3J0IGRlZmF1bHQgTnVtYmVySU87Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHVCQUF1QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sYUFBYTtBQUNoQyxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBRTFDLE1BQU1DLFFBQVEsR0FBRyxJQUFJRixNQUFNLENBQWtCLFVBQVUsRUFBRTtFQUN2REcsU0FBUyxFQUFFLFFBQVE7RUFDbkJDLGFBQWEsRUFBRSxpREFBaUQ7RUFDaEVDLGFBQWEsRUFBRUMsQ0FBQyxDQUFDQyxRQUFRO0VBQ3pCQyxlQUFlLEVBQUVDLFdBQVcsSUFBSUEsV0FBVztFQUMzQ0MsV0FBVyxFQUFFVCxXQUFXLENBQUNVLE9BQU8sQ0FBa0IsUUFBUSxFQUFFO0lBQzFEQyxZQUFZLEVBQUlDLEtBQWEsSUFBUSxPQUFPQSxLQUFLLEtBQUssUUFBUSxJQUFJLENBQUNDLEtBQUssQ0FBRUQsS0FBSyxDQUFFLElBQUlBLEtBQUssS0FBS0UsTUFBTSxDQUFDQyxpQkFBaUIsSUFBSUgsS0FBSyxLQUFLRSxNQUFNLENBQUNFO0VBQzlJLENBQUM7QUFDSCxDQUFDLENBQUU7QUFFSGxCLGVBQWUsQ0FBQ21CLFFBQVEsQ0FBRSxVQUFVLEVBQUVoQixRQUFRLENBQUU7QUFDaEQsZUFBZUEsUUFBUSJ9
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/NumberProperty.js
// Copyright 2016-2023, University of Colorado Boulder

/**
 * Property whose value must be a number.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Sam Reid (PhET Interactive Simulations)
 */












const VALID_INTEGER = {
  valueType: 'number',
  isValidValue: v => v % 1 === 0,
  validationMessage: 'Should be a valid integer'
};
const VALID_NON_NAN = {
  isValidValue: v => !isNaN(v),
  validationMessage: 'Should not be NaN'
};
const NumberProperty_VALIDATE_OPTIONS_FALSE = {
  validateValidator: false
};

// valid values for options.numberType to convey whether it is continuous or discrete with step size 1
const VALID_NUMBER_TYPES = ['FloatingPoint', 'Integer'];
// standardized tandem name for rangeProperty
const RANGE_PROPERTY_TANDEM_NAME = 'rangeProperty';
const DEFAULT_RANGE = js_Range.EVERYTHING;
// For the IOType
const PropertyIOImpl = Property.PropertyIO(types_NumberIO);
class NumberProperty extends Property {
  // Used by PhET-iO in NumberPropertyIO as metadata passed to the wrapper.
  // @readonly, but cannot set as such because it is set by PhET-iO state.

  // validation for NumberProperty and its rangeProperty, undefined if assertions are disabled

  constructor(value, providedOptions) {
    const options = optionize()({
      // NumberPropertyOptions
      numberType: 'FloatingPoint',
      range: DEFAULT_RANGE,
      // PropertyOptions
      validators: [],
      tandem: js_Tandem.OPTIONAL
    }, providedOptions);
    options.rangePropertyOptions = optionize()({
      phetioDocumentation: 'provides the range of possible values for the parent NumberProperty',
      phetioValueType: js_Range.RangeIO,
      phetioReadOnly: true,
      // If provided range is the default, don't instrument the PhET-iO RangeProperty
      tandem: options.range !== DEFAULT_RANGE ? options.tandem.createTandem(RANGE_PROPERTY_TANDEM_NAME) : js_Tandem.OPT_OUT
    }, options.rangePropertyOptions);
    if (assert && js_Tandem.VALIDATION && options.rangePropertyOptions.tandem && options.rangePropertyOptions.tandem.supplied) {
      assert && assert(options.rangePropertyOptions.tandem.name === RANGE_PROPERTY_TANDEM_NAME, `rangePropertyOptions.tandem.name must be ${RANGE_PROPERTY_TANDEM_NAME}: ${options.rangePropertyOptions.tandem.name}`);
    }

    // client cannot specify superclass options that are controlled by NumberProperty
    options.valueType = 'number';
    options.phetioOuterType = () => NumberProperty.NumberPropertyIO;
    options.phetioValueType = types_NumberIO; // not actually used, but for completeness, don't have ReadOnlyProperty storing the wrong default.

    const rangePropertyProvided = options.range && options.range instanceof ReadOnlyProperty;
    const ownsRangeProperty = !rangePropertyProvided;
    const rangeProperty = options.range instanceof ReadOnlyProperty ? options.range : new Property(options.range, options.rangePropertyOptions);
    options.validators.push(VALID_NON_NAN); // seems right for this to run first
    if (options.numberType === 'Integer') {
      options.validators.push(VALID_INTEGER);
    }
    options.validators.push({
      isValidValue: v => rangeProperty.value.contains(v),
      validationMessage: 'Number must be within rangeProperty value.'
    });
    super(value, options);
    this.numberType = options.numberType;
    this.rangeProperty = rangeProperty;
    if (assert && js_Tandem.VALIDATION && this.rangeProperty.isPhetioInstrumented()) {
      assert && assert(this.isPhetioInstrumented(), 'NumberProperty must be phet-io instrumented if the range is');
    }
    const rangePropertyObserver = () => {
      js_validate(this.value, this.valueValidator, NumberProperty_VALIDATE_OPTIONS_FALSE);
    };
    assert && this.rangeProperty.link(rangePropertyObserver);

    // For PhET-iO State, make sure that both the range and this value are correct before firing notifications (where the assertions are).
    this.rangeProperty.addPhetioStateDependencies([this]);
    this.addPhetioStateDependencies([this.rangeProperty]);

    // verify that validValues meet other NumberProperty-specific validation criteria
    if (options.validValues && this.validateNumberAndRangeProperty) {
      for (let i = 0; i < options.validValues.length; i++) {
        const validValue = options.validValues[i];
        this.validateNumberAndRangeProperty(validValue);
      }
    }
    this.disposeNumberProperty = () => {
      if (ownsRangeProperty) {
        this.rangeProperty.dispose();
      } else if (assert) {
        this.rangeProperty.unlink(rangePropertyObserver);
      }
    };
    this.resetNumberProperty = () => {
      ownsRangeProperty && this.rangeProperty.reset();
    };
  }
  get range() {
    return this.rangeProperty.value;
  }

  /**
   * Convenience function for setting the rangeProperty. Note: be careful using this function, as validation will occur
   * immediately, and if the value is outside of this new Range an error will occur. See this.setValueAndRange() for
   *  way to set both at once without assertion errors.
   */
  set range(range) {
    this.rangeProperty.value = range;
  }
  reset() {
    this.resetValueAndRange(); // even if we don't own the range, reset them together to prevent assertions, https://github.com/phetsims/axon/issues/427
    super.reset();
  }
  dispose() {
    this.disposeNumberProperty();
    super.dispose();
  }

  /**
   * An atomic setting function that will set a range and a value at the same time, to make sure that validation does
   * not fail after one but has been set not the other.
   */
  setValueAndRange(value, range) {
    assert && assert(range.contains(value), `value ${value} is not in range [${range.min},${range.max}]`);

    // defer notification of listeners
    this.setDeferred(true);
    this.rangeProperty.setDeferred(true);

    // set values
    this.set(value);
    this.rangeProperty.set(range);

    // notify listeners if the values have changed
    const notifyValueListeners = this.setDeferred(false);
    const notifyRangeListeners = this.rangeProperty.setDeferred(false);
    notifyValueListeners && notifyValueListeners();
    notifyRangeListeners && notifyRangeListeners();
  }

  /**
   * Resets the value and range atomically.
   * If you use setValueAndRange, you'll likely need to use this instead of reset.
   */
  resetValueAndRange() {
    this.setValueAndRange(this.initialValue, this.rangeProperty.initialValue);
  }

  /**
   * Get parent state and append NumberProperty-specific metadata to it.
   */
  toStateObject() {
    const parentStateObject = PropertyIOImpl.toStateObject(this);
    parentStateObject.numberType = this.numberType;
    parentStateObject.range = js_Range.RangeIO.toStateObject(this.rangeProperty.value);
    const hasRangePhetioID = this.rangeProperty && this.rangeProperty.isPhetioInstrumented();
    parentStateObject.rangePhetioID = hasRangePhetioID ? this.rangeProperty.tandem.phetioID : null;
    return parentStateObject;
  }
  static NumberPropertyIO = new IOType('NumberPropertyIO', {
    valueType: NumberProperty,
    supertype: PropertyIOImpl,
    parameterTypes: [types_NumberIO],
    documentation: `Extends PropertyIO to add values for the numeric range ( min, max ) and numberType ( '${VALID_NUMBER_TYPES.join('\' | \'')}' )`,
    toStateObject: numberProperty => {
      return numberProperty.toStateObject();
    },
    applyState: (numberProperty, stateObject) => {
      // nothing to do here for range, because in order to support range, this NumberProperty's rangeProperty must be instrumented.

      PropertyIOImpl.applyState(numberProperty, stateObject);
    },
    stateSchema: {
      numberType: types_StringIO,
      range: js_Range.RangeIO,
      rangePhetioID: types_NullableIO(types_StringIO),
      value: types_NumberIO
    }
  });
}
js_axon.register('NumberProperty', NumberProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/createObservableArray.js
// Copyright 2020-2023, University of Colorado Boulder

// createObservableArray conforms to the Proxy interface, which is polluted with `any` types.  Therefore we disable
// this rule for this file.
/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Creates an object that has the same API as an Array, but also supports notifications and PhET-iO. When an item
 * is added or removed, the lengthProperty changes before elementAddedEmitter or elementRemovedEmitter emit.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */













const createObservableArray = providedOptions => {
  js_assertMutuallyExclusiveOptions(providedOptions, ['length'], ['elements']);
  const options = optionize()({
    // Also supports phetioType or validator options.  If both are supplied, only the phetioType is respected

    length: 0,
    elements: [],
    tandem: js_Tandem.OPTIONAL,
    phetioFeatured: false
  }, providedOptions);
  let emitterParameterOptions = null;
  if (options.phetioType) {
    assert && assert(options.phetioType.typeName.startsWith('ObservableArrayIO'));
    emitterParameterOptions = {
      name: 'value',
      phetioType: options.phetioType.parameterTypes[0]
    };
  }
  // NOTE: Improve with Validation
  else if (!Validation.getValidatorValidationError(options)) {
    const validator = _.pick(options, Validation.VALIDATOR_KEYS);
    emitterParameterOptions = js_merge({
      name: 'value'
    }, validator);
  } else {
    emitterParameterOptions = js_merge({
      name: 'value'
    }, {
      isValidValue: _.stubTrue
    });
  }

  // notifies when an element has been added
  const elementAddedEmitter = new Emitter({
    tandem: options.tandem.createTandem('elementAddedEmitter'),
    parameters: [emitterParameterOptions],
    phetioReadOnly: true,
    phetioFeatured: options.phetioFeatured
  });

  // notifies when an element has been removed
  const elementRemovedEmitter = new Emitter({
    tandem: options.tandem.createTandem('elementRemovedEmitter'),
    parameters: [emitterParameterOptions],
    phetioReadOnly: true,
    phetioFeatured: options.phetioFeatured
  });

  // observe this, but don't set it. Updated when Array modifiers are called (except array.length=...)
  const lengthProperty = new NumberProperty(0, {
    numberType: 'Integer',
    tandem: options.tandem.createTandem('lengthProperty'),
    phetioReadOnly: true,
    phetioFeatured: options.phetioFeatured
  });

  // The underlying array which is wrapped by the Proxy
  const targetArray = [];

  // Verify that lengthProperty is updated before listeners are notified, but not when setting PhET-iO State,
  // This is because we cannot specify ordering dependencies between Properties and ObservableArrays,
  // TODO: Maybe this can be improved when we have better support for this in https://github.com/phetsims/phet-io/issues/1661
  assert && elementAddedEmitter.addListener(() => {
    if (assert) {
      if (!_.hasIn(window, 'phet.joist.sim') || !phet.joist.sim.isSettingPhetioStateProperty.value) {
        assert && assert(lengthProperty.value === targetArray.length, 'lengthProperty out of sync while adding element');
      }
    }
  });
  assert && elementRemovedEmitter.addListener(() => {
    if (assert) {
      if (!_.hasIn(window, 'phet.joist.sim') || !phet.joist.sim.isSettingPhetioStateProperty.value) {
        assert && assert(lengthProperty.value === targetArray.length, 'lengthProperty out of sync while removing element');
      }
    }
  });

  // The Proxy which will intercept method calls and trigger notifications.
  const observableArray = new Proxy(targetArray, {
    /**
     * Trap for getting a property or method.
     * @param array - the targetArray
     * @param key
     * @param receiver
     * @returns - the requested value
     */
    get: function (array, key, receiver) {
      assert && assert(array === targetArray, 'array should match the targetArray');
      if (methods.hasOwnProperty(key)) {
        return methods[key];
      } else {
        return Reflect.get(array, key, receiver);
      }
    },
    /**
     * Trap for setting a property value.
     * @param array - the targetArray
     * @param key
     * @param newValue
     * @returns - success
     */
    set: function (array, key, newValue) {
      assert && assert(array === targetArray, 'array should match the targetArray');
      const oldValue = array[key];
      let removedElements = null;

      // See which items are removed
      if (key === 'length') {
        removedElements = array.slice(newValue);
      }
      const returnValue = Reflect.set(array, key, newValue);

      // If we're using the bracket operator [index] of Array, then parse the index between the brackets.
      const numberKey = Number(key);
      if (Number.isInteger(numberKey) && numberKey >= 0 && oldValue !== newValue) {
        lengthProperty.value = array.length;
        if (oldValue !== undefined) {
          elementRemovedEmitter.emit(array[key]);
        }
        if (newValue !== undefined) {
          elementAddedEmitter.emit(newValue);
        }
      } else if (key === 'length') {
        lengthProperty.value = newValue;
        assert && assert(removedElements, 'removedElements should be defined for key===length');
        removedElements && removedElements.forEach(element => elementRemovedEmitter.emit(element));
      }
      return returnValue;
    },
    /**
     * This is the trap for the delete operator.
     */
    deleteProperty: function (array, key) {
      assert && assert(array === targetArray, 'array should match the targetArray');

      // If we're using the bracket operator [index] of Array, then parse the index between the brackets.
      const numberKey = Number(key);
      let removed;
      if (Number.isInteger(numberKey) && numberKey >= 0) {
        removed = array[key];
      }
      const returnValue = Reflect.deleteProperty(array, key);
      if (removed !== undefined) {
        elementRemovedEmitter.emit(removed);
      }
      return returnValue;
    }
  });
  observableArray.targetArray = targetArray;
  observableArray.elementAddedEmitter = elementAddedEmitter;
  observableArray.elementRemovedEmitter = elementRemovedEmitter;
  observableArray.lengthProperty = lengthProperty;
  const init = () => {
    if (options.length >= 0) {
      observableArray.length = options.length;
    }
    if (options.elements.length > 0) {
      Array.prototype.push.apply(observableArray, options.elements);
    }
  };
  init();

  //TODO https://github.com/phetsims/axon/issues/334 Move to "prototype" above or drop support
  observableArray.reset = () => {
    observableArray.length = 0;
    init();
  };

  /******************************************
   * PhET-iO support
   *******************************************/
  if (options.tandem.supplied) {
    assert && assert(options.phetioType);
    observableArray.phetioElementType = options.phetioType.parameterTypes[0];

    // for managing state in phet-io
    // Use the same tandem and phetioState options so it can "masquerade" as the real object.  When PhetioObject is a mixin this can be changed.
    observableArray._observableArrayPhetioObject = new ObservableArrayPhetioObject(observableArray, options);
  }
  return observableArray;
};

/**
 * Manages state save/load. This implementation uses Proxy and hence cannot be instrumented as a PhetioObject.  This type
 * provides that functionality.
 */
class ObservableArrayPhetioObject extends PhetioObject {
  // internal, don't use

  /**
   * @param observableArray
   * @param [providedOptions] - same as the options to the parent ObservableArrayDef
   */
  constructor(observableArray, providedOptions) {
    super(providedOptions);
    this.observableArray = observableArray;
  }
}

// Methods shared by all ObservableArrayDef instances
const methods = {
  /******************************************
   * Overridden Array methods
   *******************************************/

  pop(...args) {
    const thisArray = this;
    const initialLength = thisArray.targetArray.length;
    const returnValue = Array.prototype.pop.apply(thisArray.targetArray, args);
    thisArray.lengthProperty.value = thisArray.length;
    initialLength > 0 && thisArray.elementRemovedEmitter.emit(returnValue);
    return returnValue;
  },
  shift(...args) {
    const thisArray = this;
    const initialLength = thisArray.targetArray.length;
    const returnValue = Array.prototype.shift.apply(thisArray.targetArray, args);
    thisArray.lengthProperty.value = thisArray.length;
    initialLength > 0 && thisArray.elementRemovedEmitter.emit(returnValue);
    return returnValue;
  },
  push(...args) {
    const thisArray = this;
    const returnValue = Array.prototype.push.apply(thisArray.targetArray, args);
    thisArray.lengthProperty.value = thisArray.length;
    for (let i = 0; i < arguments.length; i++) {
      thisArray.elementAddedEmitter.emit(args[i]);
    }
    return returnValue;
  },
  unshift(...args) {
    const thisArray = this;
    const returnValue = Array.prototype.unshift.apply(thisArray.targetArray, args);
    thisArray.lengthProperty.value = thisArray.length;
    for (let i = 0; i < args.length; i++) {
      thisArray.elementAddedEmitter.emit(args[i]);
    }
    return returnValue;
  },
  splice(...args) {
    const thisArray = this;
    const returnValue = Array.prototype.splice.apply(thisArray.targetArray, args);
    thisArray.lengthProperty.value = thisArray.length;
    const deletedElements = returnValue;
    for (let i = 2; i < args.length; i++) {
      thisArray.elementAddedEmitter.emit(args[i]);
    }
    deletedElements.forEach(deletedElement => thisArray.elementRemovedEmitter.emit(deletedElement));
    return returnValue;
  },
  copyWithin(...args) {
    const thisArray = this;
    const before = thisArray.targetArray.slice();
    const returnValue = Array.prototype.copyWithin.apply(thisArray.targetArray, args);
    reportDifference(before, thisArray);
    return returnValue;
  },
  fill(...args) {
    const thisArray = this;
    const before = thisArray.targetArray.slice();
    const returnValue = Array.prototype.fill.apply(thisArray.targetArray, args);
    reportDifference(before, thisArray);
    return returnValue;
  },
  /******************************************
   * For compatibility with ObservableArrayDef
   * TODO https://github.com/phetsims/axon/issues/334 consider deleting after migration
   * TODO https://github.com/phetsims/axon/issues/334 if not deleted, rename 'Item' with 'Element'
   *******************************************/
  get: function (index) {
    return this[index];
  },
  addItemAddedListener: function (listener) {
    this.elementAddedEmitter.addListener(listener);
  },
  removeItemAddedListener: function (listener) {
    this.elementAddedEmitter.removeListener(listener);
  },
  addItemRemovedListener: function (listener) {
    this.elementRemovedEmitter.addListener(listener);
  },
  removeItemRemovedListener: function (listener) {
    this.elementRemovedEmitter.removeListener(listener);
  },
  add: function (element) {
    this.push(element);
  },
  addAll: function (elements) {
    this.push(...elements);
  },
  remove: function (element) {
    js_arrayRemove(this, element);
  },
  removeAll: function (elements) {
    elements.forEach(element => js_arrayRemove(this, element));
  },
  clear: function () {
    while (this.length > 0) {
      this.pop();
    }
  },
  count: function (predicate) {
    let count = 0;
    for (let i = 0; i < this.length; i++) {
      if (predicate(this[i])) {
        count++;
      }
    }
    return count;
  },
  find: function (predicate, fromIndex) {
    assert && fromIndex !== undefined && assert(typeof fromIndex === 'number', 'fromIndex must be numeric, if provided');
    assert && typeof fromIndex === 'number' && assert(fromIndex >= 0 && fromIndex < this.length, `fromIndex out of bounds: ${fromIndex}`);
    return _.find(this, predicate, fromIndex);
  },
  shuffle: function (random) {
    assert && assert(random, 'random must be supplied');

    // preserve the same _array reference in case any clients got a reference to it with getArray()
    const shuffled = random.shuffle(this);

    // Act on the targetArray so that removal and add notifications aren't sent.
    this.targetArray.length = 0;
    Array.prototype.push.apply(this.targetArray, shuffled);
  },
  // TODO https://github.com/phetsims/axon/issues/334 This also seems important to eliminate
  getArrayCopy: function () {
    return this.slice();
  },
  dispose: function () {
    const thisArray = this;
    thisArray.elementAddedEmitter.dispose();
    thisArray.elementRemovedEmitter.dispose();
    thisArray.lengthProperty.dispose();
    thisArray._observableArrayPhetioObject && thisArray._observableArrayPhetioObject.dispose();
  },
  /******************************************
   * PhET-iO
   *******************************************/
  toStateObject: function () {
    return {
      array: this.map(item => this.phetioElementType.toStateObject(item))
    };
  },
  applyState: function (stateObject) {
    this.length = 0;
    const elements = stateObject.array.map(paramStateObject => this.phetioElementType.fromStateObject(paramStateObject));
    this.push(...elements);
  }
};

/**
 * For copyWithin and fill, which have more complex behavior, we treat the array as a black box, making a shallow copy
 * before the operation in order to identify what has been added and removed.
 */
const reportDifference = (shallowCopy, observableArray) => {
  const before = shallowCopy;
  const after = observableArray.targetArray.slice();
  for (let i = 0; i < before.length; i++) {
    const beforeElement = before[i];
    const afterIndex = after.indexOf(beforeElement);
    if (afterIndex >= 0) {
      before.splice(i, 1);
      after.splice(afterIndex, 1);
      i--;
    }
  }
  before.forEach(element => observableArray.elementRemovedEmitter.emit(element));
  after.forEach(element => observableArray.elementAddedEmitter.emit(element));
};

// {Map.<cacheKey:function(new:ObservableArrayIO), function(new:ObservableArrayIO)>} - Cache each parameterized ObservableArrayIO
// based on the parameter type, so that it is only created once.
const createObservableArray_cache = new Map();

/**
 * ObservableArrayIO is the IO Type for ObservableArrayDef. It delegates most of its implementation to ObservableArrayDef.
 * Instead of being a parametric type, it leverages the phetioElementType on ObservableArrayDef.
 */
const ObservableArrayIO = parameterType => {
  if (!createObservableArray_cache.has(parameterType)) {
    createObservableArray_cache.set(parameterType, new IOType(`ObservableArrayIO<${parameterType.typeName}>`, {
      valueType: ObservableArrayPhetioObject,
      parameterTypes: [parameterType],
      toStateObject: observableArrayPhetioObject => observableArrayPhetioObject.observableArray.toStateObject(),
      applyState: (observableArrayPhetioObject, state) => observableArrayPhetioObject.observableArray.applyState(state),
      stateSchema: {
        array: types_ArrayIO(parameterType)
      }
    }));
  }
  return createObservableArray_cache.get(parameterType);
};
createObservableArray.ObservableArrayIO = ObservableArrayIO;
js_axon.register('createObservableArray', createObservableArray);
/* harmony default export */ const js_createObservableArray = ((/* unused pure expression or super */ null && (createObservableArray)));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/DerivedProperty.js
// Copyright 2013-2023, University of Colorado Boulder

/**
 * A DerivedProperty is computed based on other Properties.  This implementation inherits from Property to (a) simplify
 * implementation and (b) ensure it remains consistent. Note that the setters should not be called directly, so the
 * setters (set, reset and es5 setter) throw an error if used directly.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */











const DERIVED_PROPERTY_IO_PREFIX = 'DerivedPropertyIO';
/**
 * Compute the derived value given a derivation and an array of dependencies
 */
function getDerivedValue(derivation, dependencies) {
  // @ts-expect-error
  return derivation(...dependencies.map(property => property.get()));
}

// Convenience type for a Derived property that has a known return type but unknown dependency types.

/**
 * T = type of the derived value
 * Parameters[] = types of the callback parameters, e.g. [ Vector2, number, boolean ]
 */
class DerivedProperty extends ReadOnlyProperty {
  /**
   * @param dependencies - Properties that this Property's value is derived from
   * @param derivation - function that derives this Property's value, expects args in the same order as dependencies
   * @param [providedOptions] - see Property
   */

  constructor(dependencies, derivation, providedOptions) {
    const options = optionize()({
      tandem: js_Tandem.OPTIONAL,
      phetioReadOnly: true,
      // derived properties can be read but not set by PhET-iO
      phetioOuterType: DerivedProperty.DerivedPropertyIO,
      phetioLinkDependencies: true
    }, providedOptions);
    assert && assert(dependencies.every(_.identity), 'dependencies should all be truthy');
    assert && assert(dependencies.length === _.uniq(dependencies).length, 'duplicate dependencies');
    const initialValue = getDerivedValue(derivation, dependencies);

    // We must pass supertype tandem to parent class so addInstance is called only once in the subclassiest constructor.
    super(initialValue, options);
    if (js_Tandem.VALIDATION && this.isPhetioInstrumented()) {
      // The phetioType should be a concrete (instantiated) DerivedPropertyIO, hence we must check its outer type
      assert && assert(this.phetioType.typeName.startsWith('DerivedPropertyIO'), 'phetioType should be DerivedPropertyIO');
    }
    this.dependencies = dependencies;
    this.derivation = derivation;
    this.derivedPropertyListener = this.getDerivedPropertyListener.bind(this);
    dependencies.forEach(dependency => {
      dependency.lazyLink(this.derivedPropertyListener);
      if (this.isPhetioInstrumented() && dependency instanceof PhetioObject && dependency.isPhetioInstrumented()) {
        if (dependency instanceof ReadOnlyProperty) {
          // Dependencies should have taken their correct values before this DerivedProperty undefers, so it will be sure
          // to have the right value.
          // NOTE: Do not mark the beforePhase as NOTIFY, as this will potentially cause interdependence bugs when used
          // with Multilinks. See Projectile Motion's use of MeasuringTapeNode for an example.
          js_propertyStateHandlerSingleton.registerPhetioOrderDependency(dependency, js_PropertyStatePhase.UNDEFER, this, js_PropertyStatePhase.UNDEFER);
        }
        if (options.phetioLinkDependencies) {
          const dependenciesTandem = options.tandem.createTandem('dependencies');
          this.addLinkedElement(dependency, {
            tandem: dependenciesTandem.createTandemFromPhetioID(dependency.tandem.phetioID)
          });
        }
      }
    });
  }

  /**
   * Determines whether this DerivedProperty has a specific dependency.
   */
  hasDependency(dependency) {
    return this.definedDependencies.includes(dependency);
  }

  /**
   * Returns dependencies that are guaranteed to be defined internally.
   */
  get definedDependencies() {
    assert && assert(this.dependencies !== null, 'Dependencies should be defined, has this Property been disposed?');
    return this.dependencies;
  }

  // for bind
  getDerivedPropertyListener() {
    // Just mark that there is a deferred value, then calculate the derivation below when setDeferred() is called.
    // This is in part supported by the PhET-iO state engine because it can account for intermediate states, such
    // that this Property won't notify until after it is undeferred and has taken its final value.
    if (this.isDeferred) {
      this.hasDeferredValue = true;
    } else {
      super.set(getDerivedValue(this.derivation, this.definedDependencies));
    }
  }

  /**
   * Allows forcing a recomputation (as a possible workaround to listener order).
   */
  recomputeDerivation() {
    this.getDerivedPropertyListener();
  }
  dispose() {
    const dependencies = this.definedDependencies;

    // Unlink from dependent Properties
    for (let i = 0; i < dependencies.length; i++) {
      const dependency = dependencies[i];
      if (dependency.hasListener(this.derivedPropertyListener)) {
        dependency.unlink(this.derivedPropertyListener);
      }
    }
    this.dependencies = null;
    super.dispose();
  }

  /**
   * Support deferred DerivedProperty by only calculating the derivation once when it is time to undefer it and fire
   * notifications. This way we don't have intermediate derivation calls during PhET-iO state setting.
   */
  setDeferred(isDeferred) {
    if (this.isDeferred && !isDeferred) {
      this.deferredValue = getDerivedValue(this.derivation, this.definedDependencies);
    }
    return super.setDeferred(isDeferred);
  }

  /**
   * Creates a derived boolean Property whose value is true iff firstProperty's value is equal to secondProperty's
   * value.
   */
  static valueEquals(firstProperty, secondProperty, options) {
    return new DerivedProperty([firstProperty, secondProperty], (u, v) => u === v, options);
  }

  /**
   * Creates a derived boolean Property whose value is true iff every input Property value is true.
   */
  static and(properties, options) {
    assert && assert(properties.length > 0, 'must provide a dependency');
    return DerivedProperty.deriveAny(properties, () => _.reduce(properties, andFunction, true), options);
  }

  /**
   * Creates a derived boolean Property whose value is true iff any input Property value is true.
   */
  static or(properties, options) {
    assert && assert(properties.length > 0, 'must provide a dependency');
    return DerivedProperty.deriveAny(properties, () => _.reduce(properties, orFunction, false), options);
  }

  /**
   * Creates a derived boolean Property whose value is the inverse of the provided property.
   */
  static not(propertyToInvert, options) {
    return new DerivedProperty([propertyToInvert], x => !x, options);
  }

  /**
   * Create a DerivedProperty from any number of dependencies.  This is parallel to Multilink.multilinkAny
   */
  static deriveAny(dependencies, derivation, providedOptions) {
    return new DerivedProperty(
    // @ts-expect-error we have to provide a mapping between an arbitrary length array and our max overload of 15 types.
    dependencies, derivation, providedOptions);
  }
}
const andFunction = (value, property) => {
  return value && property.value;
};
const orFunction = (value, property) => {
  assert && assert(typeof property.value === 'boolean', 'boolean value required');
  return value || property.value;
};

// Cache each parameterized DerivedPropertyIO so that it is only created once.
const DerivedProperty_cache = new Map();

/**
 * Parametric IO Type constructor.  Given a parameter type, this function returns an appropriate DerivedProperty
 * IO Type. Unlike PropertyIO, DerivedPropertyIO cannot be set by PhET-iO clients.
 * This caching implementation should be kept in sync with the other parametric IO Type caching implementations.
 */
DerivedProperty.DerivedPropertyIO = parameterType => {
  assert && assert(parameterType, 'DerivedPropertyIO needs parameterType');
  if (!DerivedProperty_cache.has(parameterType)) {
    DerivedProperty_cache.set(parameterType, new IOType(`${DERIVED_PROPERTY_IO_PREFIX}<${parameterType.typeName}>`, {
      valueType: DerivedProperty,
      parameterTypes: [parameterType],
      supertype: Property.PropertyIO(parameterType),
      documentation: 'Like PropertyIO, but not settable.  Instead it is derived from other DerivedPropertyIO or PropertyIO ' + 'instances',
      // Override the parent implementation as a no-op.  DerivedProperty values appear in the state, but should not be set
      // back into a running simulation. See https://github.com/phetsims/phet-io/issues/1292
      applyState: _.noop,
      methods: {
        setValue: {
          returnType: types_VoidIO,
          parameterTypes: [parameterType],
          // @ts-expect-error
          implementation: DerivedProperty.prototype.set,
          documentation: 'Errors out when you try to set a derived property.',
          invocableForReadOnlyElements: false
        }
      }
    }));
  }
  return DerivedProperty_cache.get(parameterType);
};

// Convenience classes for subclassing DerivedProperty
class DerivedProperty1 extends (/* unused pure expression or super */ null && (DerivedProperty)) {}
class DerivedProperty2 extends (/* unused pure expression or super */ null && (DerivedProperty)) {}
class DerivedProperty3 extends (/* unused pure expression or super */ null && (DerivedProperty)) {}
class DerivedProperty4 extends (/* unused pure expression or super */ null && (DerivedProperty)) {}
class DerivedProperty5 extends (/* unused pure expression or super */ null && (DerivedProperty)) {}
js_axon.register('DerivedProperty', DerivedProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/DynamicProperty.js
// Copyright 2017-2022, University of Colorado Boulder

/**
 * Creates a Property that does synchronization of values with a swappable Property that itself can change.
 * Handles the case where you need a Property that can switch between acting like multiple other Properties.
 *
 * With no other options specified, the value of this Property is:
 * - null, if valuePropertyProperty.value === null
 * - valuePropertyProperty.value.value otherwise
 *
 * The value of this Property (generalized, with the options available) is:
 * - derive( defaultValue ), if valuePropertyProperty.value === null
 * - map( derive( valuePropertyProperty.value ).value ) otherwise
 *
 * Generally, this DynamicProperty uses one-way synchronization (it only listens to the source), but if the
 * 'bidirectional' option is true, it will use two-way synchronization (changes to this Property will change the active
 * source). Thus when this Property changes value (when bidirectional is true), it will set:
 * - derive( valuePropertyProperty.value ).value = inverseMap( this.value ), if valuePropertyProperty.value !== null
 *
 *******************************
 * General example
 *******************************
 *   const firstProperty = new Property( Color.RED );
 *   const secondProperty = new Property( Color.BLUE );
 *   const currentProperty = new Property( firstProperty ); // {Property.<Property.<Color>>}
 *
 *   const backgroundFill = new DynamicProperty( currentProperty ) // Turns into a {Property.<Color>}
 *   backgroundFill.value; // Color.RED, since: currentProperty.value === firstProperty and
 *                                              firstProperty.value === Color.RED
 *   firstProperty.value = Color.YELLOW;
 *   backgroundFill.value; // Color.YELLOW - It's connected to firstProperty right now
 *
 *   currentProperty.value = secondProperty;
 *   backgroundFill.value; // Color.BLUE - It's the secondProperty's value
 *
 *   secondProperty.value = Color.MAGENTA;
 *   backgroundFill.value; // Color.MAGENTA - Yes, it's listening to the other Property now.
 *
 * Also supports falling back to null if our main Property is set to null:
 *   currentProperty.value = null;
 *   backgroundFill.value; // null
 *
 *******************************
 * 'derive' option
 *******************************
 * Additionally, DynamicProperty supports the ability to derive the Property value from our main Property's value.
 * For example, say you have multiple scenes each with the type:
 *   scene: {
 *     backgroundColorProperty: {Property.<Color>}
 *   }
 * and you have a currentSceneProperty: {Property.<Scene>}, you may want to create:
 *   const currentBackgroundColorProperty = new DynamicProperty( currentSceneProperty, {
 *     derive: 'backgroundColorProperty'
 *   } );
 * This would always report the current scene's current background color.
 * What if you sometimes don't have a scene active, e.g. {Property.<Scene|null>}? You can provide a default value:
 *  new DynamicProperty( currentSceneProperty, {
 *    derive: 'backgroundColorProperty',
 *    defaultValue: Color.BLACK
 *  } );
 * So that if the currentSceneProperty's value is null, the value of our DynamicProperty will be Color.BLACK.
 *
 *******************************
 * 'bidirectional' option
 *******************************
 * If you would like for direct changes to this Property to change the original source (bidirectional synchronization),
 * then pass bidirectional:true:
 *   const firstProperty = new Property( 5 );
 *   const secondProperty = new Property( 10 );
 *   const numberPropertyProperty = new Property( firstProperty );
 *   const dynamicProperty = new DynamicProperty( numberPropertyProperty, { bidirectional: true } );
 *   dynamicProperty.value = 2; // allowed now that it is bidirectional, otherwise prohibited
 *   firstProperty.value; // 2
 *   numberPropertyProperty.value = secondProperty; // change which Property is active
 *   dynamicProperty.value; // 10, from the new Property
 *   dynamicProperty.value = 0;
 *   secondProperty.value; // 0, set above.
 *   firstProperty.value; // still 2 from above, since our dynamic Property switched to the other Property
 *
 *******************************
 * 'map' and 'inverseMap' options
 *******************************
 * DynamicProperty also supports mapping values to different types. For example, say we have a
 * numberPropertyProperty {Property.<Property.<number>>}, but want to have a {Property.<string>} as the output. Then:
 *   new DynamicProperty( numberPropertyProperty, {
 *     map: function( number ) { return '' + number; }
 *   } );
 * will do the trick. If this needs to be done with a bidirectional DynamicProperty, also include inverseMap:
 *   new DynamicProperty( numberPropertyProperty, {
 *     bidirectional: true,
 *     map: function( number ) { return '' + number; },
 *     inverseMap: function( string ) { return Number.parseFloat( string ); }
 *   } );
 * so that changes to the dynamic Property will result in a change in the numberPropertyProperty's value.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */




// ThisValueType: The value type of the resulting DynamicProperty
// InnerValueType: The value type of the inner (derived) Property, whose value gets mapped to ThisValueType and back
// OuterValueType: The value type of the main passed-in Property (whose value may be derived to the InnerValueType)
// e.g.:
// class Foo { colorProperty: Property<Color> }
// new DynamicProperty<number, Color, Foo>( someFooProperty, {
//   derive: 'colorProperty',
//   map: ( color: Color ) => color.alpha
// } );
// Here, ThisValueType=number (we're a Property<number>). You've passed in a Property<Foo>, so OuterValueType is a Foo.
// InnerValueType is what we get from our derive (Color), and what the parameter of our map is.
class DynamicProperty extends ReadOnlyProperty {
  // Set to true when this Property's value is changing from an external source.

  /**
   * @param valuePropertyProperty - If the value is null, it is considered disconnected.
   * @param [providedOptions] - options
   */
  constructor(valuePropertyProperty, providedOptions) {
    const options = optionize()({
      bidirectional: false,
      defaultValue: null,
      derive: _.identity,
      map: _.identity,
      inverseMap: _.identity
    }, providedOptions);
    const optionsDerive = options.derive;
    const optionsMap = options.map;
    const optionsInverseMap = options.inverseMap;
    const derive = typeof optionsDerive === 'function' ? optionsDerive : u => u[optionsDerive];
    const map = typeof optionsMap === 'function' ? optionsMap : v => v[optionsMap];
    const inverseMap = typeof optionsInverseMap === 'function' ? optionsInverseMap : t => t[optionsInverseMap];

    // Use the Property's initial value
    const initialValue = valuePropertyProperty.value === null ? map(options.defaultValue) : map(derive(valuePropertyProperty.value).value);
    super(initialValue, options);
    this.defaultValue = options.defaultValue;
    this.derive = derive;
    this.map = map;
    this.inverseMap = inverseMap;
    this.bidirectional = options.bidirectional;
    this.valuePropertyProperty = valuePropertyProperty;
    this.isExternallyChanging = false;
    this.propertyPropertyListener = this.onPropertyPropertyChange.bind(this);
    this.propertyListener = this.onPropertyChange.bind(this);

    // Rehook our listener to whatever is the active Property.
    valuePropertyProperty.link(this.propertyListener);

    // If we aren't bidirectional, we should never add this listener.
    if (options.bidirectional) {
      // No unlink needed, since our own disposal will remove this listener.
      this.lazyLink(this.onSelfChange.bind(this));
    }
  }

  /**
   * Listener added to the active inner Property.
   *
   * @param value - Should be either our defaultValue (if valuePropertyProperty.value is null), or
   *                derive( valuePropertyProperty.value ).value otherwise.
   * @param oldValue - Ignored for our purposes, but is the 2nd parameter for Property listeners.
   * @param innerProperty
   */
  onPropertyPropertyChange(value, oldValue, innerProperty) {
    // If the value of the inner Property is already the inverse of our value, we will never attempt to update our
    // own value in an attempt to limit "ping-ponging" cases mainly due to numerical error. Otherwise it would be
    // possible, given certain values and map/inverse, for both Properties to toggle back-and-forth.
    // See https://github.com/phetsims/axon/issues/197 for more details.
    if (this.bidirectional && this.valuePropertyProperty.value !== null && innerProperty) {
      const currentProperty = this.derive(this.valuePropertyProperty.value);
      // Notably, we only want to cancel interactions if the Property that sent the notification is still the Property
      // we are paying attention to.
      if (currentProperty === innerProperty && innerProperty.areValuesEqual(this.inverseMap(this.value), innerProperty.get())) {
        return;
      }
    }

    // Since we override the setter here, we need to call the version on the prototype
    super.set(this.map(value));
  }

  /**
   * Listener added to the outer Property.
   *
   * @param newPropertyValue - If derive is not provided then it should be a {Property.<*>|null}
   * @param oldPropertyValue - If derive is not provided then it should be a {Property.<*>|null}.
   *                                              We additionally handle the initial link() case where this is
   *                                              undefined.
   */
  onPropertyChange(newPropertyValue, oldPropertyValue) {
    if (oldPropertyValue) {
      this.derive(oldPropertyValue).unlink(this.propertyPropertyListener);
    }
    if (newPropertyValue) {
      this.derive(newPropertyValue).link(this.propertyPropertyListener);
    } else {
      // Switch to null when our Property's value is null.
      this.onPropertyPropertyChange(this.defaultValue, null, null);
    }
  }

  /**
   * Listener added to ourself when we are bidirectional
   */
  onSelfChange(value) {
    assert && assert(this.bidirectional);
    if (this.valuePropertyProperty.value !== null) {
      const innerProperty = this.derive(this.valuePropertyProperty.value);

      // If our new value is the result of map() from the inner Property's value, we don't want to propagate that
      // change back to the innerProperty in the case where the map/inverseMap are not exact matches (generally due
      // to floating-point issues).
      // See https://github.com/phetsims/axon/issues/197 for more details.
      if (!this.areValuesEqual(value, this.map(innerProperty.value))) {
        // We'll fail at runtime if needed, this cast is needed since sometimes we can do non-bidirectional work on
        // things like a DerivedProperty
        innerProperty.value = this.inverseMap(value);
      }
    }
  }

  /**
   * Disposes this Property
   */
  dispose() {
    this.valuePropertyProperty.unlink(this.propertyListener);
    if (this.valuePropertyProperty.value !== null) {
      this.derive(this.valuePropertyProperty.value).unlink(this.propertyPropertyListener);
    }
    super.dispose();
  }

  /**
   * Resets the current property (if it's a Property instead of a TinyProperty)
   */
  reset() {
    assert && assert(this.bidirectional, 'Cannot reset a non-bidirectional DynamicProperty');
    if (this.valuePropertyProperty.value !== null) {
      const property = this.derive(this.valuePropertyProperty.value);
      property.reset();
    }
  }

  /**
   * Prevent setting this Property manually if it is not marked as bidirectional.
   */
  set(value) {
    assert && assert(this.bidirectional, `Cannot set values directly to a non-bidirectional DynamicProperty, tried to set: ${value}`);
    this.isExternallyChanging = true;
    super.set(value);
    this.isExternallyChanging = false;
  }

  /**
   * Overridden to make public
   */
  get value() {
    return super.value;
  }

  /**
   * Overridden to make public
   * We ran performance tests on Chrome, and determined that calling super.value = newValue is statistically significantly
   * slower at the p = 0.10 level( looping over 10,000 value calls). Therefore, we prefer this optimization.
   */
  set value(value) {
    this.set(value);
  }

  /**
   * Returns true if this Property value can be set externally, by set() or .value =
   */
  isSettable() {
    return super.isSettable() || this.bidirectional;
  }
}
js_axon.register('DynamicProperty', DynamicProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/EnumerationDeprecatedProperty.js
// Copyright 2019-2022, University of Colorado Boulder

/**
 * Property whose value is a member of an Enumeration.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */








/**
 * @deprecated
 */
class EnumerationDeprecatedProperty extends Property {
  /**
   * @param {EnumerationDeprecated} enumeration
   * @param {*} initialValue - one of the values from enumeration
   * @param {Object} [options]
   */
  constructor(enumeration, initialValue, options) {
    js_deprecationWarning('Use EnumerationProperty. EnumerationDeprecated should be exchanged for classes that extend EnumerationValue, see WilderEnumerationPatterns for examples.');
    assert && assert(enumeration instanceof js_EnumerationDeprecated, 'likely you are using the new and improved Enumeration, better use EnumerationProperty too.');
    assert && assert(enumeration.VALUES.includes(initialValue), `invalid initialValue: ${initialValue}`);
    if (options) {
      // client cannot specify superclass options that are not supported by EnumerationDeprecatedProperty
      assert && assert(!options.hasOwnProperty('isValidValue'), 'EnumerationDeprecatedProperty does not support isValidValue');

      // client cannot specify superclass options that are controlled by EnumerationDeprecatedProperty
      assert && assert(!options.hasOwnProperty('valueType'), 'EnumerationDeprecatedProperty sets valueType');
      assert && assert(!options.hasOwnProperty('phetioType'), 'EnumerationDeprecatedProperty sets phetioType');
    }
    options = js_merge({
      valueType: enumeration,
      phetioValueType: types_EnumerationIO(enumeration),
      validValues: enumeration.VALUES // for PhET-iO documentation and support
    }, options);
    super(initialValue, options);

    // @public (read-only)
    this.enumeration = enumeration;
  }
}
js_axon.register('EnumerationDeprecatedProperty', EnumerationDeprecatedProperty);
/* harmony default export */ const js_EnumerationDeprecatedProperty = ((/* unused pure expression or super */ null && (EnumerationDeprecatedProperty)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXByZWNhdGlvbldhcm5pbmciLCJFbnVtZXJhdGlvbkRlcHJlY2F0ZWQiLCJtZXJnZSIsIkVudW1lcmF0aW9uSU8iLCJheG9uIiwiUHJvcGVydHkiLCJFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eSIsImNvbnN0cnVjdG9yIiwiZW51bWVyYXRpb24iLCJpbml0aWFsVmFsdWUiLCJvcHRpb25zIiwiYXNzZXJ0IiwiVkFMVUVTIiwiaW5jbHVkZXMiLCJoYXNPd25Qcm9wZXJ0eSIsInZhbHVlVHlwZSIsInBoZXRpb1ZhbHVlVHlwZSIsInZhbGlkVmFsdWVzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBQcm9wZXJ0eSB3aG9zZSB2YWx1ZSBpcyBhIG1lbWJlciBvZiBhbiBFbnVtZXJhdGlvbi5cbiAqXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxuICovXG5cbmltcG9ydCBkZXByZWNhdGlvbldhcm5pbmcgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL2RlcHJlY2F0aW9uV2FybmluZy5qcyc7XG5pbXBvcnQgRW51bWVyYXRpb25EZXByZWNhdGVkIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9FbnVtZXJhdGlvbkRlcHJlY2F0ZWQuanMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XG5pbXBvcnQgRW51bWVyYXRpb25JTyBmcm9tICcuLi8uLi90YW5kZW0vanMvdHlwZXMvRW51bWVyYXRpb25JTy5qcyc7XG5pbXBvcnQgYXhvbiBmcm9tICcuL2F4b24uanMnO1xuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4vUHJvcGVydHkuanMnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKi9cbmNsYXNzIEVudW1lcmF0aW9uRGVwcmVjYXRlZFByb3BlcnR5IGV4dGVuZHMgUHJvcGVydHkge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0VudW1lcmF0aW9uRGVwcmVjYXRlZH0gZW51bWVyYXRpb25cbiAgICogQHBhcmFtIHsqfSBpbml0aWFsVmFsdWUgLSBvbmUgb2YgdGhlIHZhbHVlcyBmcm9tIGVudW1lcmF0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICovXG4gIGNvbnN0cnVjdG9yKCBlbnVtZXJhdGlvbiwgaW5pdGlhbFZhbHVlLCBvcHRpb25zICkge1xuICAgIGRlcHJlY2F0aW9uV2FybmluZyggJ1VzZSBFbnVtZXJhdGlvblByb3BlcnR5LiBFbnVtZXJhdGlvbkRlcHJlY2F0ZWQgc2hvdWxkIGJlIGV4Y2hhbmdlZCBmb3IgY2xhc3NlcyB0aGF0IGV4dGVuZCBFbnVtZXJhdGlvblZhbHVlLCBzZWUgV2lsZGVyRW51bWVyYXRpb25QYXR0ZXJucyBmb3IgZXhhbXBsZXMuJyApO1xuXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZW51bWVyYXRpb24gaW5zdGFuY2VvZiBFbnVtZXJhdGlvbkRlcHJlY2F0ZWQsICdsaWtlbHkgeW91IGFyZSB1c2luZyB0aGUgbmV3IGFuZCBpbXByb3ZlZCBFbnVtZXJhdGlvbiwgYmV0dGVyIHVzZSBFbnVtZXJhdGlvblByb3BlcnR5IHRvby4nICk7XG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZW51bWVyYXRpb24uVkFMVUVTLmluY2x1ZGVzKCBpbml0aWFsVmFsdWUgKSwgYGludmFsaWQgaW5pdGlhbFZhbHVlOiAke2luaXRpYWxWYWx1ZX1gICk7XG5cbiAgICBpZiAoIG9wdGlvbnMgKSB7XG5cbiAgICAgIC8vIGNsaWVudCBjYW5ub3Qgc3BlY2lmeSBzdXBlcmNsYXNzIG9wdGlvbnMgdGhhdCBhcmUgbm90IHN1cHBvcnRlZCBieSBFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eVxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMuaGFzT3duUHJvcGVydHkoICdpc1ZhbGlkVmFsdWUnICksICdFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eSBkb2VzIG5vdCBzdXBwb3J0IGlzVmFsaWRWYWx1ZScgKTtcblxuICAgICAgLy8gY2xpZW50IGNhbm5vdCBzcGVjaWZ5IHN1cGVyY2xhc3Mgb3B0aW9ucyB0aGF0IGFyZSBjb250cm9sbGVkIGJ5IEVudW1lcmF0aW9uRGVwcmVjYXRlZFByb3BlcnR5XG4gICAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSggJ3ZhbHVlVHlwZScgKSwgJ0VudW1lcmF0aW9uRGVwcmVjYXRlZFByb3BlcnR5IHNldHMgdmFsdWVUeXBlJyApO1xuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMuaGFzT3duUHJvcGVydHkoICdwaGV0aW9UeXBlJyApLCAnRW51bWVyYXRpb25EZXByZWNhdGVkUHJvcGVydHkgc2V0cyBwaGV0aW9UeXBlJyApO1xuICAgIH1cblxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xuICAgICAgdmFsdWVUeXBlOiBlbnVtZXJhdGlvbixcbiAgICAgIHBoZXRpb1ZhbHVlVHlwZTogRW51bWVyYXRpb25JTyggZW51bWVyYXRpb24gKSxcbiAgICAgIHZhbGlkVmFsdWVzOiBlbnVtZXJhdGlvbi5WQUxVRVMgLy8gZm9yIFBoRVQtaU8gZG9jdW1lbnRhdGlvbiBhbmQgc3VwcG9ydFxuICAgIH0sIG9wdGlvbnMgKTtcblxuICAgIHN1cGVyKCBpbml0aWFsVmFsdWUsIG9wdGlvbnMgKTtcblxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb25seSlcbiAgICB0aGlzLmVudW1lcmF0aW9uID0gZW51bWVyYXRpb247XG4gIH1cbn1cblxuYXhvbi5yZWdpc3RlciggJ0VudW1lcmF0aW9uRGVwcmVjYXRlZFByb3BlcnR5JywgRW51bWVyYXRpb25EZXByZWNhdGVkUHJvcGVydHkgKTtcbmV4cG9ydCBkZWZhdWx0IEVudW1lcmF0aW9uRGVwcmVjYXRlZFByb3BlcnR5OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxrQkFBa0IsTUFBTSwwQ0FBMEM7QUFDekUsT0FBT0MscUJBQXFCLE1BQU0sNkNBQTZDO0FBQy9FLE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsYUFBYSxNQUFNLHdDQUF3QztBQUNsRSxPQUFPQyxJQUFJLE1BQU0sV0FBVztBQUM1QixPQUFPQyxRQUFRLE1BQU0sZUFBZTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsNkJBQTZCLFNBQVNELFFBQVEsQ0FBQztFQUVuRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLFdBQVcsRUFBRUMsWUFBWSxFQUFFQyxPQUFPLEVBQUc7SUFDaERWLGtCQUFrQixDQUFFLDBKQUEwSixDQUFFO0lBRWhMVyxNQUFNLElBQUlBLE1BQU0sQ0FBRUgsV0FBVyxZQUFZUCxxQkFBcUIsRUFBRSw0RkFBNEYsQ0FBRTtJQUM5SlUsTUFBTSxJQUFJQSxNQUFNLENBQUVILFdBQVcsQ0FBQ0ksTUFBTSxDQUFDQyxRQUFRLENBQUVKLFlBQVksQ0FBRSxFQUFHLHlCQUF3QkEsWUFBYSxFQUFDLENBQUU7SUFFeEcsSUFBS0MsT0FBTyxFQUFHO01BRWI7TUFDQUMsTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQ0QsT0FBTyxDQUFDSSxjQUFjLENBQUUsY0FBYyxDQUFFLEVBQUUsNkRBQTZELENBQUU7O01BRTVIO01BQ0FILE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUNELE9BQU8sQ0FBQ0ksY0FBYyxDQUFFLFdBQVcsQ0FBRSxFQUFFLDhDQUE4QyxDQUFFO01BQzFHSCxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDRCxPQUFPLENBQUNJLGNBQWMsQ0FBRSxZQUFZLENBQUUsRUFBRSwrQ0FBK0MsQ0FBRTtJQUM5RztJQUVBSixPQUFPLEdBQUdSLEtBQUssQ0FBRTtNQUNmYSxTQUFTLEVBQUVQLFdBQVc7TUFDdEJRLGVBQWUsRUFBRWIsYUFBYSxDQUFFSyxXQUFXLENBQUU7TUFDN0NTLFdBQVcsRUFBRVQsV0FBVyxDQUFDSSxNQUFNLENBQUM7SUFDbEMsQ0FBQyxFQUFFRixPQUFPLENBQUU7SUFFWixLQUFLLENBQUVELFlBQVksRUFBRUMsT0FBTyxDQUFFOztJQUU5QjtJQUNBLElBQUksQ0FBQ0YsV0FBVyxHQUFHQSxXQUFXO0VBQ2hDO0FBQ0Y7QUFFQUosSUFBSSxDQUFDYyxRQUFRLENBQUUsK0JBQStCLEVBQUVaLDZCQUE2QixDQUFFO0FBQy9FLGVBQWVBLDZCQUE2QiJ9
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/MappedProperty.js
// Copyright 2022, University of Colorado Boulder

/**
 * Similar to DerivedProperty, but restricted to one Property and provides value-mapped and bidirectional support.
 * It's basically a DynamicProperty where you don't need to wrap it in an additional Property, and is typed a bit easier
 *
 * For example:
 *
 * const stringProperty = new Property<string>( 'hello' );
 * const lengthProperty = new MappedProperty( stringProperty, {
 *   map: ( str: string ) => str.length
 * } );
 * lengthProperty.value; // 5
 * stringProperty.value = 'hi';
 * lengthProperty.value; // 2
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */




class MappedProperty extends DynamicProperty {
  constructor(property, providedOptions) {
    super(new TinyProperty(property), providedOptions);
  }
}
js_axon.register('MappedProperty', MappedProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheG9uIiwiRHluYW1pY1Byb3BlcnR5IiwiVGlueVByb3BlcnR5IiwiTWFwcGVkUHJvcGVydHkiLCJjb25zdHJ1Y3RvciIsInByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNYXBwZWRQcm9wZXJ0eS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogU2ltaWxhciB0byBEZXJpdmVkUHJvcGVydHksIGJ1dCByZXN0cmljdGVkIHRvIG9uZSBQcm9wZXJ0eSBhbmQgcHJvdmlkZXMgdmFsdWUtbWFwcGVkIGFuZCBiaWRpcmVjdGlvbmFsIHN1cHBvcnQuXG4gKiBJdCdzIGJhc2ljYWxseSBhIER5bmFtaWNQcm9wZXJ0eSB3aGVyZSB5b3UgZG9uJ3QgbmVlZCB0byB3cmFwIGl0IGluIGFuIGFkZGl0aW9uYWwgUHJvcGVydHksIGFuZCBpcyB0eXBlZCBhIGJpdCBlYXNpZXJcbiAqXG4gKiBGb3IgZXhhbXBsZTpcbiAqXG4gKiBjb25zdCBzdHJpbmdQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eTxzdHJpbmc+KCAnaGVsbG8nICk7XG4gKiBjb25zdCBsZW5ndGhQcm9wZXJ0eSA9IG5ldyBNYXBwZWRQcm9wZXJ0eSggc3RyaW5nUHJvcGVydHksIHtcbiAqICAgbWFwOiAoIHN0cjogc3RyaW5nICkgPT4gc3RyLmxlbmd0aFxuICogfSApO1xuICogbGVuZ3RoUHJvcGVydHkudmFsdWU7IC8vIDVcbiAqIHN0cmluZ1Byb3BlcnR5LnZhbHVlID0gJ2hpJztcbiAqIGxlbmd0aFByb3BlcnR5LnZhbHVlOyAvLyAyXG4gKlxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxuICovXG5cbmltcG9ydCBLZXlzTWF0Y2hpbmcgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL0tleXNNYXRjaGluZy5qcyc7XG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XG5pbXBvcnQgYXhvbiBmcm9tICcuL2F4b24uanMnO1xuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4vVFJlYWRPbmx5UHJvcGVydHkuanMnO1xuaW1wb3J0IER5bmFtaWNQcm9wZXJ0eSwgeyBEeW5hbWljUHJvcGVydHlPcHRpb25zIH0gZnJvbSAnLi9EeW5hbWljUHJvcGVydHkuanMnO1xuaW1wb3J0IFRpbnlQcm9wZXJ0eSBmcm9tICcuL1RpbnlQcm9wZXJ0eS5qcyc7XG5cbnR5cGUgU2VsZk9wdGlvbnM8VGhpc1ZhbHVlVHlwZSwgSW5wdXRWYWx1ZVR5cGU+ID0ge1xuICAvLyBJZiBzZXQgdG8gdHJ1ZSB0aGVuIGNoYW5nZXMgdG8gdGhpcyBQcm9wZXJ0eSAoaWYgdmFsdWVQcm9wZXJ0eVByb3BlcnR5LnZhbHVlIGlzIG5vbi1udWxsIGF0IHRoZSB0aW1lKSB3aWxsIGFsc28gYmVcbiAgLy8gbWFkZSB0byB2YWx1ZVByb3BlcnR5UHJvcGVydHkudmFsdWUuXG4gIGJpZGlyZWN0aW9uYWw/OiBib29sZWFuO1xuXG4gIC8vIE1hcHMgb3VyIGlucHV0IFByb3BlcnR5IHZhbHVlIHRvL2Zyb20gdGhpcyBQcm9wZXJ0eSdzIHZhbHVlLiBTZWUgdG9wLWxldmVsIGRvY3VtZW50YXRpb24gZm9yIHVzYWdlLlxuICAvLyBJZiBpdCdzIGEgc3RyaW5nLCBpdCB3aWxsIGdyYWIgdGhhdCBuYW1lZCBwcm9wZXJ0eSBvdXQgKGUuZy4gaXQncyBsaWtlIHBhc3NpbmcgdSA9PiB1WyBkZXJpdmUgXSlcbiAgbWFwPzogKCAoIGlucHV0VmFsdWU6IElucHV0VmFsdWVUeXBlICkgPT4gVGhpc1ZhbHVlVHlwZSApIHwgS2V5c01hdGNoaW5nPElucHV0VmFsdWVUeXBlLCBUaGlzVmFsdWVUeXBlPjtcbiAgaW52ZXJzZU1hcD86ICggKCB0aGlzVmFsdWU6IFRoaXNWYWx1ZVR5cGUgKSA9PiBJbnB1dFZhbHVlVHlwZSApIHwgS2V5c01hdGNoaW5nPFRoaXNWYWx1ZVR5cGUsIElucHV0VmFsdWVUeXBlPjtcbn07XG5cbnR5cGUgU3VwZXJPcHRpb25zPFRoaXNWYWx1ZVR5cGUsIElucHV0VmFsdWVUeXBlPiA9IFN0cmljdE9taXQ8RHluYW1pY1Byb3BlcnR5T3B0aW9uczxUaGlzVmFsdWVUeXBlLCBJbnB1dFZhbHVlVHlwZSwgVFJlYWRPbmx5UHJvcGVydHk8SW5wdXRWYWx1ZVR5cGU+PiwgJ2RlZmF1bHRWYWx1ZScgfCAnZGVyaXZlJz47XG5cbmV4cG9ydCB0eXBlIE1hcHBlZFByb3BlcnR5T3B0aW9uczxUaGlzVmFsdWVUeXBlLCBJbnB1dFZhbHVlVHlwZT4gPSBTZWxmT3B0aW9uczxUaGlzVmFsdWVUeXBlLCBJbnB1dFZhbHVlVHlwZT4gJiBTdXBlck9wdGlvbnM8VGhpc1ZhbHVlVHlwZSwgSW5wdXRWYWx1ZVR5cGU+O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXBwZWRQcm9wZXJ0eTxUaGlzVmFsdWVUeXBlLCBJbnB1dFZhbHVlVHlwZT4gZXh0ZW5kcyBEeW5hbWljUHJvcGVydHk8VGhpc1ZhbHVlVHlwZSwgSW5wdXRWYWx1ZVR5cGUsIFRSZWFkT25seVByb3BlcnR5PElucHV0VmFsdWVUeXBlPj4ge1xuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxJbnB1dFZhbHVlVHlwZT4sIHByb3ZpZGVkT3B0aW9ucz86IE1hcHBlZFByb3BlcnR5T3B0aW9uczxUaGlzVmFsdWVUeXBlLCBJbnB1dFZhbHVlVHlwZT4gKSB7XG4gICAgc3VwZXIoIG5ldyBUaW55UHJvcGVydHkoIHByb3BlcnR5ICksIHByb3ZpZGVkT3B0aW9ucyApO1xuICB9XG59XG5cbmF4b24ucmVnaXN0ZXIoICdNYXBwZWRQcm9wZXJ0eScsIE1hcHBlZFByb3BlcnR5ICk7XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBLE9BQU9BLElBQUksTUFBTSxXQUFXO0FBRTVCLE9BQU9DLGVBQWUsTUFBa0Msc0JBQXNCO0FBQzlFLE9BQU9DLFlBQVksTUFBTSxtQkFBbUI7QUFpQjVDLGVBQWUsTUFBTUMsY0FBYyxTQUF3Q0YsZUFBZSxDQUFtRTtFQUNwSkcsV0FBV0EsQ0FBRUMsUUFBMkMsRUFBRUMsZUFBc0UsRUFBRztJQUN4SSxLQUFLLENBQUUsSUFBSUosWUFBWSxDQUFFRyxRQUFRLENBQUUsRUFBRUMsZUFBZSxDQUFFO0VBQ3hEO0FBQ0Y7QUFFQU4sSUFBSSxDQUFDTyxRQUFRLENBQUUsZ0JBQWdCLEVBQUVKLGNBQWMsQ0FBRSJ9
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/Multilink.js
// Copyright 2014-2022, University of Colorado Boulder

/**
 * Multilink is used to link to multiple properties.  It is very similar to a DerivedProperty, but has no value and
 * does not conform to the Property API because it is intended for use with callbacks that do not compute a value.
 *
 * For situations where a reference to the Multilink instance is not needed (for calling dispose), use convenience
 * methods Multilink.multilink or Property.lazyLink to avoid these types of lint errors:
 *
 * // lint error: Do not use 'new' for side effects (no-new)
 * new Multilink( ... );
 *
 * // lint error: 'multilink' is assigned a value but never used (no-unused-vars)
 * const multilink = new Multilink( ... );
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */


class Multilink {
  // Keep track of listeners so they can be detached

  // whether the Multilink has been disposed

  /**
   * @param dependencies
   * @param callback function that expects args in the same order as dependencies
   * @param [lazy] Optional parameter that can be set to true if this should be a lazy multilink (no immediate callback)
   */

  constructor(dependencies, callback, lazy) {
    this.dependencies = dependencies;
    assert && assert(dependencies.every(_.identity), 'dependencies should all be truthy');
    assert && assert(dependencies.length === _.uniq(dependencies).length, 'duplicate dependencies');
    this.dependencyListeners = new Map();

    // When a dependency value changes, update the list of dependencies and call back to the callback
    dependencies.forEach(dependency => {
      const listener = () => {
        // don't call listener if this Multilink has been disposed, see https://github.com/phetsims/axon/issues/192
        if (!this.isDisposed) {
          const values = dependencies.map(dependency => dependency.get());
          callback(...values);
        }
      };
      this.dependencyListeners.set(dependency, listener);
      dependency.lazyLink(listener, {
        // All other dependencies should undefer (taking deferred value) before this dependency notifies. This is
        // crucial to prevent this Multilink callback from firing with intermediate (buggy) states before all dependencies
        // have taken their final value.
        phetioDependencies: _.without(dependencies, dependency)
      });
    });

    // Send initial call back but only if we are non-lazy
    if (!lazy) {
      const values = dependencies.map(dependency => dependency.get());
      callback(...values);
    }
    this.isDisposed = false;
  }

  /**
   * Returns dependencies that are guaranteed to be defined internally.
   */
  get definedDependencies() {
    assert && assert(this.dependencies !== null, 'Dependencies should be defined, has this Property been disposed?');
    return this.dependencies;
  }
  dispose() {
    assert && assert(this.dependencies, 'A Multilink cannot be disposed twice.');
    const dependencies = this.definedDependencies;

    // Unlink from dependent properties
    for (let i = 0; i < dependencies.length; i++) {
      const dependency = dependencies[i];
      const listener = this.dependencyListeners.get(dependency);
      assert && assert(listener, 'The listener should exist');
      if (dependency.hasListener(listener)) {
        dependency.unlink(listener);
      }
    }
    this.dependencies = null;
    this.dependencyListeners.clear();
    this.isDisposed = true;
  }

  /**
   * Registers a listener with multiple properties, then notifies the listener immediately.
   * @param dependencies
   * @param callback function that takes values from the properties and returns nothing
   */

  // eslint-disable-line @typescript-eslint/explicit-member-accessibility
  static multilink(dependencies, callback) {
    // eslint-disable-line @typescript-eslint/explicit-member-accessibility
    return new Multilink(dependencies, callback, false);
  }

  /**
   * Create a Multilink from a dynamic or unknown number of dependencies.
   */
  static multilinkAny(dependencies, callback) {
    // @ts-expect-error
    return new Multilink(dependencies, callback);
  }

  /**
   * Registers a listener with multiple properties *without* an immediate callback with current values.
   * @param dependencies
   * @param callback function that takes values from the properties and returns nothing
   */

  // eslint-disable-line @typescript-eslint/explicit-member-accessibility
  static lazyMultilink(dependencies, callback) {
    // eslint-disable-line @typescript-eslint/explicit-member-accessibility
    return new Multilink(dependencies, callback, true);
  }

  /**
   * Unlinks a listener that was added with multilink or lazyMultilink.
   */
  static unmultilink(multilink) {
    multilink.dispose();
  }
}
js_axon.register('Multilink', Multilink);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/Pool.js
// Copyright 2022-2023, University of Colorado Boulder

/**
 * PROTOTYPE version for better support
 *
 * Object pooling mixin, for cases where creating new objects is expensive, and we'd rather mark some objects as able
 * to be reused (i.e. 'in the pool'). This provides a pool of objects for each type it is invoked on. It allows for
 * getting "new" objects that can either be constructed OR pulled in from a pool, and requires that the objects are
 * essentially able to "re-run" the constructor. Then when putting the object back in the pool, references should be
 * released, so memory isn't leaked.
 *
 * With this style of pooling, the following should be standard boilerplate within the class:

 freeToPool() {
    MyType.pool.freeToPool( this );
  }

 public static pool = new Pool( MyType );

 * and can additionally implement TPoolable to make it clear that the type is pooled
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



class Pool {
  objects = [];
  constructor(type, providedOptions) {
    const options = optionize()({
      defaultArguments: [],
      initialize: type.prototype.initialize,
      maxSize: 100,
      initialSize: 0,
      useDefaultConstruction: false
    }, providedOptions);
    assert && assert(options.maxSize >= 0);
    assert && assert(options.initialSize >= 0);
    this._maxPoolSize = options.maxSize;

    // There is a madness to this craziness. We'd want to use the method noted at
    // https://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible, but the type is
    // not provided in the arguments array below. By calling bind on itself, we're able to get a version of bind that
    // inserts the constructor as the first argument of the .apply called later so we don't create garbage by having
    // to pack `arguments` into an array AND THEN concatenate it with a new first element (the type itself).
    this.partialConstructor = Function.prototype.bind.bind(type, type);

    // Basically our type constructor, but with the default arguments included already.
    this.DefaultConstructor = this.partialConstructor(...options.defaultArguments); // eslint-disable-line @typescript-eslint/no-unnecessary-type-assertion

    this.initialize = options.initialize;
    this.useDefaultConstruction = options.useDefaultConstruction;

    // Initialize the pool (if it should have objects)
    while (this.objects.length < options.initialSize) {
      this.objects.push(this.createDefaultObject());
    }
  }
  createDefaultObject() {
    return new this.DefaultConstructor();
  }

  /**
   * Returns an object with arbitrary state (possibly constructed with the default arguments).
   */
  fetch() {
    return this.objects.length ? this.objects.pop() : this.createDefaultObject();
  }

  /**
   * Returns an object that behaves as if it was constructed with the given arguments. May result in a new object
   * being created (if the pool is empty), or it may use the constructor to mutate an object from the pool.
   */
  create(...args) {
    let result;
    if (this.objects.length) {
      result = this.objects.pop();
      this.initialize.apply(result, args);
    } else if (this.useDefaultConstruction) {
      result = this.createDefaultObject();
      this.initialize.apply(result, args);
    } else {
      result = new (this.partialConstructor(...args))();
    }
    return result;
  }

  /**
   * Returns the current size of the pool.
   */
  get poolSize() {
    return this.objects.length;
  }

  /**
   * Sets the maximum pool size.
   */
  set maxPoolSize(value) {
    assert && assert(value === Number.POSITIVE_INFINITY || Number.isInteger(value) && value >= 0, 'maxPoolSize should be a non-negative integer or infinity');
    this._maxPoolSize = value;
  }

  /**
   * Returns the maximum pool size.
   */
  get maxPoolSize() {
    return this._maxPoolSize;
  }
  freeToPool(object) {
    if (this.objects.length < this.maxPoolSize) {
      this.objects.push(object);
    }
  }
  forEach(callback) {
    this.objects.forEach(callback);
  }
}
js_phetCore.register('Pool', Pool);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Vector4.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * Basic 4-dimensional vector, represented as (x,y).
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */





class Vector4 {
  // The X coordinate of the vector.

  // The Y coordinate of the vector.

  // The Z coordinate of the vector.

  // The W coordinate of the vector.

  /**
   * Creates a 4-dimensional vector with the specified X, Y, Z and W values.
   *
   * @param x - X coordinate
   * @param y - Y coordinate
   * @param z - Z coordinate
   * @param w - W coordinate
   */
  constructor(x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
  }

  /**
   * The magnitude (Euclidean/L2 Norm) of this vector, i.e. $\sqrt{x^2+y^2+z^2+w^2}$.
   */
  getMagnitude() {
    return Math.sqrt(this.magnitudeSquared);
  }
  get magnitude() {
    return this.getMagnitude();
  }

  /**
   * The squared magnitude (square of the Euclidean/L2 Norm) of this vector, i.e. $x^2+y^2+z^2+w^2$.
   */
  getMagnitudeSquared() {
    return this.dot(this);
  }
  get magnitudeSquared() {
    return this.getMagnitudeSquared();
  }

  /**
   * The Euclidean distance between this vector (treated as a point) and another point.
   */
  distance(point) {
    return this.minus(point).magnitude;
  }

  /**
   * The Euclidean distance between this vector (treated as a point) and another point (x,y,z,w).
   */
  distanceXYZW(x, y, z, w) {
    const dx = this.x - x;
    const dy = this.y - y;
    const dz = this.z - z;
    const dw = this.w - w;
    return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);
  }

  /**
   * The squared Euclidean distance between this vector (treated as a point) and another point.
   */
  distanceSquared(point) {
    return this.minus(point).magnitudeSquared;
  }

  /**
   * The squared Euclidean distance between this vector (treated as a point) and another point (x,y,z,w).
   */
  distanceSquaredXYZW(x, y, z, w) {
    const dx = this.x - x;
    const dy = this.y - y;
    const dz = this.z - z;
    const dw = this.w - w;
    return dx * dx + dy * dy + dz * dz + dw * dw;
  }

  /**
   * The dot-product (Euclidean inner product) between this vector and another vector v.
   */
  dot(v) {
    return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
  }

  /**
   * The dot-product (Euclidean inner product) between this vector and another vector (x,y,z,w).
   */
  dotXYZW(x, y, z, w) {
    return this.x * x + this.y * y + this.z * z + this.w * w;
  }

  /**
   * The angle between this vector and another vector, in the range $\theta\in[0, \pi]$.
   *
   * Equal to $\theta = \cos^{-1}( \hat{u} \cdot \hat{v} )$ where $\hat{u}$ is this vector (normalized) and $\hat{v}$
   * is the input vector (normalized).
   */
  angleBetween(v) {
    // @ts-expect-error TODO: import with circular protection
    return Math.acos(js_dot.clamp(this.normalized().dot(v.normalized()), -1, 1));
  }

  /**
   * Exact equality comparison between this vector and another vector.
   *
   * @param other
   * @returns - Whether the two vectors have equal components
   */
  equals(other) {
    return this.x === other.x && this.y === other.y && this.z === other.z && this.w === other.w;
  }

  /**
   * Approximate equality comparison between this vector and another vector.
   *
   * @returns - Whether difference between the two vectors has no component with an absolute value greater
   *                      than epsilon.
   */
  equalsEpsilon(other, epsilon) {
    if (!epsilon) {
      epsilon = 0;
    }
    return Math.abs(this.x - other.x) + Math.abs(this.y - other.y) + Math.abs(this.z - other.z) + Math.abs(this.w - other.w) <= epsilon;
  }

  /**
   * Returns false if any component is NaN, infinity, or -infinity. Otherwise returns true.
   */
  isFinite() {
    return isFinite(this.x) && isFinite(this.y) && isFinite(this.z) && isFinite(this.w);
  }

  /*---------------------------------------------------------------------------*
   * Immutables
   *---------------------------------------------------------------------------*/

  /**
   * Creates a copy of this vector, or if a vector is passed in, set that vector's values to ours.
   *
   * This is the immutable form of the function set(), if a vector is provided. This will return a new vector, and
   * will not modify this vector.
   *
   * @param  [vector] - If not provided, creates a v4 with filled in values. Otherwise, fills in the
   *                    values of the provided vector so that it equals this vector.
   */
  copy(vector) {
    if (vector) {
      return vector.set(this);
    } else {
      return v4(this.x, this.y, this.z, this.w);
    }
  }

  /**
   * Normalized (re-scaled) copy of this vector such that its magnitude is 1. If its initial magnitude is zero, an
   * error is thrown.
   *
   * This is the immutable form of the function normalize(). This will return a new vector, and will not modify this
   * vector.
   */
  normalized() {
    const magnitude = this.magnitude;
    assert && assert(magnitude !== 0, 'Cannot normalize a zero-magnitude vector');
    return this.dividedScalar(magnitude);
  }

  /**
   * Returns a copy of this vector with each component rounded by Utils.roundSymmetric.
   *
   * This is the immutable form of the function roundSymmetric(). This will return a new vector, and will not modify
   * this vector.
   */
  roundedSymmetric() {
    return this.copy().roundSymmetric();
  }

  /**
   * Re-scaled copy of this vector such that it has the desired magnitude. If its initial magnitude is zero, an error
   * is thrown. If the passed-in magnitude is negative, the direction of the resulting vector will be reversed.
   *
   * This is the immutable form of the function setMagnitude(). This will return a new vector, and will not modify
   * this vector.
   *
   */
  withMagnitude(magnitude) {
    return this.copy().setMagnitude(magnitude);
  }

  /**
   * Copy of this vector, scaled by the desired scalar value.
   *
   * This is the immutable form of the function multiplyScalar(). This will return a new vector, and will not modify
   * this vector.
   */
  timesScalar(scalar) {
    return v4(this.x * scalar, this.y * scalar, this.z * scalar, this.w * scalar);
  }

  /**
   * Same as timesScalar.
   *
   * This is the immutable form of the function multiply(). This will return a new vector, and will not modify
   * this vector.
   */
  times(scalar) {
    return this.timesScalar(scalar);
  }

  /**
   * Copy of this vector, multiplied component-wise by the passed-in vector v.
   *
   * This is the immutable form of the function componentMultiply(). This will return a new vector, and will not modify
   * this vector.
   */
  componentTimes(v) {
    return v4(this.x * v.x, this.y * v.y, this.z * v.z, this.w * v.w);
  }

  /**
   * Addition of this vector and another vector, returning a copy.
   *
   * This is the immutable form of the function add(). This will return a new vector, and will not modify
   * this vector.
   */
  plus(v) {
    return v4(this.x + v.x, this.y + v.y, this.z + v.z, this.w + v.w);
  }

  /**
   * Addition of this vector and another vector (x,y,z,w), returning a copy.
   *
   * This is the immutable form of the function addXYZW(). This will return a new vector, and will not modify
   * this vector.
   */
  plusXYZW(x, y, z, w) {
    return v4(this.x + x, this.y + y, this.z + z, this.w + w);
  }

  /**
   * Addition of this vector with a scalar (adds the scalar to every component), returning a copy.
   *
   * This is the immutable form of the function addScalar(). This will return a new vector, and will not modify
   * this vector.
   */
  plusScalar(scalar) {
    return v4(this.x + scalar, this.y + scalar, this.z + scalar, this.w + scalar);
  }

  /**
   * Subtraction of this vector by another vector v, returning a copy.
   *
   * This is the immutable form of the function subtract(). This will return a new vector, and will not modify
   * this vector.
   */
  minus(v) {
    return v4(this.x - v.x, this.y - v.y, this.z - v.z, this.w - v.w);
  }

  /**
   * Subtraction of this vector by another vector (x,y,z,w), returning a copy.
   *
   * This is the immutable form of the function subtractXYZW(). This will return a new vector, and will not modify
   * this vector.
   */
  minusXYZW(x, y, z, w) {
    return v4(this.x - x, this.y - y, this.z - z, this.w - w);
  }

  /**
   * Subtraction of this vector by a scalar (subtracts the scalar from every component), returning a copy.
   *
   * This is the immutable form of the function subtractScalar(). This will return a new vector, and will not modify
   * this vector.
   */
  minusScalar(scalar) {
    return v4(this.x - scalar, this.y - scalar, this.z - scalar, this.w - scalar);
  }

  /**
   * Division of this vector by a scalar (divides every component by the scalar), returning a copy.
   *
   * This is the immutable form of the function divideScalar(). This will return a new vector, and will not modify
   * this vector.
   */
  dividedScalar(scalar) {
    return v4(this.x / scalar, this.y / scalar, this.z / scalar, this.w / scalar);
  }

  /**
   * Negated copy of this vector (multiplies every component by -1).
   *
   * This is the immutable form of the function negate(). This will return a new vector, and will not modify
   * this vector.
   *
   */
  negated() {
    return v4(-this.x, -this.y, -this.z, -this.w);
  }

  /**
   * A linear interpolation between this vector (ratio=0) and another vector (ratio=1).
   *
   * @param vector
   * @param ratio - Not necessarily constrained in [0, 1]
   */
  blend(vector, ratio) {
    return this.plus(vector.minus(this).times(ratio));
  }

  /**
   * The average (midpoint) between this vector and another vector.
   */
  average(vector) {
    return this.blend(vector, 0.5);
  }

  /**
   * Debugging string for the vector.
   */
  toString() {
    return `Vector4(${this.x}, ${this.y}, ${this.z}, ${this.w})`;
  }

  /**
   * Converts this to a 3-dimensional vector, discarding the w-component.
   */
  toVector3() {
    return new Vector3(this.x, this.y, this.z);
  }

  /*---------------------------------------------------------------------------*
   * Mutables
   * - all mutation should go through setXYZW / setX / setY / setZ / setW
   *---------------------------------------------------------------------------*/

  /**
   * Sets all of the components of this vector, returning this.
   */
  setXYZW(x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
    return this;
  }

  /**
   * Sets the x-component of this vector, returning this.
   */
  setX(x) {
    this.x = x;
    return this;
  }

  /**
   * Sets the y-component of this vector, returning this.
   */
  setY(y) {
    this.y = y;
    return this;
  }

  /**
   * Sets the z-component of this vector, returning this.
   */
  setZ(z) {
    this.z = z;
    return this;
  }

  /**
   * Sets the w-component of this vector, returning this.
   */
  setW(w) {
    this.w = w;
    return this;
  }

  /**
   * Sets this vector to be a copy of another vector.
   *
   * This is the mutable form of the function copy(). This will mutate (change) this vector, in addition to returning
   * this vector itself.
   */
  set(v) {
    return this.setXYZW(v.x, v.y, v.z, v.w);
  }

  /**
   * Sets the magnitude of this vector. If the passed-in magnitude is negative, this flips the vector and sets its
   * magnitude to abs( magnitude ).
   *
   * This is the mutable form of the function withMagnitude(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  setMagnitude(magnitude) {
    const scale = magnitude / this.magnitude;
    return this.multiplyScalar(scale);
  }

  /**
   * Adds another vector to this vector, changing this vector.
   *
   * This is the mutable form of the function plus(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  add(v) {
    return this.setXYZW(this.x + v.x, this.y + v.y, this.z + v.z, this.w + v.w);
  }

  /**
   * Adds another vector (x,y,z,w) to this vector, changing this vector.
   *
   * This is the mutable form of the function plusXYZW(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  addXYZW(x, y, z, w) {
    return this.setXYZW(this.x + x, this.y + y, this.z + z, this.w + w);
  }

  /**
   * Adds a scalar to this vector (added to every component), changing this vector.
   *
   * This is the mutable form of the function plusScalar(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  addScalar(scalar) {
    return this.setXYZW(this.x + scalar, this.y + scalar, this.z + scalar, this.w + scalar);
  }

  /**
   * Subtracts this vector by another vector, changing this vector.
   *
   * This is the mutable form of the function minus(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  subtract(v) {
    return this.setXYZW(this.x - v.x, this.y - v.y, this.z - v.z, this.w - v.w);
  }

  /**
   * Subtracts this vector by another vector (x,y,z,w), changing this vector.
   *
   * This is the mutable form of the function minusXYZW(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  subtractXYZW(x, y, z, w) {
    return this.setXYZW(this.x - x, this.y - y, this.z - z, this.w - w);
  }

  /**
   * Subtracts this vector by a scalar (subtracts each component by the scalar), changing this vector.
   *
   * This is the mutable form of the function minusScalar(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  subtractScalar(scalar) {
    return this.setXYZW(this.x - scalar, this.y - scalar, this.z - scalar, this.w - scalar);
  }

  /**
   * Multiplies this vector by a scalar (multiplies each component by the scalar), changing this vector.
   *
   * This is the mutable form of the function timesScalar(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  multiplyScalar(scalar) {
    return this.setXYZW(this.x * scalar, this.y * scalar, this.z * scalar, this.w * scalar);
  }

  /**
   * Multiplies this vector by a scalar (multiplies each component by the scalar), changing this vector.
   * Same as multiplyScalar.
   *
   * This is the mutable form of the function times(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  multiply(scalar) {
    return this.multiplyScalar(scalar);
  }

  /**
   * Multiplies this vector by another vector component-wise, changing this vector.
   *
   * This is the mutable form of the function componentTimes(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  componentMultiply(v) {
    return this.setXYZW(this.x * v.x, this.y * v.y, this.z * v.z, this.w * v.w);
  }

  /**
   * Divides this vector by a scalar (divides each component by the scalar), changing this vector.
   *
   * This is the mutable form of the function dividedScalar(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  divideScalar(scalar) {
    return this.setXYZW(this.x / scalar, this.y / scalar, this.z / scalar, this.w / scalar);
  }

  /**
   * Negates this vector (multiplies each component by -1), changing this vector.
   *
   * This is the mutable form of the function negated(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  negate() {
    return this.setXYZW(-this.x, -this.y, -this.z, -this.w);
  }

  /**
   * Normalizes this vector (rescales to where the magnitude is 1), changing this vector.
   *
   * This is the mutable form of the function normalized(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  normalize() {
    const mag = this.magnitude;
    if (mag === 0) {
      throw new Error('Cannot normalize a zero-magnitude vector');
    }
    return this.divideScalar(mag);
  }

  /**
   * Rounds each component of this vector with Utils.roundSymmetric.
   *
   * This is the mutable form of the function roundedSymmetric(). This will mutate (change) this vector, in addition
   * to returning the vector itself.
   */
  roundSymmetric() {
    return this.setXYZW(js_Utils.roundSymmetric(this.x), js_Utils.roundSymmetric(this.y), js_Utils.roundSymmetric(this.z), js_Utils.roundSymmetric(this.w));
  }
  freeToPool() {
    Vector4.pool.freeToPool(this);
  }
  static pool = new Pool(Vector4, {
    maxSize: 1000,
    initialize: Vector4.prototype.setXYZW,
    defaultArguments: [0, 0, 0, 0]
  });

  // eslint-disable-line uppercase-statics-should-be-readonly
}

// (read-only) - Helps to identify the dimension of the vector
Vector4.prototype.isVector4 = true;
Vector4.prototype.dimension = 4;
js_dot.register('Vector4', Vector4);
const v4 = Vector4.pool.create.bind(Vector4.pool);
js_dot.register('v4', v4);
class ImmutableVector4 extends Vector4 {
  /**
   * Throw errors whenever a mutable method is called on our immutable vector
   */
  static mutableOverrideHelper(mutableFunctionName) {
    ImmutableVector4.prototype[mutableFunctionName] = () => {
      throw new Error(`Cannot call mutable method '${mutableFunctionName}' on immutable Vector3`);
    };
  }
}
ImmutableVector4.mutableOverrideHelper('setXYZW');
ImmutableVector4.mutableOverrideHelper('setX');
ImmutableVector4.mutableOverrideHelper('setY');
ImmutableVector4.mutableOverrideHelper('setZ');
ImmutableVector4.mutableOverrideHelper('setW');
Vector4.ZERO = assert ? new ImmutableVector4(0, 0, 0, 0) : new Vector4(0, 0, 0, 0);
Vector4.X_UNIT = assert ? new ImmutableVector4(1, 0, 0, 0) : new Vector4(1, 0, 0, 0);
Vector4.Y_UNIT = assert ? new ImmutableVector4(0, 1, 0, 0) : new Vector4(0, 1, 0, 0);
Vector4.Z_UNIT = assert ? new ImmutableVector4(0, 0, 1, 0) : new Vector4(0, 0, 1, 0);
Vector4.W_UNIT = assert ? new ImmutableVector4(0, 0, 0, 1) : new Vector4(0, 0, 0, 1);

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Vector3.js
// Copyright 2013-2023, University of Colorado Boulder

/**
 * Basic 3-dimensional vector, represented as (x,y,z).
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */








const ADDING_ACCUMULATOR = (vector, nextVector) => {
  return vector.add(nextVector);
};
class Vector3 {
  // The X coordinate of the vector.

  // The Y coordinate of the vector.

  // The Z coordinate of the vector.

  /**
   * Creates a 3-dimensional vector with the specified X, Y and Z values.
   *
   * @param x - X coordinate
   * @param y - Y coordinate
   * @param z - Z coordinate
   */
  constructor(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
  }

  /**
   * The magnitude (Euclidean/L2 Norm) of this vector, i.e. $\sqrt{x^2+y^2+z^2}$.
   */
  getMagnitude() {
    return Math.sqrt(this.magnitudeSquared);
  }
  get magnitude() {
    return this.getMagnitude();
  }

  /**
   * T squared magnitude (square of the Euclidean/L2 Norm) of this vector, i.e. $x^2+y^2+z^2$.
   */
  getMagnitudeSquared() {
    return this.dot(this);
  }
  get magnitudeSquared() {
    return this.getMagnitudeSquared();
  }

  /**
   * The Euclidean distance between this vector (treated as a point) and another point.
   */
  distance(point) {
    return Math.sqrt(this.distanceSquared(point));
  }

  /**
   * The Euclidean distance between this vector (treated as a point) and another point (x,y,z).
   */
  distanceXYZ(x, y, z) {
    const dx = this.x - x;
    const dy = this.y - y;
    const dz = this.z - z;
    return Math.sqrt(dx * dx + dy * dy + dz * dz);
  }

  /**
   * The squared Euclidean distance between this vector (treated as a point) and another point.
   */
  distanceSquared(point) {
    const dx = this.x - point.x;
    const dy = this.y - point.y;
    const dz = this.z - point.z;
    return dx * dx + dy * dy + dz * dz;
  }

  /**
   * The squared Euclidean distance between this vector (treated as a point) and another point (x,y,z).
   */
  distanceSquaredXYZ(x, y, z) {
    const dx = this.x - x;
    const dy = this.y - y;
    const dz = this.z - z;
    return dx * dx + dy * dy + dz * dz;
  }

  /**
   * The dot-product (Euclidean inner product) between this vector and another vector v.
   */
  dot(v) {
    return this.x * v.x + this.y * v.y + this.z * v.z;
  }

  /**
   * The dot-product (Euclidean inner product) between this vector and another vector (x,y,z).
   */
  dotXYZ(x, y, z) {
    return this.x * x + this.y * y + this.z * z;
  }

  /**
   * The angle between this vector and another vector, in the range $\theta\in[0, \pi]$.
   *
   * Equal to $\theta = \cos^{-1}( \hat{u} \cdot \hat{v} )$ where $\hat{u}$ is this vector (normalized) and $\hat{v}$
   * is the input vector (normalized).
   */
  angleBetween(v) {
    return Math.acos(js_Utils.clamp(this.normalized().dot(v.normalized()), -1, 1));
  }

  /**
   * Exact equality comparison between this vector and another vector.
   *
   * @returns - Whether the two vectors have equal components
   */
  equals(other) {
    return this.x === other.x && this.y === other.y && this.z === other.z;
  }

  /**
   * Approximate equality comparison between this vector and another vector.
   *
   * @returns - Whether difference between the two vectors has no component with an absolute value greater
   *                      than epsilon.
   */
  equalsEpsilon(other, epsilon) {
    if (!epsilon) {
      epsilon = 0;
    }
    return Math.abs(this.x - other.x) + Math.abs(this.y - other.y) + Math.abs(this.z - other.z) <= epsilon;
  }

  /**
   * Returns false if any component is NaN, infinity, or -infinity. Otherwise returns true.
   */
  isFinite() {
    return isFinite(this.x) && isFinite(this.y) && isFinite(this.z);
  }

  /*---------------------------------------------------------------------------*
   * Immutables
   *---------------------------------------------------------------------------*/

  /**
   * Creates a copy of this vector, or if a vector is passed in, set that vector's values to ours.
   *
   * This is the immutable form of the function set(), if a vector is provided. This will return a new vector, and
   * will not modify this vector.
   *
   * @param [vector] - If not provided, creates a new Vector3 with filled in values. Otherwise, fills in the
   *                   values of the provided vector so that it equals this vector.
   */
  copy(vector) {
    if (vector) {
      return vector.set(this);
    } else {
      return v3(this.x, this.y, this.z);
    }
  }

  /**
   * The Euclidean 3-dimensional cross-product of this vector by the passed-in vector.
   */
  cross(v) {
    return v3(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);
  }

  /**
   * Normalized (re-scaled) copy of this vector such that its magnitude is 1. If its initial magnitude is zero, an
   * error is thrown.
   *
   * This is the immutable form of the function normalize(). This will return a new vector, and will not modify this
   * vector.
   */
  normalized() {
    const mag = this.magnitude;
    if (mag === 0) {
      throw new Error('Cannot normalize a zero-magnitude vector');
    } else {
      return v3(this.x / mag, this.y / mag, this.z / mag);
    }
  }

  /**
   *
   * This is the immutable form of the function roundSymmetric(). This will return a new vector, and will not modify
   * this vector.
   */
  roundedSymmetric() {
    return this.copy().roundSymmetric();
  }

  /**
   * Re-scaled copy of this vector such that it has the desired magnitude. If its initial magnitude is zero, an error
   * is thrown. If the passed-in magnitude is negative, the direction of the resulting vector will be reversed.
   *
   * This is the immutable form of the function setMagnitude(). This will return a new vector, and will not modify
   * this vector.
   */
  withMagnitude(magnitude) {
    return this.copy().setMagnitude(magnitude);
  }

  /**
   * Copy of this vector, scaled by the desired scalar value.
   *
   * This is the immutable form of the function multiplyScalar(). This will return a new vector, and will not modify
   * this vector.
   */
  timesScalar(scalar) {
    return v3(this.x * scalar, this.y * scalar, this.z * scalar);
  }

  /**
   * Same as timesScalar.
   *
   * This is the immutable form of the function multiply(). This will return a new vector, and will not modify
   * this vector.
   */
  times(scalar) {
    return this.timesScalar(scalar);
  }

  /**
   * Copy of this vector, multiplied component-wise by the passed-in vector v.
   *
   * This is the immutable form of the function componentMultiply(). This will return a new vector, and will not modify
   * this vector.
   */
  componentTimes(v) {
    return v3(this.x * v.x, this.y * v.y, this.z * v.z);
  }

  /**
   * Addition of this vector and another vector, returning a copy.
   *
   * This is the immutable form of the function add(). This will return a new vector, and will not modify
   * this vector.
   */
  plus(v) {
    return v3(this.x + v.x, this.y + v.y, this.z + v.z);
  }

  /**
   * Addition of this vector and another vector (x,y,z), returning a copy.
   *
   * This is the immutable form of the function addXYZ(). This will return a new vector, and will not modify
   * this vector.
   */
  plusXYZ(x, y, z) {
    return v3(this.x + x, this.y + y, this.z + z);
  }

  /**
   * Addition of this vector with a scalar (adds the scalar to every component), returning a copy.
   *
   * This is the immutable form of the function addScalar(). This will return a new vector, and will not modify
   * this vector.
   */
  plusScalar(scalar) {
    return v3(this.x + scalar, this.y + scalar, this.z + scalar);
  }

  /**
   * Subtraction of this vector by another vector v, returning a copy.
   *
   * This is the immutable form of the function subtract(). This will return a new vector, and will not modify
   * this vector.
   */
  minus(v) {
    return v3(this.x - v.x, this.y - v.y, this.z - v.z);
  }

  /**
   * Subtraction of this vector by another vector (x,y,z), returning a copy.
   *
   * This is the immutable form of the function subtractXYZ(). This will return a new vector, and will not modify
   * this vector.
   */
  minusXYZ(x, y, z) {
    return v3(this.x - x, this.y - y, this.z - z);
  }

  /**
   * Subtraction of this vector by a scalar (subtracts the scalar from every component), returning a copy.
   *
   * This is the immutable form of the function subtractScalar(). This will return a new vector, and will not modify
   * this vector.
   */
  minusScalar(scalar) {
    return v3(this.x - scalar, this.y - scalar, this.z - scalar);
  }

  /**
   * Division of this vector by a scalar (divides every component by the scalar), returning a copy.
   *
   * This is the immutable form of the function divideScalar(). This will return a new vector, and will not modify
   * this vector.
   */
  dividedScalar(scalar) {
    return v3(this.x / scalar, this.y / scalar, this.z / scalar);
  }

  /**
   * Negated copy of this vector (multiplies every component by -1).
   *
   * This is the immutable form of the function negate(). This will return a new vector, and will not modify
   * this vector.
   *
   */
  negated() {
    return v3(-this.x, -this.y, -this.z);
  }

  /**
   * A linear interpolation between this vector (ratio=0) and another vector (ratio=1).
   *
   * @param vector
   * @param ratio - Not necessarily constrained in [0, 1]
   */
  blend(vector, ratio) {
    return this.plus(vector.minus(this).times(ratio));
  }

  /**
   * The average (midpoint) between this vector and another vector.
   */
  average(vector) {
    return this.blend(vector, 0.5);
  }

  /**
   * Take a component-based mean of all vectors provided.
   */
  static average(vectors) {
    const added = _.reduce(vectors, ADDING_ACCUMULATOR, new Vector3(0, 0, 0));
    return added.divideScalar(vectors.length);
  }

  /**
   * Debugging string for the vector.
   */
  toString() {
    return `Vector3(${this.x}, ${this.y}, ${this.z})`;
  }

  /**
   * Converts this to a 2-dimensional vector, discarding the z-component.
   */
  toVector2() {
    return v2(this.x, this.y);
  }

  /**
   * Converts this to a 4-dimensional vector, with the w-component equal to 1 (useful for homogeneous coordinates).
   */
  toVector4() {
    return v4(this.x, this.y, this.z, 1);
  }

  /*---------------------------------------------------------------------------*
   * Mutables
   * - all mutation should go through setXYZ / setX / setY / setZ
   *---------------------------------------------------------------------------*/

  /**
   * Sets all of the components of this vector, returning this.
   */
  setXYZ(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  }

  /**
   * Sets the x-component of this vector, returning this.
   */
  setX(x) {
    this.x = x;
    return this;
  }

  /**
   * Sets the y-component of this vector, returning this.
   */
  setY(y) {
    this.y = y;
    return this;
  }

  /**
   * Sets the z-component of this vector, returning this.
   */
  setZ(z) {
    this.z = z;
    return this;
  }

  /**
   * Sets this vector to be a copy of another vector.
   *
   * This is the mutable form of the function copy(). This will mutate (change) this vector, in addition to returning
   * this vector itself.
   */
  set(v) {
    return this.setXYZ(v.x, v.y, v.z);
  }

  /**
   * Sets the magnitude of this vector. If the passed-in magnitude is negative, this flips the vector and sets its
   * magnitude to abs( magnitude ).
   *
   * This is the mutable form of the function withMagnitude(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  setMagnitude(magnitude) {
    const scale = magnitude / this.magnitude;
    return this.multiplyScalar(scale);
  }

  /**
   * Adds another vector to this vector, changing this vector.
   *
   * This is the mutable form of the function plus(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  add(v) {
    return this.setXYZ(this.x + v.x, this.y + v.y, this.z + v.z);
  }

  /**
   * Adds another vector (x,y,z) to this vector, changing this vector.
   *
   * This is the mutable form of the function plusXYZ(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  addXYZ(x, y, z) {
    return this.setXYZ(this.x + x, this.y + y, this.z + z);
  }

  /**
   * Adds a scalar to this vector (added to every component), changing this vector.
   *
   * This is the mutable form of the function plusScalar(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  addScalar(scalar) {
    return this.setXYZ(this.x + scalar, this.y + scalar, this.z + scalar);
  }

  /**
   * Subtracts this vector by another vector, changing this vector.
   *
   * This is the mutable form of the function minus(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  subtract(v) {
    return this.setXYZ(this.x - v.x, this.y - v.y, this.z - v.z);
  }

  /**
   * Subtracts this vector by another vector (x,y,z), changing this vector.
   *
   * This is the mutable form of the function minusXYZ(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  subtractXYZ(x, y, z) {
    return this.setXYZ(this.x - x, this.y - y, this.z - z);
  }

  /**
   * Subtracts this vector by a scalar (subtracts each component by the scalar), changing this vector.
   *
   * This is the mutable form of the function minusScalar(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  subtractScalar(scalar) {
    return this.setXYZ(this.x - scalar, this.y - scalar, this.z - scalar);
  }

  /**
   * Multiplies this vector by a scalar (multiplies each component by the scalar), changing this vector.
   *
   * This is the mutable form of the function timesScalar(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  multiplyScalar(scalar) {
    return this.setXYZ(this.x * scalar, this.y * scalar, this.z * scalar);
  }

  /**
   * Multiplies this vector by a scalar (multiplies each component by the scalar), changing this vector.
   * Same as multiplyScalar.
   *
   * This is the mutable form of the function times(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  multiply(scalar) {
    return this.multiplyScalar(scalar);
  }

  /**
   * Multiplies this vector by another vector component-wise, changing this vector.
   *
   * This is the mutable form of the function componentTimes(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  componentMultiply(v) {
    return this.setXYZ(this.x * v.x, this.y * v.y, this.z * v.z);
  }

  /**
   * Divides this vector by a scalar (divides each component by the scalar), changing this vector.
   *
   * This is the mutable form of the function dividedScalar(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  divideScalar(scalar) {
    return this.setXYZ(this.x / scalar, this.y / scalar, this.z / scalar);
  }

  /**
   * Negates this vector (multiplies each component by -1), changing this vector.
   *
   * This is the mutable form of the function negated(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  negate() {
    return this.setXYZ(-this.x, -this.y, -this.z);
  }

  /**
   * Sets our value to the Euclidean 3-dimensional cross-product of this vector by the passed-in vector.
   */
  setCross(v) {
    return this.setXYZ(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);
  }

  /**
   * Normalizes this vector (rescales to where the magnitude is 1), changing this vector.
   *
   * This is the mutable form of the function normalized(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  normalize() {
    const mag = this.magnitude;
    if (mag === 0) {
      throw new Error('Cannot normalize a zero-magnitude vector');
    } else {
      return this.divideScalar(mag);
    }
  }

  /**
   * Rounds each component of this vector with Utils.roundSymmetric.
   *
   * This is the mutable form of the function roundedSymmetric(). This will mutate (change) this vector, in addition
   * to returning the vector itself.
   */
  roundSymmetric() {
    return this.setXYZ(js_Utils.roundSymmetric(this.x), js_Utils.roundSymmetric(this.y), js_Utils.roundSymmetric(this.z));
  }

  /**
   * Returns a duck-typed object meant for use with tandem/phet-io serialization.
   */
  toStateObject() {
    return {
      x: this.x,
      y: this.y,
      z: this.z
    };
  }
  freeToPool() {
    Vector3.pool.freeToPool(this);
  }
  static pool = new Pool(Vector3, {
    maxSize: 1000,
    initialize: Vector3.prototype.setXYZ,
    defaultArguments: [0, 0, 0]
  });

  // static methods

  /**
   * Spherical linear interpolation between two unit vectors.
   *
   * @param start - Start unit vector
   * @param end - End unit vector
   * @param ratio  - Between 0 (at start vector) and 1 (at end vector)
   * @returns Spherical linear interpolation between the start and end
   */
  static slerp(start, end, ratio) {
    // @ts-expect-error TODO: import with circular protection
    return js_dot.Quaternion.slerp(new js_dot.Quaternion(), js_dot.Quaternion.getRotationQuaternion(start, end), ratio).timesVector3(start);
  }

  /**
   * Constructs a Vector3 from a duck-typed object, for use with tandem/phet-io deserialization.
   */
  static fromStateObject(stateObject) {
    return v3(stateObject.x, stateObject.y, stateObject.z);
  }
}

// (read-only) - Helps to identify the dimension of the vector
Vector3.prototype.isVector3 = true;
Vector3.prototype.dimension = 3;
js_dot.register('Vector3', Vector3);
const v3 = Vector3.pool.create.bind(Vector3.pool);
js_dot.register('v3', v3);
class ImmutableVector3 extends Vector3 {
  /**
   * Throw errors whenever a mutable method is called on our immutable vector
   */
  static mutableOverrideHelper(mutableFunctionName) {
    ImmutableVector3.prototype[mutableFunctionName] = () => {
      throw new Error(`Cannot call mutable method '${mutableFunctionName}' on immutable Vector3`);
    };
  }
}
ImmutableVector3.mutableOverrideHelper('setXYZ');
ImmutableVector3.mutableOverrideHelper('setX');
ImmutableVector3.mutableOverrideHelper('setY');
ImmutableVector3.mutableOverrideHelper('setZ');
Vector3.ZERO = assert ? new ImmutableVector3(0, 0, 0) : new Vector3(0, 0, 0);
Vector3.X_UNIT = assert ? new ImmutableVector3(1, 0, 0) : new Vector3(1, 0, 0);
Vector3.Y_UNIT = assert ? new ImmutableVector3(0, 1, 0) : new Vector3(0, 1, 0);
Vector3.Z_UNIT = assert ? new ImmutableVector3(0, 0, 1) : new Vector3(0, 0, 1);
Vector3.Vector3IO = new IOType('Vector3IO', {
  valueType: Vector3,
  documentation: 'Basic 3-dimensional vector, represented as (x,y,z)',
  toStateObject: vector3 => vector3.toStateObject(),
  fromStateObject: Vector3.fromStateObject,
  stateSchema: {
    x: types_NumberIO,
    y: types_NumberIO,
    z: types_NumberIO
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Vector2.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * Basic 2-dimensional vector, represented as (x,y).  Values can be numeric, or NaN or infinite.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */







const Vector2_ADDING_ACCUMULATOR = (vector, nextVector) => {
  return vector.add(nextVector);
};
class Vector2 {
  // The X coordinate of the vector.

  // The Y coordinate of the vector.

  /**
   * Creates a 2-dimensional vector with the specified X and Y values.
   *
   * @param x - X coordinate
   * @param y - Y coordinate
   */
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }

  /**
   * The magnitude (Euclidean/L2 Norm) of this vector, i.e. $\sqrt{x^2+y^2}$.
   */
  getMagnitude() {
    return Math.sqrt(this.magnitudeSquared);
  }
  get magnitude() {
    return this.getMagnitude();
  }

  /**
   * The squared magnitude (square of the Euclidean/L2 Norm) of this vector, i.e. $x^2+y^2$.
   */
  getMagnitudeSquared() {
    return this.x * this.x + this.y * this.y;
  }
  get magnitudeSquared() {
    return this.getMagnitudeSquared();
  }

  /**
   * The Euclidean distance between this vector (treated as a point) and another point.
   */
  distance(point) {
    return Math.sqrt(this.distanceSquared(point));
  }

  /**
   * The Euclidean distance between this vector (treated as a point) and another point (x,y).
   */
  distanceXY(x, y) {
    const dx = this.x - x;
    const dy = this.y - y;
    return Math.sqrt(dx * dx + dy * dy);
  }

  /**
   * The squared Euclidean distance between this vector (treated as a point) and another point.
   */
  distanceSquared(point) {
    const dx = this.x - point.x;
    const dy = this.y - point.y;
    return dx * dx + dy * dy;
  }

  /**
   * The squared Euclidean distance between this vector (treated as a point) and another point with coordinates (x,y).
   */
  distanceSquaredXY(x, y) {
    const dx = this.x - x;
    const dy = this.y - y;
    return dx * dx + dy * dy;
  }

  /**
   * The dot-product (Euclidean inner product) between this vector and another vector v.
   */
  dot(v) {
    return this.x * v.x + this.y * v.y;
  }

  /**
   * The dot-product (Euclidean inner product) between this vector and another vector (x,y).
   */
  dotXY(x, y) {
    return this.x * x + this.y * y;
  }

  /**
   * The angle $\theta$ of this vector, such that this vector is equal to
   * $$ u = \begin{bmatrix} r\cos\theta \\ r\sin\theta \end{bmatrix} $$
   * for the magnitude $r \ge 0$ of the vector, with $\theta\in(-\pi,\pi]$
   */
  getAngle() {
    return Math.atan2(this.y, this.x);
  }
  get angle() {
    return this.getAngle();
  }

  /**
   * The angle between this vector and another vector, in the range $\theta\in[0, \pi]$.
   *
   * Equal to $\theta = \cos^{-1}( \hat{u} \cdot \hat{v} )$ where $\hat{u}$ is this vector (normalized) and $\hat{v}$
   * is the input vector (normalized).
   */
  angleBetween(v) {
    const thisMagnitude = this.magnitude;
    const vMagnitude = v.magnitude;
    // @ts-expect-error TODO: import with circular protection
    return Math.acos(js_dot.clamp((this.x * v.x + this.y * v.y) / (thisMagnitude * vMagnitude), -1, 1));
  }

  /**
   * Exact equality comparison between this vector and another vector.
    * @returns - Whether the two vectors have equal components
   */
  equals(other) {
    return this.x === other.x && this.y === other.y;
  }

  /**
   * Approximate equality comparison between this vector and another vector.
   *
   * @returns - Whether difference between the two vectors has no component with an absolute value greater than epsilon.
   */
  equalsEpsilon(other, epsilon) {
    if (!epsilon) {
      epsilon = 0;
    }
    return Math.max(Math.abs(this.x - other.x), Math.abs(this.y - other.y)) <= epsilon;
  }

  /**
   * Returns false if either component is NaN, infinity, or -infinity. Otherwise returns true.
   */
  isFinite() {
    return isFinite(this.x) && isFinite(this.y);
  }

  /*---------------------------------------------------------------------------*
   * Immutables
   *---------------------------------------------------------------------------*/

  /**
   * Creates a copy of this vector, or if a vector is passed in, set that vector's values to ours.
   *
   * This is the immutable form of the function set(), if a vector is provided. This will return a new vector, and
   * will not modify this vector.
   *
   * @param [vector] - If not provided, creates a new Vector2 with filled in values. Otherwise, fills in the
   *                   values of the provided vector so that it equals this vector.
   */
  copy(vector) {
    if (vector) {
      return vector.set(this);
    } else {
      return v2(this.x, this.y);
    }
  }

  /**
   * The scalar value of the z-component of the equivalent 3-dimensional cross product:
   * $$ f( u, v ) = \left( \begin{bmatrix} u_x \\ u_y \\ 0 \end{bmatrix} \times \begin{bmatrix} v_x \\ v_y \\ 0 \end{bmatrix} \right)_z = u_x v_y - u_y v_x $$
   */
  crossScalar(v) {
    return this.x * v.y - this.y * v.x;
  }

  /**
   * Normalized (re-scaled) copy of this vector such that its magnitude is 1. If its initial magnitude is zero, an
   * error is thrown.
   *
   * This is the immutable form of the function normalize(). This will return a new vector, and will not modify this
   * vector.
   */
  normalized() {
    const mag = this.magnitude;
    if (mag === 0) {
      throw new Error('Cannot normalize a zero-magnitude vector');
    } else {
      return v2(this.x / mag, this.y / mag);
    }
  }

  /**
   * Returns a copy of this vector with each component rounded by Utils.roundSymmetric.
   *
   * This is the immutable form of the function roundSymmetric(). This will return a new vector, and will not modify
   * this vector.
   */
  roundedSymmetric() {
    return this.copy().roundSymmetric();
  }

  /**
   * Re-scaled copy of this vector such that it has the desired magnitude. If its initial magnitude is zero, an error
   * is thrown. If the passed-in magnitude is negative, the direction of the resulting vector will be reversed.
   *
   * This is the immutable form of the function setMagnitude(). This will return a new vector, and will not modify
   * this vector.
   */
  withMagnitude(magnitude) {
    return this.copy().setMagnitude(magnitude);
  }

  /**
   * Copy of this vector, scaled by the desired scalar value.
   *
   * This is the immutable form of the function multiplyScalar(). This will return a new vector, and will not modify
   * this vector.
   */
  timesScalar(scalar) {
    return v2(this.x * scalar, this.y * scalar);
  }

  /**
   * Same as timesScalar.
   *
   * This is the immutable form of the function multiply(). This will return a new vector, and will not modify
   * this vector.
   */
  times(scalar) {
    return this.timesScalar(scalar);
  }

  /**
   * Copy of this vector, multiplied component-wise by the passed-in vector v.
   *
   * This is the immutable form of the function componentMultiply(). This will return a new vector, and will not modify
   * this vector.
   */
  componentTimes(v) {
    return v2(this.x * v.x, this.y * v.y);
  }

  /**
   * Addition of this vector and another vector, returning a copy.
   *
   * This is the immutable form of the function add(). This will return a new vector, and will not modify
   * this vector.
   */
  plus(v) {
    return v2(this.x + v.x, this.y + v.y);
  }

  /**
   * Addition of this vector and another vector (x,y), returning a copy.
   *
   * This is the immutable form of the function addXY(). This will return a new vector, and will not modify
   * this vector.
   */
  plusXY(x, y) {
    return v2(this.x + x, this.y + y);
  }

  /**
   * Addition of this vector with a scalar (adds the scalar to every component), returning a copy.
   *
   * This is the immutable form of the function addScalar(). This will return a new vector, and will not modify
   * this vector.
   */
  plusScalar(scalar) {
    return v2(this.x + scalar, this.y + scalar);
  }

  /**
   * Subtraction of this vector by another vector v, returning a copy.
   *
   * This is the immutable form of the function subtract(). This will return a new vector, and will not modify
   * this vector.
   */
  minus(v) {
    return v2(this.x - v.x, this.y - v.y);
  }

  /**
   * Subtraction of this vector by another vector (x,y), returning a copy.
   *
   * This is the immutable form of the function subtractXY(). This will return a new vector, and will not modify
   * this vector.
   */
  minusXY(x, y) {
    return v2(this.x - x, this.y - y);
  }

  /**
   * Subtraction of this vector by a scalar (subtracts the scalar from every component), returning a copy.
   *
   * This is the immutable form of the function subtractScalar(). This will return a new vector, and will not modify
   * this vector.
   */
  minusScalar(scalar) {
    return v2(this.x - scalar, this.y - scalar);
  }

  /**
   * Division of this vector by a scalar (divides every component by the scalar), returning a copy.
   *
   * This is the immutable form of the function divideScalar(). This will return a new vector, and will not modify
   * this vector.
   */
  dividedScalar(scalar) {
    return v2(this.x / scalar, this.y / scalar);
  }

  /**
   * Negated copy of this vector (multiplies every component by -1).
   *
   * This is the immutable form of the function negate(). This will return a new vector, and will not modify
   * this vector.
   */
  negated() {
    return v2(-this.x, -this.y);
  }

  /**
   * Rotated by -pi/2 (perpendicular to this vector), returned as a copy.
   */
  getPerpendicular() {
    return v2(this.y, -this.x);
  }
  get perpendicular() {
    return this.getPerpendicular();
  }

  /**
   * Rotated by an arbitrary angle, in radians. Returned as a copy.
   *
   * This is the immutable form of the function rotate(). This will return a new vector, and will not modify
   * this vector.
   *
   * @param angle - In radians
   */
  rotated(angle) {
    const newAngle = this.angle + angle;
    const mag = this.magnitude;
    return v2(mag * Math.cos(newAngle), mag * Math.sin(newAngle));
  }

  /**
   * Mutable method that rotates this vector about an x,y point.
   *
   * @param x - origin of rotation in x
   * @param y - origin of rotation in y
   * @param angle - radians to rotate
   * @returns this for chaining
   */
  rotateAboutXY(x, y, angle) {
    const dx = this.x - x;
    const dy = this.y - y;
    const cos = Math.cos(angle);
    const sin = Math.sin(angle);
    this.x = x + dx * cos - dy * sin;
    this.y = y + dx * sin + dy * cos;
    return this;
  }

  /**
   * Same as rotateAboutXY but with a point argument.
   */
  rotateAboutPoint(point, angle) {
    return this.rotateAboutXY(point.x, point.y, angle);
  }

  /**
   * Immutable method that returns a new Vector2 that is rotated about the given point.
   *
   * @param x - origin for rotation in x
   * @param y - origin for rotation in y
   * @param angle - radians to rotate
   */
  rotatedAboutXY(x, y, angle) {
    return v2(this.x, this.y).rotateAboutXY(x, y, angle);
  }

  /**
   * Immutable method that returns a new Vector2 rotated about the given point.
   */
  rotatedAboutPoint(point, angle) {
    return this.rotatedAboutXY(point.x, point.y, angle);
  }

  /**
   * A linear interpolation between this vector (ratio=0) and another vector (ratio=1).
   *
   * @param vector
   * @param ratio - Not necessarily constrained in [0, 1]
   */
  blend(vector, ratio) {
    return v2(this.x + (vector.x - this.x) * ratio, this.y + (vector.y - this.y) * ratio);
  }

  /**
   * The average (midpoint) between this vector and another vector.
   */
  average(vector) {
    return this.blend(vector, 0.5);
  }

  /**
   * Take a component-based mean of all vectors provided.
   */
  static average(vectors) {
    const added = _.reduce(vectors, Vector2_ADDING_ACCUMULATOR, new Vector2(0, 0));
    return added.divideScalar(vectors.length);
  }

  /**
   * Debugging string for the vector.
   */
  toString() {
    return `Vector2(${this.x}, ${this.y})`;
  }

  /**
   * Converts this to a 3-dimensional vector, with the z-component equal to 0.
   */
  toVector3() {
    return new Vector3(this.x, this.y, 0);
  }

  /*---------------------------------------------------------------------------*
   * Mutables
   * - all mutation should go through setXY / setX / setY
   *---------------------------------------------------------------------------*/

  /**
   * Sets all of the components of this vector, returning this.
   */
  setXY(x, y) {
    this.x = x;
    this.y = y;
    return this;
  }

  /**
   * Sets the x-component of this vector, returning this.
   */
  setX(x) {
    this.x = x;
    return this;
  }

  /**
   * Sets the y-component of this vector, returning this.
   */
  setY(y) {
    this.y = y;
    return this;
  }

  /**
   * Sets this vector to be a copy of another vector.
   *
   * This is the mutable form of the function copy(). This will mutate (change) this vector, in addition to returning
   * this vector itself.
   */
  set(v) {
    return this.setXY(v.x, v.y);
  }

  /**
   * Sets the magnitude of this vector. If the passed-in magnitude is negative, this flips the vector and sets its
   * magnitude to abs( magnitude ).
   *
   * This is the mutable form of the function withMagnitude(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  setMagnitude(magnitude) {
    const scale = magnitude / this.magnitude;
    return this.multiplyScalar(scale);
  }

  /**
   * Adds another vector to this vector, changing this vector.
   *
   * This is the mutable form of the function plus(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  add(v) {
    return this.setXY(this.x + v.x, this.y + v.y);
  }

  /**
   * Adds another vector (x,y) to this vector, changing this vector.
   *
   * This is the mutable form of the function plusXY(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  addXY(x, y) {
    return this.setXY(this.x + x, this.y + y);
  }

  /**
   * Adds a scalar to this vector (added to every component), changing this vector.
   *
   * This is the mutable form of the function plusScalar(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  addScalar(scalar) {
    return this.setXY(this.x + scalar, this.y + scalar);
  }

  /**
   * Subtracts this vector by another vector, changing this vector.
   *
   * This is the mutable form of the function minus(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  subtract(v) {
    return this.setXY(this.x - v.x, this.y - v.y);
  }

  /**
   * Subtracts this vector by another vector (x,y), changing this vector.
   *
   * This is the mutable form of the function minusXY(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  subtractXY(x, y) {
    return this.setXY(this.x - x, this.y - y);
  }

  /**
   * Subtracts this vector by a scalar (subtracts each component by the scalar), changing this vector.
   *
   * This is the mutable form of the function minusScalar(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  subtractScalar(scalar) {
    return this.setXY(this.x - scalar, this.y - scalar);
  }

  /**
   * Multiplies this vector by a scalar (multiplies each component by the scalar), changing this vector.
   *
   * This is the mutable form of the function timesScalar(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  multiplyScalar(scalar) {
    return this.setXY(this.x * scalar, this.y * scalar);
  }

  /**
   * Multiplies this vector by a scalar (multiplies each component by the scalar), changing this vector.
   * Same as multiplyScalar.
   *
   * This is the mutable form of the function times(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  multiply(scalar) {
    return this.multiplyScalar(scalar);
  }

  /**
   * Multiplies this vector by another vector component-wise, changing this vector.
   *
   * This is the mutable form of the function componentTimes(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  componentMultiply(v) {
    return this.setXY(this.x * v.x, this.y * v.y);
  }

  /**
   * Divides this vector by a scalar (divides each component by the scalar), changing this vector.
   *
   * This is the mutable form of the function dividedScalar(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  divideScalar(scalar) {
    return this.setXY(this.x / scalar, this.y / scalar);
  }

  /**
   * Negates this vector (multiplies each component by -1), changing this vector.
   *
   * This is the mutable form of the function negated(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  negate() {
    return this.setXY(-this.x, -this.y);
  }

  /**
   * Normalizes this vector (rescales to where the magnitude is 1), changing this vector.
   *
   * This is the mutable form of the function normalized(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   */
  normalize() {
    const mag = this.magnitude;
    if (mag === 0) {
      throw new Error('Cannot normalize a zero-magnitude vector');
    } else {
      return this.divideScalar(mag);
    }
  }

  /**
   * Rounds each component of this vector with Utils.roundSymmetric.
   *
   * This is the mutable form of the function roundedSymmetric(). This will mutate (change) this vector, in addition
   * to returning the vector itself.
   */
  roundSymmetric() {
    return this.setXY(js_Utils.roundSymmetric(this.x), js_Utils.roundSymmetric(this.y));
  }

  /**
   * Rotates this vector by the angle (in radians), changing this vector.
   *
   * This is the mutable form of the function rotated(). This will mutate (change) this vector, in addition to
   * returning this vector itself.
   *
   * @param angle - In radians
   */
  rotate(angle) {
    const newAngle = this.angle + angle;
    const mag = this.magnitude;
    return this.setXY(mag * Math.cos(newAngle), mag * Math.sin(newAngle));
  }

  /**
   * Sets this vector's value to be the x,y values matching the given magnitude and angle (in radians), changing
   * this vector, and returning itself.
   *
   * @param magnitude
   * @param angle - In radians
   */
  setPolar(magnitude, angle) {
    return this.setXY(magnitude * Math.cos(angle), magnitude * Math.sin(angle));
  }

  /**
   * Returns a duck-typed object meant for use with tandem/phet-io serialization. Although this is redundant with
   * stateSchema, it is a nice feature of such a heavily-used type to be able to call toStateObject directly on the type.
   *
   * @returns - see stateSchema for schema
   */
  toStateObject() {
    return {
      x: this.x,
      y: this.y
    };
  }
  freeToPool() {
    Vector2.pool.freeToPool(this);
  }
  static pool = new Pool(Vector2, {
    maxSize: 1000,
    initialize: Vector2.prototype.setXY,
    defaultArguments: [0, 0]
  });

  // static methods

  /**
   * Returns a Vector2 with the specified magnitude $r$ and angle $\theta$ (in radians), with the formula:
   * $$ f( r, \theta ) = \begin{bmatrix} r\cos\theta \\ r\sin\theta \end{bmatrix} $$
   */
  static createPolar(magnitude, angle) {
    return new Vector2(0, 0).setPolar(magnitude, angle);
  }

  /**
   * Constructs a Vector2 from a duck-typed object, for use with tandem/phet-io deserialization.
   *
   * @param stateObject - see stateSchema for schema
   */
  static fromStateObject(stateObject) {
    return v2(stateObject.x, stateObject.y);
  }

  /**
   * Allocation-free implementation that gets the angle between two vectors
   *
   * @returns the angle between the vectors
   */
  static getAngleBetweenVectors(startVector, endVector) {
    const dx = endVector.x - startVector.x;
    const dy = endVector.y - startVector.y;
    return Math.atan2(dy, dx);
  }

  /**
   * Allocation-free way to get the distance between vectors.
   *
   * @returns the angle between the vectors
   */
  static getDistanceBetweenVectors(startVector, endVector) {
    const dx = endVector.x - startVector.x;
    const dy = endVector.y - startVector.y;
    return Math.sqrt(dx * dx + dy * dy);
  }
}

// (read-only) - Helps to identify the dimension of the vector
Vector2.prototype.isVector2 = true;
Vector2.prototype.dimension = 2;
js_dot.register('Vector2', Vector2);
const v2 = Vector2.pool.create.bind(Vector2.pool);
js_dot.register('v2', v2);
class ImmutableVector2 extends Vector2 {
  /**
   * Throw errors whenever a mutable method is called on our immutable vector
   */
  static mutableOverrideHelper(mutableFunctionName) {
    ImmutableVector2.prototype[mutableFunctionName] = () => {
      throw new Error(`Cannot call mutable method '${mutableFunctionName}' on immutable Vector2`);
    };
  }
}
ImmutableVector2.mutableOverrideHelper('setXY');
ImmutableVector2.mutableOverrideHelper('setX');
ImmutableVector2.mutableOverrideHelper('setY');
Vector2.ZERO = assert ? new ImmutableVector2(0, 0) : new Vector2(0, 0);
Vector2.X_UNIT = assert ? new ImmutableVector2(1, 0) : new Vector2(1, 0);
Vector2.Y_UNIT = assert ? new ImmutableVector2(0, 1) : new Vector2(0, 1);
Vector2.Vector2IO = new IOType('Vector2IO', {
  valueType: Vector2,
  stateSchema: {
    x: types_NumberIO,
    y: types_NumberIO
  },
  toStateObject: vector2 => vector2.toStateObject(),
  fromStateObject: stateObject => Vector2.fromStateObject(stateObject),
  documentation: 'A numerical object with x and y properties, like {x:3,y:4}'
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQb29sIiwiSU9UeXBlIiwiTnVtYmVySU8iLCJkb3QiLCJVdGlscyIsIlZlY3RvcjMiLCJBRERJTkdfQUNDVU1VTEFUT1IiLCJ2ZWN0b3IiLCJuZXh0VmVjdG9yIiwiYWRkIiwiVmVjdG9yMiIsImNvbnN0cnVjdG9yIiwieCIsInkiLCJnZXRNYWduaXR1ZGUiLCJNYXRoIiwic3FydCIsIm1hZ25pdHVkZVNxdWFyZWQiLCJtYWduaXR1ZGUiLCJnZXRNYWduaXR1ZGVTcXVhcmVkIiwiZGlzdGFuY2UiLCJwb2ludCIsImRpc3RhbmNlU3F1YXJlZCIsImRpc3RhbmNlWFkiLCJkeCIsImR5IiwiZGlzdGFuY2VTcXVhcmVkWFkiLCJ2IiwiZG90WFkiLCJnZXRBbmdsZSIsImF0YW4yIiwiYW5nbGUiLCJhbmdsZUJldHdlZW4iLCJ0aGlzTWFnbml0dWRlIiwidk1hZ25pdHVkZSIsImFjb3MiLCJjbGFtcCIsImVxdWFscyIsIm90aGVyIiwiZXF1YWxzRXBzaWxvbiIsImVwc2lsb24iLCJtYXgiLCJhYnMiLCJpc0Zpbml0ZSIsImNvcHkiLCJzZXQiLCJ2MiIsImNyb3NzU2NhbGFyIiwibm9ybWFsaXplZCIsIm1hZyIsIkVycm9yIiwicm91bmRlZFN5bW1ldHJpYyIsInJvdW5kU3ltbWV0cmljIiwid2l0aE1hZ25pdHVkZSIsInNldE1hZ25pdHVkZSIsInRpbWVzU2NhbGFyIiwic2NhbGFyIiwidGltZXMiLCJjb21wb25lbnRUaW1lcyIsInBsdXMiLCJwbHVzWFkiLCJwbHVzU2NhbGFyIiwibWludXMiLCJtaW51c1hZIiwibWludXNTY2FsYXIiLCJkaXZpZGVkU2NhbGFyIiwibmVnYXRlZCIsImdldFBlcnBlbmRpY3VsYXIiLCJwZXJwZW5kaWN1bGFyIiwicm90YXRlZCIsIm5ld0FuZ2xlIiwiY29zIiwic2luIiwicm90YXRlQWJvdXRYWSIsInJvdGF0ZUFib3V0UG9pbnQiLCJyb3RhdGVkQWJvdXRYWSIsInJvdGF0ZWRBYm91dFBvaW50IiwiYmxlbmQiLCJyYXRpbyIsImF2ZXJhZ2UiLCJ2ZWN0b3JzIiwiYWRkZWQiLCJfIiwicmVkdWNlIiwiZGl2aWRlU2NhbGFyIiwibGVuZ3RoIiwidG9TdHJpbmciLCJ0b1ZlY3RvcjMiLCJzZXRYWSIsInNldFgiLCJzZXRZIiwic2NhbGUiLCJtdWx0aXBseVNjYWxhciIsImFkZFhZIiwiYWRkU2NhbGFyIiwic3VidHJhY3QiLCJzdWJ0cmFjdFhZIiwic3VidHJhY3RTY2FsYXIiLCJtdWx0aXBseSIsImNvbXBvbmVudE11bHRpcGx5IiwibmVnYXRlIiwibm9ybWFsaXplIiwicm90YXRlIiwic2V0UG9sYXIiLCJ0b1N0YXRlT2JqZWN0IiwiZnJlZVRvUG9vbCIsInBvb2wiLCJtYXhTaXplIiwiaW5pdGlhbGl6ZSIsInByb3RvdHlwZSIsImRlZmF1bHRBcmd1bWVudHMiLCJjcmVhdGVQb2xhciIsImZyb21TdGF0ZU9iamVjdCIsInN0YXRlT2JqZWN0IiwiZ2V0QW5nbGVCZXR3ZWVuVmVjdG9ycyIsInN0YXJ0VmVjdG9yIiwiZW5kVmVjdG9yIiwiZ2V0RGlzdGFuY2VCZXR3ZWVuVmVjdG9ycyIsImlzVmVjdG9yMiIsImRpbWVuc2lvbiIsInJlZ2lzdGVyIiwiY3JlYXRlIiwiYmluZCIsIkltbXV0YWJsZVZlY3RvcjIiLCJtdXRhYmxlT3ZlcnJpZGVIZWxwZXIiLCJtdXRhYmxlRnVuY3Rpb25OYW1lIiwiWkVSTyIsImFzc2VydCIsIlhfVU5JVCIsIllfVU5JVCIsIlZlY3RvcjJJTyIsInZhbHVlVHlwZSIsInN0YXRlU2NoZW1hIiwidmVjdG9yMiIsImRvY3VtZW50YXRpb24iXSwic291cmNlcyI6WyJWZWN0b3IyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIEJhc2ljIDItZGltZW5zaW9uYWwgdmVjdG9yLCByZXByZXNlbnRlZCBhcyAoeCx5KS4gIFZhbHVlcyBjYW4gYmUgbnVtZXJpYywgb3IgTmFOIG9yIGluZmluaXRlLlxuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cbiAqL1xuXG5pbXBvcnQgUG9vbCwgeyBUUG9vbGFibGUgfSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvUG9vbC5qcyc7XG5pbXBvcnQgSU9UeXBlIGZyb20gJy4uLy4uL3RhbmRlbS9qcy90eXBlcy9JT1R5cGUuanMnO1xuaW1wb3J0IE51bWJlcklPIGZyb20gJy4uLy4uL3RhbmRlbS9qcy90eXBlcy9OdW1iZXJJTy5qcyc7XG5pbXBvcnQgZG90IGZyb20gJy4vZG90LmpzJztcbmltcG9ydCBVdGlscyBmcm9tICcuL1V0aWxzLmpzJztcbmltcG9ydCBWZWN0b3IzIGZyb20gJy4vVmVjdG9yMy5qcyc7XG5cbmNvbnN0IEFERElOR19BQ0NVTVVMQVRPUiA9ICggdmVjdG9yOiBWZWN0b3IyLCBuZXh0VmVjdG9yOiBWZWN0b3IyICkgPT4ge1xuICByZXR1cm4gdmVjdG9yLmFkZCggbmV4dFZlY3RvciApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVjdG9yMiBpbXBsZW1lbnRzIFRQb29sYWJsZSB7XG5cbiAgLy8gVGhlIFggY29vcmRpbmF0ZSBvZiB0aGUgdmVjdG9yLlxuICBwdWJsaWMgeDogbnVtYmVyO1xuXG4gIC8vIFRoZSBZIGNvb3JkaW5hdGUgb2YgdGhlIHZlY3Rvci5cbiAgcHVibGljIHk6IG51bWJlcjtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIDItZGltZW5zaW9uYWwgdmVjdG9yIHdpdGggdGhlIHNwZWNpZmllZCBYIGFuZCBZIHZhbHVlcy5cbiAgICpcbiAgICogQHBhcmFtIHggLSBYIGNvb3JkaW5hdGVcbiAgICogQHBhcmFtIHkgLSBZIGNvb3JkaW5hdGVcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggeDogbnVtYmVyLCB5OiBudW1iZXIgKSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBtYWduaXR1ZGUgKEV1Y2xpZGVhbi9MMiBOb3JtKSBvZiB0aGlzIHZlY3RvciwgaS5lLiAkXFxzcXJ0e3heMit5XjJ9JC5cbiAgICovXG4gIHB1YmxpYyBnZXRNYWduaXR1ZGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLm1hZ25pdHVkZVNxdWFyZWQgKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgbWFnbml0dWRlKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmdldE1hZ25pdHVkZSgpOyB9XG5cbiAgLyoqXG4gICAqIFRoZSBzcXVhcmVkIG1hZ25pdHVkZSAoc3F1YXJlIG9mIHRoZSBFdWNsaWRlYW4vTDIgTm9ybSkgb2YgdGhpcyB2ZWN0b3IsIGkuZS4gJHheMit5XjIkLlxuICAgKi9cbiAgcHVibGljIGdldE1hZ25pdHVkZVNxdWFyZWQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55O1xuICB9XG5cbiAgcHVibGljIGdldCBtYWduaXR1ZGVTcXVhcmVkKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmdldE1hZ25pdHVkZVNxdWFyZWQoKTsgfVxuXG4gIC8qKlxuICAgKiBUaGUgRXVjbGlkZWFuIGRpc3RhbmNlIGJldHdlZW4gdGhpcyB2ZWN0b3IgKHRyZWF0ZWQgYXMgYSBwb2ludCkgYW5kIGFub3RoZXIgcG9pbnQuXG4gICAqL1xuICBwdWJsaWMgZGlzdGFuY2UoIHBvaW50OiBWZWN0b3IyICk6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguc3FydCggdGhpcy5kaXN0YW5jZVNxdWFyZWQoIHBvaW50ICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgRXVjbGlkZWFuIGRpc3RhbmNlIGJldHdlZW4gdGhpcyB2ZWN0b3IgKHRyZWF0ZWQgYXMgYSBwb2ludCkgYW5kIGFub3RoZXIgcG9pbnQgKHgseSkuXG4gICAqL1xuICBwdWJsaWMgZGlzdGFuY2VYWSggeDogbnVtYmVyLCB5OiBudW1iZXIgKTogbnVtYmVyIHtcbiAgICBjb25zdCBkeCA9IHRoaXMueCAtIHg7XG4gICAgY29uc3QgZHkgPSB0aGlzLnkgLSB5O1xuICAgIHJldHVybiBNYXRoLnNxcnQoIGR4ICogZHggKyBkeSAqIGR5ICk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHNxdWFyZWQgRXVjbGlkZWFuIGRpc3RhbmNlIGJldHdlZW4gdGhpcyB2ZWN0b3IgKHRyZWF0ZWQgYXMgYSBwb2ludCkgYW5kIGFub3RoZXIgcG9pbnQuXG4gICAqL1xuICBwdWJsaWMgZGlzdGFuY2VTcXVhcmVkKCBwb2ludDogVmVjdG9yMiApOiBudW1iZXIge1xuICAgIGNvbnN0IGR4ID0gdGhpcy54IC0gcG9pbnQueDtcbiAgICBjb25zdCBkeSA9IHRoaXMueSAtIHBvaW50Lnk7XG4gICAgcmV0dXJuIGR4ICogZHggKyBkeSAqIGR5O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBzcXVhcmVkIEV1Y2xpZGVhbiBkaXN0YW5jZSBiZXR3ZWVuIHRoaXMgdmVjdG9yICh0cmVhdGVkIGFzIGEgcG9pbnQpIGFuZCBhbm90aGVyIHBvaW50IHdpdGggY29vcmRpbmF0ZXMgKHgseSkuXG4gICAqL1xuICBwdWJsaWMgZGlzdGFuY2VTcXVhcmVkWFkoIHg6IG51bWJlciwgeTogbnVtYmVyICk6IG51bWJlciB7XG4gICAgY29uc3QgZHggPSB0aGlzLnggLSB4O1xuICAgIGNvbnN0IGR5ID0gdGhpcy55IC0geTtcbiAgICByZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGRvdC1wcm9kdWN0IChFdWNsaWRlYW4gaW5uZXIgcHJvZHVjdCkgYmV0d2VlbiB0aGlzIHZlY3RvciBhbmQgYW5vdGhlciB2ZWN0b3Igdi5cbiAgICovXG4gIHB1YmxpYyBkb3QoIHY6IFZlY3RvcjIgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBkb3QtcHJvZHVjdCAoRXVjbGlkZWFuIGlubmVyIHByb2R1Y3QpIGJldHdlZW4gdGhpcyB2ZWN0b3IgYW5kIGFub3RoZXIgdmVjdG9yICh4LHkpLlxuICAgKi9cbiAgcHVibGljIGRvdFhZKCB4OiBudW1iZXIsIHk6IG51bWJlciApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnggKiB4ICsgdGhpcy55ICogeTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYW5nbGUgJFxcdGhldGEkIG9mIHRoaXMgdmVjdG9yLCBzdWNoIHRoYXQgdGhpcyB2ZWN0b3IgaXMgZXF1YWwgdG9cbiAgICogJCQgdSA9IFxcYmVnaW57Ym1hdHJpeH0gclxcY29zXFx0aGV0YSBcXFxcIHJcXHNpblxcdGhldGEgXFxlbmR7Ym1hdHJpeH0gJCRcbiAgICogZm9yIHRoZSBtYWduaXR1ZGUgJHIgXFxnZSAwJCBvZiB0aGUgdmVjdG9yLCB3aXRoICRcXHRoZXRhXFxpbigtXFxwaSxcXHBpXSRcbiAgICovXG4gIHB1YmxpYyBnZXRBbmdsZSgpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLmF0YW4yKCB0aGlzLnksIHRoaXMueCApO1xuICB9XG5cbiAgcHVibGljIGdldCBhbmdsZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmdldEFuZ2xlKCk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGFuZ2xlIGJldHdlZW4gdGhpcyB2ZWN0b3IgYW5kIGFub3RoZXIgdmVjdG9yLCBpbiB0aGUgcmFuZ2UgJFxcdGhldGFcXGluWzAsIFxccGldJC5cbiAgICpcbiAgICogRXF1YWwgdG8gJFxcdGhldGEgPSBcXGNvc157LTF9KCBcXGhhdHt1fSBcXGNkb3QgXFxoYXR7dn0gKSQgd2hlcmUgJFxcaGF0e3V9JCBpcyB0aGlzIHZlY3RvciAobm9ybWFsaXplZCkgYW5kICRcXGhhdHt2fSRcbiAgICogaXMgdGhlIGlucHV0IHZlY3RvciAobm9ybWFsaXplZCkuXG4gICAqL1xuICBwdWJsaWMgYW5nbGVCZXR3ZWVuKCB2OiBWZWN0b3IyICk6IG51bWJlciB7XG4gICAgY29uc3QgdGhpc01hZ25pdHVkZSA9IHRoaXMubWFnbml0dWRlO1xuICAgIGNvbnN0IHZNYWduaXR1ZGUgPSB2Lm1hZ25pdHVkZTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE86IGltcG9ydCB3aXRoIGNpcmN1bGFyIHByb3RlY3Rpb25cbiAgICByZXR1cm4gTWF0aC5hY29zKCBkb3QuY2xhbXAoICggdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55ICkgLyAoIHRoaXNNYWduaXR1ZGUgKiB2TWFnbml0dWRlICksIC0xLCAxICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGFjdCBlcXVhbGl0eSBjb21wYXJpc29uIGJldHdlZW4gdGhpcyB2ZWN0b3IgYW5kIGFub3RoZXIgdmVjdG9yLlxuXG4gICAqIEByZXR1cm5zIC0gV2hldGhlciB0aGUgdHdvIHZlY3RvcnMgaGF2ZSBlcXVhbCBjb21wb25lbnRzXG4gICAqL1xuICBwdWJsaWMgZXF1YWxzKCBvdGhlcjogVmVjdG9yMiApOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy54ID09PSBvdGhlci54ICYmIHRoaXMueSA9PT0gb3RoZXIueTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHByb3hpbWF0ZSBlcXVhbGl0eSBjb21wYXJpc29uIGJldHdlZW4gdGhpcyB2ZWN0b3IgYW5kIGFub3RoZXIgdmVjdG9yLlxuICAgKlxuICAgKiBAcmV0dXJucyAtIFdoZXRoZXIgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSB0d28gdmVjdG9ycyBoYXMgbm8gY29tcG9uZW50IHdpdGggYW4gYWJzb2x1dGUgdmFsdWUgZ3JlYXRlciB0aGFuIGVwc2lsb24uXG4gICAqL1xuICBwdWJsaWMgZXF1YWxzRXBzaWxvbiggb3RoZXI6IFZlY3RvcjIsIGVwc2lsb246IG51bWJlciApOiBib29sZWFuIHtcbiAgICBpZiAoICFlcHNpbG9uICkge1xuICAgICAgZXBzaWxvbiA9IDA7XG4gICAgfVxuICAgIHJldHVybiBNYXRoLm1heCggTWF0aC5hYnMoIHRoaXMueCAtIG90aGVyLnggKSwgTWF0aC5hYnMoIHRoaXMueSAtIG90aGVyLnkgKSApIDw9IGVwc2lsb247XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBmYWxzZSBpZiBlaXRoZXIgY29tcG9uZW50IGlzIE5hTiwgaW5maW5pdHksIG9yIC1pbmZpbml0eS4gT3RoZXJ3aXNlIHJldHVybnMgdHJ1ZS5cbiAgICovXG4gIHB1YmxpYyBpc0Zpbml0ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaXNGaW5pdGUoIHRoaXMueCApICYmIGlzRmluaXRlKCB0aGlzLnkgKTtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxuICAgKiBJbW11dGFibGVzXG4gICAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyB2ZWN0b3IsIG9yIGlmIGEgdmVjdG9yIGlzIHBhc3NlZCBpbiwgc2V0IHRoYXQgdmVjdG9yJ3MgdmFsdWVzIHRvIG91cnMuXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIGltbXV0YWJsZSBmb3JtIG9mIHRoZSBmdW5jdGlvbiBzZXQoKSwgaWYgYSB2ZWN0b3IgaXMgcHJvdmlkZWQuIFRoaXMgd2lsbCByZXR1cm4gYSBuZXcgdmVjdG9yLCBhbmRcbiAgICogd2lsbCBub3QgbW9kaWZ5IHRoaXMgdmVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0gW3ZlY3Rvcl0gLSBJZiBub3QgcHJvdmlkZWQsIGNyZWF0ZXMgYSBuZXcgVmVjdG9yMiB3aXRoIGZpbGxlZCBpbiB2YWx1ZXMuIE90aGVyd2lzZSwgZmlsbHMgaW4gdGhlXG4gICAqICAgICAgICAgICAgICAgICAgIHZhbHVlcyBvZiB0aGUgcHJvdmlkZWQgdmVjdG9yIHNvIHRoYXQgaXQgZXF1YWxzIHRoaXMgdmVjdG9yLlxuICAgKi9cbiAgcHVibGljIGNvcHkoIHZlY3Rvcj86IFZlY3RvcjIgKTogVmVjdG9yMiB7XG4gICAgaWYgKCB2ZWN0b3IgKSB7XG4gICAgICByZXR1cm4gdmVjdG9yLnNldCggdGhpcyApO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiB2MiggdGhpcy54LCB0aGlzLnkgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIHNjYWxhciB2YWx1ZSBvZiB0aGUgei1jb21wb25lbnQgb2YgdGhlIGVxdWl2YWxlbnQgMy1kaW1lbnNpb25hbCBjcm9zcyBwcm9kdWN0OlxuICAgKiAkJCBmKCB1LCB2ICkgPSBcXGxlZnQoIFxcYmVnaW57Ym1hdHJpeH0gdV94IFxcXFwgdV95IFxcXFwgMCBcXGVuZHtibWF0cml4fSBcXHRpbWVzIFxcYmVnaW57Ym1hdHJpeH0gdl94IFxcXFwgdl95IFxcXFwgMCBcXGVuZHtibWF0cml4fSBcXHJpZ2h0KV96ID0gdV94IHZfeSAtIHVfeSB2X3ggJCRcbiAgICovXG4gIHB1YmxpYyBjcm9zc1NjYWxhciggdjogVmVjdG9yMiApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnggKiB2LnkgLSB0aGlzLnkgKiB2Lng7XG4gIH1cblxuICAvKipcbiAgICogTm9ybWFsaXplZCAocmUtc2NhbGVkKSBjb3B5IG9mIHRoaXMgdmVjdG9yIHN1Y2ggdGhhdCBpdHMgbWFnbml0dWRlIGlzIDEuIElmIGl0cyBpbml0aWFsIG1hZ25pdHVkZSBpcyB6ZXJvLCBhblxuICAgKiBlcnJvciBpcyB0aHJvd24uXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIGltbXV0YWJsZSBmb3JtIG9mIHRoZSBmdW5jdGlvbiBub3JtYWxpemUoKS4gVGhpcyB3aWxsIHJldHVybiBhIG5ldyB2ZWN0b3IsIGFuZCB3aWxsIG5vdCBtb2RpZnkgdGhpc1xuICAgKiB2ZWN0b3IuXG4gICAqL1xuICBwdWJsaWMgbm9ybWFsaXplZCgpOiBWZWN0b3IyIHtcbiAgICBjb25zdCBtYWcgPSB0aGlzLm1hZ25pdHVkZTtcbiAgICBpZiAoIG1hZyA9PT0gMCApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvciggJ0Nhbm5vdCBub3JtYWxpemUgYSB6ZXJvLW1hZ25pdHVkZSB2ZWN0b3InICk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIHYyKCB0aGlzLnggLyBtYWcsIHRoaXMueSAvIG1hZyApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgY29weSBvZiB0aGlzIHZlY3RvciB3aXRoIGVhY2ggY29tcG9uZW50IHJvdW5kZWQgYnkgVXRpbHMucm91bmRTeW1tZXRyaWMuXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIGltbXV0YWJsZSBmb3JtIG9mIHRoZSBmdW5jdGlvbiByb3VuZFN5bW1ldHJpYygpLiBUaGlzIHdpbGwgcmV0dXJuIGEgbmV3IHZlY3RvciwgYW5kIHdpbGwgbm90IG1vZGlmeVxuICAgKiB0aGlzIHZlY3Rvci5cbiAgICovXG4gIHB1YmxpYyByb3VuZGVkU3ltbWV0cmljKCk6IFZlY3RvcjIge1xuICAgIHJldHVybiB0aGlzLmNvcHkoKS5yb3VuZFN5bW1ldHJpYygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlLXNjYWxlZCBjb3B5IG9mIHRoaXMgdmVjdG9yIHN1Y2ggdGhhdCBpdCBoYXMgdGhlIGRlc2lyZWQgbWFnbml0dWRlLiBJZiBpdHMgaW5pdGlhbCBtYWduaXR1ZGUgaXMgemVybywgYW4gZXJyb3JcbiAgICogaXMgdGhyb3duLiBJZiB0aGUgcGFzc2VkLWluIG1hZ25pdHVkZSBpcyBuZWdhdGl2ZSwgdGhlIGRpcmVjdGlvbiBvZiB0aGUgcmVzdWx0aW5nIHZlY3RvciB3aWxsIGJlIHJldmVyc2VkLlxuICAgKlxuICAgKiBUaGlzIGlzIHRoZSBpbW11dGFibGUgZm9ybSBvZiB0aGUgZnVuY3Rpb24gc2V0TWFnbml0dWRlKCkuIFRoaXMgd2lsbCByZXR1cm4gYSBuZXcgdmVjdG9yLCBhbmQgd2lsbCBub3QgbW9kaWZ5XG4gICAqIHRoaXMgdmVjdG9yLlxuICAgKi9cbiAgcHVibGljIHdpdGhNYWduaXR1ZGUoIG1hZ25pdHVkZTogbnVtYmVyICk6IFZlY3RvcjIge1xuICAgIHJldHVybiB0aGlzLmNvcHkoKS5zZXRNYWduaXR1ZGUoIG1hZ25pdHVkZSApO1xuICB9XG5cbiAgLyoqXG4gICAqIENvcHkgb2YgdGhpcyB2ZWN0b3IsIHNjYWxlZCBieSB0aGUgZGVzaXJlZCBzY2FsYXIgdmFsdWUuXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIGltbXV0YWJsZSBmb3JtIG9mIHRoZSBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcigpLiBUaGlzIHdpbGwgcmV0dXJuIGEgbmV3IHZlY3RvciwgYW5kIHdpbGwgbm90IG1vZGlmeVxuICAgKiB0aGlzIHZlY3Rvci5cbiAgICovXG4gIHB1YmxpYyB0aW1lc1NjYWxhciggc2NhbGFyOiBudW1iZXIgKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHYyKCB0aGlzLnggKiBzY2FsYXIsIHRoaXMueSAqIHNjYWxhciApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNhbWUgYXMgdGltZXNTY2FsYXIuXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIGltbXV0YWJsZSBmb3JtIG9mIHRoZSBmdW5jdGlvbiBtdWx0aXBseSgpLiBUaGlzIHdpbGwgcmV0dXJuIGEgbmV3IHZlY3RvciwgYW5kIHdpbGwgbm90IG1vZGlmeVxuICAgKiB0aGlzIHZlY3Rvci5cbiAgICovXG4gIHB1YmxpYyB0aW1lcyggc2NhbGFyOiBudW1iZXIgKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMudGltZXNTY2FsYXIoIHNjYWxhciApO1xuICB9XG5cbiAgLyoqXG4gICAqIENvcHkgb2YgdGhpcyB2ZWN0b3IsIG11bHRpcGxpZWQgY29tcG9uZW50LXdpc2UgYnkgdGhlIHBhc3NlZC1pbiB2ZWN0b3Igdi5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgaW1tdXRhYmxlIGZvcm0gb2YgdGhlIGZ1bmN0aW9uIGNvbXBvbmVudE11bHRpcGx5KCkuIFRoaXMgd2lsbCByZXR1cm4gYSBuZXcgdmVjdG9yLCBhbmQgd2lsbCBub3QgbW9kaWZ5XG4gICAqIHRoaXMgdmVjdG9yLlxuICAgKi9cbiAgcHVibGljIGNvbXBvbmVudFRpbWVzKCB2OiBWZWN0b3IyICk6IFZlY3RvcjIge1xuICAgIHJldHVybiB2MiggdGhpcy54ICogdi54LCB0aGlzLnkgKiB2LnkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRpdGlvbiBvZiB0aGlzIHZlY3RvciBhbmQgYW5vdGhlciB2ZWN0b3IsIHJldHVybmluZyBhIGNvcHkuXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIGltbXV0YWJsZSBmb3JtIG9mIHRoZSBmdW5jdGlvbiBhZGQoKS4gVGhpcyB3aWxsIHJldHVybiBhIG5ldyB2ZWN0b3IsIGFuZCB3aWxsIG5vdCBtb2RpZnlcbiAgICogdGhpcyB2ZWN0b3IuXG4gICAqL1xuICBwdWJsaWMgcGx1cyggdjogVmVjdG9yMiApOiBWZWN0b3IyIHtcbiAgICByZXR1cm4gdjIoIHRoaXMueCArIHYueCwgdGhpcy55ICsgdi55ICk7XG4gIH1cblxuICAvKipcbiAgICogQWRkaXRpb24gb2YgdGhpcyB2ZWN0b3IgYW5kIGFub3RoZXIgdmVjdG9yICh4LHkpLCByZXR1cm5pbmcgYSBjb3B5LlxuICAgKlxuICAgKiBUaGlzIGlzIHRoZSBpbW11dGFibGUgZm9ybSBvZiB0aGUgZnVuY3Rpb24gYWRkWFkoKS4gVGhpcyB3aWxsIHJldHVybiBhIG5ldyB2ZWN0b3IsIGFuZCB3aWxsIG5vdCBtb2RpZnlcbiAgICogdGhpcyB2ZWN0b3IuXG4gICAqL1xuICBwdWJsaWMgcGx1c1hZKCB4OiBudW1iZXIsIHk6IG51bWJlciApOiBWZWN0b3IyIHtcbiAgICByZXR1cm4gdjIoIHRoaXMueCArIHgsIHRoaXMueSArIHkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRpdGlvbiBvZiB0aGlzIHZlY3RvciB3aXRoIGEgc2NhbGFyIChhZGRzIHRoZSBzY2FsYXIgdG8gZXZlcnkgY29tcG9uZW50KSwgcmV0dXJuaW5nIGEgY29weS5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgaW1tdXRhYmxlIGZvcm0gb2YgdGhlIGZ1bmN0aW9uIGFkZFNjYWxhcigpLiBUaGlzIHdpbGwgcmV0dXJuIGEgbmV3IHZlY3RvciwgYW5kIHdpbGwgbm90IG1vZGlmeVxuICAgKiB0aGlzIHZlY3Rvci5cbiAgICovXG4gIHB1YmxpYyBwbHVzU2NhbGFyKCBzY2FsYXI6IG51bWJlciApOiBWZWN0b3IyIHtcbiAgICByZXR1cm4gdjIoIHRoaXMueCArIHNjYWxhciwgdGhpcy55ICsgc2NhbGFyICk7XG4gIH1cblxuICAvKipcbiAgICogU3VidHJhY3Rpb24gb2YgdGhpcyB2ZWN0b3IgYnkgYW5vdGhlciB2ZWN0b3IgdiwgcmV0dXJuaW5nIGEgY29weS5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgaW1tdXRhYmxlIGZvcm0gb2YgdGhlIGZ1bmN0aW9uIHN1YnRyYWN0KCkuIFRoaXMgd2lsbCByZXR1cm4gYSBuZXcgdmVjdG9yLCBhbmQgd2lsbCBub3QgbW9kaWZ5XG4gICAqIHRoaXMgdmVjdG9yLlxuICAgKi9cbiAgcHVibGljIG1pbnVzKCB2OiBWZWN0b3IyICk6IFZlY3RvcjIge1xuICAgIHJldHVybiB2MiggdGhpcy54IC0gdi54LCB0aGlzLnkgLSB2LnkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJ0cmFjdGlvbiBvZiB0aGlzIHZlY3RvciBieSBhbm90aGVyIHZlY3RvciAoeCx5KSwgcmV0dXJuaW5nIGEgY29weS5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgaW1tdXRhYmxlIGZvcm0gb2YgdGhlIGZ1bmN0aW9uIHN1YnRyYWN0WFkoKS4gVGhpcyB3aWxsIHJldHVybiBhIG5ldyB2ZWN0b3IsIGFuZCB3aWxsIG5vdCBtb2RpZnlcbiAgICogdGhpcyB2ZWN0b3IuXG4gICAqL1xuICBwdWJsaWMgbWludXNYWSggeDogbnVtYmVyLCB5OiBudW1iZXIgKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHYyKCB0aGlzLnggLSB4LCB0aGlzLnkgLSB5ICk7XG4gIH1cblxuICAvKipcbiAgICogU3VidHJhY3Rpb24gb2YgdGhpcyB2ZWN0b3IgYnkgYSBzY2FsYXIgKHN1YnRyYWN0cyB0aGUgc2NhbGFyIGZyb20gZXZlcnkgY29tcG9uZW50KSwgcmV0dXJuaW5nIGEgY29weS5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgaW1tdXRhYmxlIGZvcm0gb2YgdGhlIGZ1bmN0aW9uIHN1YnRyYWN0U2NhbGFyKCkuIFRoaXMgd2lsbCByZXR1cm4gYSBuZXcgdmVjdG9yLCBhbmQgd2lsbCBub3QgbW9kaWZ5XG4gICAqIHRoaXMgdmVjdG9yLlxuICAgKi9cbiAgcHVibGljIG1pbnVzU2NhbGFyKCBzY2FsYXI6IG51bWJlciApOiBWZWN0b3IyIHtcbiAgICByZXR1cm4gdjIoIHRoaXMueCAtIHNjYWxhciwgdGhpcy55IC0gc2NhbGFyICk7XG4gIH1cblxuICAvKipcbiAgICogRGl2aXNpb24gb2YgdGhpcyB2ZWN0b3IgYnkgYSBzY2FsYXIgKGRpdmlkZXMgZXZlcnkgY29tcG9uZW50IGJ5IHRoZSBzY2FsYXIpLCByZXR1cm5pbmcgYSBjb3B5LlxuICAgKlxuICAgKiBUaGlzIGlzIHRoZSBpbW11dGFibGUgZm9ybSBvZiB0aGUgZnVuY3Rpb24gZGl2aWRlU2NhbGFyKCkuIFRoaXMgd2lsbCByZXR1cm4gYSBuZXcgdmVjdG9yLCBhbmQgd2lsbCBub3QgbW9kaWZ5XG4gICAqIHRoaXMgdmVjdG9yLlxuICAgKi9cbiAgcHVibGljIGRpdmlkZWRTY2FsYXIoIHNjYWxhcjogbnVtYmVyICk6IFZlY3RvcjIge1xuICAgIHJldHVybiB2MiggdGhpcy54IC8gc2NhbGFyLCB0aGlzLnkgLyBzY2FsYXIgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOZWdhdGVkIGNvcHkgb2YgdGhpcyB2ZWN0b3IgKG11bHRpcGxpZXMgZXZlcnkgY29tcG9uZW50IGJ5IC0xKS5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgaW1tdXRhYmxlIGZvcm0gb2YgdGhlIGZ1bmN0aW9uIG5lZ2F0ZSgpLiBUaGlzIHdpbGwgcmV0dXJuIGEgbmV3IHZlY3RvciwgYW5kIHdpbGwgbm90IG1vZGlmeVxuICAgKiB0aGlzIHZlY3Rvci5cbiAgICovXG4gIHB1YmxpYyBuZWdhdGVkKCk6IFZlY3RvcjIge1xuICAgIHJldHVybiB2MiggLXRoaXMueCwgLXRoaXMueSApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJvdGF0ZWQgYnkgLXBpLzIgKHBlcnBlbmRpY3VsYXIgdG8gdGhpcyB2ZWN0b3IpLCByZXR1cm5lZCBhcyBhIGNvcHkuXG4gICAqL1xuICBwdWJsaWMgZ2V0UGVycGVuZGljdWxhcigpOiBWZWN0b3IyIHtcbiAgICByZXR1cm4gdjIoIHRoaXMueSwgLXRoaXMueCApO1xuICB9XG5cbiAgcHVibGljIGdldCBwZXJwZW5kaWN1bGFyKCk6IFZlY3RvcjIge1xuICAgIHJldHVybiB0aGlzLmdldFBlcnBlbmRpY3VsYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSb3RhdGVkIGJ5IGFuIGFyYml0cmFyeSBhbmdsZSwgaW4gcmFkaWFucy4gUmV0dXJuZWQgYXMgYSBjb3B5LlxuICAgKlxuICAgKiBUaGlzIGlzIHRoZSBpbW11dGFibGUgZm9ybSBvZiB0aGUgZnVuY3Rpb24gcm90YXRlKCkuIFRoaXMgd2lsbCByZXR1cm4gYSBuZXcgdmVjdG9yLCBhbmQgd2lsbCBub3QgbW9kaWZ5XG4gICAqIHRoaXMgdmVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0gYW5nbGUgLSBJbiByYWRpYW5zXG4gICAqL1xuICBwdWJsaWMgcm90YXRlZCggYW5nbGU6IG51bWJlciApOiBWZWN0b3IyIHtcbiAgICBjb25zdCBuZXdBbmdsZSA9IHRoaXMuYW5nbGUgKyBhbmdsZTtcbiAgICBjb25zdCBtYWcgPSB0aGlzLm1hZ25pdHVkZTtcbiAgICByZXR1cm4gdjIoIG1hZyAqIE1hdGguY29zKCBuZXdBbmdsZSApLCBtYWcgKiBNYXRoLnNpbiggbmV3QW5nbGUgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIE11dGFibGUgbWV0aG9kIHRoYXQgcm90YXRlcyB0aGlzIHZlY3RvciBhYm91dCBhbiB4LHkgcG9pbnQuXG4gICAqXG4gICAqIEBwYXJhbSB4IC0gb3JpZ2luIG9mIHJvdGF0aW9uIGluIHhcbiAgICogQHBhcmFtIHkgLSBvcmlnaW4gb2Ygcm90YXRpb24gaW4geVxuICAgKiBAcGFyYW0gYW5nbGUgLSByYWRpYW5zIHRvIHJvdGF0ZVxuICAgKiBAcmV0dXJucyB0aGlzIGZvciBjaGFpbmluZ1xuICAgKi9cbiAgcHVibGljIHJvdGF0ZUFib3V0WFkoIHg6IG51bWJlciwgeTogbnVtYmVyLCBhbmdsZTogbnVtYmVyICk6IFZlY3RvcjIge1xuICAgIGNvbnN0IGR4ID0gdGhpcy54IC0geDtcbiAgICBjb25zdCBkeSA9IHRoaXMueSAtIHk7XG4gICAgY29uc3QgY29zID0gTWF0aC5jb3MoIGFuZ2xlICk7XG4gICAgY29uc3Qgc2luID0gTWF0aC5zaW4oIGFuZ2xlICk7XG4gICAgdGhpcy54ID0geCArIGR4ICogY29zIC0gZHkgKiBzaW47XG4gICAgdGhpcy55ID0geSArIGR4ICogc2luICsgZHkgKiBjb3M7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTYW1lIGFzIHJvdGF0ZUFib3V0WFkgYnV0IHdpdGggYSBwb2ludCBhcmd1bWVudC5cbiAgICovXG4gIHB1YmxpYyByb3RhdGVBYm91dFBvaW50KCBwb2ludDogVmVjdG9yMiwgYW5nbGU6IG51bWJlciApOiBWZWN0b3IyIHtcbiAgICByZXR1cm4gdGhpcy5yb3RhdGVBYm91dFhZKCBwb2ludC54LCBwb2ludC55LCBhbmdsZSApO1xuICB9XG5cbiAgLyoqXG4gICAqIEltbXV0YWJsZSBtZXRob2QgdGhhdCByZXR1cm5zIGEgbmV3IFZlY3RvcjIgdGhhdCBpcyByb3RhdGVkIGFib3V0IHRoZSBnaXZlbiBwb2ludC5cbiAgICpcbiAgICogQHBhcmFtIHggLSBvcmlnaW4gZm9yIHJvdGF0aW9uIGluIHhcbiAgICogQHBhcmFtIHkgLSBvcmlnaW4gZm9yIHJvdGF0aW9uIGluIHlcbiAgICogQHBhcmFtIGFuZ2xlIC0gcmFkaWFucyB0byByb3RhdGVcbiAgICovXG4gIHB1YmxpYyByb3RhdGVkQWJvdXRYWSggeDogbnVtYmVyLCB5OiBudW1iZXIsIGFuZ2xlOiBudW1iZXIgKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHYyKCB0aGlzLngsIHRoaXMueSApLnJvdGF0ZUFib3V0WFkoIHgsIHksIGFuZ2xlICk7XG4gIH1cblxuICAvKipcbiAgICogSW1tdXRhYmxlIG1ldGhvZCB0aGF0IHJldHVybnMgYSBuZXcgVmVjdG9yMiByb3RhdGVkIGFib3V0IHRoZSBnaXZlbiBwb2ludC5cbiAgICovXG4gIHB1YmxpYyByb3RhdGVkQWJvdXRQb2ludCggcG9pbnQ6IFZlY3RvcjIsIGFuZ2xlOiBudW1iZXIgKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMucm90YXRlZEFib3V0WFkoIHBvaW50LngsIHBvaW50LnksIGFuZ2xlICk7XG4gIH1cblxuICAvKipcbiAgICogQSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHRoaXMgdmVjdG9yIChyYXRpbz0wKSBhbmQgYW5vdGhlciB2ZWN0b3IgKHJhdGlvPTEpLlxuICAgKlxuICAgKiBAcGFyYW0gdmVjdG9yXG4gICAqIEBwYXJhbSByYXRpbyAtIE5vdCBuZWNlc3NhcmlseSBjb25zdHJhaW5lZCBpbiBbMCwgMV1cbiAgICovXG4gIHB1YmxpYyBibGVuZCggdmVjdG9yOiBWZWN0b3IyLCByYXRpbzogbnVtYmVyICk6IFZlY3RvcjIge1xuICAgIHJldHVybiB2MiggdGhpcy54ICsgKCB2ZWN0b3IueCAtIHRoaXMueCApICogcmF0aW8sIHRoaXMueSArICggdmVjdG9yLnkgLSB0aGlzLnkgKSAqIHJhdGlvICk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGF2ZXJhZ2UgKG1pZHBvaW50KSBiZXR3ZWVuIHRoaXMgdmVjdG9yIGFuZCBhbm90aGVyIHZlY3Rvci5cbiAgICovXG4gIHB1YmxpYyBhdmVyYWdlKCB2ZWN0b3I6IFZlY3RvcjIgKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMuYmxlbmQoIHZlY3RvciwgMC41ICk7XG4gIH1cblxuICAvKipcbiAgICogVGFrZSBhIGNvbXBvbmVudC1iYXNlZCBtZWFuIG9mIGFsbCB2ZWN0b3JzIHByb3ZpZGVkLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBhdmVyYWdlKCB2ZWN0b3JzOiBWZWN0b3IyW10gKTogVmVjdG9yMiB7XG4gICAgY29uc3QgYWRkZWQgPSBfLnJlZHVjZSggdmVjdG9ycywgQURESU5HX0FDQ1VNVUxBVE9SLCBuZXcgVmVjdG9yMiggMCwgMCApICk7XG4gICAgcmV0dXJuIGFkZGVkLmRpdmlkZVNjYWxhciggdmVjdG9ycy5sZW5ndGggKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIERlYnVnZ2luZyBzdHJpbmcgZm9yIHRoZSB2ZWN0b3IuXG4gICAqL1xuICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYFZlY3RvcjIoJHt0aGlzLnh9LCAke3RoaXMueX0pYDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGlzIHRvIGEgMy1kaW1lbnNpb25hbCB2ZWN0b3IsIHdpdGggdGhlIHotY29tcG9uZW50IGVxdWFsIHRvIDAuXG4gICAqL1xuICBwdWJsaWMgdG9WZWN0b3IzKCk6IFZlY3RvcjMge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMyggdGhpcy54LCB0aGlzLnksIDAgKTtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxuICAgKiBNdXRhYmxlc1xuICAgKiAtIGFsbCBtdXRhdGlvbiBzaG91bGQgZ28gdGhyb3VnaCBzZXRYWSAvIHNldFggLyBzZXRZXG4gICAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogU2V0cyBhbGwgb2YgdGhlIGNvbXBvbmVudHMgb2YgdGhpcyB2ZWN0b3IsIHJldHVybmluZyB0aGlzLlxuICAgKi9cbiAgcHVibGljIHNldFhZKCB4OiBudW1iZXIsIHk6IG51bWJlciApOiBWZWN0b3IyIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgeC1jb21wb25lbnQgb2YgdGhpcyB2ZWN0b3IsIHJldHVybmluZyB0aGlzLlxuICAgKi9cbiAgcHVibGljIHNldFgoIHg6IG51bWJlciApOiBWZWN0b3IyIHtcbiAgICB0aGlzLnggPSB4O1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgeS1jb21wb25lbnQgb2YgdGhpcyB2ZWN0b3IsIHJldHVybmluZyB0aGlzLlxuICAgKi9cbiAgcHVibGljIHNldFkoIHk6IG51bWJlciApOiBWZWN0b3IyIHtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhpcyB2ZWN0b3IgdG8gYmUgYSBjb3B5IG9mIGFub3RoZXIgdmVjdG9yLlxuICAgKlxuICAgKiBUaGlzIGlzIHRoZSBtdXRhYmxlIGZvcm0gb2YgdGhlIGZ1bmN0aW9uIGNvcHkoKS4gVGhpcyB3aWxsIG11dGF0ZSAoY2hhbmdlKSB0aGlzIHZlY3RvciwgaW4gYWRkaXRpb24gdG8gcmV0dXJuaW5nXG4gICAqIHRoaXMgdmVjdG9yIGl0c2VsZi5cbiAgICovXG4gIHB1YmxpYyBzZXQoIHY6IFZlY3RvcjIgKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMuc2V0WFkoIHYueCwgdi55ICk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgbWFnbml0dWRlIG9mIHRoaXMgdmVjdG9yLiBJZiB0aGUgcGFzc2VkLWluIG1hZ25pdHVkZSBpcyBuZWdhdGl2ZSwgdGhpcyBmbGlwcyB0aGUgdmVjdG9yIGFuZCBzZXRzIGl0c1xuICAgKiBtYWduaXR1ZGUgdG8gYWJzKCBtYWduaXR1ZGUgKS5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgbXV0YWJsZSBmb3JtIG9mIHRoZSBmdW5jdGlvbiB3aXRoTWFnbml0dWRlKCkuIFRoaXMgd2lsbCBtdXRhdGUgKGNoYW5nZSkgdGhpcyB2ZWN0b3IsIGluIGFkZGl0aW9uIHRvXG4gICAqIHJldHVybmluZyB0aGlzIHZlY3RvciBpdHNlbGYuXG4gICAqL1xuICBwdWJsaWMgc2V0TWFnbml0dWRlKCBtYWduaXR1ZGU6IG51bWJlciApOiBWZWN0b3IyIHtcbiAgICBjb25zdCBzY2FsZSA9IG1hZ25pdHVkZSAvIHRoaXMubWFnbml0dWRlO1xuXG4gICAgcmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIHNjYWxlICk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbm90aGVyIHZlY3RvciB0byB0aGlzIHZlY3RvciwgY2hhbmdpbmcgdGhpcyB2ZWN0b3IuXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIG11dGFibGUgZm9ybSBvZiB0aGUgZnVuY3Rpb24gcGx1cygpLiBUaGlzIHdpbGwgbXV0YXRlIChjaGFuZ2UpIHRoaXMgdmVjdG9yLCBpbiBhZGRpdGlvbiB0b1xuICAgKiByZXR1cm5pbmcgdGhpcyB2ZWN0b3IgaXRzZWxmLlxuICAgKi9cbiAgcHVibGljIGFkZCggdjogVmVjdG9yMiApOiBWZWN0b3IyIHtcbiAgICByZXR1cm4gdGhpcy5zZXRYWSggdGhpcy54ICsgdi54LCB0aGlzLnkgKyB2LnkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFub3RoZXIgdmVjdG9yICh4LHkpIHRvIHRoaXMgdmVjdG9yLCBjaGFuZ2luZyB0aGlzIHZlY3Rvci5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgbXV0YWJsZSBmb3JtIG9mIHRoZSBmdW5jdGlvbiBwbHVzWFkoKS4gVGhpcyB3aWxsIG11dGF0ZSAoY2hhbmdlKSB0aGlzIHZlY3RvciwgaW4gYWRkaXRpb24gdG9cbiAgICogcmV0dXJuaW5nIHRoaXMgdmVjdG9yIGl0c2VsZi5cbiAgICovXG4gIHB1YmxpYyBhZGRYWSggeDogbnVtYmVyLCB5OiBudW1iZXIgKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMuc2V0WFkoIHRoaXMueCArIHgsIHRoaXMueSArIHkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgc2NhbGFyIHRvIHRoaXMgdmVjdG9yIChhZGRlZCB0byBldmVyeSBjb21wb25lbnQpLCBjaGFuZ2luZyB0aGlzIHZlY3Rvci5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgbXV0YWJsZSBmb3JtIG9mIHRoZSBmdW5jdGlvbiBwbHVzU2NhbGFyKCkuIFRoaXMgd2lsbCBtdXRhdGUgKGNoYW5nZSkgdGhpcyB2ZWN0b3IsIGluIGFkZGl0aW9uIHRvXG4gICAqIHJldHVybmluZyB0aGlzIHZlY3RvciBpdHNlbGYuXG4gICAqL1xuICBwdWJsaWMgYWRkU2NhbGFyKCBzY2FsYXI6IG51bWJlciApOiBWZWN0b3IyIHtcbiAgICByZXR1cm4gdGhpcy5zZXRYWSggdGhpcy54ICsgc2NhbGFyLCB0aGlzLnkgKyBzY2FsYXIgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJ0cmFjdHMgdGhpcyB2ZWN0b3IgYnkgYW5vdGhlciB2ZWN0b3IsIGNoYW5naW5nIHRoaXMgdmVjdG9yLlxuICAgKlxuICAgKiBUaGlzIGlzIHRoZSBtdXRhYmxlIGZvcm0gb2YgdGhlIGZ1bmN0aW9uIG1pbnVzKCkuIFRoaXMgd2lsbCBtdXRhdGUgKGNoYW5nZSkgdGhpcyB2ZWN0b3IsIGluIGFkZGl0aW9uIHRvXG4gICAqIHJldHVybmluZyB0aGlzIHZlY3RvciBpdHNlbGYuXG4gICAqL1xuICBwdWJsaWMgc3VidHJhY3QoIHY6IFZlY3RvcjIgKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMuc2V0WFkoIHRoaXMueCAtIHYueCwgdGhpcy55IC0gdi55ICk7XG4gIH1cblxuICAvKipcbiAgICogU3VidHJhY3RzIHRoaXMgdmVjdG9yIGJ5IGFub3RoZXIgdmVjdG9yICh4LHkpLCBjaGFuZ2luZyB0aGlzIHZlY3Rvci5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgbXV0YWJsZSBmb3JtIG9mIHRoZSBmdW5jdGlvbiBtaW51c1hZKCkuIFRoaXMgd2lsbCBtdXRhdGUgKGNoYW5nZSkgdGhpcyB2ZWN0b3IsIGluIGFkZGl0aW9uIHRvXG4gICAqIHJldHVybmluZyB0aGlzIHZlY3RvciBpdHNlbGYuXG4gICAqL1xuICBwdWJsaWMgc3VidHJhY3RYWSggeDogbnVtYmVyLCB5OiBudW1iZXIgKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMuc2V0WFkoIHRoaXMueCAtIHgsIHRoaXMueSAtIHkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJ0cmFjdHMgdGhpcyB2ZWN0b3IgYnkgYSBzY2FsYXIgKHN1YnRyYWN0cyBlYWNoIGNvbXBvbmVudCBieSB0aGUgc2NhbGFyKSwgY2hhbmdpbmcgdGhpcyB2ZWN0b3IuXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIG11dGFibGUgZm9ybSBvZiB0aGUgZnVuY3Rpb24gbWludXNTY2FsYXIoKS4gVGhpcyB3aWxsIG11dGF0ZSAoY2hhbmdlKSB0aGlzIHZlY3RvciwgaW4gYWRkaXRpb24gdG9cbiAgICogcmV0dXJuaW5nIHRoaXMgdmVjdG9yIGl0c2VsZi5cbiAgICovXG4gIHB1YmxpYyBzdWJ0cmFjdFNjYWxhciggc2NhbGFyOiBudW1iZXIgKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMuc2V0WFkoIHRoaXMueCAtIHNjYWxhciwgdGhpcy55IC0gc2NhbGFyICk7XG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbGllcyB0aGlzIHZlY3RvciBieSBhIHNjYWxhciAobXVsdGlwbGllcyBlYWNoIGNvbXBvbmVudCBieSB0aGUgc2NhbGFyKSwgY2hhbmdpbmcgdGhpcyB2ZWN0b3IuXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIG11dGFibGUgZm9ybSBvZiB0aGUgZnVuY3Rpb24gdGltZXNTY2FsYXIoKS4gVGhpcyB3aWxsIG11dGF0ZSAoY2hhbmdlKSB0aGlzIHZlY3RvciwgaW4gYWRkaXRpb24gdG9cbiAgICogcmV0dXJuaW5nIHRoaXMgdmVjdG9yIGl0c2VsZi5cbiAgICovXG4gIHB1YmxpYyBtdWx0aXBseVNjYWxhciggc2NhbGFyOiBudW1iZXIgKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMuc2V0WFkoIHRoaXMueCAqIHNjYWxhciwgdGhpcy55ICogc2NhbGFyICk7XG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbGllcyB0aGlzIHZlY3RvciBieSBhIHNjYWxhciAobXVsdGlwbGllcyBlYWNoIGNvbXBvbmVudCBieSB0aGUgc2NhbGFyKSwgY2hhbmdpbmcgdGhpcyB2ZWN0b3IuXG4gICAqIFNhbWUgYXMgbXVsdGlwbHlTY2FsYXIuXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIG11dGFibGUgZm9ybSBvZiB0aGUgZnVuY3Rpb24gdGltZXMoKS4gVGhpcyB3aWxsIG11dGF0ZSAoY2hhbmdlKSB0aGlzIHZlY3RvciwgaW4gYWRkaXRpb24gdG9cbiAgICogcmV0dXJuaW5nIHRoaXMgdmVjdG9yIGl0c2VsZi5cbiAgICovXG4gIHB1YmxpYyBtdWx0aXBseSggc2NhbGFyOiBudW1iZXIgKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIHNjYWxhciApO1xuICB9XG5cbiAgLyoqXG4gICAqIE11bHRpcGxpZXMgdGhpcyB2ZWN0b3IgYnkgYW5vdGhlciB2ZWN0b3IgY29tcG9uZW50LXdpc2UsIGNoYW5naW5nIHRoaXMgdmVjdG9yLlxuICAgKlxuICAgKiBUaGlzIGlzIHRoZSBtdXRhYmxlIGZvcm0gb2YgdGhlIGZ1bmN0aW9uIGNvbXBvbmVudFRpbWVzKCkuIFRoaXMgd2lsbCBtdXRhdGUgKGNoYW5nZSkgdGhpcyB2ZWN0b3IsIGluIGFkZGl0aW9uIHRvXG4gICAqIHJldHVybmluZyB0aGlzIHZlY3RvciBpdHNlbGYuXG4gICAqL1xuICBwdWJsaWMgY29tcG9uZW50TXVsdGlwbHkoIHY6IFZlY3RvcjIgKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMuc2V0WFkoIHRoaXMueCAqIHYueCwgdGhpcy55ICogdi55ICk7XG4gIH1cblxuICAvKipcbiAgICogRGl2aWRlcyB0aGlzIHZlY3RvciBieSBhIHNjYWxhciAoZGl2aWRlcyBlYWNoIGNvbXBvbmVudCBieSB0aGUgc2NhbGFyKSwgY2hhbmdpbmcgdGhpcyB2ZWN0b3IuXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIG11dGFibGUgZm9ybSBvZiB0aGUgZnVuY3Rpb24gZGl2aWRlZFNjYWxhcigpLiBUaGlzIHdpbGwgbXV0YXRlIChjaGFuZ2UpIHRoaXMgdmVjdG9yLCBpbiBhZGRpdGlvbiB0b1xuICAgKiByZXR1cm5pbmcgdGhpcyB2ZWN0b3IgaXRzZWxmLlxuICAgKi9cbiAgcHVibGljIGRpdmlkZVNjYWxhciggc2NhbGFyOiBudW1iZXIgKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMuc2V0WFkoIHRoaXMueCAvIHNjYWxhciwgdGhpcy55IC8gc2NhbGFyICk7XG4gIH1cblxuICAvKipcbiAgICogTmVnYXRlcyB0aGlzIHZlY3RvciAobXVsdGlwbGllcyBlYWNoIGNvbXBvbmVudCBieSAtMSksIGNoYW5naW5nIHRoaXMgdmVjdG9yLlxuICAgKlxuICAgKiBUaGlzIGlzIHRoZSBtdXRhYmxlIGZvcm0gb2YgdGhlIGZ1bmN0aW9uIG5lZ2F0ZWQoKS4gVGhpcyB3aWxsIG11dGF0ZSAoY2hhbmdlKSB0aGlzIHZlY3RvciwgaW4gYWRkaXRpb24gdG9cbiAgICogcmV0dXJuaW5nIHRoaXMgdmVjdG9yIGl0c2VsZi5cbiAgICovXG4gIHB1YmxpYyBuZWdhdGUoKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMuc2V0WFkoIC10aGlzLngsIC10aGlzLnkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOb3JtYWxpemVzIHRoaXMgdmVjdG9yIChyZXNjYWxlcyB0byB3aGVyZSB0aGUgbWFnbml0dWRlIGlzIDEpLCBjaGFuZ2luZyB0aGlzIHZlY3Rvci5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgbXV0YWJsZSBmb3JtIG9mIHRoZSBmdW5jdGlvbiBub3JtYWxpemVkKCkuIFRoaXMgd2lsbCBtdXRhdGUgKGNoYW5nZSkgdGhpcyB2ZWN0b3IsIGluIGFkZGl0aW9uIHRvXG4gICAqIHJldHVybmluZyB0aGlzIHZlY3RvciBpdHNlbGYuXG4gICAqL1xuICBwdWJsaWMgbm9ybWFsaXplKCk6IFZlY3RvcjIge1xuICAgIGNvbnN0IG1hZyA9IHRoaXMubWFnbml0dWRlO1xuICAgIGlmICggbWFnID09PSAwICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCAnQ2Fubm90IG5vcm1hbGl6ZSBhIHplcm8tbWFnbml0dWRlIHZlY3RvcicgKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIG1hZyApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSb3VuZHMgZWFjaCBjb21wb25lbnQgb2YgdGhpcyB2ZWN0b3Igd2l0aCBVdGlscy5yb3VuZFN5bW1ldHJpYy5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgbXV0YWJsZSBmb3JtIG9mIHRoZSBmdW5jdGlvbiByb3VuZGVkU3ltbWV0cmljKCkuIFRoaXMgd2lsbCBtdXRhdGUgKGNoYW5nZSkgdGhpcyB2ZWN0b3IsIGluIGFkZGl0aW9uXG4gICAqIHRvIHJldHVybmluZyB0aGUgdmVjdG9yIGl0c2VsZi5cbiAgICovXG4gIHB1YmxpYyByb3VuZFN5bW1ldHJpYygpOiBWZWN0b3IyIHtcbiAgICByZXR1cm4gdGhpcy5zZXRYWSggVXRpbHMucm91bmRTeW1tZXRyaWMoIHRoaXMueCApLCBVdGlscy5yb3VuZFN5bW1ldHJpYyggdGhpcy55ICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSb3RhdGVzIHRoaXMgdmVjdG9yIGJ5IHRoZSBhbmdsZSAoaW4gcmFkaWFucyksIGNoYW5naW5nIHRoaXMgdmVjdG9yLlxuICAgKlxuICAgKiBUaGlzIGlzIHRoZSBtdXRhYmxlIGZvcm0gb2YgdGhlIGZ1bmN0aW9uIHJvdGF0ZWQoKS4gVGhpcyB3aWxsIG11dGF0ZSAoY2hhbmdlKSB0aGlzIHZlY3RvciwgaW4gYWRkaXRpb24gdG9cbiAgICogcmV0dXJuaW5nIHRoaXMgdmVjdG9yIGl0c2VsZi5cbiAgICpcbiAgICogQHBhcmFtIGFuZ2xlIC0gSW4gcmFkaWFuc1xuICAgKi9cbiAgcHVibGljIHJvdGF0ZSggYW5nbGU6IG51bWJlciApOiBWZWN0b3IyIHtcbiAgICBjb25zdCBuZXdBbmdsZSA9IHRoaXMuYW5nbGUgKyBhbmdsZTtcbiAgICBjb25zdCBtYWcgPSB0aGlzLm1hZ25pdHVkZTtcbiAgICByZXR1cm4gdGhpcy5zZXRYWSggbWFnICogTWF0aC5jb3MoIG5ld0FuZ2xlICksIG1hZyAqIE1hdGguc2luKCBuZXdBbmdsZSApICk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGlzIHZlY3RvcidzIHZhbHVlIHRvIGJlIHRoZSB4LHkgdmFsdWVzIG1hdGNoaW5nIHRoZSBnaXZlbiBtYWduaXR1ZGUgYW5kIGFuZ2xlIChpbiByYWRpYW5zKSwgY2hhbmdpbmdcbiAgICogdGhpcyB2ZWN0b3IsIGFuZCByZXR1cm5pbmcgaXRzZWxmLlxuICAgKlxuICAgKiBAcGFyYW0gbWFnbml0dWRlXG4gICAqIEBwYXJhbSBhbmdsZSAtIEluIHJhZGlhbnNcbiAgICovXG4gIHB1YmxpYyBzZXRQb2xhciggbWFnbml0dWRlOiBudW1iZXIsIGFuZ2xlOiBudW1iZXIgKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMuc2V0WFkoIG1hZ25pdHVkZSAqIE1hdGguY29zKCBhbmdsZSApLCBtYWduaXR1ZGUgKiBNYXRoLnNpbiggYW5nbGUgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBkdWNrLXR5cGVkIG9iamVjdCBtZWFudCBmb3IgdXNlIHdpdGggdGFuZGVtL3BoZXQtaW8gc2VyaWFsaXphdGlvbi4gQWx0aG91Z2ggdGhpcyBpcyByZWR1bmRhbnQgd2l0aFxuICAgKiBzdGF0ZVNjaGVtYSwgaXQgaXMgYSBuaWNlIGZlYXR1cmUgb2Ygc3VjaCBhIGhlYXZpbHktdXNlZCB0eXBlIHRvIGJlIGFibGUgdG8gY2FsbCB0b1N0YXRlT2JqZWN0IGRpcmVjdGx5IG9uIHRoZSB0eXBlLlxuICAgKlxuICAgKiBAcmV0dXJucyAtIHNlZSBzdGF0ZVNjaGVtYSBmb3Igc2NoZW1hXG4gICAqL1xuICBwdWJsaWMgdG9TdGF0ZU9iamVjdCgpOiBWZWN0b3IyU3RhdGVPYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICB4OiB0aGlzLngsXG4gICAgICB5OiB0aGlzLnlcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGZyZWVUb1Bvb2woKTogdm9pZCB7XG4gICAgVmVjdG9yMi5wb29sLmZyZWVUb1Bvb2woIHRoaXMgKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgcG9vbCA9IG5ldyBQb29sKCBWZWN0b3IyLCB7XG4gICAgbWF4U2l6ZTogMTAwMCxcbiAgICBpbml0aWFsaXplOiBWZWN0b3IyLnByb3RvdHlwZS5zZXRYWSxcbiAgICBkZWZhdWx0QXJndW1lbnRzOiBbIDAsIDAgXVxuICB9ICk7XG5cbiAgLy8gc3RhdGljIG1ldGhvZHNcblxuICAvKipcbiAgICogUmV0dXJucyBhIFZlY3RvcjIgd2l0aCB0aGUgc3BlY2lmaWVkIG1hZ25pdHVkZSAkciQgYW5kIGFuZ2xlICRcXHRoZXRhJCAoaW4gcmFkaWFucyksIHdpdGggdGhlIGZvcm11bGE6XG4gICAqICQkIGYoIHIsIFxcdGhldGEgKSA9IFxcYmVnaW57Ym1hdHJpeH0gclxcY29zXFx0aGV0YSBcXFxcIHJcXHNpblxcdGhldGEgXFxlbmR7Ym1hdHJpeH0gJCRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlUG9sYXIoIG1hZ25pdHVkZTogbnVtYmVyLCBhbmdsZTogbnVtYmVyICk6IFZlY3RvcjIge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMiggMCwgMCApLnNldFBvbGFyKCBtYWduaXR1ZGUsIGFuZ2xlICk7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIFZlY3RvcjIgZnJvbSBhIGR1Y2stdHlwZWQgb2JqZWN0LCBmb3IgdXNlIHdpdGggdGFuZGVtL3BoZXQtaW8gZGVzZXJpYWxpemF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gc3RhdGVPYmplY3QgLSBzZWUgc3RhdGVTY2hlbWEgZm9yIHNjaGVtYVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tU3RhdGVPYmplY3QoIHN0YXRlT2JqZWN0OiBWZWN0b3IyU3RhdGVPYmplY3QgKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHYyKFxuICAgICAgc3RhdGVPYmplY3QueCxcbiAgICAgIHN0YXRlT2JqZWN0LnlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsbG9jYXRpb24tZnJlZSBpbXBsZW1lbnRhdGlvbiB0aGF0IGdldHMgdGhlIGFuZ2xlIGJldHdlZW4gdHdvIHZlY3RvcnNcbiAgICpcbiAgICogQHJldHVybnMgdGhlIGFuZ2xlIGJldHdlZW4gdGhlIHZlY3RvcnNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0QW5nbGVCZXR3ZWVuVmVjdG9ycyggc3RhcnRWZWN0b3I6IFZlY3RvcjIsIGVuZFZlY3RvcjogVmVjdG9yMiApOiBudW1iZXIge1xuICAgIGNvbnN0IGR4ID0gZW5kVmVjdG9yLnggLSBzdGFydFZlY3Rvci54O1xuICAgIGNvbnN0IGR5ID0gZW5kVmVjdG9yLnkgLSBzdGFydFZlY3Rvci55O1xuICAgIHJldHVybiBNYXRoLmF0YW4yKCBkeSwgZHggKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbGxvY2F0aW9uLWZyZWUgd2F5IHRvIGdldCB0aGUgZGlzdGFuY2UgYmV0d2VlbiB2ZWN0b3JzLlxuICAgKlxuICAgKiBAcmV0dXJucyB0aGUgYW5nbGUgYmV0d2VlbiB0aGUgdmVjdG9yc1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXREaXN0YW5jZUJldHdlZW5WZWN0b3JzKCBzdGFydFZlY3RvcjogVmVjdG9yMiwgZW5kVmVjdG9yOiBWZWN0b3IyICk6IG51bWJlciB7XG4gICAgY29uc3QgZHggPSBlbmRWZWN0b3IueCAtIHN0YXJ0VmVjdG9yLng7XG4gICAgY29uc3QgZHkgPSBlbmRWZWN0b3IueSAtIHN0YXJ0VmVjdG9yLnk7XG4gICAgcmV0dXJuIE1hdGguc3FydCggZHggKiBkeCArIGR5ICogZHkgKTtcbiAgfVxuXG4gIHB1YmxpYyBpc1ZlY3RvcjIhOiBib29sZWFuO1xuICBwdWJsaWMgZGltZW5zaW9uITogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBJbW11dGFibGVWZWN0b3IyIHplcm8gdmVjdG9yOiAkXFxiZWdpbntibWF0cml4fSAwXFxcXDAgXFxlbmR7Ym1hdHJpeH0kXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIFpFUk86IFZlY3RvcjI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgdXBwZXJjYXNlLXN0YXRpY3Mtc2hvdWxkLWJlLXJlYWRvbmx5XG5cbiAgLyoqXG4gICAqIEltbXV0YWJsZVZlY3RvcjIgdmVjdG9yOiAkXFxiZWdpbntibWF0cml4fSAxXFxcXDAgXFxlbmR7Ym1hdHJpeH0kXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIFhfVU5JVDogVmVjdG9yMjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSB1cHBlcmNhc2Utc3RhdGljcy1zaG91bGQtYmUtcmVhZG9ubHlcblxuICAvKipcbiAgICogSW1tdXRhYmxlVmVjdG9yMiB2ZWN0b3I6ICRcXGJlZ2lue2JtYXRyaXh9IDBcXFxcMSBcXGVuZHtibWF0cml4fSRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgWV9VTklUOiBWZWN0b3IyOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHVwcGVyY2FzZS1zdGF0aWNzLXNob3VsZC1iZS1yZWFkb25seVxuXG4gIHB1YmxpYyBzdGF0aWMgVmVjdG9yMklPOiBJT1R5cGU7XG59XG5cbi8vIChyZWFkLW9ubHkpIC0gSGVscHMgdG8gaWRlbnRpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdmVjdG9yXG5WZWN0b3IyLnByb3RvdHlwZS5pc1ZlY3RvcjIgPSB0cnVlO1xuVmVjdG9yMi5wcm90b3R5cGUuZGltZW5zaW9uID0gMjtcblxuZG90LnJlZ2lzdGVyKCAnVmVjdG9yMicsIFZlY3RvcjIgKTtcblxuY29uc3QgdjIgPSBWZWN0b3IyLnBvb2wuY3JlYXRlLmJpbmQoIFZlY3RvcjIucG9vbCApO1xuZG90LnJlZ2lzdGVyKCAndjInLCB2MiApO1xuXG5jbGFzcyBJbW11dGFibGVWZWN0b3IyIGV4dGVuZHMgVmVjdG9yMiB7XG4gIC8qKlxuICAgKiBUaHJvdyBlcnJvcnMgd2hlbmV2ZXIgYSBtdXRhYmxlIG1ldGhvZCBpcyBjYWxsZWQgb24gb3VyIGltbXV0YWJsZSB2ZWN0b3JcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgbXV0YWJsZU92ZXJyaWRlSGVscGVyKCBtdXRhYmxlRnVuY3Rpb25OYW1lOiAnc2V0WCcgfCAnc2V0WScgfCAnc2V0WFknICk6IHZvaWQge1xuICAgIEltbXV0YWJsZVZlY3RvcjIucHJvdG90eXBlWyBtdXRhYmxlRnVuY3Rpb25OYW1lIF0gPSAoKSA9PiB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoIGBDYW5ub3QgY2FsbCBtdXRhYmxlIG1ldGhvZCAnJHttdXRhYmxlRnVuY3Rpb25OYW1lfScgb24gaW1tdXRhYmxlIFZlY3RvcjJgICk7XG4gICAgfTtcbiAgfVxufVxuXG5JbW11dGFibGVWZWN0b3IyLm11dGFibGVPdmVycmlkZUhlbHBlciggJ3NldFhZJyApO1xuSW1tdXRhYmxlVmVjdG9yMi5tdXRhYmxlT3ZlcnJpZGVIZWxwZXIoICdzZXRYJyApO1xuSW1tdXRhYmxlVmVjdG9yMi5tdXRhYmxlT3ZlcnJpZGVIZWxwZXIoICdzZXRZJyApO1xuXG5WZWN0b3IyLlpFUk8gPSBhc3NlcnQgPyBuZXcgSW1tdXRhYmxlVmVjdG9yMiggMCwgMCApIDogbmV3IFZlY3RvcjIoIDAsIDAgKTtcblZlY3RvcjIuWF9VTklUID0gYXNzZXJ0ID8gbmV3IEltbXV0YWJsZVZlY3RvcjIoIDEsIDAgKSA6IG5ldyBWZWN0b3IyKCAxLCAwICk7XG5WZWN0b3IyLllfVU5JVCA9IGFzc2VydCA/IG5ldyBJbW11dGFibGVWZWN0b3IyKCAwLCAxICkgOiBuZXcgVmVjdG9yMiggMCwgMSApO1xuXG5leHBvcnQgdHlwZSBWZWN0b3IyU3RhdGVPYmplY3QgPSB7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xufTtcblxuVmVjdG9yMi5WZWN0b3IySU8gPSBuZXcgSU9UeXBlPFZlY3RvcjIsIFZlY3RvcjJTdGF0ZU9iamVjdD4oICdWZWN0b3IySU8nLCB7XG4gIHZhbHVlVHlwZTogVmVjdG9yMixcbiAgc3RhdGVTY2hlbWE6IHtcbiAgICB4OiBOdW1iZXJJTyxcbiAgICB5OiBOdW1iZXJJT1xuICB9LFxuICB0b1N0YXRlT2JqZWN0OiAoIHZlY3RvcjI6IFZlY3RvcjIgKSA9PiB2ZWN0b3IyLnRvU3RhdGVPYmplY3QoKSxcbiAgZnJvbVN0YXRlT2JqZWN0OiAoIHN0YXRlT2JqZWN0OiBWZWN0b3IyU3RhdGVPYmplY3QgKSA9PiBWZWN0b3IyLmZyb21TdGF0ZU9iamVjdCggc3RhdGVPYmplY3QgKSxcbiAgZG9jdW1lbnRhdGlvbjogJ0EgbnVtZXJpY2FsIG9iamVjdCB3aXRoIHggYW5kIHkgcHJvcGVydGllcywgbGlrZSB7eDozLHk6NH0nXG59ICk7XG5cbmV4cG9ydCB7IHYyIH07XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsSUFBSSxNQUFxQiw0QkFBNEI7QUFDNUQsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyxRQUFRLE1BQU0sbUNBQW1DO0FBQ3hELE9BQU9DLEdBQUcsTUFBTSxVQUFVO0FBQzFCLE9BQU9DLEtBQUssTUFBTSxZQUFZO0FBQzlCLE9BQU9DLE9BQU8sTUFBTSxjQUFjO0FBRWxDLE1BQU1DLGtCQUFrQixHQUFHQSxDQUFFQyxNQUFlLEVBQUVDLFVBQW1CLEtBQU07RUFDckUsT0FBT0QsTUFBTSxDQUFDRSxHQUFHLENBQUVELFVBQVUsQ0FBRTtBQUNqQyxDQUFDO0FBRUQsZUFBZSxNQUFNRSxPQUFPLENBQXNCO0VBRWhE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
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Utils.js
// Copyright 2013-2023, University of Colorado Boulder

/**
 * Utility functions for Dot, placed into the phet.dot.X namespace.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */





// constants
const EPSILON = Number.MIN_VALUE;
const TWO_PI = 2 * Math.PI;

// "static" variables used in boxMullerTransform
let generate;
let z0;
let z1;
const Utils = {
  /**
   * Returns the original value if it is inclusively within the [max,min] range. If it's below the range, min is
   * returned, and if it's above the range, max is returned.
   * @public
   *
   * @param {number} value
   * @param {number} min
   * @param {number} max
   * @returns {number}
   */
  clamp(value, min, max) {
    if (value < min) {
      return min;
    } else if (value > max) {
      return max;
    } else {
      return value;
    }
  },
  /**
   * Returns a number in the range $n\in[\mathrm{min},\mathrm{max})$ with the same equivalence class as the input
   * value mod (max-min), i.e. for a value $m$, $m\equiv n\ (\mathrm{mod}\ \mathrm{max}-\mathrm{min})$.
   * @public
   *
   * The 'down' indicates that if the value is equal to min or max, the max is returned.
   *
   * @param {number} value
   * @param {number} min
   * @param {number} max
   * @returns {number}
   */
  moduloBetweenDown(value, min, max) {
    assert && assert(max > min, 'max > min required for moduloBetween');
    const divisor = max - min;

    // get a partial result of value-min between [0,divisor)
    let partial = (value - min) % divisor;
    if (partial < 0) {
      // since if value-min < 0, the remainder will give us a negative number
      partial += divisor;
    }
    return partial + min; // add back in the minimum value
  },

  /**
   * Returns a number in the range $n\in(\mathrm{min},\mathrm{max}]$ with the same equivalence class as the input
   * value mod (max-min), i.e. for a value $m$, $m\equiv n\ (\mathrm{mod}\ \mathrm{max}-\mathrm{min})$.
   * @public
   *
   * The 'up' indicates that if the value is equal to min or max, the min is returned.
   *
   * @param {number} value
   * @param {number} min
   * @param {number} max
   * @returns {number}
   */
  moduloBetweenUp(value, min, max) {
    return -Utils.moduloBetweenDown(-value, -max, -min);
  },
  /**
   * Returns an array of integers from A to B (inclusive), e.g. rangeInclusive( 4, 7 ) maps to [ 4, 5, 6, 7 ].
   * @public
   *
   * @param {number} a
   * @param {number} b
   * @returns {Array.<number>}
   */
  rangeInclusive(a, b) {
    if (b < a) {
      return [];
    }
    const result = new Array(b - a + 1);
    for (let i = a; i <= b; i++) {
      result[i - a] = i;
    }
    return result;
  },
  /**
   * Returns an array of integers from A to B (exclusive), e.g. rangeExclusive( 4, 7 ) maps to [ 5, 6 ].
   * @public
   *
   * @param {number} a
   * @param {number} b
   * @returns {Array.<number>}
   */
  rangeExclusive(a, b) {
    return Utils.rangeInclusive(a + 1, b - 1);
  },
  /**
   * Converts degrees to radians.
   * @public
   *
   * @param {number} degrees
   * @returns {number}
   */
  toRadians(degrees) {
    return Math.PI * degrees / 180;
  },
  /**
   * Converts radians to degrees.
   * @public
   *
   * @param {number} radians
   * @returns {number}
   */
  toDegrees(radians) {
    return 180 * radians / Math.PI;
  },
  /**
   * Workaround for broken modulo operator.
   * E.g. on iOS9, 1e10 % 1e10 -> 2.65249474e-315
   * See https://github.com/phetsims/dot/issues/75
   * @param {number} a
   * @param {number} b
   * @returns {number}
   */
  mod(a, b) {
    if (a / b % 1 === 0) {
      return 0; // a is a multiple of b
    } else {
      return a % b;
    }
  },
  /**
   * Greatest Common Divisor, using https://en.wikipedia.org/wiki/Euclidean_algorithm. See
   * https://en.wikipedia.org/wiki/Greatest_common_divisor
   * @public
   *
   * @param {number} a
   * @param {number} b
   * @returns {number}
   */
  gcd(a, b) {
    return Math.abs(b === 0 ? a : this.gcd(b, Utils.mod(a, b)));
  },
  /**
   * Least Common Multiple, https://en.wikipedia.org/wiki/Least_common_multiple
   * @public
   *
   * @param {number} a
   * @param {number} b
   * @returns {number} lcm, an integer
   */
  lcm(a, b) {
    return Utils.roundSymmetric(Math.abs(a * b) / Utils.gcd(a, b));
  },
  /**
   * Intersection point between the lines defined by the line segments p1-2 and p3-p4. If the
   * lines are not properly defined, null is returned. If there are no intersections or infinitely many,
   * e.g. parallel lines, null is returned.
   * @public
   *
   * @param {Vector2} p1
   * @param {Vector2} p2
   * @param {Vector2} p3
   * @param {Vector2} p4
   * @returns {Vector2|null}
   */
  lineLineIntersection(p1, p2, p3, p4) {
    const epsilon = 1e-10;

    // If the endpoints are the same, they don't properly define a line
    if (p1.equals(p2) || p3.equals(p4)) {
      return null;
    }

    // Taken from an answer in
    // http://stackoverflow.com/questions/385305/efficient-maths-algorithm-to-calculate-intersections
    const x12 = p1.x - p2.x;
    const x34 = p3.x - p4.x;
    const y12 = p1.y - p2.y;
    const y34 = p3.y - p4.y;
    const denom = x12 * y34 - y12 * x34;

    // If the denominator is 0, lines are parallel or coincident
    if (Math.abs(denom) < epsilon) {
      return null;
    }

    // define intersection using determinants, see https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection
    const a = p1.x * p2.y - p1.y * p2.x;
    const b = p3.x * p4.y - p3.y * p4.x;
    return new Vector2((a * x34 - x12 * b) / denom, (a * y34 - y12 * b) / denom);
  },
  /**
   * Returns the center of a circle that will lie on 3 points (if it exists), otherwise null (if collinear).
   * @public
   *
   * @param {Vector2} p1
   * @param {Vector2} p2
   * @param {Vector2} p3
   * @returns {Vector2|null}
   */
  circleCenterFromPoints(p1, p2, p3) {
    // TODO: Can we make scratch vectors here, avoiding the circular reference?

    // midpoints between p1-p2 and p2-p3
    const p12 = new Vector2((p1.x + p2.x) / 2, (p1.y + p2.y) / 2);
    const p23 = new Vector2((p2.x + p3.x) / 2, (p2.y + p3.y) / 2);

    // perpendicular points from the minpoints
    const p12x = new Vector2(p12.x + (p2.y - p1.y), p12.y - (p2.x - p1.x));
    const p23x = new Vector2(p23.x + (p3.y - p2.y), p23.y - (p3.x - p2.x));
    return Utils.lineLineIntersection(p12, p12x, p23, p23x);
  },
  /**
   * Returns whether the point p is inside the circle defined by the other three points (p1, p2, p3).
   * @public
   *
   * NOTE: p1,p2,p3 should be specified in a counterclockwise (mathematically) order, and thus should have a positive
   * signed area.
   *
   * See notes in https://en.wikipedia.org/wiki/Delaunay_triangulation.
   *
   * @param {Vector2} p1
   * @param {Vector2} p2
   * @param {Vector2} p3
   * @param {Vector2} p
   * @returns {boolean}
   */
  pointInCircleFromPoints(p1, p2, p3, p) {
    assert && assert(Utils.triangleAreaSigned(p1, p2, p3) > 0, 'Defined points should be in a counterclockwise order');
    const m00 = p1.x - p.x;
    const m01 = p1.y - p.y;
    const m02 = (p1.x - p.x) * (p1.x - p.x) + (p1.y - p.y) * (p1.y - p.y);
    const m10 = p2.x - p.x;
    const m11 = p2.y - p.y;
    const m12 = (p2.x - p.x) * (p2.x - p.x) + (p2.y - p.y) * (p2.y - p.y);
    const m20 = p3.x - p.x;
    const m21 = p3.y - p.y;
    const m22 = (p3.x - p.x) * (p3.x - p.x) + (p3.y - p.y) * (p3.y - p.y);
    const determinant = m00 * m11 * m22 + m01 * m12 * m20 + m02 * m10 * m21 - m02 * m11 * m20 - m01 * m10 * m22 - m00 * m12 * m21;
    return determinant > 0;
  },
  /**
   * Ray-sphere intersection, returning information about the closest intersection. Assumes the sphere is centered
   * at the origin (for ease of computation), transform the ray to compensate if needed.
   * @public
   *
   * If there is no intersection, null is returned. Otherwise an object will be returned like:
   * <pre class="brush: js">
   * {
   *   distance: {number}, // distance from the ray position to the intersection
   *   hitPoint: {Vector3}, // location of the intersection
   *   normal: {Vector3}, // the normal of the sphere's surface at the intersection
   *   fromOutside: {boolean}, // whether the ray intersected the sphere from outside the sphere first
   * }
   * </pre>
   *
   * @param {number} radius
   * @param {Ray3} ray
   * @param {number} epsilon
   * @returns {Object}
   */
  // assumes a sphere with the specified radius, centered at the origin
  sphereRayIntersection(radius, ray, epsilon) {
    epsilon = epsilon === undefined ? 1e-5 : epsilon;

    // center is the origin for now, but leaving in computations so that we can change that in the future. optimize away if needed
    const center = new Vector3(0, 0, 0);
    const rayDir = ray.direction;
    const pos = ray.position;
    const centerToRay = pos.minus(center);

    // basically, we can use the quadratic equation to solve for both possible hit points (both +- roots are the hit points)
    const tmp = rayDir.dot(centerToRay);
    const centerToRayDistSq = centerToRay.magnitudeSquared;
    const det = 4 * tmp * tmp - 4 * (centerToRayDistSq - radius * radius);
    if (det < epsilon) {
      // ray misses sphere entirely
      return null;
    }
    const base = rayDir.dot(center) - rayDir.dot(pos);
    const sqt = Math.sqrt(det) / 2;

    // the "first" entry point distance into the sphere. if we are inside the sphere, it is behind us
    const ta = base - sqt;

    // the "second" entry point distance
    const tb = base + sqt;
    if (tb < epsilon) {
      // sphere is behind ray, so don't return an intersection
      return null;
    }
    const hitPositionB = ray.pointAtDistance(tb);
    const normalB = hitPositionB.minus(center).normalized();
    if (ta < epsilon) {
      // we are inside the sphere
      // in => out
      return {
        distance: tb,
        hitPoint: hitPositionB,
        normal: normalB.negated(),
        fromOutside: false
      };
    } else {
      // two possible hits
      const hitPositionA = ray.pointAtDistance(ta);
      const normalA = hitPositionA.minus(center).normalized();

      // close hit, we have out => in
      return {
        distance: ta,
        hitPoint: hitPositionA,
        normal: normalA,
        fromOutside: true
      };
    }
  },
  /**
   * Returns an array of the real roots of the quadratic equation $ax + b=0$, or null if every value is a solution.
   * @public
   *
   * @param {number} a
   * @param {number} b
   * @returns {Array.<number>|null} - The real roots of the equation, or null if all values are roots. If the root has
   *                                  a multiplicity larger than 1, it will be repeated that many times.
   */
  solveLinearRootsReal(a, b) {
    if (a === 0) {
      if (b === 0) {
        return null;
      } else {
        return [];
      }
    } else {
      return [-b / a];
    }
  },
  /**
   * Returns an array of the real roots of the quadratic equation $ax^2 + bx + c=0$, or null if every value is a
   * solution. If a is nonzero, there should be between 0 and 2 (inclusive) values returned.
   * @public
   *
   * @param {number} a
   * @param {number} b
   * @param {number} c
   * @returns {Array.<number>|null} - The real roots of the equation, or null if all values are roots. If the root has
   *                                  a multiplicity larger than 1, it will be repeated that many times.
   */
  solveQuadraticRootsReal(a, b, c) {
    // Check for a degenerate case where we don't have a quadratic, or if the order of magnitude is such where the
    // linear solution would be expected
    const epsilon = 1E7;
    if (a === 0 || Math.abs(b / a) > epsilon || Math.abs(c / a) > epsilon) {
      return Utils.solveLinearRootsReal(b, c);
    }
    const discriminant = b * b - 4 * a * c;
    if (discriminant < 0) {
      return [];
    }
    const sqrt = Math.sqrt(discriminant);
    // TODO: how to handle if discriminant is 0? give unique root or double it?
    // TODO: probably just use Complex for the future
    return [(-b - sqrt) / (2 * a), (-b + sqrt) / (2 * a)];
  },
  /**
   * Returns an array of the real roots of the cubic equation $ax^3 + bx^2 + cx + d=0$, or null if every value is a
   * solution. If a is nonzero, there should be between 0 and 3 (inclusive) values returned.
   * @public
   *
   * @param {number} a
   * @param {number} b
   * @param {number} c
   * @param {number} d
   * @param {number} [discriminantThreshold] - for determining whether we have a single real root
   * @returns {Array.<number>|null} - The real roots of the equation, or null if all values are roots. If the root has
   *                                  a multiplicity larger than 1, it will be repeated that many times.
   */
  solveCubicRootsReal(a, b, c, d, discriminantThreshold = 1e-7) {
    let roots;

    // TODO: a Complex type!

    // Check for a degenerate case where we don't have a cubic
    if (a === 0) {
      roots = Utils.solveQuadraticRootsReal(b, c, d);
    } else {
      //We need to test whether a is several orders of magnitude less than b, c, d
      const epsilon = 1E7;
      if (a === 0 || Math.abs(b / a) > epsilon || Math.abs(c / a) > epsilon || Math.abs(d / a) > epsilon) {
        roots = Utils.solveQuadraticRootsReal(b, c, d);
      } else {
        if (d === 0 || Math.abs(a / d) > epsilon || Math.abs(b / d) > epsilon || Math.abs(c / d) > epsilon) {
          roots = [0].concat(Utils.solveQuadraticRootsReal(a, b, c));
        } else {
          b /= a;
          c /= a;
          d /= a;
          const q = (3.0 * c - b * b) / 9;
          const r = (-(27 * d) + b * (9 * c - 2 * (b * b))) / 54;
          const discriminant = q * q * q + r * r;
          const b3 = b / 3;
          if (discriminant > discriminantThreshold) {
            // a single real root
            const dsqrt = Math.sqrt(discriminant);
            roots = [Utils.cubeRoot(r + dsqrt) + Utils.cubeRoot(r - dsqrt) - b3];
          } else if (discriminant > -discriminantThreshold) {
            // would truly be discriminant==0, but floating-point error
            // contains a double root (but with three roots)
            const rsqrt = Utils.cubeRoot(r);
            const doubleRoot = -b3 - rsqrt;
            roots = [-b3 + 2 * rsqrt, doubleRoot, doubleRoot];
          } else {
            // all unique (three roots)
            let qX = -q * q * q;
            qX = Math.acos(r / Math.sqrt(qX));
            const rr = 2 * Math.sqrt(-q);
            roots = [-b3 + rr * Math.cos(qX / 3), -b3 + rr * Math.cos((qX + 2 * Math.PI) / 3), -b3 + rr * Math.cos((qX + 4 * Math.PI) / 3)];
          }
        }
      }
    }
    assert && roots && roots.forEach(root => assert(isFinite(root), 'All returned solveCubicRootsReal roots should be finite'));
    return roots;
  },
  /**
   * Returns the unique real cube root of x, such that $y^3=x$.
   * @public
   *
   * @param {number} x
   * @returns {number}
   */
  cubeRoot(x) {
    return x >= 0 ? Math.pow(x, 1 / 3) : -Math.pow(-x, 1 / 3);
  },
  /**
   * Defines and evaluates a linear mapping. The mapping is defined so that $f(a_1)=b_1$ and $f(a_2)=b_2$, and other
   * values are interpolated along the linear equation. The returned value is $f(a_3)$.
   * @public
   *
   * @param {number} a1
   * @param {number} a2
   * @param {number} b1
   * @param {number} b2
   * @param {number} a3
   * @returns {number}
   */
  linear(a1, a2, b1, b2, a3) {
    assert && assert(typeof a3 === 'number', 'linear requires a number to evaluate');
    return (b2 - b1) / (a2 - a1) * (a3 - a1) + b1;
  },
  /**
   * Rounds using "Round half away from zero" algorithm. See dot#35.
   * @public
   *
   * JavaScript's Math.round is not symmetric for positive and negative numbers, it uses IEEE 754 "Round half up".
   * See https://en.wikipedia.org/wiki/Rounding#Round_half_up.
   * For sims, we want to treat positive and negative values symmetrically, which is IEEE 754 "Round half away from zero",
   * See https://en.wikipedia.org/wiki/Rounding#Round_half_away_from_zero
   *
   * Note that -0 is rounded to 0, since we typically do not want to display -0 in sims.
   *
   * @param {number} value                               `
   * @returns {number}
   */
  roundSymmetric(value) {
    return (value < 0 ? -1 : 1) * Math.round(Math.abs(value)); // eslint-disable-line bad-sim-text
  },

  /**
   * A predictable implementation of toFixed.
   * @public
   *
   * JavaScript's toFixed is notoriously buggy, behavior differs depending on browser,
   * because the spec doesn't specify whether to round or floor.
   * Rounding is symmetric for positive and negative values, see Utils.roundSymmetric.
   *
   * @param {number} value
   * @param {number} decimalPlaces
   * @returns {string}
   */
  toFixed(value, decimalPlaces) {
    const multiplier = Math.pow(10, decimalPlaces);
    const newValue = Utils.roundSymmetric(value * multiplier) / multiplier;
    return newValue.toFixed(decimalPlaces); // eslint-disable-line bad-sim-text
  },

  /**
   * A predictable implementation of toFixed, where the result is returned as a number instead of a string.
   * @public
   *
   * JavaScript's toFixed is notoriously buggy, behavior differs depending on browser,
   * because the spec doesn't specify whether to round or floor.
   * Rounding is symmetric for positive and negative values, see Utils.roundSymmetric.
   *
   * @param {number} value
   * @param {number} decimalPlaces
   * @returns {number}
   */
  toFixedNumber(value, decimalPlaces) {
    return parseFloat(Utils.toFixed(value, decimalPlaces));
  },
  /**
   * Returns true if two numbers are within epsilon of each other.
   *
   * @param {number} a
   * @param {number} b
   * @param {number} epsilon
   * @returns {boolean}
   */
  equalsEpsilon(a, b, epsilon) {
    return Math.abs(a - b) <= epsilon;
  },
  /**
   * Computes the intersection of the two line segments $(x_1,y_1)(x_2,y_2)$ and $(x_3,y_3)(x_4,y_4)$. If there is no
   * intersection, null is returned.
   * @public
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} x2
   * @param {number} y2
   * @param {number} x3
   * @param {number} y3
   * @param {number} x4
   * @param {number} y4
   * @returns {Vector2|null}
   */
  lineSegmentIntersection(x1, y1, x2, y2, x3, y3, x4, y4) {
    // @private
    // Determines counterclockwiseness. Positive if counterclockwise, negative if clockwise, zero if straight line
    // Point1(a,b), Point2(c,d), Point3(e,f)
    // See http://jeffe.cs.illinois.edu/teaching/373/notes/x05-convexhull.pdf
    // @returns {number}
    const ccw = (a, b, c, d, e, f) => (f - b) * (c - a) - (d - b) * (e - a);

    // Check if intersection doesn't exist. See http://jeffe.cs.illinois.edu/teaching/373/notes/x06-sweepline.pdf
    // If point1 and point2 are on opposite sides of line 3 4, exactly one of the two triples 1, 3, 4 and 2, 3, 4
    // is in counterclockwise order.
    if (ccw(x1, y1, x3, y3, x4, y4) * ccw(x2, y2, x3, y3, x4, y4) > 0 || ccw(x3, y3, x1, y1, x2, y2) * ccw(x4, y4, x1, y1, x2, y2) > 0) {
      return null;
    }
    const denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
    // If denominator is 0, the lines are parallel or coincident
    if (Math.abs(denom) < 1e-10) {
      return null;
    }

    // Check if there is an exact endpoint overlap (and then return an exact answer).
    if (x1 === x3 && y1 === y3 || x1 === x4 && y1 === y4) {
      return new Vector2(x1, y1);
    } else if (x2 === x3 && y2 === y3 || x2 === x4 && y2 === y4) {
      return new Vector2(x2, y2);
    }

    // Use determinants to calculate intersection, see https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection
    const intersectionX = ((x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4)) / denom;
    const intersectionY = ((x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4)) / denom;
    return new Vector2(intersectionX, intersectionY);
  },
  /**
   * Squared distance from a point to a line segment squared.
   * See http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment
   * @public
   *
   * @param {Vector2} point - The point
   * @param {Vector2} a - Starting point of the line segment
   * @param {Vector2} b - Ending point of the line segment
   * @returns {number}
   */
  distToSegmentSquared(point, a, b) {
    // the square of the distance between a and b,
    const segmentSquaredLength = a.distanceSquared(b);

    // if the segment length is zero, the a and b point are coincident. return the squared distance between a and point
    if (segmentSquaredLength === 0) {
      return point.distanceSquared(a);
    }

    // the t value parametrize the projection of the point onto the a b line
    const t = ((point.x - a.x) * (b.x - a.x) + (point.y - a.y) * (b.y - a.y)) / segmentSquaredLength;
    let distanceSquared;
    if (t < 0) {
      // if t<0, the projection point is outside the ab line, beyond a
      distanceSquared = point.distanceSquared(a);
    } else if (t > 1) {
      // if t>1, the projection past is outside the ab segment, beyond b,
      distanceSquared = point.distanceSquared(b);
    } else {
      // if 0<t<1, the projection point lies along the line joining a and b.
      distanceSquared = point.distanceSquared(new Vector2(a.x + t * (b.x - a.x), a.y + t * (b.y - a.y)));
    }
    return distanceSquared;
  },
  /**
   * distance from a point to a line segment squared.
   * @public
   *
   * @param {Vector2} point - The point
   * @param {Vector2} a - Starting point of the line segment
   * @param {Vector2} b - Ending point of the line segment
   * @returns {number}
   */
  distToSegment(point, a, b) {
    return Math.sqrt(this.distToSegmentSquared(point, a, b));
  },
  /**
   * Determines whether the three points are approximately collinear.
   * @public
   *
   * @param {Vector2} a
   * @param {Vector2} b
   * @param {Vector2} c
   * @param {number} [epsilon]
   * @returns {boolean}
   */
  arePointsCollinear(a, b, c, epsilon) {
    if (epsilon === undefined) {
      epsilon = 0;
    }
    return Utils.triangleArea(a, b, c) <= epsilon;
  },
  /**
   * The area inside the triangle defined by the three vertices.
   * @public
   *
   * @param {Vector2} a
   * @param {Vector2} b
   * @param {Vector2} c
   * @returns {number}
   */
  triangleArea(a, b, c) {
    return Math.abs(Utils.triangleAreaSigned(a, b, c));
  },
  /**
   * The area inside the triangle defined by the three vertices, but with the sign determined by whether the vertices
   * provided are clockwise or counter-clockwise.
   * @public
   *
   * If the vertices are counterclockwise (in a right-handed coordinate system), then the signed area will be
   * positive.
   *
   * @param {Vector2} a
   * @param {Vector2} b
   * @param {Vector2} c
   * @returns {number}
   */
  triangleAreaSigned(a, b, c) {
    return a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y);
  },
  /**
   * Returns the centroid of the simple planar polygon using Green's Theorem P=-y/2, Q=x/2 (similar to how kite
   * computes areas). See also https://en.wikipedia.org/wiki/Shoelace_formula.
   * @public
   *
   * @param {Array.<Vector2>} vertices
   * @returns {Vector2}
   */
  centroidOfPolygon(vertices) {
    const centroid = new Vector2(0, 0);
    let area = 0;
    vertices.forEach((v0, i) => {
      const v1 = vertices[(i + 1) % vertices.length];
      const doubleShoelace = v0.x * v1.y - v1.x * v0.y;
      area += doubleShoelace / 2;

      // Compute the centroid of the flat intersection with https://en.wikipedia.org/wiki/Centroid#Of_a_polygon
      centroid.addXY((v0.x + v1.x) * doubleShoelace, (v0.y + v1.y) * doubleShoelace);
    });
    centroid.divideScalar(6 * area);
    return centroid;
  },
  /**
   * Function that returns the hyperbolic cosine of a number
   * @public
   *
   * @param {number} value
   * @returns {number}
   */
  cosh(value) {
    return (Math.exp(value) + Math.exp(-value)) / 2;
  },
  /**
   * Function that returns the hyperbolic sine of a number
   * @public
   *
   * @param {number} value
   * @returns {number}
   */
  sinh(value) {
    return (Math.exp(value) - Math.exp(-value)) / 2;
  },
  /**
   * Log base-10, since it wasn't included in every supported browser.
   * @public
   *
   * @param {number} val
   * @returns {number}
   */
  log10(val) {
    return Math.log(val) / Math.LN10;
  },
  /**
   * Generates a random Gaussian sample with the given mean and standard deviation.
   * This method relies on the "static" variables generate, z0, and z1 defined above.
   * Random.js is the primary client of this function, but it is defined here so it can be
   * used other places more easily if need be.
   * Code inspired by example here: https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform.
   * @public
   *
   * @param {number} mu - The mean of the Gaussian
   * @param {number} sigma - The standard deviation of the Gaussian
   * @param {Random} random - the source of randomness
   * @returns {number}
   */
  boxMullerTransform(mu, sigma, random) {
    generate = !generate;
    if (!generate) {
      return z1 * sigma + mu;
    }
    let u1;
    let u2;
    do {
      u1 = random.nextDouble();
      u2 = random.nextDouble();
    } while (u1 <= EPSILON);
    z0 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(TWO_PI * u2);
    z1 = Math.sqrt(-2.0 * Math.log(u1)) * Math.sin(TWO_PI * u2);
    return z0 * sigma + mu;
  },
  /**
   * Determines the number of decimal places in a value.
   * @public
   *
   * @param {number} value - a finite number, scientific notation is not supported for decimal numbers
   * @returns {number}
   */
  numberOfDecimalPlaces(value) {
    assert && assert(typeof value === 'number' && isFinite(value), `value must be a finite number ${value}`);
    if (Math.floor(value) === value) {
      return 0;
    } else {
      const string = value.toString();

      // Handle scientific notation
      if (string.includes('e')) {
        // e.g. '1e-21', '5.6e+34', etc.
        const split = string.split('e');
        const mantissa = split[0]; // The left part, e.g. '1' or '5.6'
        const exponent = Number(split[1]); // The right part, e.g. '-21' or '+34'

        // How many decimal places are there in the left part
        const mantissaDecimalPlaces = mantissa.includes('.') ? mantissa.split('.')[1].length : 0;

        // We adjust the number of decimal places by the exponent, e.g. '1.5e1' has zero decimal places, and
        // '1.5e-2' has three.
        return Math.max(mantissaDecimalPlaces - exponent, 0);
      } else {
        // Handle decimal notation. Since we're not an integer, we should be guaranteed to have a decimal
        return string.split('.')[1].length;
      }
    }
  },
  /**
   * Rounds a value to a multiple of a specified interval.
   * Examples:
   * roundToInterval( 0.567, 0.01 ) -> 0.57
   * roundToInterval( 0.567, 0.02 ) -> 0.56
   * roundToInterval( 5.67, 0.5 ) -> 5.5
   *
   * @param {number} value
   * @param {number} interval
   * @returns {number}
   */
  roundToInterval(value, interval) {
    return Utils.toFixedNumber(Utils.roundSymmetric(value / interval) * interval, Utils.numberOfDecimalPlaces(interval));
  }
};
js_dot.register('Utils', Utils);

// make these available in the main namespace directly (for now)
js_dot.clamp = Utils.clamp;
js_dot.moduloBetweenDown = Utils.moduloBetweenDown;
js_dot.moduloBetweenUp = Utils.moduloBetweenUp;
js_dot.rangeInclusive = Utils.rangeInclusive;
js_dot.rangeExclusive = Utils.rangeExclusive;
js_dot.toRadians = Utils.toRadians;
js_dot.toDegrees = Utils.toDegrees;
js_dot.lineLineIntersection = Utils.lineLineIntersection;
js_dot.lineSegmentIntersection = Utils.lineSegmentIntersection;
js_dot.sphereRayIntersection = Utils.sphereRayIntersection;
js_dot.solveQuadraticRootsReal = Utils.solveQuadraticRootsReal;
js_dot.solveCubicRootsReal = Utils.solveCubicRootsReal;
js_dot.cubeRoot = Utils.cubeRoot;
js_dot.linear = Utils.linear;
js_dot.boxMullerTransform = Utils.boxMullerTransform;
/* harmony default export */ const js_Utils = (Utils);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/PatternStringProperty.js
// Copyright 2022-2023, University of Colorado Boulder

/**
 * A DerivedProperty that applies a string pattern (like StringUtils.fillIn). It has options for mapping values,
 * either with decimalPlaces or an arbitrary function so that there is just one Property set up for disposal.
 *
 * PatternStringPropertyTests.ts has many examples that may be useful!
 *
 * Basic usage can involve values as Properties or directly as values (both work):
 *
 * | const patternStringProperty = new TinyProperty( '{{valueA}} + {{valueB}}' );
 * | const property = new PatternStringProperty( patternStringProperty, {
 * |   valueA: 5,
 * |   valueB: new TinyProperty( 7 )
 * | } );
 * | property.value; // '5 + 7'
 *
 * Did your string use StringUtils.format? formatNames can be used to be compatible:
 *
 * | const property = new PatternStringProperty( new TinyProperty( '{0} + {1}' ), {
 * |   valueA: 5,
 * |   valueB: new TinyProperty( 7 )
 * | }, {
 * |   formatNames: [ 'valueA', 'valueB' ]
 * | } );
 * | property.value; // '5 + 7'
 *
 * Want to apply unit conversions or other formulas? Use maps
 *
 * | const gramsProperty = new TinyProperty( 2000 );
 * | new PatternStringProperty( new TinyProperty( '{{kilograms}} kg' ), {
 * |   kilograms: gramsProperty
 * | }, {
 * |   maps: {
 * |     kilograms: ( grams: number ) => grams / 1000
 * |   }
 * | } );
 * | property.value; // '2 kg'
 *
 * Using a numeric value, and want to show a certain number of decimal places? Use decimalPlaces!
 *
 * | const gramsProperty = new TinyProperty( 2143 );
 * | new PatternStringProperty( new TinyProperty( '{{kilograms}} kg' ), {
 * |   kilograms: gramsProperty
 * | }, {
 * |   maps: {
 * |     kilograms: ( grams: number ) => grams / 1000
 * |   },
 * |   decimalPlaces: 2
 * | } );
 * | property.value; // '2.14 kg'
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */









// The type of allowed values for a PatternStringProperty

// Shared here, since it will always be the same function
const stringify = value => `${value}`;
class PatternStringProperty extends DerivedProperty {
  constructor(patternProperty, values, providedOptions) {
    const options = optionize()({
      formatNames: [],
      decimalPlaces: null,
      phetioValueType: types_StringIO
    }, providedOptions);
    const dependencies = [patternProperty];
    const maps = {};
    const keys = Object.keys(values);
    keys.forEach(key => {
      const value = values[key]; // This is the declared type anyway, TypeScript is needing the cast
      if (value instanceof ReadOnlyProperty || value instanceof TinyProperty) {
        dependencies.push(value);
      }
      let stringNumberMap = stringify;

      // If we are applying decimal places, "prepend" that map before the others
      if (options.decimalPlaces !== null && (typeof options.decimalPlaces === 'number' || options.decimalPlaces[key] !== null)) {
        // It won't be null (we checked above for hasDecimalPlaces), asserted below
        const decimalPlaces = typeof options.decimalPlaces === 'number' || options.decimalPlaces === null ? options.decimalPlaces : options.decimalPlaces[key];
        assert && assert(decimalPlaces !== null);
        stringNumberMap = value => stringify(typeof value === 'number' ? js_Utils.toFixed(value, decimalPlaces) : value);
      }

      // If we are applying a map, "prepend" that map before the others, so that if it returns a number, we can
      // apply decimal places to it.
      if (options.maps && options.maps.hasOwnProperty(key)) {
        maps[key] = value => stringNumberMap(options.maps[key](value));
      } else {
        maps[key] = stringNumberMap;
      }
    });

    // @ts-expect-error We can't get our dependencies to dynamically type here fully
    super(dependencies, (...propertyValues) => {
      const getValue = value => {
        const index = dependencies.indexOf(value);

        // If it's a Property, it will be in our dependencies, and we'll look up the value from our DerivedProperty
        return index >= 0 ? propertyValues[index] : value;
      };
      let result = `${getValue(patternProperty)}`; // String cast (it won't be a number, due to TypeScript)

      // Handle StringUtils.format compatibility, turning {0} => formatName[ 0 ], {1} => formatName[ 1 ], etc.
      options.formatNames.forEach((formatName, index) => {
        result = result.replace(new RegExp(`\\{${index}\\}`, 'g'), `{{${formatName}}}`);
      });

      // {string[]} parse out the set of placeholders
      const placeholders = result.match(/\{\{[^{}]+\}\}/g) || [];

      // replace each placeholder with its corresponding value
      for (let i = 0; i < placeholders.length; i++) {
        const placeholder = placeholders[i];

        // key is the portion of the placeholder between the curly braces
        const key = placeholder.replace('{{', '').replace('}}', '');
        if (keys.includes(key)) {
          let value = getValue(values[key]);
          if (maps[key]) {
            value = maps[key](value);
          }
          result = result.replace(placeholder, `${value}`);
        }
      }
      return result;
    }, options);
  }
}
js_axon.register('PatternStringProperty', PatternStringProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/StringProperty.js
// Copyright 2016-2022, University of Colorado Boulder

/**
 * StringProperty is a Property whose value is a string.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chris Malley (PixelZoom, Inc.)
 */





class StringProperty extends Property {
  constructor(value, providedOptions) {
    // client cannot specify superclass options that are controlled by StringProperty
    if (providedOptions) {
      assert && assert(!providedOptions.hasOwnProperty('valueType'), 'StringProperty sets valueType');
      assert && assert(!providedOptions.hasOwnProperty('phetioType'), 'StringProperty sets phetioType');
    }

    // Fill in superclass options that are controlled by StringProperty.
    const options = optionize()({
      valueType: 'string',
      phetioValueType: types_StringIO
    }, providedOptions);
    super(value, options);
  }
}
js_axon.register('StringProperty', StringProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJTdHJpbmdJTyIsImF4b24iLCJQcm9wZXJ0eSIsIlN0cmluZ1Byb3BlcnR5IiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsInByb3ZpZGVkT3B0aW9ucyIsImFzc2VydCIsImhhc093blByb3BlcnR5Iiwib3B0aW9ucyIsInZhbHVlVHlwZSIsInBoZXRpb1ZhbHVlVHlwZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU3RyaW5nUHJvcGVydHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogU3RyaW5nUHJvcGVydHkgaXMgYSBQcm9wZXJ0eSB3aG9zZSB2YWx1ZSBpcyBhIHN0cmluZy5cbiAqXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcbiAqL1xuXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcbmltcG9ydCBTdHJpbmdJTyBmcm9tICcuLi8uLi90YW5kZW0vanMvdHlwZXMvU3RyaW5nSU8uanMnO1xuaW1wb3J0IGF4b24gZnJvbSAnLi9heG9uLmpzJztcbmltcG9ydCBQcm9wZXJ0eSwgeyBQcm9wZXJ0eU9wdGlvbnMgfSBmcm9tICcuL1Byb3BlcnR5LmpzJztcblxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XG5cbmV4cG9ydCB0eXBlIFN0cmluZ1Byb3BlcnR5T3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxQcm9wZXJ0eU9wdGlvbnM8c3RyaW5nPiwgJ3ZhbHVlVHlwZScgfCAncGhldGlvVmFsdWVUeXBlJz47XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0cmluZ1Byb3BlcnR5IGV4dGVuZHMgUHJvcGVydHk8c3RyaW5nPiB7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCB2YWx1ZTogc3RyaW5nLCBwcm92aWRlZE9wdGlvbnM/OiBTdHJpbmdQcm9wZXJ0eU9wdGlvbnMgKSB7XG5cbiAgICAvLyBjbGllbnQgY2Fubm90IHNwZWNpZnkgc3VwZXJjbGFzcyBvcHRpb25zIHRoYXQgYXJlIGNvbnRyb2xsZWQgYnkgU3RyaW5nUHJvcGVydHlcbiAgICBpZiAoIHByb3ZpZGVkT3B0aW9ucyApIHtcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoICFwcm92aWRlZE9wdGlvbnMuaGFzT3duUHJvcGVydHkoICd2YWx1ZVR5cGUnICksICdTdHJpbmdQcm9wZXJ0eSBzZXRzIHZhbHVlVHlwZScgKTtcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoICFwcm92aWRlZE9wdGlvbnMuaGFzT3duUHJvcGVydHkoICdwaGV0aW9UeXBlJyApLCAnU3RyaW5nUHJvcGVydHkgc2V0cyBwaGV0aW9UeXBlJyApO1xuICAgIH1cblxuICAgIC8vIEZpbGwgaW4gc3VwZXJjbGFzcyBvcHRpb25zIHRoYXQgYXJlIGNvbnRyb2xsZWQgYnkgU3RyaW5nUHJvcGVydHkuXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxTdHJpbmdQcm9wZXJ0eU9wdGlvbnMsIFNlbGZPcHRpb25zLCBQcm9wZXJ0eU9wdGlvbnM8c3RyaW5nPj4oKSgge1xuICAgICAgdmFsdWVUeXBlOiAnc3RyaW5nJyxcbiAgICAgIHBoZXRpb1ZhbHVlVHlwZTogU3RyaW5nSU9cbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcblxuICAgIHN1cGVyKCB2YWx1ZSwgb3B0aW9ucyApO1xuICB9XG59XG5cbmF4b24ucmVnaXN0ZXIoICdTdHJpbmdQcm9wZXJ0eScsIFN0cmluZ1Byb3BlcnR5ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUE0QixpQ0FBaUM7QUFFN0UsT0FBT0MsUUFBUSxNQUFNLG1DQUFtQztBQUN4RCxPQUFPQyxJQUFJLE1BQU0sV0FBVztBQUM1QixPQUFPQyxRQUFRLE1BQTJCLGVBQWU7QUFNekQsZUFBZSxNQUFNQyxjQUFjLFNBQVNELFFBQVEsQ0FBUztFQUVwREUsV0FBV0EsQ0FBRUMsS0FBYSxFQUFFQyxlQUF1QyxFQUFHO0lBRTNFO0lBQ0EsSUFBS0EsZUFBZSxFQUFHO01BQ3JCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDRCxlQUFlLENBQUNFLGNBQWMsQ0FBRSxXQUFXLENBQUUsRUFBRSwrQkFBK0IsQ0FBRTtNQUNuR0QsTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQ0QsZUFBZSxDQUFDRSxjQUFjLENBQUUsWUFBWSxDQUFFLEVBQUUsZ0NBQWdDLENBQUU7SUFDdkc7O0lBRUE7SUFDQSxNQUFNQyxPQUFPLEdBQUdWLFNBQVMsRUFBK0QsQ0FBRTtNQUN4RlcsU0FBUyxFQUFFLFFBQVE7TUFDbkJDLGVBQWUsRUFBRVg7SUFDbkIsQ0FBQyxFQUFFTSxlQUFlLENBQUU7SUFFcEIsS0FBSyxDQUFFRCxLQUFLLEVBQUVJLE9BQU8sQ0FBRTtFQUN6QjtBQUNGO0FBRUFSLElBQUksQ0FBQ1csUUFBUSxDQUFFLGdCQUFnQixFQUFFVCxjQUFjLENBQUUifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/TReadOnlyProperty.js
// Copyright 2021-2022, University of Colorado Boulder

/**
 * A simple read-only Property/TinyProperty-like interface
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



function isTReadOnlyProperty(something) {
  return something instanceof ReadOnlyProperty || something instanceof TinyProperty;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFkT25seVByb3BlcnR5IiwiVGlueVByb3BlcnR5IiwiaXNUUmVhZE9ubHlQcm9wZXJ0eSIsInNvbWV0aGluZyJdLCJzb3VyY2VzIjpbIlRSZWFkT25seVByb3BlcnR5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIEEgc2ltcGxlIHJlYWQtb25seSBQcm9wZXJ0eS9UaW55UHJvcGVydHktbGlrZSBpbnRlcmZhY2VcbiAqXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxuICovXG5cbmltcG9ydCBSZWFkT25seVByb3BlcnR5LCB7IExpbmtPcHRpb25zIH0gZnJvbSAnLi9SZWFkT25seVByb3BlcnR5LmpzJztcbmltcG9ydCBUaW55UHJvcGVydHkgZnJvbSAnLi9UaW55UHJvcGVydHkuanMnO1xuaW1wb3J0IEludGVudGlvbmFsQW55IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9JbnRlbnRpb25hbEFueS5qcyc7XG5cbmV4cG9ydCB0eXBlIFByb3BlcnR5TGlua0xpc3RlbmVyPFQ+ID0gKCB2YWx1ZTogVCwgb2xkVmFsdWU6IFQgfCBudWxsLCB0aW55UHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PFQ+ICkgPT4gdm9pZDtcbmV4cG9ydCB0eXBlIFByb3BlcnR5TGF6eUxpbmtMaXN0ZW5lcjxUPiA9ICggdmFsdWU6IFQsIG9sZFZhbHVlOiBULCB0aW55UHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PFQ+ICkgPT4gdm9pZDtcbmV4cG9ydCB0eXBlIFByb3BlcnR5TGlzdGVuZXI8VD4gPSBQcm9wZXJ0eUxpbmtMaXN0ZW5lcjxUPiB8IFByb3BlcnR5TGF6eUxpbmtMaXN0ZW5lcjxUPjtcblxuLy8gU2VlIGNvbW1lbnRzIGluIFByb3BlcnR5LnRzIC8gVGlueVByb3BlcnR5LnRzXG50eXBlIFRSZWFkT25seVByb3BlcnR5PFQ+ID0ge1xuICBnZXQ6ICgpID0+IFQ7XG4gIGdldCB2YWx1ZSgpOiBUO1xuICBhcmVWYWx1ZXNFcXVhbCggYTogVCwgYjogVCApOiBib29sZWFuO1xuICBsaW5rKCBsaXN0ZW5lcjogUHJvcGVydHlMaW5rTGlzdGVuZXI8VD4sIG9wdGlvbnM/OiBMaW5rT3B0aW9ucyApOiB2b2lkO1xuICBsYXp5TGluayggbGlzdGVuZXI6IFByb3BlcnR5TGF6eUxpbmtMaXN0ZW5lcjxUPiwgb3B0aW9ucz86IExpbmtPcHRpb25zICk6IHZvaWQ7XG4gIGxpbmtBdHRyaWJ1dGU8QXR0ciBleHRlbmRzIHN0cmluZz4oIG9iamVjdDogeyBba2V5IGluIEF0dHJdOiBUIH0sIGF0dHJpYnV0ZU5hbWU6IEF0dHIgKTogdm9pZDtcbiAgdW5saW5rKCBsaXN0ZW5lcjogUHJvcGVydHlMaXN0ZW5lcjxUPiApOiB2b2lkO1xuICB1bmxpbmtBbGwoKTogdm9pZDtcbiAgaGFzTGlzdGVuZXIoIGxpc3RlbmVyOiBQcm9wZXJ0eUxpbmtMaXN0ZW5lcjxUPiApOiBib29sZWFuO1xuICBpc1NldHRhYmxlKCk6IGJvb2xlYW47XG4gIGRpc3Bvc2UoKTogdm9pZDtcblxuICBpc0Rpc3Bvc2VkPzogYm9vbGVhbjtcbiAgdG9TdHJpbmcoKTogc3RyaW5nO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzVFJlYWRPbmx5UHJvcGVydHkoIHNvbWV0aGluZzogSW50ZW50aW9uYWxBbnkgKTogc29tZXRoaW5nIGlzIFRSZWFkT25seVByb3BlcnR5PHVua25vd24+IHtcbiAgcmV0dXJuIHNvbWV0aGluZyBpbnN0YW5jZW9mIFJlYWRPbmx5UHJvcGVydHkgfHwgc29tZXRoaW5nIGluc3RhbmNlb2YgVGlueVByb3BlcnR5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBUUmVhZE9ubHlQcm9wZXJ0eTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGdCQUFnQixNQUF1Qix1QkFBdUI7QUFDckUsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQXlCNUMsT0FBTyxTQUFTQyxtQkFBbUJBLENBQUVDLFNBQXlCLEVBQTRDO0VBQ3hHLE9BQU9BLFNBQVMsWUFBWUgsZ0JBQWdCLElBQUlHLFNBQVMsWUFBWUYsWUFBWTtBQUNuRiJ9
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/TinyForwardingProperty.js
// Copyright 2020-2022, University of Colorado Boulder

/**
 * A lightweight version of Property (that satisfies some of the interface), meant for high-performance applications
 * where validation, phet-io support and other things are not needed. This includes additional logic for conditionally
 * forwarding to/from another Property.
 *
 * Please note that TinyForwardingProperty exclusively supports settable Properties
 * via its TypeScript implementation. If you want to use a read-only Property as the target, please type cast as settable
 * and use runtime assertions to ensure that the target (or this forwarding Property) are not set. See examples like
 * Node.setVisibleProperty.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */






class TinyForwardingProperty extends TinyProperty {
  // Set in setTargetProperty()

  // Set lazily in setTargetProperty()

  // TinyProperty is not instrumented for PhET-iO, so when a Node is instrumented, by default, an instrumented
  // `Property` can be forwarded to. This field stores the default instrumented Property when
  // targetPropertyInstrumented is true. - Public for NodeTests

  // when true, automatically set up a PhET-iO instrumented forwarded Property for this TinyProperty, see
  // this.initializePhetioObject() for usage.

  // Guard against double initialization

  constructor(value, targetPropertyInstrumented, onBeforeNotify) {
    super(value, onBeforeNotify);
    if (targetPropertyInstrumented) {
      this.targetPropertyInstrumented = targetPropertyInstrumented;
    }
    if (assert) {
      this.phetioInitialized = false;
    }
  }

  // API support for setting a Property|ValueType onto the forwarding Property
  setValueOrTargetProperty(node, tandemName, newValueOrTargetProperty) {
    if (isTReadOnlyProperty(newValueOrTargetProperty)) {
      // As a new Property
      this.setTargetProperty(node, tandemName, newValueOrTargetProperty);
    } else {
      // as a ValueType
      const oldValue = this.get();
      this.clearTargetProperty();
      assert && assert(!this.targetProperty, 'just cleared');

      // If we're switching away from a targetProperty, prefer no notification (so set our value to the last value)
      this.setPropertyValue(newValueOrTargetProperty);

      // Changing forwarding target COULD change the value, so send notifications if this is the case.
      if (!this.areValuesEqual(oldValue, newValueOrTargetProperty)) {
        this.notifyListeners(oldValue);
      }
    }
  }

  /**
   * Sets (or unsets if `null` is provided) the Property that we use for forwarding changes.
   *
   * @param node - The container of TinyForwardingProperty which supports updateLinkedElementForProperty()
   * @param tandemName - null if the Property does not support PhET-iO instrumentation
   * @param newTargetProperty - null to "unset" forwarding.
   * @returns the passed in Node, for chaining.
   */
  setTargetProperty(node, tandemName, newTargetProperty) {
    assert && node && tandemName === null && this.targetPropertyInstrumented && assert(!node.isPhetioInstrumented(), 'tandemName must be provided for instrumented Nodes');

    // no-op if we are already forwarding to that property OR if we still aren't forwarding
    if (this.targetProperty === newTargetProperty) {
      return node; // for chaining
    }

    const currentForwardingPropertyInstrumented = this.targetProperty && this.targetProperty instanceof ReadOnlyProperty && this.targetProperty.isPhetioInstrumented();
    assert && currentForwardingPropertyInstrumented && assert(newTargetProperty && newTargetProperty instanceof ReadOnlyProperty && newTargetProperty.isPhetioInstrumented(), 'Cannot set swap out a PhET-iO instrumented targetProperty for an uninstrumented one');

    // We need this information eagerly for later on in the function
    const previousTarget = this.targetProperty;

    // If we had the "default instrumented" Property, we'll remove that and then link our new Property. Guard on the fact
    // that ownedPhetioProperty is added via this exact method, see this.initializePhetio() for details
    // Do this before adding a PhET-iO LinkedElement because ownedPhetioProperty has the same phetioID as the LinkedElement
    if (this.ownedPhetioProperty && newTargetProperty !== this.ownedPhetioProperty) {
      this.disposeOwnedPhetioProperty();
    }
    node && tandemName !== null && node.updateLinkedElementForProperty(tandemName, previousTarget, newTargetProperty);
    const oldValue = this.get();
    this.clearTargetProperty();
    this.targetProperty = newTargetProperty;
    if (this.targetProperty) {
      assert && assert(this.forwardingListener, 'forwardingListener is not set yet');
      this.targetProperty.lazyLink(this.forwardingListener);
      this.setPropertyValue(this.targetProperty.value);
    } else {
      // If we're switching away from a targetProperty, prefer no notification (so set our value to the last value)
      this.setPropertyValue(oldValue);
    }

    // Changing forwarding target COULD change the value, so send notifications if this is the case.
    if (!this.areValuesEqual(oldValue, this.get())) {
      this.notifyListeners(oldValue);
    }
    return node; // for chaining
  }

  clearTargetProperty() {
    // Lazily set this value, it will be added as a listener to any targetProperty we have.
    this.forwardingListener = this.forwardingListener || this.onTargetPropertyChange.bind(this);
    if (this.targetProperty) {
      this.targetProperty.unlink(this.forwardingListener);
    }
    this.targetProperty = null;
  }

  /**
   * Notify this Property's listeners when the targetProperty changes.
   * For performance, keep this listener on the prototype.
   */
  onTargetPropertyChange(value) {
    super.set(value);
  }

  /**
   * Sets the value and notifies listeners, unless deferred or disposed. You can also use the es5 getter
   * (property.value) but this means is provided for inner loops or internal code that must be fast. If the value
   * hasn't changed, this is a no-op.
   */
  set(value) {
    if (this.targetProperty) {
      assert && assert(this.targetProperty.isSettable(), 'targetProperty must be settable');
      this.targetProperty.set(value);
    } else {
      super.set(value);
    }
    return this;
  }

  /**
   * Use this to automatically create a forwarded, PhET-iO instrumented Property owned by this TinyForwardingProperty.
   */
  setTargetPropertyInstrumented(targetPropertyInstrumented, node) {
    // See Node.initializePhetioObject for more details on this assertion
    assert && assert(!node.isPhetioInstrumented(), 'this option only works if it is passed in before this Node is instrumented');
    this.targetPropertyInstrumented = targetPropertyInstrumented;
    return node;
  }
  getTargetPropertyInstrumented() {
    return this.targetPropertyInstrumented || false;
  }

  /**
   * @param node - the parent container that supports updateLinkedElementForProperty()
   * @param tandemName
   * @param createProperty - creates an "owned" Property
   */
  initializePhetio(node, tandemName, createProperty) {
    assert && assert(!this.phetioInitialized, 'already initialized');
    assert && assert(!this.ownedPhetioProperty, 'Already created the ownedPhetioProperty');
    if (!this.targetProperty && this.targetPropertyInstrumented) {
      this.ownedPhetioProperty = createProperty();
      assert && assert(this.ownedPhetioProperty instanceof Property, 'The owned property should be an AXON/Property');
      assert && assert(this.ownedPhetioProperty instanceof ReadOnlyProperty && this.ownedPhetioProperty.isPhetioInstrumented(), 'The owned property should be PhET-iO instrumented');
      this.setTargetProperty(node, tandemName, this.ownedPhetioProperty);
    } else if (this.targetProperty && this.targetProperty instanceof ReadOnlyProperty && this.targetProperty.isPhetioInstrumented()) {
      // If the Property was already set, now that it is instrumented, add a LinkedElement for it.
      node.updateLinkedElementForProperty(tandemName, null, this.targetProperty);
    }
    if (assert) {
      this.phetioInitialized = true;
    }
  }

  /**
   * This currently also involves deleting the field.
   */
  disposeOwnedPhetioProperty() {
    if (this.ownedPhetioProperty) {
      this.ownedPhetioProperty.dispose();
      delete this.ownedPhetioProperty; // back to original value
    }
  }

  dispose() {
    this.clearTargetProperty();
    this.disposeOwnedPhetioProperty();
    super.dispose();
  }
}
js_axon.register('TinyForwardingProperty', TinyForwardingProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/TinyOverrideProperty.js
// Copyright 2022, University of Colorado Boulder

/**
 * A TinyProperty that will take the value of a target Property until it is set to a value. When that happens, it will
 * be its own standalone Property.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



class TinyOverrideProperty extends TinyProperty {
  // If true, we ignore our targetProperty and just use our value. If false, we only report the value of the
  // targetProperty
  isOverridden = false;
  constructor(targetProperty) {
    super(targetProperty.value);
    this._targetProperty = targetProperty;
    assert && assert(!this.isOverridden, 'Should not be overridden on startup');

    // We'll need to listen to our target to dispatch notifications
    this._targetListener = this.onTargetPropertyChange.bind(this);
    this._targetProperty.lazyLink(this._targetListener);
  }
  set targetProperty(targetProperty) {
    this.setTargetProperty(targetProperty);
  }
  setTargetProperty(targetProperty) {
    // no-op if it's the same Property
    if (this.targetProperty === targetProperty) {
      return;
    }
    const oldValue = this.value;

    // Listeners are only connected if we are NOT overridden
    if (!this.isOverridden) {
      this._targetProperty.unlink(this._targetListener);
    }
    this._targetProperty = targetProperty;

    // Listeners are only connected if we are NOT overridden
    if (!this.isOverridden) {
      this._targetProperty.lazyLink(this._targetListener);

      // If we are overridden, changing the targetProperty will not trigger notifications
      if (!this.equalsValue(oldValue)) {
        this.notifyListeners(oldValue);
      }
    }
  }

  /**
   * Remove the "overridden" nature of this Property, so that it takes on the appearance of the targetProperty
   */
  clearOverride() {
    if (this.isOverridden) {
      const oldValue = this.value;
      this.isOverridden = false;
      this._targetProperty.lazyLink(this._targetListener);

      // This could change our value!
      if (!this.equalsValue(oldValue)) {
        this.notifyListeners(oldValue);
      }
    }
  }
  get() {
    // The main logic for TinyOverrideProperty
    return this.isOverridden ? this._value : this._targetProperty.value;
  }
  set(value) {
    if (!this.isOverridden) {
      // Grab the last value of the Property, as it will be "active" after this
      this._value = this._targetProperty.value;
    }
    super.set(value);
  }
  setPropertyValue(value) {
    // Switch to "override"
    if (!this.isOverridden) {
      this.isOverridden = true;
      this._targetProperty.unlink(this._targetListener);
    }
    super.setPropertyValue(value);
  }

  // We have to override here to have the getter called
  equalsValue(value) {
    return this.areValuesEqual(value, this.value);
  }
  onTargetPropertyChange(newValue, oldValue) {
    if (!this.isOverridden) {
      this.notifyListeners(oldValue);
    }
  }

  // Overridden, since we need to call our getter
  notifyListeners(oldValue) {
    this.emit(this.value, oldValue, this);
  }
  dispose() {
    // If we've been overridden, we will already have removed the listener
    if (!this.isOverridden) {
      this._targetProperty.unlink(this._targetListener);
    }
    super.dispose();
  }
}
js_axon.register('TinyOverrideProperty', TinyOverrideProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/TinyStaticProperty.js
// Copyright 2020-2022, University of Colorado Boulder

/**
 * An observable stub which satisfies some of the Property interface, which can store a (static/constant) value
 * and also notify listeners when that value has mutated. The actual value reference does not change, however it can
 * itself be mutated.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



class TinyStaticProperty extends TinyProperty {
  // When set, it will be called whenever there is an attempt to read the value of this TinyStaticProperty.

  constructor(value, onAccessAttempt) {
    super(value);
    this.onAccessAttempt = onAccessAttempt;
  }

  /**
   * Returns the value. Overridden to support onAccessAttempt.
   */
  get() {
    this.onAccessAttempt();
    return super.get();
  }

  /**
   * Don't set the value of a TinyStaticProperty!
   */
  set(value) {
    throw new Error('Cannot set a TinyStaticProperty value');
  }

  /**
   * Returns true if the value can be set externally. Static Property values should only be mutated, not set.
   */
  isSettable() {
    return false;
  }

  /**
   * Directly notifies listeners of changes.
   */
  notifyListeners(oldValue) {
    // We use this.get() to ensure value is up to date with onAccessAttempt().
    this.emit(this.get(), oldValue, this);
  }

  /**
   * Adds listener and calls it immediately. If listener is already registered, this is a no-op. The initial
   * notification provides the current value for newValue and null for oldValue.
   */
  link(listener) {
    this.addListener(listener);

    // listener called with this.get() to ensure value is up to date with onAccessAttempt().
    listener(this.get(), null, this); // null should be used when an object is expected but unavailable
  }

  /**
   * Returns true if and only if the specified value equals the value of this property
   */
  equalsValue(value) {
    // checked with this.get() to ensure value is up to date with onAccessAttempt()
    return this.areValuesEqual(value, this.get());
  }
}
js_axon.register('TinyStaticProperty', TinyStaticProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheG9uIiwiVGlueVByb3BlcnR5IiwiVGlueVN0YXRpY1Byb3BlcnR5IiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsIm9uQWNjZXNzQXR0ZW1wdCIsImdldCIsInNldCIsIkVycm9yIiwiaXNTZXR0YWJsZSIsIm5vdGlmeUxpc3RlbmVycyIsIm9sZFZhbHVlIiwiZW1pdCIsImxpbmsiLCJsaXN0ZW5lciIsImFkZExpc3RlbmVyIiwiZXF1YWxzVmFsdWUiLCJhcmVWYWx1ZXNFcXVhbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVGlueVN0YXRpY1Byb3BlcnR5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIEFuIG9ic2VydmFibGUgc3R1YiB3aGljaCBzYXRpc2ZpZXMgc29tZSBvZiB0aGUgUHJvcGVydHkgaW50ZXJmYWNlLCB3aGljaCBjYW4gc3RvcmUgYSAoc3RhdGljL2NvbnN0YW50KSB2YWx1ZVxuICogYW5kIGFsc28gbm90aWZ5IGxpc3RlbmVycyB3aGVuIHRoYXQgdmFsdWUgaGFzIG11dGF0ZWQuIFRoZSBhY3R1YWwgdmFsdWUgcmVmZXJlbmNlIGRvZXMgbm90IGNoYW5nZSwgaG93ZXZlciBpdCBjYW5cbiAqIGl0c2VsZiBiZSBtdXRhdGVkLlxuICpcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XG4gKi9cblxuaW1wb3J0IGF4b24gZnJvbSAnLi9heG9uLmpzJztcbmltcG9ydCBUaW55UHJvcGVydHkgZnJvbSAnLi9UaW55UHJvcGVydHkuanMnO1xuaW1wb3J0IHsgUHJvcGVydHlMaW5rTGlzdGVuZXIgfSBmcm9tICcuL1RSZWFkT25seVByb3BlcnR5LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGlueVN0YXRpY1Byb3BlcnR5PFQ+IGV4dGVuZHMgVGlueVByb3BlcnR5PFQ+IHtcblxuICAvLyBXaGVuIHNldCwgaXQgd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIgdGhlcmUgaXMgYW4gYXR0ZW1wdCB0byByZWFkIHRoZSB2YWx1ZSBvZiB0aGlzIFRpbnlTdGF0aWNQcm9wZXJ0eS5cbiAgcHJpdmF0ZSByZWFkb25seSBvbkFjY2Vzc0F0dGVtcHQ6ICgpID0+IHZvaWQ7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCB2YWx1ZTogVCwgb25BY2Nlc3NBdHRlbXB0OiAoKSA9PiB2b2lkICkge1xuICAgIHN1cGVyKCB2YWx1ZSApO1xuXG4gICAgdGhpcy5vbkFjY2Vzc0F0dGVtcHQgPSBvbkFjY2Vzc0F0dGVtcHQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdmFsdWUuIE92ZXJyaWRkZW4gdG8gc3VwcG9ydCBvbkFjY2Vzc0F0dGVtcHQuXG4gICAqL1xuICBwdWJsaWMgb3ZlcnJpZGUgZ2V0KCk6IFQge1xuICAgIHRoaXMub25BY2Nlc3NBdHRlbXB0KCk7XG5cbiAgICByZXR1cm4gc3VwZXIuZ2V0KCk7XG4gIH1cblxuICAvKipcbiAgICogRG9uJ3Qgc2V0IHRoZSB2YWx1ZSBvZiBhIFRpbnlTdGF0aWNQcm9wZXJ0eSFcbiAgICovXG4gIHB1YmxpYyBvdmVycmlkZSBzZXQoIHZhbHVlOiBUICk6IHZvaWQge1xuICAgIHRocm93IG5ldyBFcnJvciggJ0Nhbm5vdCBzZXQgYSBUaW55U3RhdGljUHJvcGVydHkgdmFsdWUnICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB2YWx1ZSBjYW4gYmUgc2V0IGV4dGVybmFsbHkuIFN0YXRpYyBQcm9wZXJ0eSB2YWx1ZXMgc2hvdWxkIG9ubHkgYmUgbXV0YXRlZCwgbm90IHNldC5cbiAgICovXG4gIHB1YmxpYyBvdmVycmlkZSBpc1NldHRhYmxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXJlY3RseSBub3RpZmllcyBsaXN0ZW5lcnMgb2YgY2hhbmdlcy5cbiAgICovXG4gIHB1YmxpYyBvdmVycmlkZSBub3RpZnlMaXN0ZW5lcnMoIG9sZFZhbHVlOiBUIHwgbnVsbCApOiB2b2lkIHtcblxuICAgIC8vIFdlIHVzZSB0aGlzLmdldCgpIHRvIGVuc3VyZSB2YWx1ZSBpcyB1cCB0byBkYXRlIHdpdGggb25BY2Nlc3NBdHRlbXB0KCkuXG4gICAgdGhpcy5lbWl0KCB0aGlzLmdldCgpLCBvbGRWYWx1ZSwgdGhpcyApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgbGlzdGVuZXIgYW5kIGNhbGxzIGl0IGltbWVkaWF0ZWx5LiBJZiBsaXN0ZW5lciBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQsIHRoaXMgaXMgYSBuby1vcC4gVGhlIGluaXRpYWxcbiAgICogbm90aWZpY2F0aW9uIHByb3ZpZGVzIHRoZSBjdXJyZW50IHZhbHVlIGZvciBuZXdWYWx1ZSBhbmQgbnVsbCBmb3Igb2xkVmFsdWUuXG4gICAqL1xuICBwdWJsaWMgb3ZlcnJpZGUgbGluayggbGlzdGVuZXI6IFByb3BlcnR5TGlua0xpc3RlbmVyPFQ+ICk6IHZvaWQge1xuICAgIHRoaXMuYWRkTGlzdGVuZXIoIGxpc3RlbmVyICk7XG5cbiAgICAvLyBsaXN0ZW5lciBjYWxsZWQgd2l0aCB0aGlzLmdldCgpIHRvIGVuc3VyZSB2YWx1ZSBpcyB1cCB0byBkYXRlIHdpdGggb25BY2Nlc3NBdHRlbXB0KCkuXG4gICAgbGlzdGVuZXIoIHRoaXMuZ2V0KCksIG51bGwsIHRoaXMgKTsgLy8gbnVsbCBzaG91bGQgYmUgdXNlZCB3aGVuIGFuIG9iamVjdCBpcyBleHBlY3RlZCBidXQgdW5hdmFpbGFibGVcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYW5kIG9ubHkgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBlcXVhbHMgdGhlIHZhbHVlIG9mIHRoaXMgcHJvcGVydHlcbiAgICovXG4gIHByb3RlY3RlZCBvdmVycmlkZSBlcXVhbHNWYWx1ZSggdmFsdWU6IFQgKTogYm9vbGVhbiB7XG5cbiAgICAvLyBjaGVja2VkIHdpdGggdGhpcy5nZXQoKSB0byBlbnN1cmUgdmFsdWUgaXMgdXAgdG8gZGF0ZSB3aXRoIG9uQWNjZXNzQXR0ZW1wdCgpXG4gICAgcmV0dXJuIHRoaXMuYXJlVmFsdWVzRXF1YWwoIHZhbHVlLCB0aGlzLmdldCgpICk7XG4gIH1cbn1cblxuYXhvbi5yZWdpc3RlciggJ1RpbnlTdGF0aWNQcm9wZXJ0eScsIFRpbnlTdGF0aWNQcm9wZXJ0eSApO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLElBQUksTUFBTSxXQUFXO0FBQzVCLE9BQU9DLFlBQVksTUFBTSxtQkFBbUI7QUFHNUMsZUFBZSxNQUFNQyxrQkFBa0IsU0FBWUQsWUFBWSxDQUFJO0VBRWpFOztFQUdPRSxXQUFXQSxDQUFFQyxLQUFRLEVBQUVDLGVBQTJCLEVBQUc7SUFDMUQsS0FBSyxDQUFFRCxLQUFLLENBQUU7SUFFZCxJQUFJLENBQUNDLGVBQWUsR0FBR0EsZUFBZTtFQUN4Qzs7RUFFQTtBQUNGO0FBQ0E7RUFDa0JDLEdBQUdBLENBQUEsRUFBTTtJQUN2QixJQUFJLENBQUNELGVBQWUsRUFBRTtJQUV0QixPQUFPLEtBQUssQ0FBQ0MsR0FBRyxFQUFFO0VBQ3BCOztFQUVBO0FBQ0Y7QUFDQTtFQUNrQkMsR0FBR0EsQ0FBRUgsS0FBUSxFQUFTO0lBQ3BDLE1BQU0sSUFBSUksS0FBSyxDQUFFLHVDQUF1QyxDQUFFO0VBQzVEOztFQUVBO0FBQ0Y7QUFDQTtFQUNrQkMsVUFBVUEsQ0FBQSxFQUFZO0lBQ3BDLE9BQU8sS0FBSztFQUNkOztFQUVBO0FBQ0Y7QUFDQTtFQUNrQkMsZUFBZUEsQ0FBRUMsUUFBa0IsRUFBUztJQUUxRDtJQUNBLElBQUksQ0FBQ0MsSUFBSSxDQUFFLElBQUksQ0FBQ04sR0FBRyxFQUFFLEVBQUVLLFFBQVEsRUFBRSxJQUFJLENBQUU7RUFDekM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDa0JFLElBQUlBLENBQUVDLFFBQWlDLEVBQVM7SUFDOUQsSUFBSSxDQUFDQyxXQUFXLENBQUVELFFBQVEsQ0FBRTs7SUFFNUI7SUFDQUEsUUFBUSxDQUFFLElBQUksQ0FBQ1IsR0FBRyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBRSxDQUFDLENBQUM7RUFDdEM7O0VBRUE7QUFDRjtBQUNBO0VBQ3FCVSxXQUFXQSxDQUFFWixLQUFRLEVBQVk7SUFFbEQ7SUFDQSxPQUFPLElBQUksQ0FBQ2EsY0FBYyxDQUFFYixLQUFLLEVBQUUsSUFBSSxDQUFDRSxHQUFHLEVBQUUsQ0FBRTtFQUNqRDtBQUNGO0FBRUFOLElBQUksQ0FBQ2tCLFFBQVEsQ0FBRSxvQkFBb0IsRUFBRWhCLGtCQUFrQixDQUFFIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/TRangedProperty.js
// Copyright 2023, University of Colorado Boulder




// Minimal types for Properties that support a rangeProperty.

function isTRangedProperty(something) {
  return (something instanceof ReadOnlyProperty || something instanceof TinyProperty) && something.isSettable() &&
  // @ts-expect-error we are checking on the pressence, but can't use hasOwnProperty in case it is implemented wil es5 getters and setters
  !!something.range && !!something.rangeProperty;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFkT25seVByb3BlcnR5IiwiVGlueVByb3BlcnR5IiwiaXNUUmFuZ2VkUHJvcGVydHkiLCJzb21ldGhpbmciLCJpc1NldHRhYmxlIiwicmFuZ2UiLCJyYW5nZVByb3BlcnR5Il0sInNvdXJjZXMiOlsiVFJhbmdlZFByb3BlcnR5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuaW1wb3J0IExpbmthYmxlUHJvcGVydHkgZnJvbSAnLi9MaW5rYWJsZVByb3BlcnR5LmpzJztcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuL1RSZWFkT25seVByb3BlcnR5LmpzJztcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xuaW1wb3J0IEludGVudGlvbmFsQW55IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9JbnRlbnRpb25hbEFueS5qcyc7XG5pbXBvcnQgUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuL1JlYWRPbmx5UHJvcGVydHkuanMnO1xuaW1wb3J0IFRpbnlQcm9wZXJ0eSBmcm9tICcuL1RpbnlQcm9wZXJ0eS5qcyc7XG5cbi8vIE1pbmltYWwgdHlwZXMgZm9yIFByb3BlcnRpZXMgdGhhdCBzdXBwb3J0IGEgcmFuZ2VQcm9wZXJ0eS5cbmV4cG9ydCB0eXBlIFRSYW5nZWRQcm9wZXJ0eSA9IExpbmthYmxlUHJvcGVydHk8bnVtYmVyPiAmIHsgcmFuZ2U6IFJhbmdlOyByZWFkb25seSByYW5nZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxSYW5nZT4gfTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzVFJhbmdlZFByb3BlcnR5KCBzb21ldGhpbmc6IEludGVudGlvbmFsQW55ICk6IHNvbWV0aGluZyBpcyBUUmFuZ2VkUHJvcGVydHkge1xuICByZXR1cm4gKCBzb21ldGhpbmcgaW5zdGFuY2VvZiBSZWFkT25seVByb3BlcnR5IHx8IHNvbWV0aGluZyBpbnN0YW5jZW9mIFRpbnlQcm9wZXJ0eSApICYmIHNvbWV0aGluZy5pc1NldHRhYmxlKCkgJiZcblxuICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciB3ZSBhcmUgY2hlY2tpbmcgb24gdGhlIHByZXNzZW5jZSwgYnV0IGNhbid0IHVzZSBoYXNPd25Qcm9wZXJ0eSBpbiBjYXNlIGl0IGlzIGltcGxlbWVudGVkIHdpbCBlczUgZ2V0dGVycyBhbmQgc2V0dGVyc1xuICAgICAgICAgISFzb21ldGhpbmcucmFuZ2UgJiYgISFzb21ldGhpbmcucmFuZ2VQcm9wZXJ0eTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVFJhbmdlZFByb3BlcnR5OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBTUEsT0FBT0EsZ0JBQWdCLE1BQU0sdUJBQXVCO0FBQ3BELE9BQU9DLFlBQVksTUFBTSxtQkFBbUI7O0FBRTVDOztBQUdBLE9BQU8sU0FBU0MsaUJBQWlCQSxDQUFFQyxTQUF5QixFQUFpQztFQUMzRixPQUFPLENBQUVBLFNBQVMsWUFBWUgsZ0JBQWdCLElBQUlHLFNBQVMsWUFBWUYsWUFBWSxLQUFNRSxTQUFTLENBQUNDLFVBQVUsRUFBRTtFQUV4RztFQUNBLENBQUMsQ0FBQ0QsU0FBUyxDQUFDRSxLQUFLLElBQUksQ0FBQyxDQUFDRixTQUFTLENBQUNHLGFBQWE7QUFDdkQifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/UnitConversionProperty.js
// Copyright 2022-2023, University of Colorado Boulder

/**
 * A MappedProperty specialized for unit conversion. Just provide multiplicative factor to convert between the units,
 * or optionally a map/inverseMap. Additionally if there is a rangeProperty on the source, this Property will have a
 * mapped range.
 *
 * For example:
 * const metersProperty = new NumberProperty( 0.5, { range: new Range( 0, 1 ) } );
 * const centimetersProperty = new UnitConversionProperty( metersProperty, { factor: 100 } );
 * centimetersProperty.value; // 50
 * centimetersProperty.range; // Range( 0, 100 )
 *
 * // One way
 * metersProperty.value = 0.25
 * centimetersProperty.value; // 25
 *
 * // Bidirectional
 * centimetersProperty.value = 100;
 * metersProperty.value; // 1
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */








class UnitConversionProperty extends MappedProperty {
  constructor(property, providedOptions) {
    const map = input => input * providedOptions.factor;
    const inverseMap = output => output / providedOptions.factor;
    const options = optionize()({
      // Bidirectional by default, since we'll have a map and inverseMap guaranteed
      bidirectional: true,
      map: map,
      inverseMap: inverseMap
    }, providedOptions);

    // @ts-expect-error Expression produces a union type that is too complex to represent.
    super(property, options);
    this._property = property;
    this.rangeProperty = new Property(DEFAULT_RANGE);
    if (isTRangedProperty(property)) {
      // Watch the range of the target Property, and update ours to match
      this._rangeListener = range => {
        const min = map(range.min);
        const max = map(range.max);
        // Handle a negative factor or something else where the min/max gets swapped
        this.rangeProperty.value = new js_Range(Math.min(min, max), Math.max(min, max));
      };
      property.rangeProperty.link(this._rangeListener);
    }
  }
  get range() {
    return this.rangeProperty.value;
  }

  // NOTE: NOT bidirectional yet!
  set range(value) {
    this.rangeProperty.value = value;
  }
  dispose() {
    if (isTRangedProperty(this._property)) {
      this._property.rangeProperty.unlink(this._rangeListener);
    }
    this.rangeProperty.dispose();
  }
}
js_axon.register('UnitConversionProperty', UnitConversionProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheG9uIiwiUmFuZ2UiLCJNYXBwZWRQcm9wZXJ0eSIsIlByb3BlcnR5IiwiREVGQVVMVF9SQU5HRSIsIm9wdGlvbml6ZSIsImlzVFJhbmdlZFByb3BlcnR5IiwiVW5pdENvbnZlcnNpb25Qcm9wZXJ0eSIsImNvbnN0cnVjdG9yIiwicHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJtYXAiLCJpbnB1dCIsImZhY3RvciIsImludmVyc2VNYXAiLCJvdXRwdXQiLCJvcHRpb25zIiwiYmlkaXJlY3Rpb25hbCIsIl9wcm9wZXJ0eSIsInJhbmdlUHJvcGVydHkiLCJfcmFuZ2VMaXN0ZW5lciIsInJhbmdlIiwibWluIiwibWF4IiwidmFsdWUiLCJNYXRoIiwibGluayIsImRpc3Bvc2UiLCJ1bmxpbmsiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlVuaXRDb252ZXJzaW9uUHJvcGVydHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogQSBNYXBwZWRQcm9wZXJ0eSBzcGVjaWFsaXplZCBmb3IgdW5pdCBjb252ZXJzaW9uLiBKdXN0IHByb3ZpZGUgbXVsdGlwbGljYXRpdmUgZmFjdG9yIHRvIGNvbnZlcnQgYmV0d2VlbiB0aGUgdW5pdHMsXG4gKiBvciBvcHRpb25hbGx5IGEgbWFwL2ludmVyc2VNYXAuIEFkZGl0aW9uYWxseSBpZiB0aGVyZSBpcyBhIHJhbmdlUHJvcGVydHkgb24gdGhlIHNvdXJjZSwgdGhpcyBQcm9wZXJ0eSB3aWxsIGhhdmUgYVxuICogbWFwcGVkIHJhbmdlLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICogY29uc3QgbWV0ZXJzUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDAuNSwgeyByYW5nZTogbmV3IFJhbmdlKCAwLCAxICkgfSApO1xuICogY29uc3QgY2VudGltZXRlcnNQcm9wZXJ0eSA9IG5ldyBVbml0Q29udmVyc2lvblByb3BlcnR5KCBtZXRlcnNQcm9wZXJ0eSwgeyBmYWN0b3I6IDEwMCB9ICk7XG4gKiBjZW50aW1ldGVyc1Byb3BlcnR5LnZhbHVlOyAvLyA1MFxuICogY2VudGltZXRlcnNQcm9wZXJ0eS5yYW5nZTsgLy8gUmFuZ2UoIDAsIDEwMCApXG4gKlxuICogLy8gT25lIHdheVxuICogbWV0ZXJzUHJvcGVydHkudmFsdWUgPSAwLjI1XG4gKiBjZW50aW1ldGVyc1Byb3BlcnR5LnZhbHVlOyAvLyAyNVxuICpcbiAqIC8vIEJpZGlyZWN0aW9uYWxcbiAqIGNlbnRpbWV0ZXJzUHJvcGVydHkudmFsdWUgPSAxMDA7XG4gKiBtZXRlcnNQcm9wZXJ0eS52YWx1ZTsgLy8gMVxuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cbiAqL1xuXG5pbXBvcnQgYXhvbiBmcm9tICcuL2F4b24uanMnO1xuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XG5pbXBvcnQgVFByb3BlcnR5IGZyb20gJy4vVFByb3BlcnR5LmpzJztcbmltcG9ydCBNYXBwZWRQcm9wZXJ0eSwgeyBNYXBwZWRQcm9wZXJ0eU9wdGlvbnMgfSBmcm9tICcuL01hcHBlZFByb3BlcnR5LmpzJztcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuL1Byb3BlcnR5LmpzJztcbmltcG9ydCB7IERFRkFVTFRfUkFOR0UgfSBmcm9tICcuL051bWJlclByb3BlcnR5LmpzJztcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XG5pbXBvcnQgVFJhbmdlZFByb3BlcnR5LCB7IGlzVFJhbmdlZFByb3BlcnR5IH0gZnJvbSAnLi9UUmFuZ2VkUHJvcGVydHkuanMnO1xuXG50eXBlIFNlbGZPcHRpb25zID0ge1xuICAvLyBUaGUgbXVsdGlwbGljYXRpdmUgZmFjdG9yIHRvIGNvbnZlcnQgZnJvbSBJTlBVVCA9PiBPVVRQVVQsIGUuZy5cbiAgLy8gdGhpcy52YWx1ZSA9PT0gZmFjdG9yICogcHJvcGVydHkudmFsdWVcbiAgLy8gVGhpcyB3aWxsIGJlIHVzZWQgdG8gcHJvdmlkZSBkZWZhdWx0cyBmb3IgbWFwL2ludmVyc2VNYXAgaWYgcHJvdmlkZWRcbiAgZmFjdG9yOiBudW1iZXI7XG59O1xudHlwZSBQYXJlbnRPcHRpb25zID0gTWFwcGVkUHJvcGVydHlPcHRpb25zPG51bWJlciwgbnVtYmVyPjtcbmV4cG9ydCB0eXBlIFVuaXRDb252ZXJzaW9uUHJvcGVydHlPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQYXJlbnRPcHRpb25zO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVbml0Q29udmVyc2lvblByb3BlcnR5IGV4dGVuZHMgTWFwcGVkUHJvcGVydHk8bnVtYmVyLCBudW1iZXI+IGltcGxlbWVudHMgVFJhbmdlZFByb3BlcnR5IHtcblxuICBwdWJsaWMgcmVhZG9ubHkgcmFuZ2VQcm9wZXJ0eTogVFByb3BlcnR5PFJhbmdlPjtcblxuICBwcml2YXRlIF9wcm9wZXJ0eTogKCBUUHJvcGVydHk8bnVtYmVyPiB8IFRSYW5nZWRQcm9wZXJ0eSApO1xuICBwcml2YXRlIF9yYW5nZUxpc3RlbmVyPzogKCByYW5nZTogUmFuZ2UgKSA9PiB2b2lkO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvcGVydHk6ICggVFByb3BlcnR5PG51bWJlcj4gfCBUUmFuZ2VkUHJvcGVydHkgKSwgcHJvdmlkZWRPcHRpb25zOiBVbml0Q29udmVyc2lvblByb3BlcnR5T3B0aW9ucyApIHtcblxuICAgIGNvbnN0IG1hcCA9ICggaW5wdXQ6IG51bWJlciApID0+IGlucHV0ICogcHJvdmlkZWRPcHRpb25zLmZhY3RvcjtcbiAgICBjb25zdCBpbnZlcnNlTWFwID0gKCBvdXRwdXQ6IG51bWJlciApID0+IG91dHB1dCAvIHByb3ZpZGVkT3B0aW9ucy5mYWN0b3I7XG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxVbml0Q29udmVyc2lvblByb3BlcnR5T3B0aW9ucywgU2VsZk9wdGlvbnMsIFBhcmVudE9wdGlvbnM+KCkoIHtcblxuICAgICAgLy8gQmlkaXJlY3Rpb25hbCBieSBkZWZhdWx0LCBzaW5jZSB3ZSdsbCBoYXZlIGEgbWFwIGFuZCBpbnZlcnNlTWFwIGd1YXJhbnRlZWRcbiAgICAgIGJpZGlyZWN0aW9uYWw6IHRydWUsXG5cbiAgICAgIG1hcDogbWFwLFxuICAgICAgaW52ZXJzZU1hcDogaW52ZXJzZU1hcFxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xuXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBFeHByZXNzaW9uIHByb2R1Y2VzIGEgdW5pb24gdHlwZSB0aGF0IGlzIHRvbyBjb21wbGV4IHRvIHJlcHJlc2VudC5cbiAgICBzdXBlciggcHJvcGVydHksIG9wdGlvbnMgKTtcblxuICAgIHRoaXMuX3Byb3BlcnR5ID0gcHJvcGVydHk7XG5cbiAgICB0aGlzLnJhbmdlUHJvcGVydHkgPSBuZXcgUHJvcGVydHk8UmFuZ2U+KCBERUZBVUxUX1JBTkdFICk7XG5cbiAgICBpZiAoIGlzVFJhbmdlZFByb3BlcnR5KCBwcm9wZXJ0eSApICkge1xuXG4gICAgICAvLyBXYXRjaCB0aGUgcmFuZ2Ugb2YgdGhlIHRhcmdldCBQcm9wZXJ0eSwgYW5kIHVwZGF0ZSBvdXJzIHRvIG1hdGNoXG4gICAgICB0aGlzLl9yYW5nZUxpc3RlbmVyID0gKCByYW5nZTogUmFuZ2UgKSA9PiB7XG4gICAgICAgIGNvbnN0IG1pbiA9IG1hcCggcmFuZ2UubWluICk7XG4gICAgICAgIGNvbnN0IG1heCA9IG1hcCggcmFuZ2UubWF4ICk7XG4gICAgICAgIC8vIEhhbmRsZSBhIG5lZ2F0aXZlIGZhY3RvciBvciBzb21ldGhpbmcgZWxzZSB3aGVyZSB0aGUgbWluL21heCBnZXRzIHN3YXBwZWRcbiAgICAgICAgdGhpcy5yYW5nZVByb3BlcnR5LnZhbHVlID0gbmV3IFJhbmdlKCBNYXRoLm1pbiggbWluLCBtYXggKSwgTWF0aC5tYXgoIG1pbiwgbWF4ICkgKTtcbiAgICAgIH07XG4gICAgICBwcm9wZXJ0eS5yYW5nZVByb3BlcnR5LmxpbmsoIHRoaXMuX3JhbmdlTGlzdGVuZXIgKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0IHJhbmdlKCk6IFJhbmdlIHtcbiAgICByZXR1cm4gdGhpcy5yYW5nZVByb3BlcnR5LnZhbHVlO1xuICB9XG5cbiAgLy8gTk9URTogTk9UIGJpZGlyZWN0aW9uYWwgeWV0IVxuICBwdWJsaWMgc2V0IHJhbmdlKCB2YWx1ZTogUmFuZ2UgKSB7XG4gICAgdGhpcy5yYW5nZVByb3BlcnR5LnZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBpZiAoIGlzVFJhbmdlZFByb3BlcnR5KCB0aGlzLl9wcm9wZXJ0eSApICkge1xuICAgICAgdGhpcy5fcHJvcGVydHkucmFuZ2VQcm9wZXJ0eS51bmxpbmsoIHRoaXMuX3JhbmdlTGlzdGVuZXIhICk7XG4gICAgfVxuXG4gICAgdGhpcy5yYW5nZVByb3BlcnR5LmRpc3Bvc2UoKTtcbiAgfVxufVxuXG5heG9uLnJlZ2lzdGVyKCAnVW5pdENvbnZlcnNpb25Qcm9wZXJ0eScsIFVuaXRDb252ZXJzaW9uUHJvcGVydHkgKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLElBQUksTUFBTSxXQUFXO0FBQzVCLE9BQU9DLEtBQUssTUFBTSx1QkFBdUI7QUFFekMsT0FBT0MsY0FBYyxNQUFpQyxxQkFBcUI7QUFDM0UsT0FBT0MsUUFBUSxNQUFNLGVBQWU7QUFDcEMsU0FBU0MsYUFBYSxRQUFRLHFCQUFxQjtBQUNuRCxPQUFPQyxTQUFTLE1BQU0saUNBQWlDO0FBQ3ZELFNBQTBCQyxpQkFBaUIsUUFBUSxzQkFBc0I7QUFXekUsZUFBZSxNQUFNQyxzQkFBc0IsU0FBU0wsY0FBYyxDQUE0QztFQU9yR00sV0FBV0EsQ0FBRUMsUUFBaUQsRUFBRUMsZUFBOEMsRUFBRztJQUV0SCxNQUFNQyxHQUFHLEdBQUtDLEtBQWEsSUFBTUEsS0FBSyxHQUFHRixlQUFlLENBQUNHLE1BQU07SUFDL0QsTUFBTUMsVUFBVSxHQUFLQyxNQUFjLElBQU1BLE1BQU0sR0FBR0wsZUFBZSxDQUFDRyxNQUFNO0lBQ3hFLE1BQU1HLE9BQU8sR0FBR1gsU0FBUyxFQUE2RCxDQUFFO01BRXRGO01BQ0FZLGFBQWEsRUFBRSxJQUFJO01BRW5CTixHQUFHLEVBQUVBLEdBQUc7TUFDUkcsVUFBVSxFQUFFQTtJQUNkLENBQUMsRUFBRUosZUFBZSxDQUFFOztJQUVwQjtJQUNBLEtBQUssQ0FBRUQsUUFBUSxFQUFFTyxPQUFPLENBQUU7SUFFMUIsSUFBSSxDQUFDRSxTQUFTLEdBQUdULFFBQVE7SUFFekIsSUFBSSxDQUFDVSxhQUFhLEdBQUcsSUFBSWhCLFFBQVEsQ0FBU0MsYUFBYSxDQUFFO0lBRXpELElBQUtFLGlCQUFpQixDQUFFRyxRQUFRLENBQUUsRUFBRztNQUVuQztNQUNBLElBQUksQ0FBQ1csY0FBYyxHQUFLQyxLQUFZLElBQU07UUFDeEMsTUFBTUMsR0FBRyxHQUFHWCxHQUFHLENBQUVVLEtBQUssQ0FBQ0MsR0FBRyxDQUFFO1FBQzVCLE1BQU1DLEdBQUcsR0FBR1osR0FBRyxDQUFFVSxLQUFLLENBQUNFLEdBQUcsQ0FBRTtRQUM1QjtRQUNBLElBQUksQ0FBQ0osYUFBYSxDQUFDSyxLQUFLLEdBQUcsSUFBSXZCLEtBQUssQ0FBRXdCLElBQUksQ0FBQ0gsR0FBRyxDQUFFQSxHQUFHLEVBQUVDLEdBQUcsQ0FBRSxFQUFFRSxJQUFJLENBQUNGLEdBQUcsQ0FBRUQsR0FBRyxFQUFFQyxHQUFHLENBQUUsQ0FBRTtNQUNwRixDQUFDO01BQ0RkLFFBQVEsQ0FBQ1UsYUFBYSxDQUFDTyxJQUFJLENBQUUsSUFBSSxDQUFDTixjQUFjLENBQUU7SUFDcEQ7RUFDRjtFQUVBLElBQVdDLEtBQUtBLENBQUEsRUFBVTtJQUN4QixPQUFPLElBQUksQ0FBQ0YsYUFBYSxDQUFDSyxLQUFLO0VBQ2pDOztFQUVBO0VBQ0EsSUFBV0gsS0FBS0EsQ0FBRUcsS0FBWSxFQUFHO0lBQy9CLElBQUksQ0FBQ0wsYUFBYSxDQUFDSyxLQUFLLEdBQUdBLEtBQUs7RUFDbEM7RUFFZ0JHLE9BQU9BLENBQUEsRUFBUztJQUM5QixJQUFLckIsaUJBQWlCLENBQUUsSUFBSSxDQUFDWSxTQUFTLENBQUUsRUFBRztNQUN6QyxJQUFJLENBQUNBLFNBQVMsQ0FBQ0MsYUFBYSxDQUFDUyxNQUFNLENBQUUsSUFBSSxDQUFDUixjQUFjLENBQUc7SUFDN0Q7SUFFQSxJQUFJLENBQUNELGFBQWEsQ0FBQ1EsT0FBTyxFQUFFO0VBQzlCO0FBQ0Y7QUFFQTNCLElBQUksQ0FBQzZCLFFBQVEsQ0FBRSx3QkFBd0IsRUFBRXRCLHNCQUFzQixDQUFFIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/axon/js/main.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * Module that includes all axon dependencies, so that requiring this module will return an object
 * that consists of the entire exported 'axon' namespace API.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */






























/* harmony default export */ const main = ((/* unused pure expression or super */ null && (axon)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheG9uIl0sInNvdXJjZXMiOlsibWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBNb2R1bGUgdGhhdCBpbmNsdWRlcyBhbGwgYXhvbiBkZXBlbmRlbmNpZXMsIHNvIHRoYXQgcmVxdWlyaW5nIHRoaXMgbW9kdWxlIHdpbGwgcmV0dXJuIGFuIG9iamVjdFxuICogdGhhdCBjb25zaXN0cyBvZiB0aGUgZW50aXJlIGV4cG9ydGVkICdheG9uJyBuYW1lc3BhY2UgQVBJLlxuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cbiAqL1xuXG5pbXBvcnQgJy4vYW5pbWF0aW9uRnJhbWVUaW1lci5qcyc7XG5pbXBvcnQgYXhvbiBmcm9tICcuL2F4b24uanMnO1xuaW1wb3J0ICcuL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XG5pbXBvcnQgJy4vQ2FsbGJhY2tUaW1lci5qcyc7XG5pbXBvcnQgJy4vY3JlYXRlT2JzZXJ2YWJsZUFycmF5LmpzJztcbmltcG9ydCAnLi9EZXJpdmVkUHJvcGVydHkuanMnO1xuaW1wb3J0ICcuL0R5bmFtaWNQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgJy4vRW1pdHRlci5qcyc7XG5pbXBvcnQgJy4vRW51bWVyYXRpb25EZXByZWNhdGVkUHJvcGVydHkuanMnO1xuaW1wb3J0ICcuL01hcHBlZFByb3BlcnR5LmpzJztcbmltcG9ydCAnLi9NdWx0aWxpbmsuanMnO1xuaW1wb3J0ICcuL051bWJlclByb3BlcnR5LmpzJztcbmltcG9ydCAnLi9QYXR0ZXJuU3RyaW5nUHJvcGVydHkuanMnO1xuaW1wb3J0ICcuL1Byb3BlcnR5LmpzJztcbmltcG9ydCAnLi9Qcm9wZXJ0eVN0YXRlSGFuZGxlci5qcyc7XG5pbXBvcnQgJy4vcHJvcGVydHlTdGF0ZUhhbmRsZXJTaW5nbGV0b24uanMnO1xuaW1wb3J0ICcuL1Byb3BlcnR5U3RhdGVQaGFzZS5qcyc7XG5pbXBvcnQgJy4vc3RlcFRpbWVyLmpzJztcbmltcG9ydCAnLi9TdHJpbmdQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgJy4vVGltZXIuanMnO1xuaW1wb3J0ICcuL1RpbnlFbWl0dGVyLmpzJztcbmltcG9ydCAnLi9UaW55Rm9yd2FyZGluZ1Byb3BlcnR5LmpzJztcbmltcG9ydCAnLi9UaW55T3ZlcnJpZGVQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgJy4vVGlueVByb3BlcnR5LmpzJztcbmltcG9ydCAnLi9UaW55U3RhdGljUHJvcGVydHkuanMnO1xuaW1wb3J0ICcuL1VuaXRDb252ZXJzaW9uUHJvcGVydHkuanMnO1xuaW1wb3J0ICcuL3VuaXRzLmpzJztcbmltcG9ydCAnLi92YWxpZGF0ZS5qcyc7XG5pbXBvcnQgJy4vVmFsaWRhdGlvbi5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGF4b247Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTywwQkFBMEI7QUFDakMsT0FBT0EsSUFBSSxNQUFNLFdBQVc7QUFDNUIsT0FBTyxzQkFBc0I7QUFDN0IsT0FBTyxvQkFBb0I7QUFDM0IsT0FBTyw0QkFBNEI7QUFDbkMsT0FBTyxzQkFBc0I7QUFDN0IsT0FBTyxzQkFBc0I7QUFDN0IsT0FBTyxjQUFjO0FBQ3JCLE9BQU8sb0NBQW9DO0FBQzNDLE9BQU8scUJBQXFCO0FBQzVCLE9BQU8sZ0JBQWdCO0FBQ3ZCLE9BQU8scUJBQXFCO0FBQzVCLE9BQU8sNEJBQTRCO0FBQ25DLE9BQU8sZUFBZTtBQUN0QixPQUFPLDJCQUEyQjtBQUNsQyxPQUFPLG9DQUFvQztBQUMzQyxPQUFPLHlCQUF5QjtBQUNoQyxPQUFPLGdCQUFnQjtBQUN2QixPQUFPLHFCQUFxQjtBQUM1QixPQUFPLFlBQVk7QUFDbkIsT0FBTyxrQkFBa0I7QUFDekIsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTywyQkFBMkI7QUFDbEMsT0FBTyxtQkFBbUI7QUFDMUIsT0FBTyx5QkFBeUI7QUFDaEMsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTyxZQUFZO0FBQ25CLE9BQU8sZUFBZTtBQUN0QixPQUFPLGlCQUFpQjtBQUV4QixlQUFlQSxJQUFJIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/arrayDifference.js
// Copyright 2018-2021, University of Colorado Boulder

/**
 * Computes what elements are in both arrays, or only one array.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



/**
 * Given two arrays, find the items that are only in one of them (mutates the aOnly/bOnly/inBoth parameters)
 * @public
 *
 * NOTE: Assumes there are no duplicate values in each individual array.
 *
 * For example:
 *   var a = [ 1, 2 ];
 *   var b = [ 5, 2, 0 ];
 *   var aOnly = [];
 *   var bOnly = [];
 *   var inBoth = [];
 *   arrayDifference( a, b, aOnly, bOnly, inBoth );
 *   // aOnly is [ 1 ]
 *   // bOnly is [ 5, 0 ]
 *   // inBoth is [ 2 ]
 *
 * @param {Array.<*>} a - Input array
 * @param {Array.<*>} b - Input array
 * @param {Array.<*>} [aOnly] - Output array (will be filled with all elements that are in `a` but NOT in `b`).
 *                              Ordered based on the order of `a`.
 * @param {Array.<*>} [bOnly] - Output array (will be filled with all elements that are in `b` but NOT in `a`).
 *                              Ordered based on the order of `b`.
 * @param {Array.<*>} [inBoth] - Output array (will be filled with all elements that are in both `a` AND `b`).
 *                               Ordered based on the order of `a`.
 * @returns {Array.<*>} - Returns the value of aOnly (the classic definition of difference)
 */
function arrayDifference(a, b, aOnly, bOnly, inBoth) {
  assert && assert(Array.isArray(a) && _.uniq(a).length === a.length, 'a is not an array of unique items');
  assert && assert(Array.isArray(b) && _.uniq(b).length === b.length, 'b is not an array of unique items');
  aOnly = aOnly || [];
  bOnly = bOnly || [];
  inBoth = inBoth || [];
  assert && assert(Array.isArray(aOnly) && aOnly.length === 0);
  assert && assert(Array.isArray(bOnly) && bOnly.length === 0);
  assert && assert(Array.isArray(inBoth) && inBoth.length === 0);
  Array.prototype.push.apply(aOnly, a);
  Array.prototype.push.apply(bOnly, b);
  outerLoop:
  // eslint-disable-line no-labels
  for (let i = 0; i < aOnly.length; i++) {
    const aItem = aOnly[i];
    for (let j = 0; j < bOnly.length; j++) {
      const bItem = bOnly[j];
      if (aItem === bItem) {
        inBoth.push(aItem);
        aOnly.splice(i, 1);
        bOnly.splice(j, 1);
        j = 0;
        if (i === aOnly.length) {
          break outerLoop; // eslint-disable-line no-labels
        }

        i -= 1;
      }
    }
  }

  // We return the classic meaning of "difference"
  return aOnly;
}
js_phetCore.register('arrayDifference', arrayDifference);
/* harmony default export */ const js_arrayDifference = ((/* unused pure expression or super */ null && (arrayDifference)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsImFycmF5RGlmZmVyZW5jZSIsImEiLCJiIiwiYU9ubHkiLCJiT25seSIsImluQm90aCIsImFzc2VydCIsIkFycmF5IiwiaXNBcnJheSIsIl8iLCJ1bmlxIiwibGVuZ3RoIiwicHJvdG90eXBlIiwicHVzaCIsImFwcGx5Iiwib3V0ZXJMb29wIiwiaSIsImFJdGVtIiwiaiIsImJJdGVtIiwic3BsaWNlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJhcnJheURpZmZlcmVuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogQ29tcHV0ZXMgd2hhdCBlbGVtZW50cyBhcmUgaW4gYm90aCBhcnJheXMsIG9yIG9ubHkgb25lIGFycmF5LlxuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cbiAqL1xuXG5pbXBvcnQgcGhldENvcmUgZnJvbSAnLi9waGV0Q29yZS5qcyc7XG5cbi8qKlxuICogR2l2ZW4gdHdvIGFycmF5cywgZmluZCB0aGUgaXRlbXMgdGhhdCBhcmUgb25seSBpbiBvbmUgb2YgdGhlbSAobXV0YXRlcyB0aGUgYU9ubHkvYk9ubHkvaW5Cb3RoIHBhcmFtZXRlcnMpXG4gKiBAcHVibGljXG4gKlxuICogTk9URTogQXNzdW1lcyB0aGVyZSBhcmUgbm8gZHVwbGljYXRlIHZhbHVlcyBpbiBlYWNoIGluZGl2aWR1YWwgYXJyYXkuXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKiAgIHZhciBhID0gWyAxLCAyIF07XG4gKiAgIHZhciBiID0gWyA1LCAyLCAwIF07XG4gKiAgIHZhciBhT25seSA9IFtdO1xuICogICB2YXIgYk9ubHkgPSBbXTtcbiAqICAgdmFyIGluQm90aCA9IFtdO1xuICogICBhcnJheURpZmZlcmVuY2UoIGEsIGIsIGFPbmx5LCBiT25seSwgaW5Cb3RoICk7XG4gKiAgIC8vIGFPbmx5IGlzIFsgMSBdXG4gKiAgIC8vIGJPbmx5IGlzIFsgNSwgMCBdXG4gKiAgIC8vIGluQm90aCBpcyBbIDIgXVxuICpcbiAqIEBwYXJhbSB7QXJyYXkuPCo+fSBhIC0gSW5wdXQgYXJyYXlcbiAqIEBwYXJhbSB7QXJyYXkuPCo+fSBiIC0gSW5wdXQgYXJyYXlcbiAqIEBwYXJhbSB7QXJyYXkuPCo+fSBbYU9ubHldIC0gT3V0cHV0IGFycmF5ICh3aWxsIGJlIGZpbGxlZCB3aXRoIGFsbCBlbGVtZW50cyB0aGF0IGFyZSBpbiBgYWAgYnV0IE5PVCBpbiBgYmApLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPcmRlcmVkIGJhc2VkIG9uIHRoZSBvcmRlciBvZiBgYWAuXG4gKiBAcGFyYW0ge0FycmF5LjwqPn0gW2JPbmx5XSAtIE91dHB1dCBhcnJheSAod2lsbCBiZSBmaWxsZWQgd2l0aCBhbGwgZWxlbWVudHMgdGhhdCBhcmUgaW4gYGJgIGJ1dCBOT1QgaW4gYGFgKS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT3JkZXJlZCBiYXNlZCBvbiB0aGUgb3JkZXIgb2YgYGJgLlxuICogQHBhcmFtIHtBcnJheS48Kj59IFtpbkJvdGhdIC0gT3V0cHV0IGFycmF5ICh3aWxsIGJlIGZpbGxlZCB3aXRoIGFsbCBlbGVtZW50cyB0aGF0IGFyZSBpbiBib3RoIGBhYCBBTkQgYGJgKS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9yZGVyZWQgYmFzZWQgb24gdGhlIG9yZGVyIG9mIGBhYC5cbiAqIEByZXR1cm5zIHtBcnJheS48Kj59IC0gUmV0dXJucyB0aGUgdmFsdWUgb2YgYU9ubHkgKHRoZSBjbGFzc2ljIGRlZmluaXRpb24gb2YgZGlmZmVyZW5jZSlcbiAqL1xuZnVuY3Rpb24gYXJyYXlEaWZmZXJlbmNlKCBhLCBiLCBhT25seSwgYk9ubHksIGluQm90aCApIHtcbiAgYXNzZXJ0ICYmIGFzc2VydCggQXJyYXkuaXNBcnJheSggYSApICYmIF8udW5pcSggYSApLmxlbmd0aCA9PT0gYS5sZW5ndGgsICdhIGlzIG5vdCBhbiBhcnJheSBvZiB1bmlxdWUgaXRlbXMnICk7XG4gIGFzc2VydCAmJiBhc3NlcnQoIEFycmF5LmlzQXJyYXkoIGIgKSAmJiBfLnVuaXEoIGIgKS5sZW5ndGggPT09IGIubGVuZ3RoLCAnYiBpcyBub3QgYW4gYXJyYXkgb2YgdW5pcXVlIGl0ZW1zJyApO1xuXG4gIGFPbmx5ID0gYU9ubHkgfHwgW107XG4gIGJPbmx5ID0gYk9ubHkgfHwgW107XG4gIGluQm90aCA9IGluQm90aCB8fCBbXTtcblxuICBhc3NlcnQgJiYgYXNzZXJ0KCBBcnJheS5pc0FycmF5KCBhT25seSApICYmIGFPbmx5Lmxlbmd0aCA9PT0gMCApO1xuICBhc3NlcnQgJiYgYXNzZXJ0KCBBcnJheS5pc0FycmF5KCBiT25seSApICYmIGJPbmx5Lmxlbmd0aCA9PT0gMCApO1xuICBhc3NlcnQgJiYgYXNzZXJ0KCBBcnJheS5pc0FycmF5KCBpbkJvdGggKSAmJiBpbkJvdGgubGVuZ3RoID09PSAwICk7XG5cbiAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoIGFPbmx5LCBhICk7XG4gIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KCBiT25seSwgYiApO1xuXG4gIG91dGVyTG9vcDogLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1sYWJlbHNcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBhT25seS5sZW5ndGg7IGkrKyApIHtcbiAgICAgIGNvbnN0IGFJdGVtID0gYU9ubHlbIGkgXTtcblxuICAgICAgZm9yICggbGV0IGogPSAwOyBqIDwgYk9ubHkubGVuZ3RoOyBqKysgKSB7XG4gICAgICAgIGNvbnN0IGJJdGVtID0gYk9ubHlbIGogXTtcblxuICAgICAgICBpZiAoIGFJdGVtID09PSBiSXRlbSApIHtcbiAgICAgICAgICBpbkJvdGgucHVzaCggYUl0ZW0gKTtcbiAgICAgICAgICBhT25seS5zcGxpY2UoIGksIDEgKTtcbiAgICAgICAgICBiT25seS5zcGxpY2UoIGosIDEgKTtcbiAgICAgICAgICBqID0gMDtcbiAgICAgICAgICBpZiAoIGkgPT09IGFPbmx5Lmxlbmd0aCApIHtcbiAgICAgICAgICAgIGJyZWFrIG91dGVyTG9vcDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1sYWJlbHNcbiAgICAgICAgICB9XG4gICAgICAgICAgaSAtPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gIC8vIFdlIHJldHVybiB0aGUgY2xhc3NpYyBtZWFuaW5nIG9mIFwiZGlmZmVyZW5jZVwiXG4gIHJldHVybiBhT25seTtcbn1cblxucGhldENvcmUucmVnaXN0ZXIoICdhcnJheURpZmZlcmVuY2UnLCBhcnJheURpZmZlcmVuY2UgKTtcblxuZXhwb3J0IGRlZmF1bHQgYXJyYXlEaWZmZXJlbmNlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sZUFBZTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsZUFBZUEsQ0FBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUc7RUFDckRDLE1BQU0sSUFBSUEsTUFBTSxDQUFFQyxLQUFLLENBQUNDLE9BQU8sQ0FBRVAsQ0FBQyxDQUFFLElBQUlRLENBQUMsQ0FBQ0MsSUFBSSxDQUFFVCxDQUFDLENBQUUsQ0FBQ1UsTUFBTSxLQUFLVixDQUFDLENBQUNVLE1BQU0sRUFBRSxtQ0FBbUMsQ0FBRTtFQUM5R0wsTUFBTSxJQUFJQSxNQUFNLENBQUVDLEtBQUssQ0FBQ0MsT0FBTyxDQUFFTixDQUFDLENBQUUsSUFBSU8sQ0FBQyxDQUFDQyxJQUFJLENBQUVSLENBQUMsQ0FBRSxDQUFDUyxNQUFNLEtBQUtULENBQUMsQ0FBQ1MsTUFBTSxFQUFFLG1DQUFtQyxDQUFFO0VBRTlHUixLQUFLLEdBQUdBLEtBQUssSUFBSSxFQUFFO0VBQ25CQyxLQUFLLEdBQUdBLEtBQUssSUFBSSxFQUFFO0VBQ25CQyxNQUFNLEdBQUdBLE1BQU0sSUFBSSxFQUFFO0VBRXJCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUMsS0FBSyxDQUFDQyxPQUFPLENBQUVMLEtBQUssQ0FBRSxJQUFJQSxLQUFLLENBQUNRLE1BQU0sS0FBSyxDQUFDLENBQUU7RUFDaEVMLE1BQU0sSUFBSUEsTUFBTSxDQUFFQyxLQUFLLENBQUNDLE9BQU8sQ0FBRUosS0FBSyxDQUFFLElBQUlBLEtBQUssQ0FBQ08sTUFBTSxLQUFLLENBQUMsQ0FBRTtFQUNoRUwsTUFBTSxJQUFJQSxNQUFNLENBQUVDLEtBQUssQ0FBQ0MsT0FBTyxDQUFFSCxNQUFNLENBQUUsSUFBSUEsTUFBTSxDQUFDTSxNQUFNLEtBQUssQ0FBQyxDQUFFO0VBRWxFSixLQUFLLENBQUNLLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDQyxLQUFLLENBQUVYLEtBQUssRUFBRUYsQ0FBQyxDQUFFO0VBQ3RDTSxLQUFLLENBQUNLLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDQyxLQUFLLENBQUVWLEtBQUssRUFBRUYsQ0FBQyxDQUFFO0VBRXRDYSxTQUFTO0VBQUU7RUFDVCxLQUFNLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR2IsS0FBSyxDQUFDUSxNQUFNLEVBQUVLLENBQUMsRUFBRSxFQUFHO0lBQ3ZDLE1BQU1DLEtBQUssR0FBR2QsS0FBSyxDQUFFYSxDQUFDLENBQUU7SUFFeEIsS0FBTSxJQUFJRSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdkLEtBQUssQ0FBQ08sTUFBTSxFQUFFTyxDQUFDLEVBQUUsRUFBRztNQUN2QyxNQUFNQyxLQUFLLEdBQUdmLEtBQUssQ0FBRWMsQ0FBQyxDQUFFO01BRXhCLElBQUtELEtBQUssS0FBS0UsS0FBSyxFQUFHO1FBQ3JCZCxNQUFNLENBQUNRLElBQUksQ0FBRUksS0FBSyxDQUFFO1FBQ3BCZCxLQUFLLENBQUNpQixNQUFNLENBQUVKLENBQUMsRUFBRSxDQUFDLENBQUU7UUFDcEJaLEtBQUssQ0FBQ2dCLE1BQU0sQ0FBRUYsQ0FBQyxFQUFFLENBQUMsQ0FBRTtRQUNwQkEsQ0FBQyxHQUFHLENBQUM7UUFDTCxJQUFLRixDQUFDLEtBQUtiLEtBQUssQ0FBQ1EsTUFBTSxFQUFHO1VBQ3hCLE1BQU1JLFNBQVMsQ0FBQyxDQUFDO1FBQ25COztRQUNBQyxDQUFDLElBQUksQ0FBQztNQUNSO0lBQ0Y7RUFDRjs7RUFFRjtFQUNBLE9BQU9iLEtBQUs7QUFDZDtBQUVBSixRQUFRLENBQUNzQixRQUFRLENBQUUsaUJBQWlCLEVBQUVyQixlQUFlLENBQUU7QUFFdkQsZUFBZUEsZUFBZSJ9
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/cleanArray.js
// Copyright 2014-2020, University of Colorado Boulder

/**
 * If given an Array, removes all of its elements and returns it. Otherwise, if given a falsy value
 * (null/undefined/etc.), it will create and return a fresh Array.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */


function cleanArray(arr) {
  assert && assert(!arr || Array.isArray(arr), 'cleanArray either takes an Array');
  if (arr) {
    // fastest way to clear an array (http://stackoverflow.com/questions/1232040/how-to-empty-an-array-in-javascript, http://jsperf.com/array-destroy/32)
    // also, better than length=0, since it doesn't create significant garbage collection (like length=0), tested on Chrome 34.
    while (arr.length) {
      arr.pop();
    }
    return arr;
  } else {
    return [];
  }
}
js_phetCore.register('cleanArray', cleanArray);
/* harmony default export */ const js_cleanArray = ((/* unused pure expression or super */ null && (cleanArray)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsImNsZWFuQXJyYXkiLCJhcnIiLCJhc3NlcnQiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJwb3AiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbImNsZWFuQXJyYXkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogSWYgZ2l2ZW4gYW4gQXJyYXksIHJlbW92ZXMgYWxsIG9mIGl0cyBlbGVtZW50cyBhbmQgcmV0dXJucyBpdC4gT3RoZXJ3aXNlLCBpZiBnaXZlbiBhIGZhbHN5IHZhbHVlXG4gKiAobnVsbC91bmRlZmluZWQvZXRjLiksIGl0IHdpbGwgY3JlYXRlIGFuZCByZXR1cm4gYSBmcmVzaCBBcnJheS5cbiAqXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XG4gKi9cblxuaW1wb3J0IHBoZXRDb3JlIGZyb20gJy4vcGhldENvcmUuanMnO1xuXG5mdW5jdGlvbiBjbGVhbkFycmF5KCBhcnIgKSB7XG4gIGFzc2VydCAmJiBhc3NlcnQoICFhcnIgfHwgKCBBcnJheS5pc0FycmF5KCBhcnIgKSApLCAnY2xlYW5BcnJheSBlaXRoZXIgdGFrZXMgYW4gQXJyYXknICk7XG5cbiAgaWYgKCBhcnIgKSB7XG4gICAgLy8gZmFzdGVzdCB3YXkgdG8gY2xlYXIgYW4gYXJyYXkgKGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTIzMjA0MC9ob3ctdG8tZW1wdHktYW4tYXJyYXktaW4tamF2YXNjcmlwdCwgaHR0cDovL2pzcGVyZi5jb20vYXJyYXktZGVzdHJveS8zMilcbiAgICAvLyBhbHNvLCBiZXR0ZXIgdGhhbiBsZW5ndGg9MCwgc2luY2UgaXQgZG9lc24ndCBjcmVhdGUgc2lnbmlmaWNhbnQgZ2FyYmFnZSBjb2xsZWN0aW9uIChsaWtlIGxlbmd0aD0wKSwgdGVzdGVkIG9uIENocm9tZSAzNC5cbiAgICB3aGlsZSAoIGFyci5sZW5ndGggKSB7XG4gICAgICBhcnIucG9wKCk7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG4gIH1cbiAgZWxzZSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG5cbnBoZXRDb3JlLnJlZ2lzdGVyKCAnY2xlYW5BcnJheScsIGNsZWFuQXJyYXkgKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xlYW5BcnJheTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sZUFBZTtBQUVwQyxTQUFTQyxVQUFVQSxDQUFFQyxHQUFHLEVBQUc7RUFDekJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUNELEdBQUcsSUFBTUUsS0FBSyxDQUFDQyxPQUFPLENBQUVILEdBQUcsQ0FBSSxFQUFFLGtDQUFrQyxDQUFFO0VBRXhGLElBQUtBLEdBQUcsRUFBRztJQUNUO0lBQ0E7SUFDQSxPQUFRQSxHQUFHLENBQUNJLE1BQU0sRUFBRztNQUNuQkosR0FBRyxDQUFDSyxHQUFHLEVBQUU7SUFDWDtJQUNBLE9BQU9MLEdBQUc7RUFDWixDQUFDLE1BQ0k7SUFDSCxPQUFPLEVBQUU7RUFDWDtBQUNGO0FBRUFGLFFBQVEsQ0FBQ1EsUUFBUSxDQUFFLFlBQVksRUFBRVAsVUFBVSxDQUFFO0FBRTdDLGVBQWVBLFVBQVUifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/collect.js
// Copyright 2013-2020, University of Colorado Boulder

/**
 * Creates an array of results from an iterator that takes a callback.
 *
 * For instance, if calling a function f( g ) will call g( 1 ), g( 2 ), and g( 3 ),
 * collect( function( callback ) { f( callback ); } );
 * will return [1,2,3].
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */


function collect(iterate) {
  assert && assert(typeof iterate === 'function');
  const result = [];
  iterate(ob => {
    result.push(ob);
  });
  return result;
}
js_phetCore.register('collect', collect);
/* harmony default export */ const js_collect = ((/* unused pure expression or super */ null && (collect)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsImNvbGxlY3QiLCJpdGVyYXRlIiwiYXNzZXJ0IiwicmVzdWx0Iiwib2IiLCJwdXNoIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJjb2xsZWN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgcmVzdWx0cyBmcm9tIGFuIGl0ZXJhdG9yIHRoYXQgdGFrZXMgYSBjYWxsYmFjay5cbiAqXG4gKiBGb3IgaW5zdGFuY2UsIGlmIGNhbGxpbmcgYSBmdW5jdGlvbiBmKCBnICkgd2lsbCBjYWxsIGcoIDEgKSwgZyggMiApLCBhbmQgZyggMyApLFxuICogY29sbGVjdCggZnVuY3Rpb24oIGNhbGxiYWNrICkgeyBmKCBjYWxsYmFjayApOyB9ICk7XG4gKiB3aWxsIHJldHVybiBbMSwyLDNdLlxuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cbiAqL1xuXG5pbXBvcnQgcGhldENvcmUgZnJvbSAnLi9waGV0Q29yZS5qcyc7XG5cbmZ1bmN0aW9uIGNvbGxlY3QoIGl0ZXJhdGUgKSB7XG4gIGFzc2VydCAmJiBhc3NlcnQoIHR5cGVvZiBpdGVyYXRlID09PSAnZnVuY3Rpb24nICk7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBpdGVyYXRlKCBvYiA9PiB7XG4gICAgcmVzdWx0LnB1c2goIG9iICk7XG4gIH0gKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxucGhldENvcmUucmVnaXN0ZXIoICdjb2xsZWN0JywgY29sbGVjdCApO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xsZWN0OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSxlQUFlO0FBRXBDLFNBQVNDLE9BQU9BLENBQUVDLE9BQU8sRUFBRztFQUMxQkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsT0FBT0QsT0FBTyxLQUFLLFVBQVUsQ0FBRTtFQUNqRCxNQUFNRSxNQUFNLEdBQUcsRUFBRTtFQUNqQkYsT0FBTyxDQUFFRyxFQUFFLElBQUk7SUFDYkQsTUFBTSxDQUFDRSxJQUFJLENBQUVELEVBQUUsQ0FBRTtFQUNuQixDQUFDLENBQUU7RUFDSCxPQUFPRCxNQUFNO0FBQ2Y7QUFFQUosUUFBUSxDQUFDTyxRQUFRLENBQUUsU0FBUyxFQUFFTixPQUFPLENBQUU7QUFFdkMsZUFBZUEsT0FBTyJ9
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/detectPrefix.js
// Copyright 2014-2023, University of Colorado Boulder

/**
 * Scans through potential properties on an object to detect prefixed forms, and returns the first match.
 *
 * E.g. currently:
 * phet.phetCore.detectPrefix( document.createElement( 'div' ).style, 'transform' ) === 'webkitTransform'
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



// @returns the best String str where obj[str] !== undefined, or returns undefined if that is not available
function detectPrefix(obj, name) {
  if (obj[name] !== undefined) {
    return name;
  }

  // prepare for camelCase
  name = name.charAt(0).toUpperCase() + name.slice(1);

  // Chrome planning to not introduce prefixes in the future, hopefully we will be safe
  if (obj[`moz${name}`] !== undefined) {
    return `moz${name}`;
  }
  if (obj[`Moz${name}`] !== undefined) {
    return `Moz${name}`;
  } // some prefixes seem to have all-caps?
  if (obj[`webkit${name}`] !== undefined) {
    return `webkit${name}`;
  }
  if (obj[`ms${name}`] !== undefined) {
    return `ms${name}`;
  }
  if (obj[`o${name}`] !== undefined) {
    return `o${name}`;
  }
  return undefined;
}
js_phetCore.register('detectPrefix', detectPrefix);
/* harmony default export */ const js_detectPrefix = ((/* unused pure expression or super */ null && (detectPrefix)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsImRldGVjdFByZWZpeCIsIm9iaiIsIm5hbWUiLCJ1bmRlZmluZWQiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJkZXRlY3RQcmVmaXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogU2NhbnMgdGhyb3VnaCBwb3RlbnRpYWwgcHJvcGVydGllcyBvbiBhbiBvYmplY3QgdG8gZGV0ZWN0IHByZWZpeGVkIGZvcm1zLCBhbmQgcmV0dXJucyB0aGUgZmlyc3QgbWF0Y2guXG4gKlxuICogRS5nLiBjdXJyZW50bHk6XG4gKiBwaGV0LnBoZXRDb3JlLmRldGVjdFByZWZpeCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKS5zdHlsZSwgJ3RyYW5zZm9ybScgKSA9PT0gJ3dlYmtpdFRyYW5zZm9ybSdcbiAqXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XG4gKi9cblxuaW1wb3J0IHBoZXRDb3JlIGZyb20gJy4vcGhldENvcmUuanMnO1xuXG4vLyBAcmV0dXJucyB0aGUgYmVzdCBTdHJpbmcgc3RyIHdoZXJlIG9ialtzdHJdICE9PSB1bmRlZmluZWQsIG9yIHJldHVybnMgdW5kZWZpbmVkIGlmIHRoYXQgaXMgbm90IGF2YWlsYWJsZVxuZnVuY3Rpb24gZGV0ZWN0UHJlZml4KCBvYmosIG5hbWUgKSB7XG4gIGlmICggb2JqWyBuYW1lIF0gIT09IHVuZGVmaW5lZCApIHsgcmV0dXJuIG5hbWU7IH1cblxuICAvLyBwcmVwYXJlIGZvciBjYW1lbENhc2VcbiAgbmFtZSA9IG5hbWUuY2hhckF0KCAwICkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKTtcblxuICAvLyBDaHJvbWUgcGxhbm5pbmcgdG8gbm90IGludHJvZHVjZSBwcmVmaXhlcyBpbiB0aGUgZnV0dXJlLCBob3BlZnVsbHkgd2Ugd2lsbCBiZSBzYWZlXG4gIGlmICggb2JqWyBgbW96JHtuYW1lfWAgXSAhPT0gdW5kZWZpbmVkICkgeyByZXR1cm4gYG1veiR7bmFtZX1gOyB9XG4gIGlmICggb2JqWyBgTW96JHtuYW1lfWAgXSAhPT0gdW5kZWZpbmVkICkgeyByZXR1cm4gYE1veiR7bmFtZX1gOyB9IC8vIHNvbWUgcHJlZml4ZXMgc2VlbSB0byBoYXZlIGFsbC1jYXBzP1xuICBpZiAoIG9ialsgYHdlYmtpdCR7bmFtZX1gIF0gIT09IHVuZGVmaW5lZCApIHsgcmV0dXJuIGB3ZWJraXQke25hbWV9YDsgfVxuICBpZiAoIG9ialsgYG1zJHtuYW1lfWAgXSAhPT0gdW5kZWZpbmVkICkgeyByZXR1cm4gYG1zJHtuYW1lfWA7IH1cbiAgaWYgKCBvYmpbIGBvJHtuYW1lfWAgXSAhPT0gdW5kZWZpbmVkICkgeyByZXR1cm4gYG8ke25hbWV9YDsgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5waGV0Q29yZS5yZWdpc3RlciggJ2RldGVjdFByZWZpeCcsIGRldGVjdFByZWZpeCApO1xuXG5leHBvcnQgZGVmYXVsdCBkZXRlY3RQcmVmaXg7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSxlQUFlOztBQUVwQztBQUNBLFNBQVNDLFlBQVlBLENBQUVDLEdBQUcsRUFBRUMsSUFBSSxFQUFHO0VBQ2pDLElBQUtELEdBQUcsQ0FBRUMsSUFBSSxDQUFFLEtBQUtDLFNBQVMsRUFBRztJQUFFLE9BQU9ELElBQUk7RUFBRTs7RUFFaEQ7RUFDQUEsSUFBSSxHQUFHQSxJQUFJLENBQUNFLE1BQU0sQ0FBRSxDQUFDLENBQUUsQ0FBQ0MsV0FBVyxFQUFFLEdBQUdILElBQUksQ0FBQ0ksS0FBSyxDQUFFLENBQUMsQ0FBRTs7RUFFdkQ7RUFDQSxJQUFLTCxHQUFHLENBQUcsTUFBS0MsSUFBSyxFQUFDLENBQUUsS0FBS0MsU0FBUyxFQUFHO0lBQUUsT0FBUSxNQUFLRCxJQUFLLEVBQUM7RUFBRTtFQUNoRSxJQUFLRCxHQUFHLENBQUcsTUFBS0MsSUFBSyxFQUFDLENBQUUsS0FBS0MsU0FBUyxFQUFHO0lBQUUsT0FBUSxNQUFLRCxJQUFLLEVBQUM7RUFBRSxDQUFDLENBQUM7RUFDbEUsSUFBS0QsR0FBRyxDQUFHLFNBQVFDLElBQUssRUFBQyxDQUFFLEtBQUtDLFNBQVMsRUFBRztJQUFFLE9BQVEsU0FBUUQsSUFBSyxFQUFDO0VBQUU7RUFDdEUsSUFBS0QsR0FBRyxDQUFHLEtBQUlDLElBQUssRUFBQyxDQUFFLEtBQUtDLFNBQVMsRUFBRztJQUFFLE9BQVEsS0FBSUQsSUFBSyxFQUFDO0VBQUU7RUFDOUQsSUFBS0QsR0FBRyxDQUFHLElBQUdDLElBQUssRUFBQyxDQUFFLEtBQUtDLFNBQVMsRUFBRztJQUFFLE9BQVEsSUFBR0QsSUFBSyxFQUFDO0VBQUU7RUFDNUQsT0FBT0MsU0FBUztBQUNsQjtBQUVBSixRQUFRLENBQUNRLFFBQVEsQ0FBRSxjQUFjLEVBQUVQLFlBQVksQ0FBRTtBQUVqRCxlQUFlQSxZQUFZIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/detectPrefixEvent.js
// Copyright 2014-2023, University of Colorado Boulder
/* eslint-disable no-useless-concat */

/**
 * Scans through potential event properties on an object to detect prefixed forms, and returns the first match.
 *
 * E.g. currently:
 * phet.phetCore.detectPrefixEvent( document, 'fullscreenchange' ) === 'webkitfullscreenchange'
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



// @returns the best String str where obj['on'+str] !== undefined, or returns undefined if that is not available
function detectPrefixEvent(obj, name, isEvent) {
  if (obj[`on${name}`] !== undefined) {
    return name;
  }

  // Chrome planning to not introduce prefixes in the future, hopefully we will be safe
  if (obj[`${'on' + 'moz'}${name}`] !== undefined) {
    return `moz${name}`;
  }
  if (obj[`${'on' + 'Moz'}${name}`] !== undefined) {
    return `Moz${name}`;
  } // some prefixes seem to have all-caps?
  if (obj[`${'on' + 'webkit'}${name}`] !== undefined) {
    return `webkit${name}`;
  }
  if (obj[`${'on' + 'ms'}${name}`] !== undefined) {
    return `ms${name}`;
  }
  if (obj[`${'on' + 'o'}${name}`] !== undefined) {
    return `o${name}`;
  }
  return undefined;
}
js_phetCore.register('detectPrefixEvent', detectPrefixEvent);
/* harmony default export */ const js_detectPrefixEvent = ((/* unused pure expression or super */ null && (detectPrefixEvent)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsImRldGVjdFByZWZpeEV2ZW50Iiwib2JqIiwibmFtZSIsImlzRXZlbnQiLCJ1bmRlZmluZWQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbImRldGVjdFByZWZpeEV2ZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuLyogZXNsaW50LWRpc2FibGUgbm8tdXNlbGVzcy1jb25jYXQgKi9cblxuLyoqXG4gKiBTY2FucyB0aHJvdWdoIHBvdGVudGlhbCBldmVudCBwcm9wZXJ0aWVzIG9uIGFuIG9iamVjdCB0byBkZXRlY3QgcHJlZml4ZWQgZm9ybXMsIGFuZCByZXR1cm5zIHRoZSBmaXJzdCBtYXRjaC5cbiAqXG4gKiBFLmcuIGN1cnJlbnRseTpcbiAqIHBoZXQucGhldENvcmUuZGV0ZWN0UHJlZml4RXZlbnQoIGRvY3VtZW50LCAnZnVsbHNjcmVlbmNoYW5nZScgKSA9PT0gJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnXG4gKlxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxuICovXG5cbmltcG9ydCBwaGV0Q29yZSBmcm9tICcuL3BoZXRDb3JlLmpzJztcblxuLy8gQHJldHVybnMgdGhlIGJlc3QgU3RyaW5nIHN0ciB3aGVyZSBvYmpbJ29uJytzdHJdICE9PSB1bmRlZmluZWQsIG9yIHJldHVybnMgdW5kZWZpbmVkIGlmIHRoYXQgaXMgbm90IGF2YWlsYWJsZVxuZnVuY3Rpb24gZGV0ZWN0UHJlZml4RXZlbnQoIG9iaiwgbmFtZSwgaXNFdmVudCApIHtcbiAgaWYgKCBvYmpbIGBvbiR7bmFtZX1gIF0gIT09IHVuZGVmaW5lZCApIHsgcmV0dXJuIG5hbWU7IH1cblxuICAvLyBDaHJvbWUgcGxhbm5pbmcgdG8gbm90IGludHJvZHVjZSBwcmVmaXhlcyBpbiB0aGUgZnV0dXJlLCBob3BlZnVsbHkgd2Ugd2lsbCBiZSBzYWZlXG4gIGlmICggb2JqWyBgJHsnb24nICsgJ21veid9JHtuYW1lfWAgXSAhPT0gdW5kZWZpbmVkICkgeyByZXR1cm4gYG1veiR7bmFtZX1gOyB9XG4gIGlmICggb2JqWyBgJHsnb24nICsgJ01veid9JHtuYW1lfWAgXSAhPT0gdW5kZWZpbmVkICkgeyByZXR1cm4gYE1veiR7bmFtZX1gOyB9IC8vIHNvbWUgcHJlZml4ZXMgc2VlbSB0byBoYXZlIGFsbC1jYXBzP1xuICBpZiAoIG9ialsgYCR7J29uJyArICd3ZWJraXQnfSR7bmFtZX1gIF0gIT09IHVuZGVmaW5lZCApIHsgcmV0dXJuIGB3ZWJraXQke25hbWV9YDsgfVxuICBpZiAoIG9ialsgYCR7J29uJyArICdtcyd9JHtuYW1lfWAgXSAhPT0gdW5kZWZpbmVkICkgeyByZXR1cm4gYG1zJHtuYW1lfWA7IH1cbiAgaWYgKCBvYmpbIGAkeydvbicgKyAnbyd9JHtuYW1lfWAgXSAhPT0gdW5kZWZpbmVkICkgeyByZXR1cm4gYG8ke25hbWV9YDsgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5waGV0Q29yZS5yZWdpc3RlciggJ2RldGVjdFByZWZpeEV2ZW50JywgZGV0ZWN0UHJlZml4RXZlbnQgKTtcblxuZXhwb3J0IGRlZmF1bHQgZGV0ZWN0UHJlZml4RXZlbnQ7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLGVBQWU7O0FBRXBDO0FBQ0EsU0FBU0MsaUJBQWlCQSxDQUFFQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFHO0VBQy9DLElBQUtGLEdBQUcsQ0FBRyxLQUFJQyxJQUFLLEVBQUMsQ0FBRSxLQUFLRSxTQUFTLEVBQUc7SUFBRSxPQUFPRixJQUFJO0VBQUU7O0VBRXZEO0VBQ0EsSUFBS0QsR0FBRyxDQUFHLEdBQUUsSUFBSSxHQUFHLEtBQU0sR0FBRUMsSUFBSyxFQUFDLENBQUUsS0FBS0UsU0FBUyxFQUFHO0lBQUUsT0FBUSxNQUFLRixJQUFLLEVBQUM7RUFBRTtFQUM1RSxJQUFLRCxHQUFHLENBQUcsR0FBRSxJQUFJLEdBQUcsS0FBTSxHQUFFQyxJQUFLLEVBQUMsQ0FBRSxLQUFLRSxTQUFTLEVBQUc7SUFBRSxPQUFRLE1BQUtGLElBQUssRUFBQztFQUFFLENBQUMsQ0FBQztFQUM5RSxJQUFLRCxHQUFHLENBQUcsR0FBRSxJQUFJLEdBQUcsUUFBUyxHQUFFQyxJQUFLLEVBQUMsQ0FBRSxLQUFLRSxTQUFTLEVBQUc7SUFBRSxPQUFRLFNBQVFGLElBQUssRUFBQztFQUFFO0VBQ2xGLElBQUtELEdBQUcsQ0FBRyxHQUFFLElBQUksR0FBRyxJQUFLLEdBQUVDLElBQUssRUFBQyxDQUFFLEtBQUtFLFNBQVMsRUFBRztJQUFFLE9BQVEsS0FBSUYsSUFBSyxFQUFDO0VBQUU7RUFDMUUsSUFBS0QsR0FBRyxDQUFHLEdBQUUsSUFBSSxHQUFHLEdBQUksR0FBRUMsSUFBSyxFQUFDLENBQUUsS0FBS0UsU0FBUyxFQUFHO0lBQUUsT0FBUSxJQUFHRixJQUFLLEVBQUM7RUFBRTtFQUN4RSxPQUFPRSxTQUFTO0FBQ2xCO0FBRUFMLFFBQVEsQ0FBQ00sUUFBUSxDQUFFLG1CQUFtQixFQUFFTCxpQkFBaUIsQ0FBRTtBQUUzRCxlQUFlQSxpQkFBaUIifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/dimensionForEach.js
// Copyright 2018-2021, University of Colorado Boulder

/**
 * ForEach for multidimensional arrays.
 *
 * e.g. dimensionForEach( 1, array, callback ) is equivalent to array.forEach( callback )
 * e.g. dimensionForEach( 2, [ [ 1, 2 ], [ 3, 4 ] ], f ) will call:
 *      f(1), f(2), f(3), f(4)
 *   OR more accurately (since it includes indices indicating how to reach that element:
 *      f(1,0,0), f(2,0,1), f(3,1,0), f(4,1,1)
 *   Notably, f(2,0,1) is called for the element 3 BECAUSE original[ 0 ][ 1 ] is the element 2
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



/**
 * @typedef {Array.<MultidimensionalArray.<*>|*>} MultidimensionalArray.<*>
 */

/**
 * @param {number} dimension - The dimension of the array (how many levels of nested arrays there are). For instance,
 *   [ 'a' ] is a 1-dimensional array, [ [ 'b' ] ] is a 2-dimensional array, etc.
 * @param {MultidimensionalArray.<*>} array - A multidimensional array of the specified dimension
 * @param {function} forEach - function( element: {*}, indices...: {Array.<number>} ). Called for each individual
 *   element. The indices are provided as the 2nd, 3rd, etc. parameters to the function (continues depending on the
 *   dimension). This is a generalization of the normal `forEach` function, which only provides the first index. Thus:
 *   array[ indices[ 0 ] ]...[ indices[ dimension - 1 ] ] === element
 */
function dimensionForEach(dimension, array, forEach) {
  // Will get indices pushed when we go deeper into the multidimensional array, and popped when we go back, so that
  // this essentially represents our "position" in the multidimensional array during iteration.
  const indices = [];

  /**
   * Responsible for iterating through a multidimensional array of the given dimension, while accumulating
   * indices.
   *
   * @param {number} dim
   * @param {MultidimensionalArray.<*>} arr
   */
  function recur(dim, arr) {
    return arr.forEach((element, index) => {
      // To process this element, we need to record our index (in case it is an array that we iterate through).
      indices.push(index);

      // Our base case, where recur was passed a 1-dimensional array
      if (dim === 1) {
        forEach(...[element].concat(indices));
      }
      // We have more dimensions
      else {
        recur(dim - 1, element);
      }

      // We are done with iteration
      indices.pop();
    });
  }
  return recur(dimension, array);
}
js_phetCore.register('dimensionForEach', dimensionForEach);
/* harmony default export */ const js_dimensionForEach = ((/* unused pure expression or super */ null && (dimensionForEach)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsImRpbWVuc2lvbkZvckVhY2giLCJkaW1lbnNpb24iLCJhcnJheSIsImZvckVhY2giLCJpbmRpY2VzIiwicmVjdXIiLCJkaW0iLCJhcnIiLCJlbGVtZW50IiwiaW5kZXgiLCJwdXNoIiwiY29uY2F0IiwicG9wIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJkaW1lbnNpb25Gb3JFYWNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIEZvckVhY2ggZm9yIG11bHRpZGltZW5zaW9uYWwgYXJyYXlzLlxuICpcbiAqIGUuZy4gZGltZW5zaW9uRm9yRWFjaCggMSwgYXJyYXksIGNhbGxiYWNrICkgaXMgZXF1aXZhbGVudCB0byBhcnJheS5mb3JFYWNoKCBjYWxsYmFjayApXG4gKiBlLmcuIGRpbWVuc2lvbkZvckVhY2goIDIsIFsgWyAxLCAyIF0sIFsgMywgNCBdIF0sIGYgKSB3aWxsIGNhbGw6XG4gKiAgICAgIGYoMSksIGYoMiksIGYoMyksIGYoNClcbiAqICAgT1IgbW9yZSBhY2N1cmF0ZWx5IChzaW5jZSBpdCBpbmNsdWRlcyBpbmRpY2VzIGluZGljYXRpbmcgaG93IHRvIHJlYWNoIHRoYXQgZWxlbWVudDpcbiAqICAgICAgZigxLDAsMCksIGYoMiwwLDEpLCBmKDMsMSwwKSwgZig0LDEsMSlcbiAqICAgTm90YWJseSwgZigyLDAsMSkgaXMgY2FsbGVkIGZvciB0aGUgZWxlbWVudCAzIEJFQ0FVU0Ugb3JpZ2luYWxbIDAgXVsgMSBdIGlzIHRoZSBlbGVtZW50IDJcbiAqXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XG4gKi9cblxuaW1wb3J0IHBoZXRDb3JlIGZyb20gJy4vcGhldENvcmUuanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtBcnJheS48TXVsdGlkaW1lbnNpb25hbEFycmF5LjwqPnwqPn0gTXVsdGlkaW1lbnNpb25hbEFycmF5LjwqPlxuICovXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGRpbWVuc2lvbiAtIFRoZSBkaW1lbnNpb24gb2YgdGhlIGFycmF5IChob3cgbWFueSBsZXZlbHMgb2YgbmVzdGVkIGFycmF5cyB0aGVyZSBhcmUpLiBGb3IgaW5zdGFuY2UsXG4gKiAgIFsgJ2EnIF0gaXMgYSAxLWRpbWVuc2lvbmFsIGFycmF5LCBbIFsgJ2InIF0gXSBpcyBhIDItZGltZW5zaW9uYWwgYXJyYXksIGV0Yy5cbiAqIEBwYXJhbSB7TXVsdGlkaW1lbnNpb25hbEFycmF5LjwqPn0gYXJyYXkgLSBBIG11bHRpZGltZW5zaW9uYWwgYXJyYXkgb2YgdGhlIHNwZWNpZmllZCBkaW1lbnNpb25cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZvckVhY2ggLSBmdW5jdGlvbiggZWxlbWVudDogeyp9LCBpbmRpY2VzLi4uOiB7QXJyYXkuPG51bWJlcj59ICkuIENhbGxlZCBmb3IgZWFjaCBpbmRpdmlkdWFsXG4gKiAgIGVsZW1lbnQuIFRoZSBpbmRpY2VzIGFyZSBwcm92aWRlZCBhcyB0aGUgMm5kLCAzcmQsIGV0Yy4gcGFyYW1ldGVycyB0byB0aGUgZnVuY3Rpb24gKGNvbnRpbnVlcyBkZXBlbmRpbmcgb24gdGhlXG4gKiAgIGRpbWVuc2lvbikuIFRoaXMgaXMgYSBnZW5lcmFsaXphdGlvbiBvZiB0aGUgbm9ybWFsIGBmb3JFYWNoYCBmdW5jdGlvbiwgd2hpY2ggb25seSBwcm92aWRlcyB0aGUgZmlyc3QgaW5kZXguIFRodXM6XG4gKiAgIGFycmF5WyBpbmRpY2VzWyAwIF0gXS4uLlsgaW5kaWNlc1sgZGltZW5zaW9uIC0gMSBdIF0gPT09IGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZGltZW5zaW9uRm9yRWFjaCggZGltZW5zaW9uLCBhcnJheSwgZm9yRWFjaCApIHtcblxuICAvLyBXaWxsIGdldCBpbmRpY2VzIHB1c2hlZCB3aGVuIHdlIGdvIGRlZXBlciBpbnRvIHRoZSBtdWx0aWRpbWVuc2lvbmFsIGFycmF5LCBhbmQgcG9wcGVkIHdoZW4gd2UgZ28gYmFjaywgc28gdGhhdFxuICAvLyB0aGlzIGVzc2VudGlhbGx5IHJlcHJlc2VudHMgb3VyIFwicG9zaXRpb25cIiBpbiB0aGUgbXVsdGlkaW1lbnNpb25hbCBhcnJheSBkdXJpbmcgaXRlcmF0aW9uLlxuICBjb25zdCBpbmRpY2VzID0gW107XG5cbiAgLyoqXG4gICAqIFJlc3BvbnNpYmxlIGZvciBpdGVyYXRpbmcgdGhyb3VnaCBhIG11bHRpZGltZW5zaW9uYWwgYXJyYXkgb2YgdGhlIGdpdmVuIGRpbWVuc2lvbiwgd2hpbGUgYWNjdW11bGF0aW5nXG4gICAqIGluZGljZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkaW1cbiAgICogQHBhcmFtIHtNdWx0aWRpbWVuc2lvbmFsQXJyYXkuPCo+fSBhcnJcbiAgICovXG4gIGZ1bmN0aW9uIHJlY3VyKCBkaW0sIGFyciApIHtcbiAgICByZXR1cm4gYXJyLmZvckVhY2goICggZWxlbWVudCwgaW5kZXggKSA9PiB7XG5cbiAgICAgIC8vIFRvIHByb2Nlc3MgdGhpcyBlbGVtZW50LCB3ZSBuZWVkIHRvIHJlY29yZCBvdXIgaW5kZXggKGluIGNhc2UgaXQgaXMgYW4gYXJyYXkgdGhhdCB3ZSBpdGVyYXRlIHRocm91Z2gpLlxuICAgICAgaW5kaWNlcy5wdXNoKCBpbmRleCApO1xuXG4gICAgICAvLyBPdXIgYmFzZSBjYXNlLCB3aGVyZSByZWN1ciB3YXMgcGFzc2VkIGEgMS1kaW1lbnNpb25hbCBhcnJheVxuICAgICAgaWYgKCBkaW0gPT09IDEgKSB7XG4gICAgICAgIGZvckVhY2goIC4uLlsgZWxlbWVudCBdLmNvbmNhdCggaW5kaWNlcyApICk7XG4gICAgICB9XG4gICAgICAvLyBXZSBoYXZlIG1vcmUgZGltZW5zaW9uc1xuICAgICAgZWxzZSB7XG4gICAgICAgIHJlY3VyKCBkaW0gLSAxLCBlbGVtZW50ICk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdlIGFyZSBkb25lIHdpdGggaXRlcmF0aW9uXG4gICAgICBpbmRpY2VzLnBvcCgpO1xuICAgIH0gKTtcbiAgfVxuXG4gIHJldHVybiByZWN1ciggZGltZW5zaW9uLCBhcnJheSApO1xufVxuXG5waGV0Q29yZS5yZWdpc3RlciggJ2RpbWVuc2lvbkZvckVhY2gnLCBkaW1lbnNpb25Gb3JFYWNoICk7XG5cbmV4cG9ydCBkZWZhdWx0IGRpbWVuc2lvbkZvckVhY2g7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLGVBQWU7O0FBRXBDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxnQkFBZ0JBLENBQUVDLFNBQVMsRUFBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUc7RUFFckQ7RUFDQTtFQUNBLE1BQU1DLE9BQU8sR0FBRyxFQUFFOztFQUVsQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFLFNBQVNDLEtBQUtBLENBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFHO0lBQ3pCLE9BQU9BLEdBQUcsQ0FBQ0osT0FBTyxDQUFFLENBQUVLLE9BQU8sRUFBRUMsS0FBSyxLQUFNO01BRXhDO01BQ0FMLE9BQU8sQ0FBQ00sSUFBSSxDQUFFRCxLQUFLLENBQUU7O01BRXJCO01BQ0EsSUFBS0gsR0FBRyxLQUFLLENBQUMsRUFBRztRQUNmSCxPQUFPLENBQUUsR0FBRyxDQUFFSyxPQUFPLENBQUUsQ0FBQ0csTUFBTSxDQUFFUCxPQUFPLENBQUUsQ0FBRTtNQUM3QztNQUNBO01BQUEsS0FDSztRQUNIQyxLQUFLLENBQUVDLEdBQUcsR0FBRyxDQUFDLEVBQUVFLE9BQU8sQ0FBRTtNQUMzQjs7TUFFQTtNQUNBSixPQUFPLENBQUNRLEdBQUcsRUFBRTtJQUNmLENBQUMsQ0FBRTtFQUNMO0VBRUEsT0FBT1AsS0FBSyxDQUFFSixTQUFTLEVBQUVDLEtBQUssQ0FBRTtBQUNsQztBQUVBSCxRQUFRLENBQUNjLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRWIsZ0JBQWdCLENBQUU7QUFFekQsZUFBZUEsZ0JBQWdCIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/dimensionMap.js
// Copyright 2018-2021, University of Colorado Boulder

/**
 * Map for multidimensional arrays.
 *
 * e.g. dimensionMap( 1, array, callback ) is equivalent to array.map( callback )
 * e.g. dimensionMap( 2, [ [ 1, 2 ], [ 3, 4 ] ], f ) will return
 *      [ [ f(1), f(2) ], [ f(3), f(4) ] ]
 *   OR more accurately (since it includes indices indicating how to reach that element:
 *      [ [ f(1,0,0), f(2,0,1) ], [ f(3,1,0), f(3,1,1) ] ]
 *   Notably, f(2,0,1) is called for the element 3 BECAUSE original[ 0 ][ 1 ] is the element 2
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



/**
 * @typedef {Array.<MultidimensionalArray.<*>|*>} MultidimensionalArray.<*>
 */

/**
 * @param {number} dimension - The dimension of the array (how many levels of nested arrays there are). For instance,
 *   [ 'a' ] is a 1-dimensional array, [ [ 'b' ] ] is a 2-dimensional array, etc.
 * @param {MultidimensionalArray.<*>} array - A multidimensional array of the specified dimension
 * @param {function} map - function( element: {*}, indices...: {Array.<number>} ): {*}. Called for each individual
 *   element. The indices are provided as the 2nd, 3rd, etc. parameters to the function (continues depending on the
 *   dimension). This is a generalization of the normal `map` function, which only provides the first index. Thus:
 *   array[ indices[ 0 ] ]...[ indices[ dimension - 1 ] ] === element
 * @returns {MultidimensionalArray.<*>} - A multidimensional array of the same dimension as our input, but with the
 *   values replaced with the return value of the map() calls for each element.
 */
function dimensionMap(dimension, array, map) {
  // Will get indices pushed when we go deeper into the multidimensional array, and popped when we go back, so that
  // this essentially represents our "position" in the multidimensional array during iteration.
  const indices = [];

  /**
   * Responsible for mapping a multidimensional array of the given dimension, while accumulating
   * indices.
   *
   * @param {number} dim
   * @param {MultidimensionalArray.<*>} arr
   * @returns {MultidimensionalArray.<*>}
   */
  function recur(dim, arr) {
    return arr.map((element, index) => {
      // To process this element, we need to record our index (in case it is an array that we iterate through).
      indices.push(index);

      // If our dimension is 1, it's our base case (apply the normal map function), otherwise continue recursively.
      const result = dim === 1 ? map(...[element].concat(indices)) : recur(dim - 1, element);

      // We are done with iteration
      indices.pop();
      return result;
    });
  }
  return recur(dimension, array);
}
js_phetCore.register('dimensionMap', dimensionMap);
/* harmony default export */ const js_dimensionMap = ((/* unused pure expression or super */ null && (dimensionMap)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsImRpbWVuc2lvbk1hcCIsImRpbWVuc2lvbiIsImFycmF5IiwibWFwIiwiaW5kaWNlcyIsInJlY3VyIiwiZGltIiwiYXJyIiwiZWxlbWVudCIsImluZGV4IiwicHVzaCIsInJlc3VsdCIsImNvbmNhdCIsInBvcCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiZGltZW5zaW9uTWFwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIE1hcCBmb3IgbXVsdGlkaW1lbnNpb25hbCBhcnJheXMuXG4gKlxuICogZS5nLiBkaW1lbnNpb25NYXAoIDEsIGFycmF5LCBjYWxsYmFjayApIGlzIGVxdWl2YWxlbnQgdG8gYXJyYXkubWFwKCBjYWxsYmFjayApXG4gKiBlLmcuIGRpbWVuc2lvbk1hcCggMiwgWyBbIDEsIDIgXSwgWyAzLCA0IF0gXSwgZiApIHdpbGwgcmV0dXJuXG4gKiAgICAgIFsgWyBmKDEpLCBmKDIpIF0sIFsgZigzKSwgZig0KSBdIF1cbiAqICAgT1IgbW9yZSBhY2N1cmF0ZWx5IChzaW5jZSBpdCBpbmNsdWRlcyBpbmRpY2VzIGluZGljYXRpbmcgaG93IHRvIHJlYWNoIHRoYXQgZWxlbWVudDpcbiAqICAgICAgWyBbIGYoMSwwLDApLCBmKDIsMCwxKSBdLCBbIGYoMywxLDApLCBmKDMsMSwxKSBdIF1cbiAqICAgTm90YWJseSwgZigyLDAsMSkgaXMgY2FsbGVkIGZvciB0aGUgZWxlbWVudCAzIEJFQ0FVU0Ugb3JpZ2luYWxbIDAgXVsgMSBdIGlzIHRoZSBlbGVtZW50IDJcbiAqXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XG4gKi9cblxuaW1wb3J0IHBoZXRDb3JlIGZyb20gJy4vcGhldENvcmUuanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtBcnJheS48TXVsdGlkaW1lbnNpb25hbEFycmF5LjwqPnwqPn0gTXVsdGlkaW1lbnNpb25hbEFycmF5LjwqPlxuICovXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGRpbWVuc2lvbiAtIFRoZSBkaW1lbnNpb24gb2YgdGhlIGFycmF5IChob3cgbWFueSBsZXZlbHMgb2YgbmVzdGVkIGFycmF5cyB0aGVyZSBhcmUpLiBGb3IgaW5zdGFuY2UsXG4gKiAgIFsgJ2EnIF0gaXMgYSAxLWRpbWVuc2lvbmFsIGFycmF5LCBbIFsgJ2InIF0gXSBpcyBhIDItZGltZW5zaW9uYWwgYXJyYXksIGV0Yy5cbiAqIEBwYXJhbSB7TXVsdGlkaW1lbnNpb25hbEFycmF5LjwqPn0gYXJyYXkgLSBBIG11bHRpZGltZW5zaW9uYWwgYXJyYXkgb2YgdGhlIHNwZWNpZmllZCBkaW1lbnNpb25cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG1hcCAtIGZ1bmN0aW9uKCBlbGVtZW50OiB7Kn0sIGluZGljZXMuLi46IHtBcnJheS48bnVtYmVyPn0gKTogeyp9LiBDYWxsZWQgZm9yIGVhY2ggaW5kaXZpZHVhbFxuICogICBlbGVtZW50LiBUaGUgaW5kaWNlcyBhcmUgcHJvdmlkZWQgYXMgdGhlIDJuZCwgM3JkLCBldGMuIHBhcmFtZXRlcnMgdG8gdGhlIGZ1bmN0aW9uIChjb250aW51ZXMgZGVwZW5kaW5nIG9uIHRoZVxuICogICBkaW1lbnNpb24pLiBUaGlzIGlzIGEgZ2VuZXJhbGl6YXRpb24gb2YgdGhlIG5vcm1hbCBgbWFwYCBmdW5jdGlvbiwgd2hpY2ggb25seSBwcm92aWRlcyB0aGUgZmlyc3QgaW5kZXguIFRodXM6XG4gKiAgIGFycmF5WyBpbmRpY2VzWyAwIF0gXS4uLlsgaW5kaWNlc1sgZGltZW5zaW9uIC0gMSBdIF0gPT09IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtNdWx0aWRpbWVuc2lvbmFsQXJyYXkuPCo+fSAtIEEgbXVsdGlkaW1lbnNpb25hbCBhcnJheSBvZiB0aGUgc2FtZSBkaW1lbnNpb24gYXMgb3VyIGlucHV0LCBidXQgd2l0aCB0aGVcbiAqICAgdmFsdWVzIHJlcGxhY2VkIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgbWFwKCkgY2FsbHMgZm9yIGVhY2ggZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gZGltZW5zaW9uTWFwKCBkaW1lbnNpb24sIGFycmF5LCBtYXAgKSB7XG5cbiAgLy8gV2lsbCBnZXQgaW5kaWNlcyBwdXNoZWQgd2hlbiB3ZSBnbyBkZWVwZXIgaW50byB0aGUgbXVsdGlkaW1lbnNpb25hbCBhcnJheSwgYW5kIHBvcHBlZCB3aGVuIHdlIGdvIGJhY2ssIHNvIHRoYXRcbiAgLy8gdGhpcyBlc3NlbnRpYWxseSByZXByZXNlbnRzIG91ciBcInBvc2l0aW9uXCIgaW4gdGhlIG11bHRpZGltZW5zaW9uYWwgYXJyYXkgZHVyaW5nIGl0ZXJhdGlvbi5cbiAgY29uc3QgaW5kaWNlcyA9IFtdO1xuXG4gIC8qKlxuICAgKiBSZXNwb25zaWJsZSBmb3IgbWFwcGluZyBhIG11bHRpZGltZW5zaW9uYWwgYXJyYXkgb2YgdGhlIGdpdmVuIGRpbWVuc2lvbiwgd2hpbGUgYWNjdW11bGF0aW5nXG4gICAqIGluZGljZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkaW1cbiAgICogQHBhcmFtIHtNdWx0aWRpbWVuc2lvbmFsQXJyYXkuPCo+fSBhcnJcbiAgICogQHJldHVybnMge011bHRpZGltZW5zaW9uYWxBcnJheS48Kj59XG4gICAqL1xuICBmdW5jdGlvbiByZWN1ciggZGltLCBhcnIgKSB7XG4gICAgcmV0dXJuIGFyci5tYXAoICggZWxlbWVudCwgaW5kZXggKSA9PiB7XG5cbiAgICAgIC8vIFRvIHByb2Nlc3MgdGhpcyBlbGVtZW50LCB3ZSBuZWVkIHRvIHJlY29yZCBvdXIgaW5kZXggKGluIGNhc2UgaXQgaXMgYW4gYXJyYXkgdGhhdCB3ZSBpdGVyYXRlIHRocm91Z2gpLlxuICAgICAgaW5kaWNlcy5wdXNoKCBpbmRleCApO1xuXG4gICAgICAvLyBJZiBvdXIgZGltZW5zaW9uIGlzIDEsIGl0J3Mgb3VyIGJhc2UgY2FzZSAoYXBwbHkgdGhlIG5vcm1hbCBtYXAgZnVuY3Rpb24pLCBvdGhlcndpc2UgY29udGludWUgcmVjdXJzaXZlbHkuXG4gICAgICBjb25zdCByZXN1bHQgPSBkaW0gPT09IDEgPyBtYXAoIC4uLlsgZWxlbWVudCBdLmNvbmNhdCggaW5kaWNlcyApICkgOiByZWN1ciggZGltIC0gMSwgZWxlbWVudCApO1xuXG4gICAgICAvLyBXZSBhcmUgZG9uZSB3aXRoIGl0ZXJhdGlvblxuICAgICAgaW5kaWNlcy5wb3AoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSApO1xuICB9XG5cbiAgcmV0dXJuIHJlY3VyKCBkaW1lbnNpb24sIGFycmF5ICk7XG59XG5cbnBoZXRDb3JlLnJlZ2lzdGVyKCAnZGltZW5zaW9uTWFwJywgZGltZW5zaW9uTWFwICk7XG5cbmV4cG9ydCBkZWZhdWx0IGRpbWVuc2lvbk1hcDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sZUFBZTs7QUFFcEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxZQUFZQSxDQUFFQyxTQUFTLEVBQUVDLEtBQUssRUFBRUMsR0FBRyxFQUFHO0VBRTdDO0VBQ0E7RUFDQSxNQUFNQyxPQUFPLEdBQUcsRUFBRTs7RUFFbEI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFLFNBQVNDLEtBQUtBLENBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFHO0lBQ3pCLE9BQU9BLEdBQUcsQ0FBQ0osR0FBRyxDQUFFLENBQUVLLE9BQU8sRUFBRUMsS0FBSyxLQUFNO01BRXBDO01BQ0FMLE9BQU8sQ0FBQ00sSUFBSSxDQUFFRCxLQUFLLENBQUU7O01BRXJCO01BQ0EsTUFBTUUsTUFBTSxHQUFHTCxHQUFHLEtBQUssQ0FBQyxHQUFHSCxHQUFHLENBQUUsR0FBRyxDQUFFSyxPQUFPLENBQUUsQ0FBQ0ksTUFBTSxDQUFFUixPQUFPLENBQUUsQ0FBRSxHQUFHQyxLQUFLLENBQUVDLEdBQUcsR0FBRyxDQUFDLEVBQUVFLE9BQU8sQ0FBRTs7TUFFOUY7TUFDQUosT0FBTyxDQUFDUyxHQUFHLEVBQUU7TUFDYixPQUFPRixNQUFNO0lBQ2YsQ0FBQyxDQUFFO0VBQ0w7RUFFQSxPQUFPTixLQUFLLENBQUVKLFNBQVMsRUFBRUMsS0FBSyxDQUFFO0FBQ2xDO0FBRUFILFFBQVEsQ0FBQ2UsUUFBUSxDQUFFLGNBQWMsRUFBRWQsWUFBWSxDQUFFO0FBRWpELGVBQWVBLFlBQVkifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/EnumerationMap.js
// Copyright 2019-2022, University of Colorado Boulder

/**
 * An object that contains a value for each item in an enumeration.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */


// T = enumeration value type
// U = mapped value type
class EnumerationMap {
  _map = new Map();
  /**
   * @param enumeration
   * @param factory - function( {TEnumeration.*} ) => {*}, maps an enumeration value to any value.
   */
  constructor(enumeration, factory) {
    this._enumeration = enumeration;
    this._values = enumeration.enumeration.values;
    this._values.forEach(entry => {
      assert && assert(!this._map.has(entry), 'Enumeration key override problem');
      this._map.set(entry, factory(entry));
    });
  }

  /**
   * Returns the value associated with the given enumeration entry.
   */
  get(entry) {
    assert && assert(this._values.includes(entry));
    assert && assert(this._map.has(entry));
    return this._map.get(entry);
  }

  /**
   * Sets the value associated with the given enumeration entry.
   */
  set(entry, value) {
    assert && assert(this._values.includes(entry));
    this._map.set(entry, value);
  }

  /**
   * Returns a new EnumerationMap with mapped values.
   *
   * @param mapFunction - function( {*}, {TEnumeration.*} ): {*}
   * @returns With the mapped values
   */
  map(mapFunction) {
    return new EnumerationMap(this._enumeration, entry => mapFunction(this.get(entry), entry));
  }

  /**
   * Calls the callback on each item of the enumeration map.
   *
   * @param callback - function(value:*, enumerationValue:*)
   */
  forEach(callback) {
    this._values.forEach(entry => callback(this.get(entry), entry));
  }

  /**
   * Returns the values stored in the map, as an array
   *
   */
  values() {
    return this._values.map(entry => this.get(entry));
  }
}
js_phetCore.register('EnumerationMap', EnumerationMap);
/* harmony default export */ const js_EnumerationMap = (EnumerationMap);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsIkVudW1lcmF0aW9uTWFwIiwiX21hcCIsIk1hcCIsImNvbnN0cnVjdG9yIiwiZW51bWVyYXRpb24iLCJmYWN0b3J5IiwiX2VudW1lcmF0aW9uIiwiX3ZhbHVlcyIsInZhbHVlcyIsImZvckVhY2giLCJlbnRyeSIsImFzc2VydCIsImhhcyIsInNldCIsImdldCIsImluY2x1ZGVzIiwidmFsdWUiLCJtYXAiLCJtYXBGdW5jdGlvbiIsImNhbGxiYWNrIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbnVtZXJhdGlvbk1hcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBBbiBvYmplY3QgdGhhdCBjb250YWlucyBhIHZhbHVlIGZvciBlYWNoIGl0ZW0gaW4gYW4gZW51bWVyYXRpb24uXG4gKlxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxuICovXG5cbmltcG9ydCBwaGV0Q29yZSBmcm9tICcuL3BoZXRDb3JlLmpzJztcblxudHlwZSBURW51bWVyYXRpb248VD4gPSB7XG4gIGVudW1lcmF0aW9uOiB7XG4gICAgdmFsdWVzOiBUW107XG4gIH07XG59O1xuXG4vLyBUID0gZW51bWVyYXRpb24gdmFsdWUgdHlwZVxuLy8gVSA9IG1hcHBlZCB2YWx1ZSB0eXBlXG5jbGFzcyBFbnVtZXJhdGlvbk1hcDxULCBVPiB7XG4gIHByaXZhdGUgcmVhZG9ubHkgX2VudW1lcmF0aW9uOiBURW51bWVyYXRpb248VD47XG4gIHByaXZhdGUgX21hcCA9IG5ldyBNYXA8VCwgVT4oKTtcbiAgcHJpdmF0ZSBfdmFsdWVzOiBUW107XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBlbnVtZXJhdGlvblxuICAgKiBAcGFyYW0gZmFjdG9yeSAtIGZ1bmN0aW9uKCB7VEVudW1lcmF0aW9uLip9ICkgPT4geyp9LCBtYXBzIGFuIGVudW1lcmF0aW9uIHZhbHVlIHRvIGFueSB2YWx1ZS5cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZW51bWVyYXRpb246IFRFbnVtZXJhdGlvbjxUPiwgZmFjdG9yeTogKCB0OiBUICkgPT4gVSApIHtcblxuICAgIHRoaXMuX2VudW1lcmF0aW9uID0gZW51bWVyYXRpb247XG5cbiAgICB0aGlzLl92YWx1ZXMgPSBlbnVtZXJhdGlvbi5lbnVtZXJhdGlvbi52YWx1ZXM7XG4gICAgdGhpcy5fdmFsdWVzLmZvckVhY2goIGVudHJ5ID0+IHtcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoICF0aGlzLl9tYXAuaGFzKCBlbnRyeSApLCAnRW51bWVyYXRpb24ga2V5IG92ZXJyaWRlIHByb2JsZW0nICk7XG4gICAgICB0aGlzLl9tYXAuc2V0KCBlbnRyeSwgZmFjdG9yeSggZW50cnkgKSApO1xuICAgIH0gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIGVudW1lcmF0aW9uIGVudHJ5LlxuICAgKi9cbiAgcHVibGljIGdldCggZW50cnk6IFQgKTogVSB7XG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5fdmFsdWVzLmluY2x1ZGVzKCBlbnRyeSApICk7XG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5fbWFwLmhhcyggZW50cnkgKSApO1xuICAgIHJldHVybiB0aGlzLl9tYXAuZ2V0KCBlbnRyeSApITtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIGVudW1lcmF0aW9uIGVudHJ5LlxuICAgKi9cbiAgcHVibGljIHNldCggZW50cnk6IFQsIHZhbHVlOiBVICk6IHZvaWQge1xuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMuX3ZhbHVlcy5pbmNsdWRlcyggZW50cnkgKSApO1xuICAgIHRoaXMuX21hcC5zZXQoIGVudHJ5LCB2YWx1ZSApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgRW51bWVyYXRpb25NYXAgd2l0aCBtYXBwZWQgdmFsdWVzLlxuICAgKlxuICAgKiBAcGFyYW0gbWFwRnVuY3Rpb24gLSBmdW5jdGlvbiggeyp9LCB7VEVudW1lcmF0aW9uLip9ICk6IHsqfVxuICAgKiBAcmV0dXJucyBXaXRoIHRoZSBtYXBwZWQgdmFsdWVzXG4gICAqL1xuICBwdWJsaWMgbWFwKCBtYXBGdW5jdGlvbjogKCB1OiBVLCB0OiBUICkgPT4gVSApOiBFbnVtZXJhdGlvbk1hcDxULCBVPiB7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGlvbk1hcCggdGhpcy5fZW51bWVyYXRpb24sIGVudHJ5ID0+IG1hcEZ1bmN0aW9uKCB0aGlzLmdldCggZW50cnkgKSwgZW50cnkgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIHRoZSBjYWxsYmFjayBvbiBlYWNoIGl0ZW0gb2YgdGhlIGVudW1lcmF0aW9uIG1hcC5cbiAgICpcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gZnVuY3Rpb24odmFsdWU6KiwgZW51bWVyYXRpb25WYWx1ZToqKVxuICAgKi9cbiAgcHVibGljIGZvckVhY2goIGNhbGxiYWNrOiAoIHU6IFUsIHQ6IFQgKSA9PiB2b2lkICk6IHZvaWQge1xuICAgIHRoaXMuX3ZhbHVlcy5mb3JFYWNoKCBlbnRyeSA9PiBjYWxsYmFjayggdGhpcy5nZXQoIGVudHJ5ICksIGVudHJ5ICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB2YWx1ZXMgc3RvcmVkIGluIHRoZSBtYXAsIGFzIGFuIGFycmF5XG4gICAqXG4gICAqL1xuICBwdWJsaWMgdmFsdWVzKCk6IFVbXSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlcy5tYXAoIGVudHJ5ID0+IHRoaXMuZ2V0KCBlbnRyeSApICk7XG4gIH1cbn1cblxucGhldENvcmUucmVnaXN0ZXIoICdFbnVtZXJhdGlvbk1hcCcsIEVudW1lcmF0aW9uTWFwICk7XG5leHBvcnQgZGVmYXVsdCBFbnVt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
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/escapeHTML.js
// Copyright 2013-2020, University of Colorado Boulder

/**
 * Escaping of HTML content that will be placed in the body, inside an element as a node.
 *
 * This is NOT for escaping something in other HTML contexts, for example as an attribute value
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */


function escapeHTML(str) {
  // see https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
  // HTML Entity Encoding
  return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\//g, '&#x2F;');
}
js_phetCore.register('escapeHTML', escapeHTML);
/* harmony default export */ const js_escapeHTML = ((/* unused pure expression or super */ null && (escapeHTML)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsImVzY2FwZUhUTUwiLCJzdHIiLCJyZXBsYWNlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJlc2NhcGVIVE1MLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIEVzY2FwaW5nIG9mIEhUTUwgY29udGVudCB0aGF0IHdpbGwgYmUgcGxhY2VkIGluIHRoZSBib2R5LCBpbnNpZGUgYW4gZWxlbWVudCBhcyBhIG5vZGUuXG4gKlxuICogVGhpcyBpcyBOT1QgZm9yIGVzY2FwaW5nIHNvbWV0aGluZyBpbiBvdGhlciBIVE1MIGNvbnRleHRzLCBmb3IgZXhhbXBsZSBhcyBhbiBhdHRyaWJ1dGUgdmFsdWVcbiAqXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XG4gKi9cblxuaW1wb3J0IHBoZXRDb3JlIGZyb20gJy4vcGhldENvcmUuanMnO1xuXG5mdW5jdGlvbiBlc2NhcGVIVE1MKCBzdHIgKSB7XG4gIC8vIHNlZSBodHRwczovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL1hTU18oQ3Jvc3NfU2l0ZV9TY3JpcHRpbmcpX1ByZXZlbnRpb25fQ2hlYXRfU2hlZXRcbiAgLy8gSFRNTCBFbnRpdHkgRW5jb2RpbmdcbiAgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKCAvJi9nLCAnJmFtcDsnIClcbiAgICAucmVwbGFjZSggLzwvZywgJyZsdDsnIClcbiAgICAucmVwbGFjZSggLz4vZywgJyZndDsnIClcbiAgICAucmVwbGFjZSggL1wiL2csICcmcXVvdDsnIClcbiAgICAucmVwbGFjZSggLycvZywgJyYjeDI3OycgKVxuICAgIC5yZXBsYWNlKCAvXFwvL2csICcmI3gyRjsnICk7XG59XG5cbnBoZXRDb3JlLnJlZ2lzdGVyKCAnZXNjYXBlSFRNTCcsIGVzY2FwZUhUTUwgKTtcblxuZXhwb3J0IGRlZmF1bHQgZXNjYXBlSFRNTDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSxlQUFlO0FBRXBDLFNBQVNDLFVBQVVBLENBQUVDLEdBQUcsRUFBRztFQUN6QjtFQUNBO0VBQ0EsT0FBT0EsR0FBRyxDQUNQQyxPQUFPLENBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBRSxDQUN4QkEsT0FBTyxDQUFFLElBQUksRUFBRSxNQUFNLENBQUUsQ0FDdkJBLE9BQU8sQ0FBRSxJQUFJLEVBQUUsTUFBTSxDQUFFLENBQ3ZCQSxPQUFPLENBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBRSxDQUN6QkEsT0FBTyxDQUFFLElBQUksRUFBRSxRQUFRLENBQUUsQ0FDekJBLE9BQU8sQ0FBRSxLQUFLLEVBQUUsUUFBUSxDQUFFO0FBQy9CO0FBRUFILFFBQVEsQ0FBQ0ksUUFBUSxDQUFFLFlBQVksRUFBRUgsVUFBVSxDQUFFO0FBRTdDLGVBQWVBLFVBQVUifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/EventTimer.js
// Copyright 2014-2023, University of Colorado Boulder

/**
 * Abstraction for timed-event series that helps with variable frame-rates. Useful for things that need to happen at a
 * specific rate real-time regardless of the frame-rate.
 *
 * An EventTimer is created with a specific event "model" that determines when events occur, and a callback that will
 * be triggered for each event (with its time elapsed since it should have occurred). Thus, each callback basically
 * says:
 * - "an event happened <timeElapsed> ago"
 *
 * To have the EventTimer step forward in time (firing callbacks for every event that would have occurred over that
 * time frame, if any), call step( realTimeElapsed ).
 *
 * -----------------------------------------
 *
 * For example, create a timer with a constant rate that will fire events every 1 time units:
 *
 * var timer = new phet.phetCore.EventTimer( new phetCore.EventTimer.ConstantEventModel( 1 ), function( timeElapsed ) {
 *   console.log( 'event with timeElapsed: ' + timeElapsed );
 * } );
 *
 * Stepping once for 1.5 time units will fire once (0.5 seconds since the "end" of the step), and will be 0.5 seconds
 * from the next step:
 *
 * timer.step( 1.5 );
 * > event with timeElapsed: 0.5
 *
 * The 0.5 above is because after 1.5 seconds of time, the event will have happened 0.5 seconds ago:
 *
 *           step 1.5
 * |------------------------>|
 * |                *        |          *                     *    <- constant time of 1 between each event
 * |                <--------|
 *                 0.5 seconds past the event now
 *
 * Stepping for a longer time will result in more events:
 *
 * timer.step( 6 );
 * > event with timeElapsed: 5.5
 * > event with timeElapsed: 4.5
 * > event with timeElapsed: 3.5
 * > event with timeElapsed: 2.5
 * > event with timeElapsed: 1.5
 * > event with timeElapsed: 0.5
 *
 *       step 1.5                                  step 6                                 step 0   step 1.5
 * |---------------->|---------------------------------------------------------------------->|---------------->|
 * |           *           *           *           *           *           *           *           *           *
 * |           <-----|     <-----------------------------------------------------------------|     <-----------|
 * |          0.5         5.5          <-----------------------------------------------------|     1           0
 * |           ^           ^          4.5          <-----------------------------------------|              event at
 * |           |           |                      3.5          <-----------------------------|              current
 * |           |           |                                  2.5          <-----------------|              time
 * |     callback( t ) called, etc.                                       1.5          <-----|
 * |
 *
 * A step with zero time will trigger no events:
 *
 * timer.step( 0 );
 *
 * The timer will fire an event once it reaches the exact point in time:
 *
 * timer.step( 1.5 );
 * > event with timeElapsed: 1
 * > event with timeElapsed: 0
 *
 * NOTE:
 * If your timer callbacks create model objects that would also get stepped forward, make sure to step forward objects
 * before calling eventTimer.step(), so that objects don't get stepped twice. Usually the callback will have:
 * - var modelElement = new ModelElement();
 * - modelElement.step( callbackTimeElapsed );
 * And you don't want to apply step( dt ) to it directly afterwards.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */


class EventTimer {
  /*
   * Create an event timer with a specific model (determines the time between events), and a callback to be called
   * for events.
   *
   * @param eventModel: getPeriodBeforeNextEvent() will be called at
   *    the start and after every event to determine the time required to pass by before the next event occurs.
   * @param eventCallback - Will be called for every event. The timeElapsed passed in as the
   *    only argument denotes the time elapsed since the event would have occurred. E.g. if we step for 5 seconds and
   *    our event would have occurred 1 second into that step, the timeElapsed will be 4 seconds, since after the end
   *    of the 5 seconds the event would have happened 4 seconds ago.
   */
  constructor(eventModel, eventCallback) {
    this.eventModel = eventModel;
    this.eventCallback = eventCallback;
    this.period = this.eventModel.getPeriodBeforeNextEvent();
    this.timeBeforeNextEvent = this.period;
  }

  /**
   * Steps the timer forward by a certain amount of time. This may cause 0 or more events to actually occur.
   */
  step(dt) {
    while (dt >= this.timeBeforeNextEvent) {
      dt -= this.timeBeforeNextEvent;
      this.period = this.eventModel.getPeriodBeforeNextEvent();
      this.timeBeforeNextEvent = this.period;

      // how much time has elapsed since this event began
      this.eventCallback(dt);
    }

    // use up the remaining DT
    this.timeBeforeNextEvent -= dt;
  }

  /**
   * Returns how far we are to the next event firing (where 0 is an event "just" fired, and 1 is the next event
   * firing).
   *
   * @returns In the range [0,1). Is inclusive for 0, but exclusive for 1.
   */
  getRatio() {
    return (this.period - this.timeBeforeNextEvent) / this.period;
  }
  static ConstantEventModel = class ConstantEventModel {
    /*
     * Event model that will fire events at a constant rate. An event will occur every 1/rate time units.
     */
    constructor(rate) {
      this.rate = rate;
      assert && assert(rate > 0, 'We need to have a strictly positive rate in order to prevent infinite loops.');
    }
    getPeriodBeforeNextEvent() {
      return 1 / this.rate;
    }
  };
  static UniformEventModel = class UniformEventModel {
    /*
     * Event model that will fire events averaging a certain rate, but with the time between events being uniformly
     * random.
     *
     * The pseudoRandomNumberSource, when called, should generate uniformly distributed random numbers in the range [0,1).
     */
    constructor(rate, pseudoRandomNumberSource) {
      this.rate = rate;
      this.pseudoRandomNumberSource = pseudoRandomNumberSource;
      assert && assert(rate > 0, 'We need to have a strictly positive rate in order to prevent infinite loops.');
    }
    getPeriodBeforeNextEvent() {
      const uniformRandomNumber = this.pseudoRandomNumberSource();
      assert && assert(uniformRandomNumber >= 0 && uniformRandomNumber < 1, `Our uniform random number is outside of its expected range with a value of ${uniformRandomNumber}`);

      // sample the exponential distribution
      return uniformRandomNumber * 2 / this.rate;
    }
  };
  static PoissonEventModel = class PoissonEventModel {
    /*
     * Event model that will fire events corresponding to a Poisson process with the specified rate.
     * The pseudoRandomNumberSource, when called, should generate uniformly distributed random numbers in the range [0,1).
     */
    constructor(rate, pseudoRandomNumberSource) {
      this.rate = rate;
      this.pseudoRandomNumberSource = pseudoRandomNumberSource;
      assert && assert(rate > 0, 'We need to have a strictly positive poisson rate in order to prevent infinite loops.');
    }
    getPeriodBeforeNextEvent() {
      // A poisson process can be described as having an independent exponential distribution for the time between
      // consecutive events.
      // see http://en.wikipedia.org/wiki/Exponential_distribution#Generating_exponential_variates and
      // http://en.wikipedia.org/wiki/Poisson_process

      const uniformRandomNumber = this.pseudoRandomNumberSource();
      assert && assert(uniformRandomNumber >= 0 && uniformRandomNumber < 1, `Our uniform random number is outside of its expected range with a value of ${uniformRandomNumber}`);

      // sample the exponential distribution
      return -Math.log(uniformRandomNumber) / this.rate;
    }
  };
}
js_phetCore.register('EventTimer', EventTimer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/extend.js
// Copyright 2013-2021, University of Colorado Boulder

/**
 * Like Underscore's _.extend and PHET_CORE/merge, but with hardcoded support for ES5 getters/setters. In general this
 * type shouldn't be used for phet's options pattern, and instead was designed to support extension for defining
 * mixins and object prototypes.
 *
 * See https://github.com/documentcloud/underscore/pull/986.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */


function extend(obj) {
  // eslint-disable-next-line prefer-rest-params
  _.each(Array.prototype.slice.call(arguments, 1), source => {
    if (source) {
      for (const prop in source) {
        Object.defineProperty(obj, prop, Object.getOwnPropertyDescriptor(source, prop));
      }
    }
  });
  return obj;
}
js_phetCore.register('extend', extend);
/* harmony default export */ const js_extend = (extend);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsImV4dGVuZCIsIm9iaiIsIl8iLCJlYWNoIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJwcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbImV4dGVuZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBMaWtlIFVuZGVyc2NvcmUncyBfLmV4dGVuZCBhbmQgUEhFVF9DT1JFL21lcmdlLCBidXQgd2l0aCBoYXJkY29kZWQgc3VwcG9ydCBmb3IgRVM1IGdldHRlcnMvc2V0dGVycy4gSW4gZ2VuZXJhbCB0aGlzXG4gKiB0eXBlIHNob3VsZG4ndCBiZSB1c2VkIGZvciBwaGV0J3Mgb3B0aW9ucyBwYXR0ZXJuLCBhbmQgaW5zdGVhZCB3YXMgZGVzaWduZWQgdG8gc3VwcG9ydCBleHRlbnNpb24gZm9yIGRlZmluaW5nXG4gKiBtaXhpbnMgYW5kIG9iamVjdCBwcm90b3R5cGVzLlxuICpcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZG9jdW1lbnRjbG91ZC91bmRlcnNjb3JlL3B1bGwvOTg2LlxuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cbiAqL1xuXG5pbXBvcnQgcGhldENvcmUgZnJvbSAnLi9waGV0Q29yZS5qcyc7XG5cbmZ1bmN0aW9uIGV4dGVuZCggb2JqICkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gIF8uZWFjaCggQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMSApLCBzb3VyY2UgPT4ge1xuICAgIGlmICggc291cmNlICkge1xuICAgICAgZm9yICggY29uc3QgcHJvcCBpbiBzb3VyY2UgKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb2JqLCBwcm9wLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKCBzb3VyY2UsIHByb3AgKSApO1xuICAgICAgfVxuICAgIH1cbiAgfSApO1xuICByZXR1cm4gb2JqO1xufVxuXG5waGV0Q29yZS5yZWdpc3RlciggJ2V4dGVuZCcsIGV4dGVuZCApO1xuXG5leHBvcnQgZGVmYXVsdCBleHRlbmQ7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLGVBQWU7QUFFcEMsU0FBU0MsTUFBTUEsQ0FBRUMsR0FBRyxFQUFHO0VBQ3JCO0VBQ0FDLENBQUMsQ0FBQ0MsSUFBSSxDQUFFQyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUVDLFNBQVMsRUFBRSxDQUFDLENBQUUsRUFBRUMsTUFBTSxJQUFJO0lBQzVELElBQUtBLE1BQU0sRUFBRztNQUNaLEtBQU0sTUFBTUMsSUFBSSxJQUFJRCxNQUFNLEVBQUc7UUFDM0JFLE1BQU0sQ0FBQ0MsY0FBYyxDQUFFWCxHQUFHLEVBQUVTLElBQUksRUFBRUMsTUFBTSxDQUFDRSx3QkFBd0IsQ0FBRUosTUFBTSxFQUFFQyxJQUFJLENBQUUsQ0FBRTtNQUNyRjtJQUNGO0VBQ0YsQ0FBQyxDQUFFO0VBQ0gsT0FBT1QsR0FBRztBQUNaO0FBRUFGLFFBQVEsQ0FBQ2UsUUFBUSxDQUFFLFFBQVEsRUFBRWQsTUFBTSxDQUFFO0FBRXJDLGVBQWVBLE1BQU0ifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/extendDefined.js
// Copyright 2016-2021, University of Colorado Boulder

/**
 * Like phet-core's extend, but does not overwrite properties with undefined values.
 *
 * For example:
 *
 * extendDefined( { a: 5 }, { a: undefined } ) will return { a: 5 }
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */


function extendDefined(obj) {
  // eslint-disable-next-line prefer-rest-params
  _.each(Array.prototype.slice.call(arguments, 1), source => {
    if (source) {
      for (const prop in source) {
        const descriptor = Object.getOwnPropertyDescriptor(source, prop);
        if (descriptor && (typeof descriptor.get === 'function' || source[prop] !== undefined)) {
          Object.defineProperty(obj, prop, descriptor);
        }
      }
    }
  });
  return obj;
}
js_phetCore.register('extendDefined', extendDefined);
/* harmony default export */ const js_extendDefined = ((/* unused pure expression or super */ null && (extendDefined)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsImV4dGVuZERlZmluZWQiLCJvYmoiLCJfIiwiZWFjaCIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiYXJndW1lbnRzIiwic291cmNlIiwicHJvcCIsImRlc2NyaXB0b3IiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXQiLCJ1bmRlZmluZWQiLCJkZWZpbmVQcm9wZXJ0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiZXh0ZW5kRGVmaW5lZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBMaWtlIHBoZXQtY29yZSdzIGV4dGVuZCwgYnV0IGRvZXMgbm90IG92ZXJ3cml0ZSBwcm9wZXJ0aWVzIHdpdGggdW5kZWZpbmVkIHZhbHVlcy5cbiAqXG4gKiBGb3IgZXhhbXBsZTpcbiAqXG4gKiBleHRlbmREZWZpbmVkKCB7IGE6IDUgfSwgeyBhOiB1bmRlZmluZWQgfSApIHdpbGwgcmV0dXJuIHsgYTogNSB9XG4gKlxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxuICovXG5cbmltcG9ydCBwaGV0Q29yZSBmcm9tICcuL3BoZXRDb3JlLmpzJztcblxuZnVuY3Rpb24gZXh0ZW5kRGVmaW5lZCggb2JqICkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gIF8uZWFjaCggQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMSApLCBzb3VyY2UgPT4ge1xuICAgIGlmICggc291cmNlICkge1xuICAgICAgZm9yICggY29uc3QgcHJvcCBpbiBzb3VyY2UgKSB7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKCBzb3VyY2UsIHByb3AgKTtcblxuICAgICAgICBpZiAoIGRlc2NyaXB0b3IgJiYgKCB0eXBlb2YgZGVzY3JpcHRvci5nZXQgPT09ICdmdW5jdGlvbicgfHwgc291cmNlWyBwcm9wIF0gIT09IHVuZGVmaW5lZCApICkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb2JqLCBwcm9wLCBkZXNjcmlwdG9yICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gKTtcbiAgcmV0dXJuIG9iajtcbn1cblxucGhldENvcmUucmVnaXN0ZXIoICdleHRlbmREZWZpbmVkJywgZXh0ZW5kRGVmaW5lZCApO1xuXG5leHBvcnQgZGVmYXVsdCBleHRlbmREZWZpbmVkOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSxlQUFlO0FBRXBDLFNBQVNDLGFBQWFBLENBQUVDLEdBQUcsRUFBRztFQUM1QjtFQUNBQyxDQUFDLENBQUNDLElBQUksQ0FBRUMsS0FBSyxDQUFDQyxTQUFTLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFFQyxTQUFTLEVBQUUsQ0FBQyxDQUFFLEVBQUVDLE1BQU0sSUFBSTtJQUM1RCxJQUFLQSxNQUFNLEVBQUc7TUFDWixLQUFNLE1BQU1DLElBQUksSUFBSUQsTUFBTSxFQUFHO1FBQzNCLE1BQU1FLFVBQVUsR0FBR0MsTUFBTSxDQUFDQyx3QkFBd0IsQ0FBRUosTUFBTSxFQUFFQyxJQUFJLENBQUU7UUFFbEUsSUFBS0MsVUFBVSxLQUFNLE9BQU9BLFVBQVUsQ0FBQ0csR0FBRyxLQUFLLFVBQVUsSUFBSUwsTUFBTSxDQUFFQyxJQUFJLENBQUUsS0FBS0ssU0FBUyxDQUFFLEVBQUc7VUFDNUZILE1BQU0sQ0FBQ0ksY0FBYyxDQUFFZixHQUFHLEVBQUVTLElBQUksRUFBRUMsVUFBVSxDQUFFO1FBQ2hEO01BQ0Y7SUFDRjtFQUNGLENBQUMsQ0FBRTtFQUNILE9BQU9WLEdBQUc7QUFDWjtBQUVBRixRQUFRLENBQUNrQixRQUFRLENBQUUsZUFBZSxFQUFFakIsYUFBYSxDQUFFO0FBRW5ELGVBQWVBLGFBQWEifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/interleave.js
// Copyright 2018-2020, University of Colorado Boulder

/**
 * Returns a copy of an array, with generated elements interleaved (inserted in-between) every element. For example, if
 * you call `interleave( [ a, b, c ], Math.random )`, it will result in the equivalent:
 * `[ a, Math.random(), b, Math.random(), c ]`.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



/*
 * @public
 * @param {Array.<*>} arr - The array in which to interleave elements
 * @param {function} generator - function( index: {number} ):{*} - 0-based index for which "separator" it is for. e.g.
 *                               [ _, f(0), _, f(1), _, f(2), ..., _ ]
 * @returns {Array.<*>}
 */
function interleave(arr, generator) {
  assert && assert(Array.isArray(arr));
  assert && assert(typeof generator === 'function');
  const result = [];
  const finalLength = arr.length * 2 - 1;
  for (let i = 0; i < finalLength; i++) {
    if (i % 2 === 0) {
      result.push(arr[i / 2]);
    } else {
      result.push(generator((i - 1) / 2));
    }
  }
  return result;
}
js_phetCore.register('interleave', interleave);
/* harmony default export */ const js_interleave = ((/* unused pure expression or super */ null && (interleave)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsImludGVybGVhdmUiLCJhcnIiLCJnZW5lcmF0b3IiLCJhc3NlcnQiLCJBcnJheSIsImlzQXJyYXkiLCJyZXN1bHQiLCJmaW5hbExlbmd0aCIsImxlbmd0aCIsImkiLCJwdXNoIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJpbnRlcmxlYXZlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIFJldHVybnMgYSBjb3B5IG9mIGFuIGFycmF5LCB3aXRoIGdlbmVyYXRlZCBlbGVtZW50cyBpbnRlcmxlYXZlZCAoaW5zZXJ0ZWQgaW4tYmV0d2VlbikgZXZlcnkgZWxlbWVudC4gRm9yIGV4YW1wbGUsIGlmXG4gKiB5b3UgY2FsbCBgaW50ZXJsZWF2ZSggWyBhLCBiLCBjIF0sIE1hdGgucmFuZG9tIClgLCBpdCB3aWxsIHJlc3VsdCBpbiB0aGUgZXF1aXZhbGVudDpcbiAqIGBbIGEsIE1hdGgucmFuZG9tKCksIGIsIE1hdGgucmFuZG9tKCksIGMgXWAuXG4gKlxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxuICovXG5cbmltcG9ydCBwaGV0Q29yZSBmcm9tICcuL3BoZXRDb3JlLmpzJztcblxuLypcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7QXJyYXkuPCo+fSBhcnIgLSBUaGUgYXJyYXkgaW4gd2hpY2ggdG8gaW50ZXJsZWF2ZSBlbGVtZW50c1xuICogQHBhcmFtIHtmdW5jdGlvbn0gZ2VuZXJhdG9yIC0gZnVuY3Rpb24oIGluZGV4OiB7bnVtYmVyfSApOnsqfSAtIDAtYmFzZWQgaW5kZXggZm9yIHdoaWNoIFwic2VwYXJhdG9yXCIgaXQgaXMgZm9yLiBlLmcuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbIF8sIGYoMCksIF8sIGYoMSksIF8sIGYoMiksIC4uLiwgXyBdXG4gKiBAcmV0dXJucyB7QXJyYXkuPCo+fVxuICovXG5mdW5jdGlvbiBpbnRlcmxlYXZlKCBhcnIsIGdlbmVyYXRvciApIHtcbiAgYXNzZXJ0ICYmIGFzc2VydCggQXJyYXkuaXNBcnJheSggYXJyICkgKTtcbiAgYXNzZXJ0ICYmIGFzc2VydCggdHlwZW9mIGdlbmVyYXRvciA9PT0gJ2Z1bmN0aW9uJyApO1xuXG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBjb25zdCBmaW5hbExlbmd0aCA9IGFyci5sZW5ndGggKiAyIC0gMTtcblxuICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBmaW5hbExlbmd0aDsgaSsrICkge1xuICAgIGlmICggaSAlIDIgPT09IDAgKSB7XG4gICAgICByZXN1bHQucHVzaCggYXJyWyBpIC8gMiBdICk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmVzdWx0LnB1c2goIGdlbmVyYXRvciggKCBpIC0gMSApIC8gMiApICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxucGhldENvcmUucmVnaXN0ZXIoICdpbnRlcmxlYXZlJywgaW50ZXJsZWF2ZSApO1xuXG5leHBvcnQgZGVmYXVsdCBpbnRlcmxlYXZlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLGVBQWU7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsVUFBVUEsQ0FBRUMsR0FBRyxFQUFFQyxTQUFTLEVBQUc7RUFDcENDLE1BQU0sSUFBSUEsTUFBTSxDQUFFQyxLQUFLLENBQUNDLE9BQU8sQ0FBRUosR0FBRyxDQUFFLENBQUU7RUFDeENFLE1BQU0sSUFBSUEsTUFBTSxDQUFFLE9BQU9ELFNBQVMsS0FBSyxVQUFVLENBQUU7RUFFbkQsTUFBTUksTUFBTSxHQUFHLEVBQUU7RUFDakIsTUFBTUMsV0FBVyxHQUFHTixHQUFHLENBQUNPLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQztFQUV0QyxLQUFNLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0YsV0FBVyxFQUFFRSxDQUFDLEVBQUUsRUFBRztJQUN0QyxJQUFLQSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRztNQUNqQkgsTUFBTSxDQUFDSSxJQUFJLENBQUVULEdBQUcsQ0FBRVEsQ0FBQyxHQUFHLENBQUMsQ0FBRSxDQUFFO0lBQzdCLENBQUMsTUFDSTtNQUNISCxNQUFNLENBQUNJLElBQUksQ0FBRVIsU0FBUyxDQUFFLENBQUVPLENBQUMsR0FBRyxDQUFDLElBQUssQ0FBQyxDQUFFLENBQUU7SUFDM0M7RUFDRjtFQUVBLE9BQU9ILE1BQU07QUFDZjtBQUVBUCxRQUFRLENBQUNZLFFBQVEsQ0FBRSxZQUFZLEVBQUVYLFVBQVUsQ0FBRTtBQUU3QyxlQUFlQSxVQUFVIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/isArray.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * Tests whether a reference is to an array.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */


function isArray(array) {
  // yes, this is actually how to do this. see http://stackoverflow.com/questions/4775722/javascript-check-if-object-is-array
  return Object.prototype.toString.call(array) === '[object Array]';
}
js_phetCore.register('isArray', isArray);
/* harmony default export */ const js_isArray = (isArray);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsImlzQXJyYXkiLCJhcnJheSIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiaXNBcnJheS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBUZXN0cyB3aGV0aGVyIGEgcmVmZXJlbmNlIGlzIHRvIGFuIGFycmF5LlxuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cbiAqL1xuXG5pbXBvcnQgcGhldENvcmUgZnJvbSAnLi9waGV0Q29yZS5qcyc7XG5pbXBvcnQgSW50ZW50aW9uYWxBbnkgZnJvbSAnLi90eXBlcy9JbnRlbnRpb25hbEFueS5qcyc7XG5cbmZ1bmN0aW9uIGlzQXJyYXkoIGFycmF5OiBJbnRlbnRpb25hbEFueSApOiBhcnJheSBpcyBJbnRlbnRpb25hbEFueVtdIHtcbiAgLy8geWVzLCB0aGlzIGlzIGFjdHVhbGx5IGhvdyB0byBkbyB0aGlzLiBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80Nzc1NzIyL2phdmFzY3JpcHQtY2hlY2staWYtb2JqZWN0LWlzLWFycmF5XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoIGFycmF5ICkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbnBoZXRDb3JlLnJlZ2lzdGVyKCAnaXNBcnJheScsIGlzQXJyYXkgKTtcblxuZXhwb3J0IGRlZmF1bHQgaXNBcnJheTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLGVBQWU7QUFHcEMsU0FBU0MsT0FBT0EsQ0FBRUMsS0FBcUIsRUFBOEI7RUFDbkU7RUFDQSxPQUFPQyxNQUFNLENBQUNDLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDQyxJQUFJLENBQUVKLEtBQUssQ0FBRSxLQUFLLGdCQUFnQjtBQUNyRTtBQUVBRixRQUFRLENBQUNPLFFBQVEsQ0FBRSxTQUFTLEVBQUVOLE9BQU8sQ0FBRTtBQUV2QyxlQUFlQSxPQUFPIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/loadScript.js
// Copyright 2013-2021, University of Colorado Boulder

/**
 * Loads a script
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



/*
 * Load a script. The only required argument is src, and can be specified either as
 * loadScript( "<url>" ) or loadScript( { src: "<url>", ... other options ... } ).
 *
 * Arguments:
 *   src:         The source of the script to load
 *   callback:    A callback to call (with no arguments) once the script is loaded and has been executed
 *   async:       Whether the script should be loaded asynchronously. Defaults to true
 *   cacheBust: Whether the URL should have an appended query string to work around caches
 */
function loadScript(args) {
  // handle a string argument
  if (typeof args === 'string') {
    args = {
      src: args
    };
  }
  const src = args.src;
  const callback = args.callback;
  const async = args.async === undefined ? true : args.async;
  const cacheBust = args.cacheBust === undefined ? false : args.cacheBust;
  let called = false;
  const script = document.createElement('script');
  script.type = 'text/javascript';
  script.async = async;
  script.onload = script.onreadystatechange = function () {
    const state = this.readyState;
    if (state && state !== 'complete' && state !== 'loaded') {
      return;
    }
    if (!called) {
      called = true;
      if (callback) {
        callback();
      }
    }
  };

  // make sure things aren't cached, just in case
  script.src = src + (cacheBust ? `?random=${Math.random().toFixed(10)}` : ''); // eslint-disable-line bad-sim-text

  const other = document.getElementsByTagName('script')[0];
  other.parentNode.insertBefore(script, other);
}
js_phetCore.register('loadScript', loadScript);
/* harmony default export */ const js_loadScript = ((/* unused pure expression or super */ null && (loadScript)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsImxvYWRTY3JpcHQiLCJhcmdzIiwic3JjIiwiY2FsbGJhY2siLCJhc3luYyIsInVuZGVmaW5lZCIsImNhY2hlQnVzdCIsImNhbGxlZCIsInNjcmlwdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJvbmxvYWQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJzdGF0ZSIsInJlYWR5U3RhdGUiLCJNYXRoIiwicmFuZG9tIiwidG9GaXhlZCIsIm90aGVyIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJsb2FkU2NyaXB0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIExvYWRzIGEgc2NyaXB0XG4gKlxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxuICovXG5cbmltcG9ydCBwaGV0Q29yZSBmcm9tICcuL3BoZXRDb3JlLmpzJztcblxuLypcbiAqIExvYWQgYSBzY3JpcHQuIFRoZSBvbmx5IHJlcXVpcmVkIGFyZ3VtZW50IGlzIHNyYywgYW5kIGNhbiBiZSBzcGVjaWZpZWQgZWl0aGVyIGFzXG4gKiBsb2FkU2NyaXB0KCBcIjx1cmw+XCIgKSBvciBsb2FkU2NyaXB0KCB7IHNyYzogXCI8dXJsPlwiLCAuLi4gb3RoZXIgb3B0aW9ucyAuLi4gfSApLlxuICpcbiAqIEFyZ3VtZW50czpcbiAqICAgc3JjOiAgICAgICAgIFRoZSBzb3VyY2Ugb2YgdGhlIHNjcmlwdCB0byBsb2FkXG4gKiAgIGNhbGxiYWNrOiAgICBBIGNhbGxiYWNrIHRvIGNhbGwgKHdpdGggbm8gYXJndW1lbnRzKSBvbmNlIHRoZSBzY3JpcHQgaXMgbG9hZGVkIGFuZCBoYXMgYmVlbiBleGVjdXRlZFxuICogICBhc3luYzogICAgICAgV2hldGhlciB0aGUgc2NyaXB0IHNob3VsZCBiZSBsb2FkZWQgYXN5bmNocm9ub3VzbHkuIERlZmF1bHRzIHRvIHRydWVcbiAqICAgY2FjaGVCdXN0OiBXaGV0aGVyIHRoZSBVUkwgc2hvdWxkIGhhdmUgYW4gYXBwZW5kZWQgcXVlcnkgc3RyaW5nIHRvIHdvcmsgYXJvdW5kIGNhY2hlc1xuICovXG5mdW5jdGlvbiBsb2FkU2NyaXB0KCBhcmdzICkge1xuICAvLyBoYW5kbGUgYSBzdHJpbmcgYXJndW1lbnRcbiAgaWYgKCB0eXBlb2YgYXJncyA9PT0gJ3N0cmluZycgKSB7XG4gICAgYXJncyA9IHsgc3JjOiBhcmdzIH07XG4gIH1cblxuICBjb25zdCBzcmMgPSBhcmdzLnNyYztcbiAgY29uc3QgY2FsbGJhY2sgPSBhcmdzLmNhbGxiYWNrO1xuICBjb25zdCBhc3luYyA9IGFyZ3MuYXN5bmMgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBhcmdzLmFzeW5jO1xuICBjb25zdCBjYWNoZUJ1c3QgPSBhcmdzLmNhY2hlQnVzdCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBhcmdzLmNhY2hlQnVzdDtcblxuICBsZXQgY2FsbGVkID0gZmFsc2U7XG5cbiAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ3NjcmlwdCcgKTtcbiAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgc2NyaXB0LmFzeW5jID0gYXN5bmM7XG4gIHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLnJlYWR5U3RhdGU7XG4gICAgaWYgKCBzdGF0ZSAmJiBzdGF0ZSAhPT0gJ2NvbXBsZXRlJyAmJiBzdGF0ZSAhPT0gJ2xvYWRlZCcgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCAhY2FsbGVkICkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKCBjYWxsYmFjayApIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gbWFrZSBzdXJlIHRoaW5ncyBhcmVuJ3QgY2FjaGVkLCBqdXN0IGluIGNhc2VcbiAgc2NyaXB0LnNyYyA9IHNyYyArICggY2FjaGVCdXN0ID8gYD9yYW5kb209JHtNYXRoLnJhbmRvbSgpLnRvRml4ZWQoIDEwICl9YCA6ICcnICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFkLXNpbS10ZXh0XG5cbiAgY29uc3Qgb3RoZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSggJ3NjcmlwdCcgKVsgMCBdO1xuICBvdGhlci5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggc2NyaXB0LCBvdGhlciApO1xufVxuXG5waGV0Q29yZS5yZWdpc3RlciggJ2xvYWRTY3JpcHQnLCBsb2FkU2NyaXB0ICk7XG5cbmV4cG9ydCBkZWZhdWx0IGxvYWRTY3JpcHQ7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSxlQUFlOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFVBQVVBLENBQUVDLElBQUksRUFBRztFQUMxQjtFQUNBLElBQUssT0FBT0EsSUFBSSxLQUFLLFFBQVEsRUFBRztJQUM5QkEsSUFBSSxHQUFHO01BQUVDLEdBQUcsRUFBRUQ7SUFBSyxDQUFDO0VBQ3RCO0VBRUEsTUFBTUMsR0FBRyxHQUFHRCxJQUFJLENBQUNDLEdBQUc7RUFDcEIsTUFBTUMsUUFBUSxHQUFHRixJQUFJLENBQUNFLFFBQVE7RUFDOUIsTUFBTUMsS0FBSyxHQUFHSCxJQUFJLENBQUNHLEtBQUssS0FBS0MsU0FBUyxHQUFHLElBQUksR0FBR0osSUFBSSxDQUFDRyxLQUFLO0VBQzFELE1BQU1FLFNBQVMsR0FBR0wsSUFBSSxDQUFDSyxTQUFTLEtBQUtELFNBQVMsR0FBRyxLQUFLLEdBQUdKLElBQUksQ0FBQ0ssU0FBUztFQUV2RSxJQUFJQyxNQUFNLEdBQUcsS0FBSztFQUVsQixNQUFNQyxNQUFNLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFFLFFBQVEsQ0FBRTtFQUNqREYsTUFBTSxDQUFDRyxJQUFJLEdBQUcsaUJBQWlCO0VBQy9CSCxNQUFNLENBQUNKLEtBQUssR0FBR0EsS0FBSztFQUNwQkksTUFBTSxDQUFDSSxNQUFNLEdBQUdKLE1BQU0sQ0FBQ0ssa0JBQWtCLEdBQUcsWUFBVztJQUNyRCxNQUFNQyxLQUFLLEdBQUcsSUFBSSxDQUFDQyxVQUFVO0lBQzdCLElBQUtELEtBQUssSUFBSUEsS0FBSyxLQUFLLFVBQVUsSUFBSUEsS0FBSyxLQUFLLFFBQVEsRUFBRztNQUN6RDtJQUNGO0lBRUEsSUFBSyxDQUFDUCxNQUFNLEVBQUc7TUFDYkEsTUFBTSxHQUFHLElBQUk7TUFFYixJQUFLSixRQUFRLEVBQUc7UUFDZEEsUUFBUSxFQUFFO01BQ1o7SUFDRjtFQUNGLENBQUM7O0VBRUQ7RUFDQUssTUFBTSxDQUFDTixHQUFHLEdBQUdBLEdBQUcsSUFBS0ksU0FBUyxHQUFJLFdBQVVVLElBQUksQ0FBQ0MsTUFBTSxFQUFFLENBQUNDLE9BQU8sQ0FBRSxFQUFFLENBQUcsRUFBQyxHQUFHLEVBQUUsQ0FBRSxDQUFDLENBQUM7O0VBRWxGLE1BQU1DLEtBQUssR0FBR1YsUUFBUSxDQUFDVyxvQkFBb0IsQ0FBRSxRQUFRLENBQUUsQ0FBRSxDQUFDLENBQUU7RUFDNURELEtBQUssQ0FBQ0UsVUFBVSxDQUFDQyxZQUFZLENBQUVkLE1BQU0sRUFBRVcsS0FBSyxDQUFFO0FBQ2hEO0FBRUFwQixRQUFRLENBQUN3QixRQUFRLENBQUUsWUFBWSxFQUFFdkIsVUFBVSxDQUFFO0FBRTdDLGVBQWVBLFVBQVUifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/memoize.js
// Copyright 2020-2022, University of Colorado Boulder

/**
 * Caches the results of previous single-argument function applications to the same object.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



/**
 * @param func - Should take one argument
 * @returns - Returns a function that is equivalent, but caches values from previous keys
 */
function memoize(func) {
  const map = new Map();
  return key => {
    if (map.has(key)) {
      return map.get(key);
    } else {
      const value = func(key);
      map.set(key, value);
      return value;
    }
  };
}
js_phetCore.register('memoize', memoize);
/* harmony default export */ const js_memoize = ((/* unused pure expression or super */ null && (memoize)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsIm1lbW9pemUiLCJmdW5jIiwibWFwIiwiTWFwIiwia2V5IiwiaGFzIiwiZ2V0IiwidmFsdWUiLCJzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIm1lbW9pemUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogQ2FjaGVzIHRoZSByZXN1bHRzIG9mIHByZXZpb3VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbiBhcHBsaWNhdGlvbnMgdG8gdGhlIHNhbWUgb2JqZWN0LlxuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cbiAqL1xuXG5pbXBvcnQgcGhldENvcmUgZnJvbSAnLi9waGV0Q29yZS5qcyc7XG5cbi8qKlxuICogQHBhcmFtIGZ1bmMgLSBTaG91bGQgdGFrZSBvbmUgYXJndW1lbnRcbiAqIEByZXR1cm5zIC0gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgaXMgZXF1aXZhbGVudCwgYnV0IGNhY2hlcyB2YWx1ZXMgZnJvbSBwcmV2aW91cyBrZXlzXG4gKi9cbmZ1bmN0aW9uIG1lbW9pemU8S2V5LCBWYWx1ZT4oIGZ1bmM6ICggazogS2V5ICkgPT4gVmFsdWUgKTogKCBrOiBLZXkgKSA9PiBWYWx1ZSB7XG4gIGNvbnN0IG1hcCA9IG5ldyBNYXA8S2V5LCBWYWx1ZT4oKTtcblxuICByZXR1cm4gKCBrZXk6IEtleSApOiBWYWx1ZSA9PiB7XG4gICAgaWYgKCBtYXAuaGFzKCBrZXkgKSApIHtcbiAgICAgIHJldHVybiBtYXAuZ2V0KCBrZXkgKSE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY29uc3QgdmFsdWUgPSBmdW5jKCBrZXkgKTtcbiAgICAgIG1hcC5zZXQoIGtleSwgdmFsdWUgKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH07XG59XG5cbnBoZXRDb3JlLnJlZ2lzdGVyKCAnbWVtb2l6ZScsIG1lbW9pemUgKTtcbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSxlQUFlOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLE9BQU9BLENBQWNDLElBQXlCLEVBQXdCO0VBQzdFLE1BQU1DLEdBQUcsR0FBRyxJQUFJQyxHQUFHLEVBQWM7RUFFakMsT0FBU0MsR0FBUSxJQUFhO0lBQzVCLElBQUtGLEdBQUcsQ0FBQ0csR0FBRyxDQUFFRCxHQUFHLENBQUUsRUFBRztNQUNwQixPQUFPRixHQUFHLENBQUNJLEdBQUcsQ0FBRUYsR0FBRyxDQUFFO0lBQ3ZCLENBQUMsTUFDSTtNQUNILE1BQU1HLEtBQUssR0FBR04sSUFBSSxDQUFFRyxHQUFHLENBQUU7TUFDekJGLEdBQUcsQ0FBQ00sR0FBRyxDQUFFSixHQUFHLEVBQUVHLEtBQUssQ0FBRTtNQUNyQixPQUFPQSxLQUFLO0lBQ2Q7RUFDRixDQUFDO0FBQ0g7QUFFQVIsUUFBUSxDQUFDVSxRQUFRLENBQUUsU0FBUyxFQUFFVCxPQUFPLENBQUU7QUFDdkMsZUFBZUEsT0FBTyJ9
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/mutate.js
// Copyright 2021, University of Colorado Boulder

/**
 * Generalized support for mutating objects that take ES5 getters/setters, similar to Node.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



/**
 * For example:
 *
 * mutate( something, [ 'left', 'right', 'top', 'bottom' ], { top: 0, left: 5 } );
 *
 * will be equivalent to:
 *
 * something.left = 5;
 * something.top = 0;
 *
 * @param {*} target - The object to mutate
 * @param {Array.<string>} orderedKeys
 * @param {Object} [options]
 *
 */
function mutate(target, orderedKeys, options) {
  assert && assert(target);
  assert && assert(Array.isArray(orderedKeys));
  if (!options) {
    return;
  }
  assert && assert(Object.getPrototypeOf(options) === Object.prototype, 'Extra prototype on options object is a code smell');
  _.each(orderedKeys, key => {
    // See https://github.com/phetsims/scenery/issues/580 for more about passing undefined.
    assert && assert(!options.hasOwnProperty(key) || options[key] !== undefined, `Undefined not allowed for key: ${key}`);
    if (options[key] !== undefined) {
      target[key] = options[key];
    }
  });
}
js_phetCore.register('mutate', mutate);
/* harmony default export */ const js_mutate = ((/* unused pure expression or super */ null && (mutate)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsIm11dGF0ZSIsInRhcmdldCIsIm9yZGVyZWRLZXlzIiwib3B0aW9ucyIsImFzc2VydCIsIkFycmF5IiwiaXNBcnJheSIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiXyIsImVhY2giLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsInVuZGVmaW5lZCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsibXV0YXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBHZW5lcmFsaXplZCBzdXBwb3J0IGZvciBtdXRhdGluZyBvYmplY3RzIHRoYXQgdGFrZSBFUzUgZ2V0dGVycy9zZXR0ZXJzLCBzaW1pbGFyIHRvIE5vZGUuXG4gKlxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxuICovXG5cbmltcG9ydCBwaGV0Q29yZSBmcm9tICcuL3BoZXRDb3JlLmpzJztcblxuLyoqXG4gKiBGb3IgZXhhbXBsZTpcbiAqXG4gKiBtdXRhdGUoIHNvbWV0aGluZywgWyAnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJyBdLCB7IHRvcDogMCwgbGVmdDogNSB9ICk7XG4gKlxuICogd2lsbCBiZSBlcXVpdmFsZW50IHRvOlxuICpcbiAqIHNvbWV0aGluZy5sZWZ0ID0gNTtcbiAqIHNvbWV0aGluZy50b3AgPSAwO1xuICpcbiAqIEBwYXJhbSB7Kn0gdGFyZ2V0IC0gVGhlIG9iamVjdCB0byBtdXRhdGVcbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IG9yZGVyZWRLZXlzXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKlxuICovXG5mdW5jdGlvbiBtdXRhdGUoIHRhcmdldCwgb3JkZXJlZEtleXMsIG9wdGlvbnMgKSB7XG4gIGFzc2VydCAmJiBhc3NlcnQoIHRhcmdldCApO1xuICBhc3NlcnQgJiYgYXNzZXJ0KCBBcnJheS5pc0FycmF5KCBvcmRlcmVkS2V5cyApICk7XG5cbiAgaWYgKCAhb3B0aW9ucyApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBhc3NlcnQgJiYgYXNzZXJ0KCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoIG9wdGlvbnMgKSA9PT0gT2JqZWN0LnByb3RvdHlwZSxcbiAgICAnRXh0cmEgcHJvdG90eXBlIG9uIG9wdGlvbnMgb2JqZWN0IGlzIGEgY29kZSBzbWVsbCcgKTtcblxuICBfLmVhY2goIG9yZGVyZWRLZXlzLCBrZXkgPT4ge1xuXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9zY2VuZXJ5L2lzc3Vlcy81ODAgZm9yIG1vcmUgYWJvdXQgcGFzc2luZyB1bmRlZmluZWQuXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMuaGFzT3duUHJvcGVydHkoIGtleSApIHx8IG9wdGlvbnNbIGtleSBdICE9PSB1bmRlZmluZWQsIGBVbmRlZmluZWQgbm90IGFsbG93ZWQgZm9yIGtleTogJHtrZXl9YCApO1xuXG4gICAgaWYgKCBvcHRpb25zWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuICAgICAgdGFyZ2V0WyBrZXkgXSA9IG9wdGlvbnNbIGtleSBdO1xuICAgIH1cbiAgfSApO1xufVxuXG5waGV0Q29yZS5yZWdpc3RlciggJ211dGF0ZScsIG11dGF0ZSApO1xuZXhwb3J0IGRlZmF1bHQgbXV0YXRlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sZUFBZTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsTUFBTUEsQ0FBRUMsTUFBTSxFQUFFQyxXQUFXLEVBQUVDLE9BQU8sRUFBRztFQUM5Q0MsTUFBTSxJQUFJQSxNQUFNLENBQUVILE1BQU0sQ0FBRTtFQUMxQkcsTUFBTSxJQUFJQSxNQUFNLENBQUVDLEtBQUssQ0FBQ0MsT0FBTyxDQUFFSixXQUFXLENBQUUsQ0FBRTtFQUVoRCxJQUFLLENBQUNDLE9BQU8sRUFBRztJQUNkO0VBQ0Y7RUFFQUMsTUFBTSxJQUFJQSxNQUFNLENBQUVHLE1BQU0sQ0FBQ0MsY0FBYyxDQUFFTCxPQUFPLENBQUUsS0FBS0ksTUFBTSxDQUFDRSxTQUFTLEVBQ3JFLG1EQUFtRCxDQUFFO0VBRXZEQyxDQUFDLENBQUNDLElBQUksQ0FBRVQsV0FBVyxFQUFFVSxHQUFHLElBQUk7SUFFMUI7SUFDQVIsTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQ0QsT0FBTyxDQUFDVSxjQUFjLENBQUVELEdBQUcsQ0FBRSxJQUFJVCxPQUFPLENBQUVTLEdBQUcsQ0FBRSxLQUFLRSxTQUFTLEVBQUcsa0NBQWlDRixHQUFJLEVBQUMsQ0FBRTtJQUUzSCxJQUFLVCxPQUFPLENBQUVTLEdBQUcsQ0FBRSxLQUFLRSxTQUFTLEVBQUc7TUFDbENiLE1BQU0sQ0FBRVcsR0FBRyxDQUFFLEdBQUdULE9BQU8sQ0FBRVMsR0FBRyxDQUFFO0lBQ2hDO0VBQ0YsQ0FBQyxDQUFFO0FBQ0w7QUFFQWIsUUFBUSxDQUFDZ0IsUUFBUSxDQUFFLFFBQVEsRUFBRWYsTUFBTSxDQUFFO0FBQ3JDLGVBQWVBLE1BQU0ifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/Orientation.js
// Copyright 2019-2023, University of Colorado Boulder

/**
 * Either horizontal or vertical, with helper values.  Moved from Area Model Common on Nov 7, 2019
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 * @author Sam Reid (PhET Interactive Simulations)
 */




class Orientation extends js_EnumerationValue {
  static HORIZONTAL = new Orientation('x', 'centerX', 'minX', 'maxX', 'left', 'right', 'minWidth', 'maxWidth', 'rectX', 'rectWidth', 'horizontal', 'width', 'column', 'preferredWidth', 'localPreferredWidth', 'widthSizable', (modelViewTransform, value) => modelViewTransform.modelToViewX(value), (modelViewTransform, value) => modelViewTransform.viewToModelX(value), (a, b, VectorType) => new VectorType(a, b, 0, 0));
  static VERTICAL = new Orientation('y', 'centerY', 'minY', 'maxY', 'top', 'bottom', 'minHeight', 'maxHeight', 'rectY', 'rectHeight', 'vertical', 'height', 'row', 'preferredHeight', 'localPreferredHeight', 'heightSizable', (modelViewTransform, value) => modelViewTransform.modelToViewY(value), (modelViewTransform, value) => modelViewTransform.viewToModelY(value), (a, b, VectorType) => new VectorType(b, a, 0, 0));
  static enumeration = new js_Enumeration(Orientation, {
    phetioDocumentation: 'Horizontal or vertical orientation'
  });
  static fromLayoutOrientation(layoutOrientation) {
    return layoutOrientation === 'horizontal' ? Orientation.HORIZONTAL : Orientation.VERTICAL;
  }
  constructor(coordinate, centerCoordinate, minCoordinate, maxCoordinate, minSide, maxSide, minSize, maxSize, rectCoordinate, rectSize, flowBoxOrientation, size, line, preferredSize, localPreferredSize, sizable, modelToView, viewToModel, toVector) {
    super();
    this.coordinate = coordinate;
    this.centerCoordinate = centerCoordinate;
    this.minCoordinate = minCoordinate;
    this.maxCoordinate = maxCoordinate;
    this.minSide = minSide;
    this.maxSide = maxSide;
    this.minSize = minSize;
    this.maxSize = maxSize;
    this.rectCoordinate = rectCoordinate;
    this.rectSize = rectSize;
    this.flowBoxOrientation = flowBoxOrientation;
    this.size = size;
    this.line = line;
    this.preferredSize = preferredSize;
    this.localPreferredSize = localPreferredSize;
    this.sizable = sizable;
    this.ariaOrientation = flowBoxOrientation;
    this.modelToView = modelToView;
    this.viewToModel = viewToModel;
    this.toVector = toVector;
  }
}

// Set up opposites as object references (circular)
Orientation.HORIZONTAL.opposite = Orientation.VERTICAL;
Orientation.VERTICAL.opposite = Orientation.HORIZONTAL;
js_phetCore.register('Orientation', Orientation);
/* harmony default export */ const js_Orientation = (Orientation);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/OrientationPair.js
// Copyright 2021-2022, University of Colorado Boulder

/**
 * An object that contains a value for each item in an enumeration.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */




class OrientationPair extends js_EnumerationMap {
  /**
   * @param horizontal - Value for the horizontal orientation
   * @param vertical - Value for the vertical orientation
   */
  constructor(horizontal, vertical) {
    super(js_Orientation, orientation => orientation === js_Orientation.HORIZONTAL ? horizontal : vertical);
  }
  get horizontal() {
    return this.get(js_Orientation.HORIZONTAL);
  }
  set horizontal(value) {
    this.set(js_Orientation.HORIZONTAL, value);
  }
  get vertical() {
    return this.get(js_Orientation.VERTICAL);
  }
  set vertical(value) {
    this.set(js_Orientation.VERTICAL, value);
  }

  /**
   * Creates an orientation pair based on a factory method.
   *
   * @param factory - called once for each orientation to determine
   *                             the value.
   */
  static create(factory) {
    return new OrientationPair(factory(js_Orientation.HORIZONTAL), factory(js_Orientation.VERTICAL));
  }
}
js_phetCore.register('OrientationPair', OrientationPair);
/* harmony default export */ const js_OrientationPair = ((/* unused pure expression or super */ null && (OrientationPair)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbnVtZXJhdGlvbk1hcCIsIk9yaWVudGF0aW9uIiwicGhldENvcmUiLCJPcmllbnRhdGlvblBhaXIiLCJjb25zdHJ1Y3RvciIsImhvcml6b250YWwiLCJ2ZXJ0aWNhbCIsIm9yaWVudGF0aW9uIiwiSE9SSVpPTlRBTCIsImdldCIsInZhbHVlIiwic2V0IiwiVkVSVElDQUwiLCJjcmVhdGUiLCJmYWN0b3J5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJPcmllbnRhdGlvblBhaXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSB2YWx1ZSBmb3IgZWFjaCBpdGVtIGluIGFuIGVudW1lcmF0aW9uLlxuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cbiAqL1xuXG5pbXBvcnQgRW51bWVyYXRpb25NYXAgZnJvbSAnLi9FbnVtZXJhdGlvbk1hcC5qcyc7XG5pbXBvcnQgT3JpZW50YXRpb24gZnJvbSAnLi9PcmllbnRhdGlvbi5qcyc7XG5pbXBvcnQgcGhldENvcmUgZnJvbSAnLi9waGV0Q29yZS5qcyc7XG5cbmNsYXNzIE9yaWVudGF0aW9uUGFpcjxUPiBleHRlbmRzIEVudW1lcmF0aW9uTWFwPE9yaWVudGF0aW9uLCBUPiB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBob3Jpem9udGFsIC0gVmFsdWUgZm9yIHRoZSBob3Jpem9udGFsIG9yaWVudGF0aW9uXG4gICAqIEBwYXJhbSB2ZXJ0aWNhbCAtIFZhbHVlIGZvciB0aGUgdmVydGljYWwgb3JpZW50YXRpb25cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggaG9yaXpvbnRhbDogVCwgdmVydGljYWw6IFQgKSB7XG4gICAgc3VwZXIoIE9yaWVudGF0aW9uLCBvcmllbnRhdGlvbiA9PiBvcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uSE9SSVpPTlRBTCA/IGhvcml6b250YWwgOiB2ZXJ0aWNhbCApO1xuICB9XG5cbiAgcHVibGljIGdldCBob3Jpem9udGFsKCk6IFQge1xuICAgIHJldHVybiB0aGlzLmdldCggT3JpZW50YXRpb24uSE9SSVpPTlRBTCApO1xuICB9XG5cbiAgcHVibGljIHNldCBob3Jpem9udGFsKCB2YWx1ZTogVCApIHtcbiAgICB0aGlzLnNldCggT3JpZW50YXRpb24uSE9SSVpPTlRBTCwgdmFsdWUgKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgdmVydGljYWwoKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCBPcmllbnRhdGlvbi5WRVJUSUNBTCApO1xuICB9XG5cbiAgcHVibGljIHNldCB2ZXJ0aWNhbCggdmFsdWU6IFQgKSB7XG4gICAgdGhpcy5zZXQoIE9yaWVudGF0aW9uLlZFUlRJQ0FMLCB2YWx1ZSApO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gb3JpZW50YXRpb24gcGFpciBiYXNlZCBvbiBhIGZhY3RvcnkgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0gZmFjdG9yeSAtIGNhbGxlZCBvbmNlIGZvciBlYWNoIG9yaWVudGF0aW9uIHRvIGRldGVybWluZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHZhbHVlLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGU8VD4oIGZhY3Rvcnk6ICggbzogT3JpZW50YXRpb24gKSA9PiBUICk6IE9yaWVudGF0aW9uUGFpcjxUPiB7XG4gICAgcmV0dXJuIG5ldyBPcmllbnRhdGlvblBhaXIoIGZhY3RvcnkoIE9yaWVudGF0aW9uLkhPUklaT05UQUwgKSwgZmFjdG9yeSggT3JpZW50YXRpb24uVkVSVElDQUwgKSApO1xuICB9XG59XG5cbnBoZXRDb3JlLnJlZ2lzdGVyKCAnT3JpZW50YXRpb25QYWlyJywgT3JpZW50YXRpb25QYWlyICk7XG5leHBvcnQgZGVmYXVsdCBPcmllbnRhdGlvblBhaXI7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSxxQkFBcUI7QUFDaEQsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxRQUFRLE1BQU0sZUFBZTtBQUVwQyxNQUFNQyxlQUFlLFNBQVlILGNBQWMsQ0FBaUI7RUFFOUQ7QUFDRjtBQUNBO0FBQ0E7RUFDU0ksV0FBV0EsQ0FBRUMsVUFBYSxFQUFFQyxRQUFXLEVBQUc7SUFDL0MsS0FBSyxDQUFFTCxXQUFXLEVBQUVNLFdBQVcsSUFBSUEsV0FBVyxLQUFLTixXQUFXLENBQUNPLFVBQVUsR0FBR0gsVUFBVSxHQUFHQyxRQUFRLENBQUU7RUFDckc7RUFFQSxJQUFXRCxVQUFVQSxDQUFBLEVBQU07SUFDekIsT0FBTyxJQUFJLENBQUNJLEdBQUcsQ0FBRVIsV0FBVyxDQUFDTyxVQUFVLENBQUU7RUFDM0M7RUFFQSxJQUFXSCxVQUFVQSxDQUFFSyxLQUFRLEVBQUc7SUFDaEMsSUFBSSxDQUFDQyxHQUFHLENBQUVWLFdBQVcsQ0FBQ08sVUFBVSxFQUFFRSxLQUFLLENBQUU7RUFDM0M7RUFFQSxJQUFXSixRQUFRQSxDQUFBLEVBQU07SUFDdkIsT0FBTyxJQUFJLENBQUNHLEdBQUcsQ0FBRVIsV0FBVyxDQUFDVyxRQUFRLENBQUU7RUFDekM7RUFFQSxJQUFXTixRQUFRQSxDQUFFSSxLQUFRLEVBQUc7SUFDOUIsSUFBSSxDQUFDQyxHQUFHLENBQUVWLFdBQVcsQ0FBQ1csUUFBUSxFQUFFRixLQUFLLENBQUU7RUFDekM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0UsT0FBY0csTUFBTUEsQ0FBS0MsT0FBZ0MsRUFBdUI7SUFDOUUsT0FBTyxJQUFJWCxlQUFlLENBQUVXLE9BQU8sQ0FBRWIsV0FBVyxDQUFDTyxVQUFVLENBQUUsRUFBRU0sT0FBTyxDQUFFYixXQUFXLENBQUNXLFFBQVEsQ0FBRSxDQUFFO0VBQ2xHO0FBQ0Y7QUFFQVYsUUFBUSxDQUFDYSxRQUFRLENBQUUsaUJBQWlCLEVBQUVaLGVBQWUsQ0FBRTtBQUN2RCxlQUFlQSxlQUFlIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/pairs.js
// Copyright 2014-2023, University of Colorado Boulder

/**
 * Creates an array of arrays, which consists of pairs of objects from the input array without duplication.
 *
 * For example, phet.phetCore.pairs( [ 'a', 'b', 'c' ] ) will return:
 * [ [ 'a', 'b' ], [ 'a', 'c' ], [ 'b', 'c' ] ]
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */


function pairs(array) {
  const result = [];
  const length = array.length;
  if (length > 1) {
    for (let i = 0; i < length - 1; i++) {
      const first = array[i];
      for (let j = i + 1; j < length; j++) {
        result.push([first, array[j]]);
      }
    }
  }
  return result;
}
js_phetCore.register('pairs', pairs);
/* harmony default export */ const js_pairs = ((/* unused pure expression or super */ null && (pairs)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsInBhaXJzIiwiYXJyYXkiLCJyZXN1bHQiLCJsZW5ndGgiLCJpIiwiZmlyc3QiLCJqIiwicHVzaCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsicGFpcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBhcnJheXMsIHdoaWNoIGNvbnNpc3RzIG9mIHBhaXJzIG9mIG9iamVjdHMgZnJvbSB0aGUgaW5wdXQgYXJyYXkgd2l0aG91dCBkdXBsaWNhdGlvbi5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgcGhldC5waGV0Q29yZS5wYWlycyggWyAnYScsICdiJywgJ2MnIF0gKSB3aWxsIHJldHVybjpcbiAqIFsgWyAnYScsICdiJyBdLCBbICdhJywgJ2MnIF0sIFsgJ2InLCAnYycgXSBdXG4gKlxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxuICovXG5cbmltcG9ydCBwaGV0Q29yZSBmcm9tICcuL3BoZXRDb3JlLmpzJztcblxuZnVuY3Rpb24gcGFpcnMoIGFycmF5ICkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgY29uc3QgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICBpZiAoIGxlbmd0aCA+IDEgKSB7XG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgbGVuZ3RoIC0gMTsgaSsrICkge1xuICAgICAgY29uc3QgZmlyc3QgPSBhcnJheVsgaSBdO1xuICAgICAgZm9yICggbGV0IGogPSBpICsgMTsgaiA8IGxlbmd0aDsgaisrICkge1xuICAgICAgICByZXN1bHQucHVzaCggWyBmaXJzdCwgYXJyYXlbIGogXSBdICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnBoZXRDb3JlLnJlZ2lzdGVyKCAncGFpcnMnLCBwYWlycyApO1xuXG5leHBvcnQgZGVmYXVsdCBwYWlyczsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLGVBQWU7QUFFcEMsU0FBU0MsS0FBS0EsQ0FBRUMsS0FBSyxFQUFHO0VBQ3RCLE1BQU1DLE1BQU0sR0FBRyxFQUFFO0VBQ2pCLE1BQU1DLE1BQU0sR0FBR0YsS0FBSyxDQUFDRSxNQUFNO0VBQzNCLElBQUtBLE1BQU0sR0FBRyxDQUFDLEVBQUc7SUFDaEIsS0FBTSxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdELE1BQU0sR0FBRyxDQUFDLEVBQUVDLENBQUMsRUFBRSxFQUFHO01BQ3JDLE1BQU1DLEtBQUssR0FBR0osS0FBSyxDQUFFRyxDQUFDLENBQUU7TUFDeEIsS0FBTSxJQUFJRSxDQUFDLEdBQUdGLENBQUMsR0FBRyxDQUFDLEVBQUVFLENBQUMsR0FBR0gsTUFBTSxFQUFFRyxDQUFDLEVBQUUsRUFBRztRQUNyQ0osTUFBTSxDQUFDSyxJQUFJLENBQUUsQ0FBRUYsS0FBSyxFQUFFSixLQUFLLENBQUVLLENBQUMsQ0FBRSxDQUFFLENBQUU7TUFDdEM7SUFDRjtFQUNGO0VBQ0EsT0FBT0osTUFBTTtBQUNmO0FBRUFILFFBQVEsQ0FBQ1MsUUFBUSxDQUFFLE9BQU8sRUFBRVIsS0FBSyxDQUFFO0FBRW5DLGVBQWVBLEtBQUsifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/partition.js
// Copyright 2014-2020, University of Colorado Boulder

/**
 * Partitions an array into two arrays: the first contains all elements that satisfy the predicate, and the second
 * contains all the (other) elements that do not satisfy the predicate.
 *
 * e.g. partition( [1,2,3,4], function( n ) { return n % 2 === 0; } ) will return [[2,4],[1,3]]
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */


function partition(array, predicate) {
  assert && assert(Array.isArray(array));
  assert && assert(typeof predicate === 'function');
  const satisfied = [];
  const unsatisfied = [];
  const length = array.length;
  for (let i = 0; i < length; i++) {
    if (predicate(array[i])) {
      satisfied.push(array[i]);
    } else {
      unsatisfied.push(array[i]);
    }
  }
  return [satisfied, unsatisfied];
}
js_phetCore.register('partition', partition);
/* harmony default export */ const js_partition = ((/* unused pure expression or super */ null && (partition)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsInBhcnRpdGlvbiIsImFycmF5IiwicHJlZGljYXRlIiwiYXNzZXJ0IiwiQXJyYXkiLCJpc0FycmF5Iiwic2F0aXNmaWVkIiwidW5zYXRpc2ZpZWQiLCJsZW5ndGgiLCJpIiwicHVzaCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsicGFydGl0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIFBhcnRpdGlvbnMgYW4gYXJyYXkgaW50byB0d28gYXJyYXlzOiB0aGUgZmlyc3QgY29udGFpbnMgYWxsIGVsZW1lbnRzIHRoYXQgc2F0aXNmeSB0aGUgcHJlZGljYXRlLCBhbmQgdGhlIHNlY29uZFxuICogY29udGFpbnMgYWxsIHRoZSAob3RoZXIpIGVsZW1lbnRzIHRoYXQgZG8gbm90IHNhdGlzZnkgdGhlIHByZWRpY2F0ZS5cbiAqXG4gKiBlLmcuIHBhcnRpdGlvbiggWzEsMiwzLDRdLCBmdW5jdGlvbiggbiApIHsgcmV0dXJuIG4gJSAyID09PSAwOyB9ICkgd2lsbCByZXR1cm4gW1syLDRdLFsxLDNdXVxuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cbiAqL1xuXG5pbXBvcnQgcGhldENvcmUgZnJvbSAnLi9waGV0Q29yZS5qcyc7XG5cbmZ1bmN0aW9uIHBhcnRpdGlvbiggYXJyYXksIHByZWRpY2F0ZSApIHtcbiAgYXNzZXJ0ICYmIGFzc2VydCggQXJyYXkuaXNBcnJheSggYXJyYXkgKSApO1xuICBhc3NlcnQgJiYgYXNzZXJ0KCB0eXBlb2YgcHJlZGljYXRlID09PSAnZnVuY3Rpb24nICk7XG5cbiAgY29uc3Qgc2F0aXNmaWVkID0gW107XG4gIGNvbnN0IHVuc2F0aXNmaWVkID0gW107XG4gIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgZm9yICggbGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG4gICAgaWYgKCBwcmVkaWNhdGUoIGFycmF5WyBpIF0gKSApIHtcbiAgICAgIHNhdGlzZmllZC5wdXNoKCBhcnJheVsgaSBdICk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdW5zYXRpc2ZpZWQucHVzaCggYXJyYXlbIGkgXSApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbIHNhdGlzZmllZCwgdW5zYXRpc2ZpZWQgXTtcbn1cblxucGhldENvcmUucmVnaXN0ZXIoICdwYXJ0aXRpb24nLCBwYXJ0aXRpb24gKTtcblxuZXhwb3J0IGRlZmF1bHQgcGFydGl0aW9uOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sZUFBZTtBQUVwQyxTQUFTQyxTQUFTQSxDQUFFQyxLQUFLLEVBQUVDLFNBQVMsRUFBRztFQUNyQ0MsTUFBTSxJQUFJQSxNQUFNLENBQUVDLEtBQUssQ0FBQ0MsT0FBTyxDQUFFSixLQUFLLENBQUUsQ0FBRTtFQUMxQ0UsTUFBTSxJQUFJQSxNQUFNLENBQUUsT0FBT0QsU0FBUyxLQUFLLFVBQVUsQ0FBRTtFQUVuRCxNQUFNSSxTQUFTLEdBQUcsRUFBRTtFQUNwQixNQUFNQyxXQUFXLEdBQUcsRUFBRTtFQUN0QixNQUFNQyxNQUFNLEdBQUdQLEtBQUssQ0FBQ08sTUFBTTtFQUMzQixLQUFNLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0QsTUFBTSxFQUFFQyxDQUFDLEVBQUUsRUFBRztJQUNqQyxJQUFLUCxTQUFTLENBQUVELEtBQUssQ0FBRVEsQ0FBQyxDQUFFLENBQUUsRUFBRztNQUM3QkgsU0FBUyxDQUFDSSxJQUFJLENBQUVULEtBQUssQ0FBRVEsQ0FBQyxDQUFFLENBQUU7SUFDOUIsQ0FBQyxNQUNJO01BQ0hGLFdBQVcsQ0FBQ0csSUFBSSxDQUFFVCxLQUFLLENBQUVRLENBQUMsQ0FBRSxDQUFFO0lBQ2hDO0VBQ0Y7RUFFQSxPQUFPLENBQUVILFNBQVMsRUFBRUMsV0FBVyxDQUFFO0FBQ25DO0FBRUFSLFFBQVEsQ0FBQ1ksUUFBUSxDQUFFLFdBQVcsRUFBRVgsU0FBUyxDQUFFO0FBRTNDLGVBQWVBLFNBQVMifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/platform.js
// Copyright 2013-2023, University of Colorado Boulder

/**
 * Code for testing which platform is running.  Use sparingly, if at all!
 *
 * Sample usage:
 * if (platform.firefox) {node.renderer = 'canvas';}
 *
 * @author Jonathan Olson (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */


const ua = navigator.userAgent;

// Checks to see whether we are IE, and if so whether the version matches.
function isIE(version) {
  return getInternetExplorerVersion() === version;
}

// Whether the browser is most likely Safari running on iOS
// See http://stackoverflow.com/questions/3007480/determine-if-user-navigated-from-mobile-safari
function isMobileSafari() {
  return !!(window.phet && phet.chipper && phet.chipper.queryParameters && phet.chipper.queryParameters['phet-app'] || (ua.match(/(iPod|iPhone|iPad)/) || navigator.platform === 'MacIntel' && navigator.maxTouchPoints >= 2) && ua.match(/AppleWebKit/));
}

//IE11 no longer reports MSIE in the user agent string, see https://github.com/phetsims/phet-core/issues/12
//This code is adapted from http://stackoverflow.com/questions/17907445/how-to-detect-ie11
function getInternetExplorerVersion() {
  let rv = -1;
  let re = null;
  if (navigator.appName === 'Microsoft Internet Explorer') {
    re = new RegExp('MSIE ([0-9]{1,}[.0-9]{0,})');
    if (re.exec(ua) !== null) {
      rv = parseFloat(RegExp.$1);
    }
  } else if (navigator.appName === 'Netscape') {
    re = new RegExp('Trident/.*rv:([0-9]{1,}[.0-9]{0,})');
    if (re.exec(ua) !== null) {
      rv = parseFloat(RegExp.$1);
    }
  }
  return rv;
}
const platform = {
  // Whether the browser is most likely Firefox
  firefox: ua.toLowerCase().indexOf('firefox') > -1,
  // Whether the browser is most likely Safari running on iOS
  mobileSafari: isMobileSafari(),
  // Whether the browser is a matching version of Safari running on OS X
  safari5: !!(ua.match(/Version\/5\./) && ua.match(/Safari\//) && ua.match(/AppleWebKit/)),
  safari6: !!(ua.match(/Version\/6\./) && ua.match(/Safari\//) && ua.match(/AppleWebKit/)),
  safari7: !!(ua.match(/Version\/7\./) && ua.match(/Safari\//) && ua.match(/AppleWebKit/)),
  safari10: !!(ua.match(/Version\/10\./) && ua.match(/Safari\//) && ua.match(/AppleWebKit/)),
  safari11: !!(ua.match(/Version\/11\./) && ua.match(/Safari\//) && ua.match(/AppleWebKit/)),
  // Match Safari on iOS
  safari9: !!(ua.match(/Version\/9\./) && ua.match(/Safari\//) && ua.match(/AppleWebKit/)),
  // Whether the browser matches any version of safari, including mobile
  safari: isMobileSafari() || !!(ua.match(/Version\//) && ua.match(/Safari\//) && ua.match(/AppleWebKit/)),
  // Whether the browser is some type of IE (Internet Explorer)
  ie: getInternetExplorerVersion() !== -1,
  // Whether the browser is a specific version of IE (Internet Explorer)
  ie9: isIE(9),
  ie10: isIE(10),
  ie11: isIE(11),
  // Whether the browser has Android in its user agent
  android: ua.indexOf('Android') > 0,
  // Whether the browser is Microsoft Edge
  edge: !!ua.match(/Edge\//),
  // Whether the browser is Chromium-based (usually Chrome)
  chromium: /chrom(e|ium)/.test(ua.toLowerCase()) && !ua.match(/Edge\//),
  mac: navigator.platform.includes('Mac')
};
js_phetCore.register('platform', platform);
/* harmony default export */ const js_platform = ((/* unused pure expression or super */ null && (platform)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/Poolable.js
// Copyright 2015-2022, University of Colorado Boulder

/**
 * Object pooling mixin, for cases where creating new objects is expensive, and we'd rather mark some objects as able
 * to be reused (i.e. 'in the pool'). This provides a pool of objects for each type it is invoked on. It allows for
 * getting "new" objects that can either be constructed OR pulled in from a pool, and requires that the objects are
 * essentially able to "re-run" the constructor. Then when putting the object back in the pool, references should be
 * released, so memory isn't leaked.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */




const Poolable = {
  /**
   * Changes the given type (and its prototype) to support object pooling.
   */
  mixInto(type, providedOptions) {
    const options = optionize()({
      defaultArguments: [],
      initialize: type.prototype.initialize,
      maxSize: 100,
      initialSize: 0,
      useDefaultConstruction: false
    }, providedOptions);
    assert && assert(options.maxSize >= 0);
    assert && assert(options.initialSize >= 0);

    // The actual array we store things in. Always push/pop.
    const pool = [];
    let maxPoolSize = options.maxSize;

    // There is a madness to this craziness. We'd want to use the method noted at
    // https://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible, but the type is
    // not provided in the arguments array below. By calling bind on itself, we're able to get a version of bind that
    // inserts the constructor as the first argument of the .apply called later so we don't create garbage by having
    // to pack `arguments` into an array AND THEN concatenate it with a new first element (the type itself).
    const partialConstructor = Function.prototype.bind.bind(type, type);

    // Basically our type constructor, but with the default arguments included already.
    const DefaultConstructor = partialConstructor(...options.defaultArguments);
    const initialize = options.initialize;
    const useDefaultConstruction = options.useDefaultConstruction;
    const proto = type.prototype;
    js_extend(type, {
      /**
       * This should not be modified externally. In the future if desired, functions could be added to help
       * adding/removing poolable instances manually.
       */
      pool: pool,
      /**
       * Returns an object with arbitrary state (possibly constructed with the default arguments).
       */
      dirtyFromPool() {
        return pool.length ? pool.pop() : new DefaultConstructor();
      },
      /**
       * Returns an object that behaves as if it was constructed with the given arguments. May result in a new object
       * being created (if the pool is empty), or it may use the constructor to mutate an object from the pool.
       */
      createFromPool(...args) {
        let result;
        if (pool.length) {
          result = pool.pop();
          initialize.apply(result, args);
        } else if (useDefaultConstruction) {
          result = new DefaultConstructor();
          initialize.apply(result, args);
        } else {
          result = new (partialConstructor(...args))();
        }
        return result;
      },
      /**
       * Returns the current size of the pool.
       */
      get poolSize() {
        return pool.length;
      },
      /**
       * Sets the maximum pool size.
       */
      set maxPoolSize(value) {
        assert && assert(value === Number.POSITIVE_INFINITY || Number.isInteger(value) && value >= 0, 'maxPoolSize should be a non-negative integer or infinity');
        maxPoolSize = value;
      },
      /**
       * Returns the maximum pool size.
       */
      get maxPoolSize() {
        return maxPoolSize;
      }
    });
    js_extend(proto, {
      /**
       * Adds this object into the pool, so that it can be reused elsewhere. Generally when this is done, no other
       * references to the object should be held (since they should not be used at all).
       */
      freeToPool() {
        if (pool.length < maxPoolSize) {
          pool.push(this);
        }
      }
    });

    // Initialize the pool (if it should have objects)
    while (pool.length < options.initialSize) {
      pool.push(new DefaultConstructor());
    }
    return type;
  }
};
js_phetCore.register('Poolable', Poolable);
/* harmony default export */ const js_Poolable = (Poolable);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/phet-core/js/main.js
// Copyright 2013-2022, University of Colorado Boulder






























/* harmony default export */ const js_main = ((/* unused pure expression or super */ null && (phetCore)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSJdLCJzb3VyY2VzIjpbIm1haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cblxuaW1wb3J0ICcuL2FycmF5RGlmZmVyZW5jZS5qcyc7XG5pbXBvcnQgJy4vYXJyYXlSZW1vdmUuanMnO1xuaW1wb3J0ICcuL2NsZWFuQXJyYXkuanMnO1xuaW1wb3J0ICcuL2NvbGxlY3QuanMnO1xuaW1wb3J0ICcuL2RldGVjdFByZWZpeC5qcyc7XG5pbXBvcnQgJy4vZGV0ZWN0UHJlZml4RXZlbnQuanMnO1xuaW1wb3J0ICcuL2RpbWVuc2lvbkZvckVhY2guanMnO1xuaW1wb3J0ICcuL2RpbWVuc2lvbk1hcC5qcyc7XG5pbXBvcnQgJy4vRW51bWVyYXRpb25EZXByZWNhdGVkLmpzJztcbmltcG9ydCAnLi9FbnVtZXJhdGlvbk1hcC5qcyc7XG5pbXBvcnQgJy4vZXNjYXBlSFRNTC5qcyc7XG5pbXBvcnQgJy4vRXZlbnRUaW1lci5qcyc7XG5pbXBvcnQgJy4vZXh0ZW5kLmpzJztcbmltcG9ydCAnLi9leHRlbmREZWZpbmVkLmpzJztcbmltcG9ydCAnLi9pbmhlcml0YW5jZS5qcyc7XG5pbXBvcnQgJy4vaW50ZXJsZWF2ZS5qcyc7XG5pbXBvcnQgJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgJy4vbG9hZFNjcmlwdC5qcyc7XG5pbXBvcnQgJy4vbWVtb2l6ZS5qcyc7XG5pbXBvcnQgJy4vbWVyZ2UuanMnO1xuaW1wb3J0ICcuL211dGF0ZS5qcyc7XG5pbXBvcnQgJy4vTmFtZXNwYWNlLmpzJztcbmltcG9ydCAnLi9PcmllbnRhdGlvblBhaXIuanMnO1xuaW1wb3J0ICcuL3BhaXJzLmpzJztcbmltcG9ydCAnLi9wYXJ0aXRpb24uanMnO1xuaW1wb3J0IHBoZXRDb3JlIGZyb20gJy4vcGhldENvcmUuanMnO1xuaW1wb3J0ICcuL3BsYXRmb3JtLmpzJztcbmltcG9ydCAnLi9Qb29sLmpzJztcbmltcG9ydCAnLi9Qb29sYWJsZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBoZXRDb3JlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBR0EsT0FBTyxzQkFBc0I7QUFDN0IsT0FBTyxrQkFBa0I7QUFDekIsT0FBTyxpQkFBaUI7QUFDeEIsT0FBTyxjQUFjO0FBQ3JCLE9BQU8sbUJBQW1CO0FBQzFCLE9BQU8sd0JBQXdCO0FBQy9CLE9BQU8sdUJBQXVCO0FBQzlCLE9BQU8sbUJBQW1CO0FBQzFCLE9BQU8sNEJBQTRCO0FBQ25DLE9BQU8scUJBQXFCO0FBQzVCLE9BQU8saUJBQWlCO0FBQ3hCLE9BQU8saUJBQWlCO0FBQ3hCLE9BQU8sYUFBYTtBQUNwQixPQUFPLG9CQUFvQjtBQUMzQixPQUFPLGtCQUFrQjtBQUN6QixPQUFPLGlCQUFpQjtBQUN4QixPQUFPLGNBQWM7QUFDckIsT0FBTyxpQkFBaUI7QUFDeEIsT0FBTyxjQUFjO0FBQ3JCLE9BQU8sWUFBWTtBQUNuQixPQUFPLGFBQWE7QUFDcEIsT0FBTyxnQkFBZ0I7QUFDdkIsT0FBTyxzQkFBc0I7QUFDN0IsT0FBTyxZQUFZO0FBQ25CLE9BQU8sZ0JBQWdCO0FBQ3ZCLE9BQU9BLFFBQVEsTUFBTSxlQUFlO0FBQ3BDLE9BQU8sZUFBZTtBQUN0QixPQUFPLFdBQVc7QUFDbEIsT0FBTyxlQUFlO0FBRXRCLGVBQWVBLFFBQVEifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Bounds2.js
// Copyright 2013-2023, University of Colorado Boulder

/**
 * A 2D rectangle-shaped bounded area (bounding box).
 *
 * There are a number of convenience functions to get positions and points on the Bounds. Currently we do not
 * store these with the Bounds2 instance, since we want to lower the memory footprint.
 *
 * minX, minY, maxX, and maxY are actually stored. We don't do x,y,width,height because this can't properly express
 * semi-infinite bounds (like a half-plane), or easily handle what Bounds2.NOTHING and Bounds2.EVERYTHING do with
 * the constructive solid areas.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */









// Temporary instances to be used in the transform method.
const scratchVector2 = new Vector2(0, 0);
// TODO: Why does freeToPool get promoted, but nothing else? https://github.com/phetsims/phet-core/issues/103
// TODO: Do we need TPoolable? Can classes just have a static pool method? https://github.com/phetsims/phet-core/issues/103
class Bounds2 {
  // The minimum X coordinate of the bounds.

  // The minimum Y coordinate of the bounds.

  // The maximum X coordinate of the bounds.

  // The maximum Y coordinate of the bounds.

  /**
   * Creates a 2-dimensional bounds (bounding box).
   *
   * @param minX - The initial minimum X coordinate of the bounds.
   * @param minY - The initial minimum Y coordinate of the bounds.
   * @param maxX - The initial maximum X coordinate of the bounds.
   * @param maxY - The initial maximum Y coordinate of the bounds.
   */
  constructor(minX, minY, maxX, maxY) {
    assert && assert(maxY !== undefined, 'Bounds2 requires 4 parameters');
    this.minX = minX;
    this.minY = minY;
    this.maxX = maxX;
    this.maxY = maxY;
  }

  /*---------------------------------------------------------------------------*
   * Properties
   *---------------------------------------------------------------------------*/

  /**
   * The width of the bounds, defined as maxX - minX.
   */
  getWidth() {
    return this.maxX - this.minX;
  }
  get width() {
    return this.getWidth();
  }

  /**
   * The height of the bounds, defined as maxY - minY.
   */
  getHeight() {
    return this.maxY - this.minY;
  }
  get height() {
    return this.getHeight();
  }

  /*
   * Convenience positions
   * upper is in terms of the visual layout in Scenery and other programs, so the minY is the "upper", and minY is the "lower"
   *
   *             minX (x)     centerX        maxX
   *          ---------------------------------------
   * minY (y) | leftTop     centerTop     rightTop
   * centerY  | leftCenter  center        rightCenter
   * maxY     | leftBottom  centerBottom  rightBottom
   */

  /**
   * Alias for minX, when thinking of the bounds as an (x,y,width,height) rectangle.
   */
  getX() {
    return this.minX;
  }
  get x() {
    return this.getX();
  }

  /**
   * Alias for minY, when thinking of the bounds as an (x,y,width,height) rectangle.
   */
  getY() {
    return this.minY;
  }
  get y() {
    return this.getY();
  }

  /**
   * Alias for minX, supporting the explicit getter function style.
   */
  getMinX() {
    return this.minX;
  }

  /**
   * Alias for minY, supporting the explicit getter function style.
   */
  getMinY() {
    return this.minY;
  }

  /**
   * Alias for maxX, supporting the explicit getter function style.
   */
  getMaxX() {
    return this.maxX;
  }

  /**
   * Alias for maxY, supporting the explicit getter function style.
   */
  getMaxY() {
    return this.maxY;
  }

  /**
   * Alias for minX, when thinking in the UI-layout manner.
   */
  getLeft() {
    return this.minX;
  }
  get left() {
    return this.minX;
  }

  /**
   * Alias for minY, when thinking in the UI-layout manner.
   */
  getTop() {
    return this.minY;
  }
  get top() {
    return this.minY;
  }

  /**
   * Alias for maxX, when thinking in the UI-layout manner.
   */
  getRight() {
    return this.maxX;
  }
  get right() {
    return this.maxX;
  }

  /**
   * Alias for maxY, when thinking in the UI-layout manner.
   */
  getBottom() {
    return this.maxY;
  }
  get bottom() {
    return this.maxY;
  }

  /**
   * The horizontal (X-coordinate) center of the bounds, averaging the minX and maxX.
   */
  getCenterX() {
    return (this.maxX + this.minX) / 2;
  }
  get centerX() {
    return this.getCenterX();
  }

  /**
   * The vertical (Y-coordinate) center of the bounds, averaging the minY and maxY.
   */
  getCenterY() {
    return (this.maxY + this.minY) / 2;
  }
  get centerY() {
    return this.getCenterY();
  }

  /**
   * The point (minX, minY), in the UI-coordinate upper-left.
   */
  getLeftTop() {
    return new Vector2(this.minX, this.minY);
  }
  get leftTop() {
    return this.getLeftTop();
  }

  /**
   * The point (centerX, minY), in the UI-coordinate upper-center.
   */
  getCenterTop() {
    return new Vector2(this.getCenterX(), this.minY);
  }
  get centerTop() {
    return this.getCenterTop();
  }

  /**
   * The point (right, minY), in the UI-coordinate upper-right.
   */
  getRightTop() {
    return new Vector2(this.maxX, this.minY);
  }
  get rightTop() {
    return this.getRightTop();
  }

  /**
   * The point (left, centerY), in the UI-coordinate center-left.
   */
  getLeftCenter() {
    return new Vector2(this.minX, this.getCenterY());
  }
  get leftCenter() {
    return this.getLeftCenter();
  }

  /**
   * The point (centerX, centerY), in the center of the bounds.
   */
  getCenter() {
    return new Vector2(this.getCenterX(), this.getCenterY());
  }
  get center() {
    return this.getCenter();
  }

  /**
   * The point (maxX, centerY), in the UI-coordinate center-right
   */
  getRightCenter() {
    return new Vector2(this.maxX, this.getCenterY());
  }
  get rightCenter() {
    return this.getRightCenter();
  }

  /**
   * The point (minX, maxY), in the UI-coordinate lower-left
   */
  getLeftBottom() {
    return new Vector2(this.minX, this.maxY);
  }
  get leftBottom() {
    return this.getLeftBottom();
  }

  /**
   * The point (centerX, maxY), in the UI-coordinate lower-center
   */
  getCenterBottom() {
    return new Vector2(this.getCenterX(), this.maxY);
  }
  get centerBottom() {
    return this.getCenterBottom();
  }

  /**
   * The point (maxX, maxY), in the UI-coordinate lower-right
   */
  getRightBottom() {
    return new Vector2(this.maxX, this.maxY);
  }
  get rightBottom() {
    return this.getRightBottom();
  }

  /**
   * Whether we have negative width or height. Bounds2.NOTHING is a prime example of an empty Bounds2.
   * Bounds with width = height = 0 are considered not empty, since they include the single (0,0) point.
   */
  isEmpty() {
    return this.getWidth() < 0 || this.getHeight() < 0;
  }

  /**
   * Whether our minimums and maximums are all finite numbers. This will exclude Bounds2.NOTHING and Bounds2.EVERYTHING.
   */
  isFinite() {
    return isFinite(this.minX) && isFinite(this.minY) && isFinite(this.maxX) && isFinite(this.maxY);
  }

  /**
   * Whether this bounds has a non-zero area (non-zero positive width and height).
   */
  hasNonzeroArea() {
    return this.getWidth() > 0 && this.getHeight() > 0;
  }

  /**
   * Whether this bounds has a finite and non-negative width and height.
   */
  isValid() {
    return !this.isEmpty() && this.isFinite();
  }

  /**
   * If the position is inside the bounds, the position will be returned. Otherwise, this will return a new position
   * on the edge of the bounds that is the closest to the provided position.
   */
  closestPointTo(position) {
    if (this.containsCoordinates(position.x, position.y)) {
      return position;
    } else {
      const xConstrained = Math.max(Math.min(position.x, this.maxX), this.x);
      const yConstrained = Math.max(Math.min(position.y, this.maxY), this.y);
      return new Vector2(xConstrained, yConstrained);
    }
  }

  /**
   * Whether the coordinates are contained inside the bounding box, or are on the boundary.
   *
   * @param x - X coordinate of the point to check
   * @param y - Y coordinate of the point to check
   */
  containsCoordinates(x, y) {
    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;
  }

  /**
   * Whether the point is contained inside the bounding box, or is on the boundary.
   */
  containsPoint(point) {
    return this.containsCoordinates(point.x, point.y);
  }

  /**
   * Whether this bounding box completely contains the bounding box passed as a parameter. The boundary of a box is
   * considered to be "contained".
   */
  containsBounds(bounds) {
    return this.minX <= bounds.minX && this.maxX >= bounds.maxX && this.minY <= bounds.minY && this.maxY >= bounds.maxY;
  }

  /**
   * Whether this and another bounding box have any points of intersection (including touching boundaries).
   */
  intersectsBounds(bounds) {
    const minX = Math.max(this.minX, bounds.minX);
    const minY = Math.max(this.minY, bounds.minY);
    const maxX = Math.min(this.maxX, bounds.maxX);
    const maxY = Math.min(this.maxY, bounds.maxY);
    return maxX - minX >= 0 && maxY - minY >= 0;
  }

  /**
   * The squared distance from the input point to the point closest to it inside the bounding box.
   */
  minimumDistanceToPointSquared(point) {
    const closeX = point.x < this.minX ? this.minX : point.x > this.maxX ? this.maxX : null;
    const closeY = point.y < this.minY ? this.minY : point.y > this.maxY ? this.maxY : null;
    let d;
    if (closeX === null && closeY === null) {
      // inside, or on the boundary
      return 0;
    } else if (closeX === null) {
      // vertically directly above/below
      d = closeY - point.y;
      return d * d;
    } else if (closeY === null) {
      // horizontally directly to the left/right
      d = closeX - point.x;
      return d * d;
    } else {
      // corner case
      const dx = closeX - point.x;
      const dy = closeY - point.y;
      return dx * dx + dy * dy;
    }
  }

  /**
   * The squared distance from the input point to the point furthest from it inside the bounding box.
   */
  maximumDistanceToPointSquared(point) {
    let x = point.x > this.getCenterX() ? this.minX : this.maxX;
    let y = point.y > this.getCenterY() ? this.minY : this.maxY;
    x -= point.x;
    y -= point.y;
    return x * x + y * y;
  }

  /**
   * Debugging string for the bounds.
   */
  toString() {
    return `[x:(${this.minX},${this.maxX}),y:(${this.minY},${this.maxY})]`;
  }

  /**
   * Exact equality comparison between this bounds and another bounds.
   *
   * @returns - Whether the two bounds are equal
   */
  equals(other) {
    return this.minX === other.minX && this.minY === other.minY && this.maxX === other.maxX && this.maxY === other.maxY;
  }

  /**
   * Approximate equality comparison between this bounds and another bounds.
   *
   * @returns - Whether difference between the two bounds has no min/max with an absolute value greater
   *            than epsilon.
   */
  equalsEpsilon(other, epsilon) {
    epsilon = epsilon !== undefined ? epsilon : 0;
    const thisFinite = this.isFinite();
    const otherFinite = other.isFinite();
    if (thisFinite && otherFinite) {
      // both are finite, so we can use Math.abs() - it would fail with non-finite values like Infinity
      return Math.abs(this.minX - other.minX) < epsilon && Math.abs(this.minY - other.minY) < epsilon && Math.abs(this.maxX - other.maxX) < epsilon && Math.abs(this.maxY - other.maxY) < epsilon;
    } else if (thisFinite !== otherFinite) {
      return false; // one is finite, the other is not. definitely not equal
    } else if (this === other) {
      return true; // exact same instance, must be equal
    } else {
      // epsilon only applies on finite dimensions. due to JS's handling of isFinite(), it's faster to check the sum of both
      return (isFinite(this.minX + other.minX) ? Math.abs(this.minX - other.minX) < epsilon : this.minX === other.minX) && (isFinite(this.minY + other.minY) ? Math.abs(this.minY - other.minY) < epsilon : this.minY === other.minY) && (isFinite(this.maxX + other.maxX) ? Math.abs(this.maxX - other.maxX) < epsilon : this.maxX === other.maxX) && (isFinite(this.maxY + other.maxY) ? Math.abs(this.maxY - other.maxY) < epsilon : this.maxY === other.maxY);
    }
  }

  /*---------------------------------------------------------------------------*
   * Immutable operations
   *---------------------------------------------------------------------------*/

  /**
   * Creates a copy of this bounds, or if a bounds is passed in, set that bounds's values to ours.
   *
   * This is the immutable form of the function set(), if a bounds is provided. This will return a new bounds, and
   * will not modify this bounds.
   *
   * @param [bounds] - If not provided, creates a new Bounds2 with filled in values. Otherwise, fills in the
   *                   values of the provided bounds so that it equals this bounds.
   */
  copy(bounds) {
    if (bounds) {
      return bounds.set(this);
    } else {
      return b2(this.minX, this.minY, this.maxX, this.maxY);
    }
  }

  /**
   * The smallest bounds that contains both this bounds and the input bounds, returned as a copy.
   *
   * This is the immutable form of the function includeBounds(). This will return a new bounds, and will not modify
   * this bounds.
   */
  union(bounds) {
    return b2(Math.min(this.minX, bounds.minX), Math.min(this.minY, bounds.minY), Math.max(this.maxX, bounds.maxX), Math.max(this.maxY, bounds.maxY));
  }

  /**
   * The smallest bounds that is contained by both this bounds and the input bounds, returned as a copy.
   *
   * This is the immutable form of the function constrainBounds(). This will return a new bounds, and will not modify
   * this bounds.
   */
  intersection(bounds) {
    return b2(Math.max(this.minX, bounds.minX), Math.max(this.minY, bounds.minY), Math.min(this.maxX, bounds.maxX), Math.min(this.maxY, bounds.maxY));
  }

  // TODO: difference should be well-defined, but more logic is needed to compute

  /**
   * The smallest bounds that contains this bounds and the point (x,y), returned as a copy.
   *
   * This is the immutable form of the function addCoordinates(). This will return a new bounds, and will not modify
   * this bounds.
   */
  withCoordinates(x, y) {
    return b2(Math.min(this.minX, x), Math.min(this.minY, y), Math.max(this.maxX, x), Math.max(this.maxY, y));
  }

  /**
   * The smallest bounds that contains this bounds and the input point, returned as a copy.
   *
   * This is the immutable form of the function addPoint(). This will return a new bounds, and will not modify
   * this bounds.
   */
  withPoint(point) {
    return this.withCoordinates(point.x, point.y);
  }

  /**
   * Returns the smallest bounds that contains both this bounds and the x value provided.
   *
   * This is the immutable form of the function addX(). This will return a new bounds, and will not modify
   * this bounds.
   */
  withX(x) {
    return this.copy().addX(x);
  }

  /**
   * Returns the smallest bounds that contains both this bounds and the y value provided.
   *
   * This is the immutable form of the function addY(). This will return a new bounds, and will not modify
   * this bounds.
   */
  withY(y) {
    return this.copy().addY(y);
  }

  /**
   * A copy of this bounds, with minX replaced with the input.
   *
   * This is the immutable form of the function setMinX(). This will return a new bounds, and will not modify
   * this bounds.
   */
  withMinX(minX) {
    return b2(minX, this.minY, this.maxX, this.maxY);
  }

  /**
   * A copy of this bounds, with minY replaced with the input.
   *
   * This is the immutable form of the function setMinY(). This will return a new bounds, and will not modify
   * this bounds.
   */
  withMinY(minY) {
    return b2(this.minX, minY, this.maxX, this.maxY);
  }

  /**
   * A copy of this bounds, with maxX replaced with the input.
   *
   * This is the immutable form of the function setMaxX(). This will return a new bounds, and will not modify
   * this bounds.
   */
  withMaxX(maxX) {
    return b2(this.minX, this.minY, maxX, this.maxY);
  }

  /**
   * A copy of this bounds, with maxY replaced with the input.
   *
   * This is the immutable form of the function setMaxY(). This will return a new bounds, and will not modify
   * this bounds.
   */
  withMaxY(maxY) {
    return b2(this.minX, this.minY, this.maxX, maxY);
  }

  /**
   * A copy of this bounds, with the minimum values rounded down to the nearest integer, and the maximum values
   * rounded up to the nearest integer. This causes the bounds to expand as necessary so that its boundaries
   * are integer-aligned.
   *
   * This is the immutable form of the function roundOut(). This will return a new bounds, and will not modify
   * this bounds.
   */
  roundedOut() {
    return b2(Math.floor(this.minX), Math.floor(this.minY), Math.ceil(this.maxX), Math.ceil(this.maxY));
  }

  /**
   * A copy of this bounds, with the minimum values rounded up to the nearest integer, and the maximum values
   * rounded down to the nearest integer. This causes the bounds to contract as necessary so that its boundaries
   * are integer-aligned.
   *
   * This is the immutable form of the function roundIn(). This will return a new bounds, and will not modify
   * this bounds.
   */
  roundedIn() {
    return b2(Math.ceil(this.minX), Math.ceil(this.minY), Math.floor(this.maxX), Math.floor(this.maxY));
  }

  /**
   * A bounding box (still axis-aligned) that contains the transformed shape of this bounds, applying the matrix as
   * an affine transformation.
   *
   * NOTE: bounds.transformed( matrix ).transformed( inverse ) may be larger than the original box, if it includes
   * a rotation that isn't a multiple of $\pi/2$. This is because the returned bounds may expand in area to cover
   * ALL of the corners of the transformed bounding box.
   *
   * This is the immutable form of the function transform(). This will return a new bounds, and will not modify
   * this bounds.
   */
  transformed(matrix) {
    return this.copy().transform(matrix);
  }

  /**
   * A bounding box that is expanded on all sides by the specified amount.)
   *
   * This is the immutable form of the function dilate(). This will return a new bounds, and will not modify
   * this bounds.
   */
  dilated(d) {
    return this.dilatedXY(d, d);
  }

  /**
   * A bounding box that is expanded horizontally (on the left and right) by the specified amount.
   *
   * This is the immutable form of the function dilateX(). This will return a new bounds, and will not modify
   * this bounds.
   */
  dilatedX(x) {
    return b2(this.minX - x, this.minY, this.maxX + x, this.maxY);
  }

  /**
   * A bounding box that is expanded vertically (on the top and bottom) by the specified amount.
   *
   * This is the immutable form of the function dilateY(). This will return a new bounds, and will not modify
   * this bounds.
   */
  dilatedY(y) {
    return b2(this.minX, this.minY - y, this.maxX, this.maxY + y);
  }

  /**
   * A bounding box that is expanded on all sides, with different amounts of expansion horizontally and vertically.
   * Will be identical to the bounds returned by calling bounds.dilatedX( x ).dilatedY( y ).
   *
   * This is the immutable form of the function dilateXY(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param x - Amount to dilate horizontally (for each side)
   * @param y - Amount to dilate vertically (for each side)
   */
  dilatedXY(x, y) {
    return b2(this.minX - x, this.minY - y, this.maxX + x, this.maxY + y);
  }

  /**
   * A bounding box that is contracted on all sides by the specified amount.
   *
   * This is the immutable form of the function erode(). This will return a new bounds, and will not modify
   * this bounds.
   */
  eroded(amount) {
    return this.dilated(-amount);
  }

  /**
   * A bounding box that is contracted horizontally (on the left and right) by the specified amount.
   *
   * This is the immutable form of the function erodeX(). This will return a new bounds, and will not modify
   * this bounds.
   */
  erodedX(x) {
    return this.dilatedX(-x);
  }

  /**
   * A bounding box that is contracted vertically (on the top and bottom) by the specified amount.
   *
   * This is the immutable form of the function erodeY(). This will return a new bounds, and will not modify
   * this bounds.
   */
  erodedY(y) {
    return this.dilatedY(-y);
  }

  /**
   * A bounding box that is contracted on all sides, with different amounts of contraction horizontally and vertically.
   *
   * This is the immutable form of the function erodeXY(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param x - Amount to erode horizontally (for each side)
   * @param y - Amount to erode vertically (for each side)
   */
  erodedXY(x, y) {
    return this.dilatedXY(-x, -y);
  }

  /**
   * A bounding box that is expanded by a specific amount on all sides (or if some offsets are negative, will contract
   * those sides).
   *
   * This is the immutable form of the function offset(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param left - Amount to expand to the left (subtracts from minX)
   * @param top - Amount to expand to the top (subtracts from minY)
   * @param right - Amount to expand to the right (adds to maxX)
   * @param bottom - Amount to expand to the bottom (adds to maxY)
   */
  withOffsets(left, top, right, bottom) {
    return b2(this.minX - left, this.minY - top, this.maxX + right, this.maxY + bottom);
  }

  /**
   * Our bounds, translated horizontally by x, returned as a copy.
   *
   * This is the immutable form of the function shiftX(). This will return a new bounds, and will not modify
   * this bounds.
   */
  shiftedX(x) {
    return b2(this.minX + x, this.minY, this.maxX + x, this.maxY);
  }

  /**
   * Our bounds, translated vertically by y, returned as a copy.
   *
   * This is the immutable form of the function shiftY(). This will return a new bounds, and will not modify
   * this bounds.
   */
  shiftedY(y) {
    return b2(this.minX, this.minY + y, this.maxX, this.maxY + y);
  }

  /**
   * Our bounds, translated by (x,y), returned as a copy.
   *
   * This is the immutable form of the function shift(). This will return a new bounds, and will not modify
   * this bounds.
   */
  shiftedXY(x, y) {
    return b2(this.minX + x, this.minY + y, this.maxX + x, this.maxY + y);
  }

  /**
   * Returns our bounds, translated by a vector, returned as a copy.
   */
  shifted(v) {
    return this.shiftedXY(v.x, v.y);
  }

  /**
   * Returns an interpolated value of this bounds and the argument.
   *
   * @param bounds
   * @param ratio - 0 will result in a copy of `this`, 1 will result in bounds, and in-between controls the
   *                         amount of each.
   */
  blend(bounds, ratio) {
    const t = 1 - ratio;
    return b2(t * this.minX + ratio * bounds.minX, t * this.minY + ratio * bounds.minY, t * this.maxX + ratio * bounds.maxX, t * this.maxY + ratio * bounds.maxY);
  }

  /*---------------------------------------------------------------------------*
   * Mutable operations
   *
   * All mutable operations should call one of the following:
   *   setMinMax, setMinX, setMinY, setMaxX, setMaxY
   *---------------------------------------------------------------------------*/

  /**
   * Sets each value for this bounds, and returns itself.
   */
  setMinMax(minX, minY, maxX, maxY) {
    this.minX = minX;
    this.minY = minY;
    this.maxX = maxX;
    this.maxY = maxY;
    return this;
  }

  /**
   * Sets the value of minX.
   *
   * This is the mutable form of the function withMinX(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  setMinX(minX) {
    this.minX = minX;
    return this;
  }

  /**
   * Sets the value of minY.
   *
   * This is the mutable form of the function withMinY(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  setMinY(minY) {
    this.minY = minY;
    return this;
  }

  /**
   * Sets the value of maxX.
   *
   * This is the mutable form of the function withMaxX(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  setMaxX(maxX) {
    this.maxX = maxX;
    return this;
  }

  /**
   * Sets the value of maxY.
   *
   * This is the mutable form of the function withMaxY(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  setMaxY(maxY) {
    this.maxY = maxY;
    return this;
  }

  /**
   * Sets the values of this bounds to be equal to the input bounds.
   *
   * This is the mutable form of the function copy(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  set(bounds) {
    return this.setMinMax(bounds.minX, bounds.minY, bounds.maxX, bounds.maxY);
  }

  /**
   * Modifies this bounds so that it contains both its original bounds and the input bounds.
   *
   * This is the mutable form of the function union(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  includeBounds(bounds) {
    return this.setMinMax(Math.min(this.minX, bounds.minX), Math.min(this.minY, bounds.minY), Math.max(this.maxX, bounds.maxX), Math.max(this.maxY, bounds.maxY));
  }

  /**
   * Modifies this bounds so that it is the largest bounds contained both in its original bounds and in the input bounds.
   *
   * This is the mutable form of the function intersection(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  constrainBounds(bounds) {
    return this.setMinMax(Math.max(this.minX, bounds.minX), Math.max(this.minY, bounds.minY), Math.min(this.maxX, bounds.maxX), Math.min(this.maxY, bounds.maxY));
  }

  /**
   * Modifies this bounds so that it contains both its original bounds and the input point (x,y).
   *
   * This is the mutable form of the function withCoordinates(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  addCoordinates(x, y) {
    return this.setMinMax(Math.min(this.minX, x), Math.min(this.minY, y), Math.max(this.maxX, x), Math.max(this.maxY, y));
  }

  /**
   * Modifies this bounds so that it contains both its original bounds and the input point.
   *
   * This is the mutable form of the function withPoint(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  addPoint(point) {
    return this.addCoordinates(point.x, point.y);
  }

  /**
   * Modifies this bounds so that it is guaranteed to include the given x value (if it didn't already). If the x value
   * was already contained, nothing will be done.
   *
   * This is the mutable form of the function withX(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  addX(x) {
    this.minX = Math.min(x, this.minX);
    this.maxX = Math.max(x, this.maxX);
    return this;
  }

  /**
   * Modifies this bounds so that it is guaranteed to include the given y value (if it didn't already). If the y value
   * was already contained, nothing will be done.
   *
   * This is the mutable form of the function withY(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  addY(y) {
    this.minY = Math.min(y, this.minY);
    this.maxY = Math.max(y, this.maxY);
    return this;
  }

  /**
   * Modifies this bounds so that its boundaries are integer-aligned, rounding the minimum boundaries down and the
   * maximum boundaries up (expanding as necessary).
   *
   * This is the mutable form of the function roundedOut(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  roundOut() {
    return this.setMinMax(Math.floor(this.minX), Math.floor(this.minY), Math.ceil(this.maxX), Math.ceil(this.maxY));
  }

  /**
   * Modifies this bounds so that its boundaries are integer-aligned, rounding the minimum boundaries up and the
   * maximum boundaries down (contracting as necessary).
   *
   * This is the mutable form of the function roundedIn(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  roundIn() {
    return this.setMinMax(Math.ceil(this.minX), Math.ceil(this.minY), Math.floor(this.maxX), Math.floor(this.maxY));
  }

  /**
   * Modifies this bounds so that it would fully contain a transformed version if its previous value, applying the
   * matrix as an affine transformation.
   *
   * NOTE: bounds.transform( matrix ).transform( inverse ) may be larger than the original box, if it includes
   * a rotation that isn't a multiple of $\pi/2$. This is because the bounds may expand in area to cover
   * ALL of the corners of the transformed bounding box.
   *
   * This is the mutable form of the function transformed(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  transform(matrix) {
    // if we contain no area, no change is needed
    if (this.isEmpty()) {
      return this;
    }

    // optimization to bail for identity matrices
    if (matrix.isIdentity()) {
      return this;
    }
    const minX = this.minX;
    const minY = this.minY;
    const maxX = this.maxX;
    const maxY = this.maxY;
    this.set(Bounds2.NOTHING);

    // using mutable vector so we don't create excessive instances of Vector2 during this
    // make sure all 4 corners are inside this transformed bounding box

    this.addPoint(matrix.multiplyVector2(scratchVector2.setXY(minX, minY)));
    this.addPoint(matrix.multiplyVector2(scratchVector2.setXY(minX, maxY)));
    this.addPoint(matrix.multiplyVector2(scratchVector2.setXY(maxX, minY)));
    this.addPoint(matrix.multiplyVector2(scratchVector2.setXY(maxX, maxY)));
    return this;
  }

  /**
   * Expands this bounds on all sides by the specified amount.
   *
   * This is the mutable form of the function dilated(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  dilate(d) {
    return this.dilateXY(d, d);
  }

  /**
   * Expands this bounds horizontally (left and right) by the specified amount.
   *
   * This is the mutable form of the function dilatedX(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  dilateX(x) {
    return this.setMinMax(this.minX - x, this.minY, this.maxX + x, this.maxY);
  }

  /**
   * Expands this bounds vertically (top and bottom) by the specified amount.
   *
   * This is the mutable form of the function dilatedY(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  dilateY(y) {
    return this.setMinMax(this.minX, this.minY - y, this.maxX, this.maxY + y);
  }

  /**
   * Expands this bounds independently in the horizontal and vertical directions. Will be equal to calling
   * bounds.dilateX( x ).dilateY( y ).
   *
   * This is the mutable form of the function dilatedXY(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  dilateXY(x, y) {
    return this.setMinMax(this.minX - x, this.minY - y, this.maxX + x, this.maxY + y);
  }

  /**
   * Contracts this bounds on all sides by the specified amount.
   *
   * This is the mutable form of the function eroded(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  erode(d) {
    return this.dilate(-d);
  }

  /**
   * Contracts this bounds horizontally (left and right) by the specified amount.
   *
   * This is the mutable form of the function erodedX(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  erodeX(x) {
    return this.dilateX(-x);
  }

  /**
   * Contracts this bounds vertically (top and bottom) by the specified amount.
   *
   * This is the mutable form of the function erodedY(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  erodeY(y) {
    return this.dilateY(-y);
  }

  /**
   * Contracts this bounds independently in the horizontal and vertical directions. Will be equal to calling
   * bounds.erodeX( x ).erodeY( y ).
   *
   * This is the mutable form of the function erodedXY(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  erodeXY(x, y) {
    return this.dilateXY(-x, -y);
  }

  /**
   * Expands this bounds independently for each side (or if some offsets are negative, will contract those sides).
   *
   * This is the mutable form of the function withOffsets(). This will mutate (change) this bounds, in addition to
   * returning this bounds itself.
   *
   * @param left - Amount to expand to the left (subtracts from minX)
   * @param top - Amount to expand to the top (subtracts from minY)
   * @param right - Amount to expand to the right (adds to maxX)
   * @param bottom - Amount to expand to the bottom (adds to maxY)
   */
  offset(left, top, right, bottom) {
    return b2(this.minX - left, this.minY - top, this.maxX + right, this.maxY + bottom);
  }

  /**
   * Translates our bounds horizontally by x.
   *
   * This is the mutable form of the function shiftedX(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  shiftX(x) {
    return this.setMinMax(this.minX + x, this.minY, this.maxX + x, this.maxY);
  }

  /**
   * Translates our bounds vertically by y.
   *
   * This is the mutable form of the function shiftedY(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  shiftY(y) {
    return this.setMinMax(this.minX, this.minY + y, this.maxX, this.maxY + y);
  }

  /**
   * Translates our bounds by (x,y).
   *
   * This is the mutable form of the function shifted(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   */
  shiftXY(x, y) {
    return this.setMinMax(this.minX + x, this.minY + y, this.maxX + x, this.maxY + y);
  }

  /**
   * Translates our bounds by the given vector.
   */
  shift(v) {
    return this.shiftXY(v.x, v.y);
  }

  /**
   * Returns the range of the x-values of this bounds.
   */
  getXRange() {
    return new js_Range(this.minX, this.maxX);
  }

  /**
   * Sets the x-range of this bounds.
   */
  setXRange(range) {
    return this.setMinMax(range.min, this.minY, range.max, this.maxY);
  }
  get xRange() {
    return this.getXRange();
  }
  set xRange(range) {
    this.setXRange(range);
  }

  /**
   * Returns the range of the y-values of this bounds.
   */
  getYRange() {
    return new js_Range(this.minY, this.maxY);
  }

  /**
   * Sets the y-range of this bounds.
   */
  setYRange(range) {
    return this.setMinMax(this.minX, range.min, this.maxX, range.max);
  }
  get yRange() {
    return this.getYRange();
  }
  set yRange(range) {
    this.setYRange(range);
  }

  /**
   * Find a point in the bounds closest to the specified point.
   *
   * @param x - X coordinate of the point to test.
   * @param y - Y coordinate of the point to test.
   * @param [result] - Vector2 that can store the return value to avoid allocations.
   */
  getClosestPoint(x, y, result) {
    if (result) {
      result.setXY(x, y);
    } else {
      result = new Vector2(x, y);
    }
    if (result.x < this.minX) {
      result.x = this.minX;
    }
    if (result.x > this.maxX) {
      result.x = this.maxX;
    }
    if (result.y < this.minY) {
      result.y = this.minY;
    }
    if (result.y > this.maxY) {
      result.y = this.maxY;
    }
    return result;
  }
  freeToPool() {
    Bounds2.pool.freeToPool(this);
  }
  static pool = new Pool(Bounds2, {
    initialize: Bounds2.prototype.setMinMax,
    defaultArguments: [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY]
  });

  /**
   * Returns a new Bounds2 object, with the familiar rectangle construction with x, y, width, and height.
   *
   * @param x - The minimum value of X for the bounds.
   * @param y - The minimum value of Y for the bounds.
   * @param width - The width (maxX - minX) of the bounds.
   * @param height - The height (maxY - minY) of the bounds.
   */
  static rect(x, y, width, height) {
    return b2(x, y, x + width, y + height);
  }

  /**
   * Returns a new Bounds2 object with a given orientation (min/max specified for both the given (primary) orientation,
   * and also the secondary orientation).
   */
  static oriented(orientation, minPrimary, minSecondary, maxPrimary, maxSecondary) {
    return orientation === js_Orientation.HORIZONTAL ? new Bounds2(minPrimary, minSecondary, maxPrimary, maxSecondary) : new Bounds2(minSecondary, minPrimary, maxSecondary, maxPrimary);
  }

  /**
   * Returns a new Bounds2 object that only contains the specified point (x,y). Useful for being dilated to form a
   * bounding box around a point. Note that the bounds will not be "empty" as it contains (x,y), but it will have
   * zero area. The x and y coordinates can be specified by numbers or with at Vector2
   *
   * @param x
   * @param y
   */

  // eslint-disable-line @typescript-eslint/explicit-member-accessibility
  static point(x, y) {
    // eslint-disable-line @typescript-eslint/explicit-member-accessibility
    if (x instanceof Vector2) {
      const p = x;
      return b2(p.x, p.y, p.x, p.y);
    } else {
      return b2(x, y, x, y);
    }
  }

  // Helps to identify the dimension of the bounds

  /**
   * A constant Bounds2 with minimums = $\infty$, maximums = $-\infty$, so that it represents "no bounds whatsoever".
   *
   * This allows us to take the union (union/includeBounds) of this and any other Bounds2 to get the other bounds back,
   * e.g. Bounds2.NOTHING.union( bounds ).equals( bounds ). This object naturally serves as the base case as a union of
   * zero bounds objects.
   *
   * Additionally, intersections with NOTHING will always return a Bounds2 equivalent to NOTHING.
   */
  static NOTHING = new Bounds2(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);

  /**
   * A constant Bounds2 with minimums = $-\infty$, maximums = $\infty$, so that it represents "all bounds".
   *
   * This allows us to take the intersection (intersection/constrainBounds) of this and any other Bounds2 to get the
   * other bounds back, e.g. Bounds2.EVERYTHING.intersection( bounds ).equals( bounds ). This object naturally serves as
   * the base case as an intersection of zero bounds objects.
   *
   * Additionally, unions with EVERYTHING will always return a Bounds2 equivalent to EVERYTHING.
   */
  static EVERYTHING = new Bounds2(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
  static Bounds2IO = new IOType('Bounds2IO', {
    valueType: Bounds2,
    documentation: 'a 2-dimensional bounds rectangle',
    toStateObject: bounds2 => ({
      minX: bounds2.minX,
      minY: bounds2.minY,
      maxX: bounds2.maxX,
      maxY: bounds2.maxY
    }),
    fromStateObject: stateObject => {
      return new Bounds2(types_InfiniteNumberIO.fromStateObject(stateObject.minX), types_InfiniteNumberIO.fromStateObject(stateObject.minY), types_InfiniteNumberIO.fromStateObject(stateObject.maxX), types_InfiniteNumberIO.fromStateObject(stateObject.maxY));
    },
    stateSchema: {
      minX: types_InfiniteNumberIO,
      maxX: types_InfiniteNumberIO,
      minY: types_InfiniteNumberIO,
      maxY: types_InfiniteNumberIO
    }
  });
}
js_dot.register('Bounds2', Bounds2);
const b2 = Bounds2.pool.create.bind(Bounds2.pool);
js_dot.register('b2', b2);
Bounds2.prototype.isBounds = true;
Bounds2.prototype.dimension = 2;
function catchImmutableSetterLowHangingFruit(bounds) {
  bounds.setMinMax = () => {
    throw new Error('Attempt to set "setMinMax" of an immutable Bounds2 object');
  };
  bounds.set = () => {
    throw new Error('Attempt to set "set" of an immutable Bounds2 object');
  };
  bounds.includeBounds = () => {
    throw new Error('Attempt to set "includeBounds" of an immutable Bounds2 object');
  };
  bounds.constrainBounds = () => {
    throw new Error('Attempt to set "constrainBounds" of an immutable Bounds2 object');
  };
  bounds.addCoordinates = () => {
    throw new Error('Attempt to set "addCoordinates" of an immutable Bounds2 object');
  };
  bounds.transform = () => {
    throw new Error('Attempt to set "transform" of an immutable Bounds2 object');
  };
}
if (assert) {
  catchImmutableSetterLowHangingFruit(Bounds2.EVERYTHING);
  catchImmutableSetterLowHangingFruit(Bounds2.NOTHING);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/BinPacker.js
// Copyright 2015-2023, University of Colorado Boulder

/**
 * Given a rectangular containing area, takes care of allocating and deallocating smaller rectangular "bins" that fit
 * together inside the area and do not overlap. Optimized more for runtime CPU usage than space currently.
 *
 * For example:
 * #begin canvasExample binPacker 256x256
 * #on
 * var binPacker = new phet.dot.BinPacker( new dot.Bounds2( 0, 0, 256, 256 ) );
 * var bins = [];
 * for ( var i = 0; i < 100; i++ ) {
 *   var bin = binPacker.allocate( Math.random() * 64, Math.random() * 64 );
 *   if ( bin ) {
 *     bins.push( bin );
 *   }
 * }
 * #off
 *
 * context.strokeStyle = '#000';
 * bins.forEach( function( bin ) {
 *   var bounds = bin.bounds;
 *   context.strokeRect( bounds.x, bounds.y, bounds.width, bounds.height );
 * } );
 * #end canvasExample
 *
 * @author Sharfudeen Ashraf
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



class BinPacker {
  /**
   * Creates a BinPacker with the specified containing bounds.
   *
   * @param bounds - The available bounds to pack bins inside.
   */
  constructor(bounds) {
    this.rootBin = new Bin(bounds, null);
  }

  /**
   * Allocates a bin with the specified width and height if possible (returning a {Bin}), otherwise returns null.
   */
  allocate(width, height) {
    // find a leaf bin that has available room (or null)
    const bin = this.rootBin.findAvailableBin(width, height);
    if (bin) {
      // split it into a sized sub-bin for our purpose that we will use, and other bins for future allocations
      const sizedBin = bin.split(width, height);

      // mark our bin as used
      sizedBin.use();
      return sizedBin;
    } else {
      return null;
    }
  }

  /**
   * Deallocates a bin, so that its area can be reused by future allocations.
   *
   * @param bin - The bin that was returned from allocate().
   */
  deallocate(bin) {
    bin.unuse();
  }
  toString() {
    let result = '';
    let padding = '';
    function binTree(bin) {
      result += `${padding + bin.toString()}\n`;
      padding = `${padding}  `;
      _.each(bin.children, binTree);
      padding = padding.substring(2);
    }
    binTree(this.rootBin);
    return result;
  }
}
js_dot.register('BinPacker', BinPacker);
class Bin {
  // Our containing bounds

  // Parent bin, if applicable

  // Whether our children are responsible for our area

  // Whether we are marked as a bin that is used

  // (dot-internal)

  /**
   * A rectangular bin that can be used itself or split into sub-bins.
   */
  constructor(bounds, parent) {
    this.bounds = bounds;
    this.parent = parent;
    this.isSplit = false;
    this.isUsed = false;
    this.children = [];
  }

  /**
   * Finds an unused bin with open area that is at least width-x-height in size. (dot-internal)
   */
  findAvailableBin(width, height) {
    assert && assert(width > 0 && height > 0, 'Empty bin requested?');

    // If we are marked as used ourself, we can't be used
    if (this.isUsed) {
      return null;
    }
    // If our bounds can't fit it, skip this entire sub-tree
    else if (this.bounds.width < width || this.bounds.height < height) {
      return null;
    }
    // If we have been split, check our children
    else if (this.isSplit) {
      for (let i = 0; i < this.children.length; i++) {
        const result = this.children[i].findAvailableBin(width, height);
        if (result) {
          return result;
        }
      }
      // No child can fit the area
      return null;
    }
    // Otherwise we are free and our dimensions are compatible (checked above)
    else {
      return this;
    }
  }

  /**
   * Splits this bin into multiple child bins, and returns the child with the dimensions (width,height). (dot-internal)
   */
  split(width, height) {
    assert && assert(this.bounds.width >= width && this.bounds.height >= height, 'Bin does not have space');
    assert && assert(!this.isSplit, 'Bin should not be re-split');
    assert && assert(!this.isUsed, 'Bin should not be split when used');
    assert && assert(width > 0 && height > 0, 'Empty bin requested?');

    // if our dimensions match exactly, don't split (return ourself)
    if (width === this.bounds.width && height === this.bounds.height) {
      return this;
    }

    // mark as split
    this.isSplit = true;

    // locations of the split
    const splitX = this.bounds.minX + width;
    const splitY = this.bounds.minY + height;

    /*
     * How an area is split (for now). In the future, splitting more after determining what we need to fit next would
     * potentially be better, but this preserves the width better (which many times we need).
     *
     *   ************************************
     *   *                  *               *
     *   *                  *               *
     *   *       main       *     right     *
     *   * (width x height) *               *
     *   *                  *               *
     *   ************************************
     *   *                                  *
     *   *              bottom              *
     *   *                                  *
     *   ************************************
     */
    const mainBounds = new Bounds2(this.bounds.minX, this.bounds.minY, splitX, splitY);
    const rightBounds = new Bounds2(splitX, this.bounds.minY, this.bounds.maxX, splitY);
    const bottomBounds = new Bounds2(this.bounds.minX, splitY, this.bounds.maxX, this.bounds.maxY);
    const mainBin = new Bin(mainBounds, this);
    this.children.push(mainBin);

    // only add right/bottom if they take up area
    if (rightBounds.hasNonzeroArea()) {
      this.children.push(new Bin(rightBounds, this));
    }
    if (bottomBounds.hasNonzeroArea()) {
      this.children.push(new Bin(bottomBounds, this));
    }
    return mainBin;
  }

  /**
   * Mark this bin as used. (dot-internal)
   */
  use() {
    assert && assert(!this.isSplit, 'Should not mark a split bin as used');
    assert && assert(!this.isUsed, 'Should not mark a used bin as used');
    this.isUsed = true;
  }

  /**
   * Mark this bin as not used, and attempt to collapse split parents if all children are unused. (dot-internal)
   */
  unuse() {
    assert && assert(this.isUsed, 'Can only unuse a used instance');
    this.isUsed = false;
    this.parent && this.parent.attemptToCollapse();
  }

  /**
   * If our bin can be collapsed (it is split and has children that are not used AND not split), then we will become
   * not split, and will remove our children. If successful, it will also call this on our parent, fully attempting
   * to clean up unused data structures.
   */
  attemptToCollapse() {
    assert && assert(this.isSplit, 'Should only attempt to collapse split bins');

    // Bail out if a single child isn't able to be collapsed. If it is not split or used, it won't have any children
    // or needs.
    for (let i = 0; i < this.children.length; i++) {
      const child = this.children[i];
      if (child.isSplit || child.isUsed) {
        return;
      }
    }

    // We can now collapse ourselves neatly
    this.children = [];
    this.isSplit = false;

    // And attempt to collapse our parent
    this.parent && this.parent.attemptToCollapse();
  }
  toString() {
    return this.bounds.toString() + (this.isUsed ? ' used' : '');
  }
}
BinPacker.Bin = Bin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Bounds3.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * A 3D cuboid-shaped bounded area (bounding box).
 *
 * There are a number of convenience functions to get locations and points on the Bounds. Currently we do not
 * store these with the Bounds3 instance, since we want to lower the memory footprint.
 *
 * minX, minY, minZ, maxX, maxY, and maxZ are actually stored. We don't do x,y,z,width,height,depth because this can't properly express
 * semi-infinite bounds (like a half-plane), or easily handle what Bounds3.NOTHING and Bounds3.EVERYTHING do with
 * the constructive solid areas.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */






class Bounds3 {
  /**
   * Creates a 3-dimensional bounds (bounding box).
   * @public
   *
   * @param {number} minX - The initial minimum X coordinate of the bounds.
   * @param {number} minY - The initial minimum Y coordinate of the bounds.
   * @param {number} minZ - The initial minimum Z coordinate of the bounds.
   * @param {number} maxX - The initial maximum X coordinate of the bounds.
   * @param {number} maxY - The initial maximum Y coordinate of the bounds.
   * @param {number} maxZ - The initial maximum Z coordinate of the bounds.
   */
  constructor(minX, minY, minZ, maxX, maxY, maxZ) {
    assert && assert(maxY !== undefined, 'Bounds3 requires 4 parameters');

    // @public {number} - The minimum X coordinate of the bounds.
    this.minX = minX;

    // @public {number} - The minimum Y coordinate of the bounds.
    this.minY = minY;

    // @public {number} - The minimum Z coordinate of the bounds.
    this.minZ = minZ;

    // @public {number} - The maximum X coordinate of the bounds.
    this.maxX = maxX;

    // @public {number} - The maximum Y coordinate of the bounds.
    this.maxY = maxY;

    // @public {number} - The maximum Z coordinate of the bounds.
    this.maxZ = maxZ;
  }

  /*---------------------------------------------------------------------------*
   * Properties
   *---------------------------------------------------------------------------*/

  /**
   * The width of the bounds, defined as maxX - minX.
   * @public
   *
   * @returns {number}
   */
  getWidth() {
    return this.maxX - this.minX;
  }
  get width() {
    return this.getWidth();
  }

  /**
   * The height of the bounds, defined as maxY - minY.
   * @public
   *
   * @returns {number}
   */
  getHeight() {
    return this.maxY - this.minY;
  }
  get height() {
    return this.getHeight();
  }

  /**
   * The depth of the bounds, defined as maxZ - minZ.
   * @public
   *
   * @returns {number}
   */
  getDepth() {
    return this.maxZ - this.minZ;
  }
  get depth() {
    return this.getDepth();
  }

  /*
   * Convenience locations
   * upper is in terms of the visual layout in Scenery and other programs, so the minY is the "upper", and minY is the "lower"
   *
   *             minX (x)     centerX        maxX
   *          ---------------------------------------
   * minY (y) | upperLeft   upperCenter   upperRight
   * centerY  | centerLeft    center      centerRight
   * maxY     | lowerLeft   lowerCenter   lowerRight
   */

  /**
   * Alias for minX, when thinking of the bounds as an (x,y,z,width,height,depth) cuboid.
   * @public
   *
   * @returns {number}
   */
  getX() {
    return this.minX;
  }
  get x() {
    return this.getX();
  }

  /**
   * Alias for minY, when thinking of the bounds as an (x,y,z,width,height,depth) cuboid.
   * @public
   *
   * @returns {number}
   */
  getY() {
    return this.minY;
  }
  get y() {
    return this.getY();
  }

  /**
   * Alias for minZ, when thinking of the bounds as an (x,y,z,width,height,depth) cuboid.
   * @public
   *
   * @returns {number}
   */
  getZ() {
    return this.minZ;
  }
  get z() {
    return this.getZ();
  }

  /**
   * Alias for minX, supporting the explicit getter function style.
   * @public
   *
   * @returns {number}
   */
  getMinX() {
    return this.minX;
  }

  /**
   * Alias for minY, supporting the explicit getter function style.
   * @public
   *
   * @returns {number}
   */
  getMinY() {
    return this.minY;
  }

  /**
   * Alias for minZ, supporting the explicit getter function style.
   * @public
   *
   * @returns {number}
   */
  getMinZ() {
    return this.minZ;
  }

  /**
   * Alias for maxX, supporting the explicit getter function style.
   * @public
   *
   * @returns {number}
   */
  getMaxX() {
    return this.maxX;
  }

  /**
   * Alias for maxY, supporting the explicit getter function style.
   * @public
   *
   * @returns {number}
   */
  getMaxY() {
    return this.maxY;
  }

  /**
   * Alias for maxZ, supporting the explicit getter function style.
   * @public
   *
   * @returns {number}
   */
  getMaxZ() {
    return this.maxZ;
  }

  /**
   * Alias for minX, when thinking in the UI-layout manner.
   * @public
   *
   * @returns {number}
   */
  getLeft() {
    return this.minX;
  }
  get left() {
    return this.minX;
  }

  /**
   * Alias for minY, when thinking in the UI-layout manner.
   * @public
   *
   * @returns {number}
   */
  getTop() {
    return this.minY;
  }
  get top() {
    return this.minY;
  }

  /**
   * Alias for minZ, when thinking in the UI-layout manner.
   * @public
   *
   * @returns {number}
   */
  getBack() {
    return this.minZ;
  }
  get back() {
    return this.minZ;
  }

  /**
   * Alias for maxX, when thinking in the UI-layout manner.
   * @public
   *
   * @returns {number}
   */
  getRight() {
    return this.maxX;
  }
  get right() {
    return this.maxX;
  }

  /**
   * Alias for maxY, when thinking in the UI-layout manner.
   * @public
   *
   * @returns {number}
   */
  getBottom() {
    return this.maxY;
  }
  get bottom() {
    return this.maxY;
  }

  /**
   * Alias for maxZ, when thinking in the UI-layout manner.
   * @public
   *
   * @returns {number}
   */
  getFront() {
    return this.maxZ;
  }
  get front() {
    return this.maxZ;
  }

  /**
   * The horizontal (X-coordinate) center of the bounds, averaging the minX and maxX.
   * @public
   *
   * @returns {number}
   */
  getCenterX() {
    return (this.maxX + this.minX) / 2;
  }
  get centerX() {
    return this.getCenterX();
  }

  /**
   * The vertical (Y-coordinate) center of the bounds, averaging the minY and maxY.
   * @public
   *
   * @returns {number}
   */
  getCenterY() {
    return (this.maxY + this.minY) / 2;
  }
  get centerY() {
    return this.getCenterY();
  }

  /**
   * The depthwise (Z-coordinate) center of the bounds, averaging the minZ and maxZ.
   * @public
   *
   * @returns {number}
   */
  getCenterZ() {
    return (this.maxZ + this.minZ) / 2;
  }
  get centerZ() {
    return this.getCenterZ();
  }

  /**
   * The point (centerX, centerY, centerZ), in the center of the bounds.
   * @public
   *
   * @returns {Vector3}
   */
  getCenter() {
    return new Vector3(this.getCenterX(), this.getCenterY(), this.getCenterZ());
  }
  get center() {
    return this.getCenter();
  }

  /**
   * Whether we have negative width, height or depth. Bounds3.NOTHING is a prime example of an empty Bounds3.
   * Bounds with width = height = depth = 0 are considered not empty, since they include the single (0,0,0) point.
   * @public
   *
   * @returns {boolean}
   */
  isEmpty() {
    return this.getWidth() < 0 || this.getHeight() < 0 || this.getDepth() < 0;
  }

  /**
   * Whether our minimums and maximums are all finite numbers. This will exclude Bounds3.NOTHING and Bounds3.EVERYTHING.
   * @public
   *
   * @returns {boolean}
   */
  isFinite() {
    return isFinite(this.minX) && isFinite(this.minY) && isFinite(this.minZ) && isFinite(this.maxX) && isFinite(this.maxY) && isFinite(this.maxZ);
  }

  /**
   * Whether this bounds has a non-zero area (non-zero positive width, height and depth).
   * @public
   *
   * @returns {boolean}
   */
  hasNonzeroArea() {
    return this.getWidth() > 0 && this.getHeight() > 0 && this.getDepth() > 0;
  }

  /**
   * Whether this bounds has a finite and non-negative width, height and depth.
   * @public
   *
   * @returns {boolean}
   */
  isValid() {
    return !this.isEmpty() && this.isFinite();
  }

  /**
   * Whether the coordinates are contained inside the bounding box, or are on the boundary.
   * @public
   *
   * @param {number} x - X coordinate of the point to check
   * @param {number} y - Y coordinate of the point to check
   * @param {number} z - Z coordinate of the point to check
   * @returns {boolean}
   */
  containsCoordinates(x, y, z) {
    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY && this.minZ <= z && z <= this.maxZ;
  }

  /**
   * Whether the point is contained inside the bounding box, or is on the boundary.
   * @public
   *
   * @param {Vector3} point
   * @returns {boolean}
   */
  containsPoint(point) {
    return this.containsCoordinates(point.x, point.y, point.z);
  }

  /**
   * Whether this bounding box completely contains the bounding box passed as a parameter. The boundary of a box is
   * considered to be "contained".
   * @public
   *
   * @param {Bounds3} bounds
   * @returns {boolean}
   */
  containsBounds(bounds) {
    return this.minX <= bounds.minX && this.maxX >= bounds.maxX && this.minY <= bounds.minY && this.maxY >= bounds.maxY && this.minZ <= bounds.minZ && this.maxZ >= bounds.maxZ;
  }

  /**
   * Whether this and another bounding box have any points of intersection (including touching boundaries).
   * @public
   *
   * @param {Bounds3} bounds
   * @returns {boolean}
   */
  intersectsBounds(bounds) {
    // TODO: more efficient way of doing this?
    return !this.intersection(bounds).isEmpty();
  }

  /**
   * Debugging string for the bounds.
   * @public
   *
   * @returns {string}
   */
  toString() {
    return `[x:(${this.minX},${this.maxX}),y:(${this.minY},${this.maxY}),z:(${this.minZ},${this.maxZ})]`;
  }

  /**
   * Exact equality comparison between this bounds and another bounds.
   * @public
   *
   * @param {Bounds3} other
   * @returns {boolean} - Whether the two bounds are equal
   */
  equals(other) {
    return this.minX === other.minX && this.minY === other.minY && this.minZ === other.minZ && this.maxX === other.maxX && this.maxY === other.maxY && this.maxZ === other.maxZ;
  }

  /**
   * Approximate equality comparison between this bounds and another bounds.
   * @public
   *
   * @param {Bounds3} other
   * @param {number} epsilon
   * @returns {boolean} - Whether difference between the two bounds has no min/max with an absolute value greater
   *                      than epsilon.
   */
  equalsEpsilon(other, epsilon) {
    epsilon = epsilon !== undefined ? epsilon : 0;
    const thisFinite = this.isFinite();
    const otherFinite = other.isFinite();
    if (thisFinite && otherFinite) {
      // both are finite, so we can use Math.abs() - it would fail with non-finite values like Infinity
      return Math.abs(this.minX - other.minX) < epsilon && Math.abs(this.minY - other.minY) < epsilon && Math.abs(this.minZ - other.minZ) < epsilon && Math.abs(this.maxX - other.maxX) < epsilon && Math.abs(this.maxY - other.maxY) < epsilon && Math.abs(this.maxZ - other.maxZ) < epsilon;
    } else if (thisFinite !== otherFinite) {
      return false; // one is finite, the other is not. definitely not equal
    } else if (this === other) {
      return true; // exact same instance, must be equal
    } else {
      // epsilon only applies on finite dimensions. due to JS's handling of isFinite(), it's faster to check the sum of both
      return (isFinite(this.minX + other.minX) ? Math.abs(this.minX - other.minX) < epsilon : this.minX === other.minX) && (isFinite(this.minY + other.minY) ? Math.abs(this.minY - other.minY) < epsilon : this.minY === other.minY) && (isFinite(this.minZ + other.minZ) ? Math.abs(this.minZ - other.minZ) < epsilon : this.minZ === other.minZ) && (isFinite(this.maxX + other.maxX) ? Math.abs(this.maxX - other.maxX) < epsilon : this.maxX === other.maxX) && (isFinite(this.maxY + other.maxY) ? Math.abs(this.maxY - other.maxY) < epsilon : this.maxY === other.maxY) && (isFinite(this.maxZ + other.maxZ) ? Math.abs(this.maxZ - other.maxZ) < epsilon : this.maxZ === other.maxZ);
    }
  }

  /*---------------------------------------------------------------------------*
   * Immutable operations
   *---------------------------------------------------------------------------*/

  /**
   * Creates a copy of this bounds, or if a bounds is passed in, set that bounds's values to ours.
   * @public
   *
   * This is the immutable form of the function set(), if a bounds is provided. This will return a new bounds, and
   * will not modify this bounds.
   *
   * @param {Bounds3} [bounds] - If not provided, creates a new Bounds3 with filled in values. Otherwise, fills in the
   *                             values of the provided bounds so that it equals this bounds.
   * @returns {Bounds3}
   */
  copy(bounds) {
    if (bounds) {
      return bounds.set(this);
    } else {
      return new Bounds3(this.minX, this.minY, this.minZ, this.maxX, this.maxY, this.maxZ);
    }
  }

  /**
   * The smallest bounds that contains both this bounds and the input bounds, returned as a copy.
   * @public
   *
   * This is the immutable form of the function includeBounds(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {Bounds3} bounds
   * @returns {Bounds3}
   */
  union(bounds) {
    return new Bounds3(Math.min(this.minX, bounds.minX), Math.min(this.minY, bounds.minY), Math.min(this.minZ, bounds.minZ), Math.max(this.maxX, bounds.maxX), Math.max(this.maxY, bounds.maxY), Math.max(this.maxZ, bounds.maxZ));
  }

  /**
   * The smallest bounds that is contained by both this bounds and the input bounds, returned as a copy.
   * @public
   *
   * This is the immutable form of the function constrainBounds(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {Bounds3} bounds
   * @returns {Bounds3}
   */
  intersection(bounds) {
    return new Bounds3(Math.max(this.minX, bounds.minX), Math.max(this.minY, bounds.minY), Math.max(this.minZ, bounds.minZ), Math.min(this.maxX, bounds.maxX), Math.min(this.maxY, bounds.maxY), Math.min(this.maxZ, bounds.maxZ));
  }

  // TODO: difference should be well-defined, but more logic is needed to compute

  /**
   * The smallest bounds that contains this bounds and the point (x,y,z), returned as a copy.
   * @public
   *
   * This is the immutable form of the function addCoordinates(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @returns {Bounds3}
   */
  withCoordinates(x, y, z) {
    return new Bounds3(Math.min(this.minX, x), Math.min(this.minY, y), Math.min(this.minZ, z), Math.max(this.maxX, x), Math.max(this.maxY, y), Math.max(this.maxZ, z));
  }

  /**
   * The smallest bounds that contains this bounds and the input point, returned as a copy.
   * @public
   *
   * This is the immutable form of the function addPoint(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {Vector3} point
   * @returns {Bounds3}
   */
  withPoint(point) {
    return this.withCoordinates(point.x, point.y, point.z);
  }

  /**
   * A copy of this bounds, with minX replaced with the input.
   * @public
   *
   * This is the immutable form of the function setMinX(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} minX
   * @returns {Bounds3}
   */
  withMinX(minX) {
    return new Bounds3(minX, this.minY, this.minZ, this.maxX, this.maxY, this.maxZ);
  }

  /**
   * A copy of this bounds, with minY replaced with the input.
   * @public
   *
   * This is the immutable form of the function setMinY(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} minY
   * @returns {Bounds3}
   */
  withMinY(minY) {
    return new Bounds3(this.minX, minY, this.minZ, this.maxX, this.maxY, this.maxZ);
  }

  /**
   * A copy of this bounds, with minZ replaced with the input.
   * @public
   *
   * This is the immutable form of the function setMinZ(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} minZ
   * @returns {Bounds3}
   */
  withMinZ(minZ) {
    return new Bounds3(this.minX, this.minY, minZ, this.maxX, this.maxY, this.maxZ);
  }

  /**
   * A copy of this bounds, with maxX replaced with the input.
   * @public
   *
   * This is the immutable form of the function setMaxX(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} maxX
   * @returns {Bounds3}
   */
  withMaxX(maxX) {
    return new Bounds3(this.minX, this.minY, this.minZ, maxX, this.maxY, this.maxZ);
  }

  /**
   * A copy of this bounds, with maxY replaced with the input.
   * @public
   *
   * This is the immutable form of the function setMaxY(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} maxY
   * @returns {Bounds3}
   */
  withMaxY(maxY) {
    return new Bounds3(this.minX, this.minY, this.minZ, this.maxX, maxY, this.maxZ);
  }

  /**
   * A copy of this bounds, with maxZ replaced with the input.
   * @public
   *
   * This is the immutable form of the function setMaxZ(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} maxZ
   * @returns {Bounds3}
   */
  withMaxZ(maxZ) {
    return new Bounds3(this.minX, this.minY, this.minZ, this.maxX, this.maxY, maxZ);
  }

  /**
   * A copy of this bounds, with the minimum values rounded down to the nearest integer, and the maximum values
   * rounded up to the nearest integer. This causes the bounds to expand as necessary so that its boundaries
   * are integer-aligned.
   * @public
   *
   * This is the immutable form of the function roundOut(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @returns {Bounds3}
   */
  roundedOut() {
    return new Bounds3(Math.floor(this.minX), Math.floor(this.minY), Math.floor(this.minZ), Math.ceil(this.maxX), Math.ceil(this.maxY), Math.ceil(this.maxZ));
  }

  /**
   * A copy of this bounds, with the minimum values rounded up to the nearest integer, and the maximum values
   * rounded down to the nearest integer. This causes the bounds to contract as necessary so that its boundaries
   * are integer-aligned.
   * @public
   *
   * This is the immutable form of the function roundIn(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @returns {Bounds3}
   */
  roundedIn() {
    return new Bounds3(Math.ceil(this.minX), Math.ceil(this.minY), Math.ceil(this.minZ), Math.floor(this.maxX), Math.floor(this.maxY), Math.floor(this.maxZ));
  }

  /**
   * A bounding box (still axis-aligned) that contains the transformed shape of this bounds, applying the matrix as
   * an affine transformation.
   * @public
   *
   * NOTE: bounds.transformed( matrix ).transformed( inverse ) may be larger than the original box, if it includes
   * a rotation that isn't a multiple of $\pi/2$. This is because the returned bounds may expand in area to cover
   * ALL of the corners of the transformed bounding box.
   *
   * This is the immutable form of the function transform(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {Matrix4} matrix
   * @returns {Bounds3}
   */
  transformed(matrix) {
    return this.copy().transform(matrix);
  }

  /**
   * A bounding box that is expanded on all sides by the specified amount.)
   * @public
   *
   * This is the immutable form of the function dilate(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} d
   * @returns {Bounds3}
   */
  dilated(d) {
    return this.dilatedXYZ(d, d, d);
  }

  /**
   * A bounding box that is expanded horizontally (on the left and right) by the specified amount.
   * @public
   *
   * This is the immutable form of the function dilateX(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} x
   * @returns {Bounds3}
   */
  dilatedX(x) {
    return new Bounds3(this.minX - x, this.minY, this.minZ, this.maxX + x, this.maxY, this.maxZ);
  }

  /**
   * A bounding box that is expanded vertically (on the top and bottom) by the specified amount.
   * @public
   *
   * This is the immutable form of the function dilateY(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} y
   * @returns {Bounds3}
   */
  dilatedY(y) {
    return new Bounds3(this.minX, this.minY - y, this.minZ, this.maxX, this.maxY + y, this.maxZ);
  }

  /**
   * A bounding box that is expanded depth-wise (on the front and back) by the specified amount.
   * @public
   *
   * This is the immutable form of the function dilateZ(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} z
   * @returns {Bounds3}
   */
  dilatedZ(z) {
    return new Bounds3(this.minX, this.minY, this.minZ - z, this.maxX, this.maxY, this.maxZ + z);
  }

  /**
   * A bounding box that is expanded on all sides, with different amounts of expansion along each axis.
   * Will be identical to the bounds returned by calling bounds.dilatedX( x ).dilatedY( y ).dilatedZ( z ).
   * @public
   *
   * This is the immutable form of the function dilateXYZ(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} x - Amount to dilate horizontally (for each side)
   * @param {number} y - Amount to dilate vertically (for each side)
   * @param {number} z - Amount to dilate depth-wise (for each side)
   * @returns {Bounds3}
   */
  dilatedXYZ(x, y, z) {
    return new Bounds3(this.minX - x, this.minY - y, this.minZ - z, this.maxX + x, this.maxY + y, this.maxZ + z);
  }

  /**
   * A bounding box that is contracted on all sides by the specified amount.
   * @public
   *
   * This is the immutable form of the function erode(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} amount
   * @returns {Bounds3}
   */
  eroded(amount) {
    return this.dilated(-amount);
  }

  /**
   * A bounding box that is contracted horizontally (on the left and right) by the specified amount.
   * @public
   *
   * This is the immutable form of the function erodeX(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} x
   * @returns {Bounds3}
   */
  erodedX(x) {
    return this.dilatedX(-x);
  }

  /**
   * A bounding box that is contracted vertically (on the top and bottom) by the specified amount.
   * @public
   *
   * This is the immutable form of the function erodeY(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} y
   * @returns {Bounds3}
   */
  erodedY(y) {
    return this.dilatedY(-y);
  }

  /**
   * A bounding box that is contracted depth-wise (on the front and back) by the specified amount.
   * @public
   *
   * This is the immutable form of the function erodeZ(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} z
   * @returns {Bounds3}
   */
  erodedZ(z) {
    return this.dilatedZ(-z);
  }

  /**
   * A bounding box that is contracted on all sides, with different amounts of contraction along each axis.
   * @public
   *
   * This is the immutable form of the function erodeXYZ(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} x - Amount to erode horizontally (for each side)
   * @param {number} y - Amount to erode vertically (for each side)
   * @param {number} z - Amount to erode depth-wise (for each side)
   * @returns {Bounds3}
   */
  erodedXYZ(x, y, z) {
    return this.dilatedXYZ(-x, -y, -z);
  }

  /**
   * Our bounds, translated horizontally by x, returned as a copy.
   * @public
   *
   * This is the immutable form of the function shiftX(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} x
   * @returns {Bounds3}
   */
  shiftedX(x) {
    return new Bounds3(this.minX + x, this.minY, this.minZ, this.maxX + x, this.maxY, this.maxZ);
  }

  /**
   * Our bounds, translated vertically by y, returned as a copy.
   * @public
   *
   * This is the immutable form of the function shiftY(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} y
   * @returns {Bounds3}
   */
  shiftedY(y) {
    return new Bounds3(this.minX, this.minY + y, this.minZ, this.maxX, this.maxY + y, this.maxZ);
  }

  /**
   * Our bounds, translated depth-wise by z, returned as a copy.
   * @public
   *
   * This is the immutable form of the function shiftZ(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} z
   * @returns {Bounds3}
   */
  shiftedZ(z) {
    return new Bounds3(this.minX, this.minY, this.minZ + z, this.maxX, this.maxY, this.maxZ + z);
  }

  /**
   * Our bounds, translated by (x,y,z), returned as a copy.
   * @public
   *
   * This is the immutable form of the function shift(). This will return a new bounds, and will not modify
   * this bounds.
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @returns {Bounds3}
   */
  shiftedXYZ(x, y, z) {
    return new Bounds3(this.minX + x, this.minY + y, this.minZ + z, this.maxX + x, this.maxY + y, this.maxZ + z);
  }

  /**
   * Returns our bounds, translated by a vector, returned as a copy.
   * @public
   *
   * @param {Vector3} v
   * @returns {Bounds3}
   */
  shifted(v) {
    return this.shiftedXYZ(v.x, v.y, v.z);
  }

  /*---------------------------------------------------------------------------*
   * Mutable operations
   *
   * All mutable operations should call one of the following:
   *   setMinMax, setMinX, setMinY, setMinZ, setMaxX, setMaxY, setMaxZ
   *---------------------------------------------------------------------------*/

  /**
   * Sets each value for this bounds, and returns itself.
   * @public
   *
   * @param {number} minX
   * @param {number} minY
   * @param {number} minZ
   * @param {number} maxX
   * @param {number} maxY
   * @param {number} maxZ
   * @returns {Bounds3}
   */
  setMinMax(minX, minY, minZ, maxX, maxY, maxZ) {
    this.minX = minX;
    this.minY = minY;
    this.minZ = minZ;
    this.maxX = maxX;
    this.maxY = maxY;
    this.maxZ = maxZ;
    return this;
  }

  /**
   * Sets the value of minX.
   * @public
   *
   * This is the mutable form of the function withMinX(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} minX
   * @returns {Bounds3}
   */
  setMinX(minX) {
    this.minX = minX;
    return this;
  }

  /**
   * Sets the value of minY.
   * @public
   *
   * This is the mutable form of the function withMinY(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} minY
   * @returns {Bounds3}
   */
  setMinY(minY) {
    this.minY = minY;
    return this;
  }

  /**
   * Sets the value of minZ.
   * @public
   *
   * This is the mutable form of the function withMinZ(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} minZ
   * @returns {Bounds3}
   */
  setMinZ(minZ) {
    this.minZ = minZ;
    return this;
  }

  /**
   * Sets the value of maxX.
   * @public
   *
   * This is the mutable form of the function withMaxX(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} maxX
   * @returns {Bounds3}
   */
  setMaxX(maxX) {
    this.maxX = maxX;
    return this;
  }

  /**
   * Sets the value of maxY.
   * @public
   *
   * This is the mutable form of the function withMaxY(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} maxY
   * @returns {Bounds3}
   */
  setMaxY(maxY) {
    this.maxY = maxY;
    return this;
  }

  /**
   * Sets the value of maxZ.
   * @public
   *
   * This is the mutable form of the function withMaxZ(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} maxZ
   * @returns {Bounds3}
   */
  setMaxZ(maxZ) {
    this.maxZ = maxZ;
    return this;
  }

  /**
   * Sets the values of this bounds to be equal to the input bounds.
   * @public
   *
   * This is the mutable form of the function copy(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {Bounds3} bounds
   * @returns {Bounds3}
   */
  set(bounds) {
    return this.setMinMax(bounds.minX, bounds.minY, bounds.minZ, bounds.maxX, bounds.maxY, bounds.maxZ);
  }

  /**
   * Modifies this bounds so that it contains both its original bounds and the input bounds.
   * @public
   *
   * This is the mutable form of the function union(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {Bounds3} bounds
   * @returns {Bounds3}
   */
  includeBounds(bounds) {
    return this.setMinMax(Math.min(this.minX, bounds.minX), Math.min(this.minY, bounds.minY), Math.min(this.minZ, bounds.minZ), Math.max(this.maxX, bounds.maxX), Math.max(this.maxY, bounds.maxY), Math.max(this.maxZ, bounds.maxZ));
  }

  /**
   * Modifies this bounds so that it is the largest bounds contained both in its original bounds and in the input bounds.
   * @public
   *
   * This is the mutable form of the function intersection(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {Bounds3} bounds
   * @returns {Bounds3}
   */
  constrainBounds(bounds) {
    return this.setMinMax(Math.max(this.minX, bounds.minX), Math.max(this.minY, bounds.minY), Math.max(this.minZ, bounds.minZ), Math.min(this.maxX, bounds.maxX), Math.min(this.maxY, bounds.maxY), Math.min(this.maxZ, bounds.maxZ));
  }

  /**
   * Modifies this bounds so that it contains both its original bounds and the input point (x,y,z).
   * @public
   *
   * This is the mutable form of the function withCoordinates(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @returns {Bounds3}
   */
  addCoordinates(x, y, z) {
    return this.setMinMax(Math.min(this.minX, x), Math.min(this.minY, y), Math.min(this.minZ, z), Math.max(this.maxX, x), Math.max(this.maxY, y), Math.max(this.maxZ, z));
  }

  /**
   * Modifies this bounds so that it contains both its original bounds and the input point.
   * @public
   *
   * This is the mutable form of the function withPoint(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {Vector3} point
   * @returns {Bounds3}
   */
  addPoint(point) {
    return this.addCoordinates(point.x, point.y, point.z);
  }

  /**
   * Modifies this bounds so that its boundaries are integer-aligned, rounding the minimum boundaries down and the
   * maximum boundaries up (expanding as necessary).
   * @public
   *
   * This is the mutable form of the function roundedOut(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @returns {Bounds3}
   */
  roundOut() {
    return this.setMinMax(Math.floor(this.minX), Math.floor(this.minY), Math.floor(this.minZ), Math.ceil(this.maxX), Math.ceil(this.maxY), Math.ceil(this.maxZ));
  }

  /**
   * Modifies this bounds so that its boundaries are integer-aligned, rounding the minimum boundaries up and the
   * maximum boundaries down (contracting as necessary).
   * @public
   *
   * This is the mutable form of the function roundedIn(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @returns {Bounds3}
   */
  roundIn() {
    return this.setMinMax(Math.ceil(this.minX), Math.ceil(this.minY), Math.ceil(this.minZ), Math.floor(this.maxX), Math.floor(this.maxY), Math.floor(this.maxZ));
  }

  /**
   * Modifies this bounds so that it would fully contain a transformed version if its previous value, applying the
   * matrix as an affine transformation.
   * @public
   *
   * NOTE: bounds.transform( matrix ).transform( inverse ) may be larger than the original box, if it includes
   * a rotation that isn't a multiple of $\pi/2$. This is because the bounds may expand in area to cover
   * ALL of the corners of the transformed bounding box.
   *
   * This is the mutable form of the function transformed(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {Matrix4} matrix
   * @returns {Bounds3}
   */
  transform(matrix) {
    // do nothing
    if (this.isEmpty()) {
      return this;
    }

    // optimization to bail for identity matrices
    if (matrix.isIdentity()) {
      return this;
    }
    let minX = Number.POSITIVE_INFINITY;
    let minY = Number.POSITIVE_INFINITY;
    let minZ = Number.POSITIVE_INFINITY;
    let maxX = Number.NEGATIVE_INFINITY;
    let maxY = Number.NEGATIVE_INFINITY;
    let maxZ = Number.NEGATIVE_INFINITY;

    // using mutable vector so we don't create excessive instances of Vector2 during this
    // make sure all 4 corners are inside this transformed bounding box
    const vector = new Vector3(0, 0, 0);
    function withIt(vector) {
      minX = Math.min(minX, vector.x);
      minY = Math.min(minY, vector.y);
      minZ = Math.min(minZ, vector.z);
      maxX = Math.max(maxX, vector.x);
      maxY = Math.max(maxY, vector.y);
      maxZ = Math.max(maxZ, vector.z);
    }
    withIt(matrix.multiplyVector3(vector.setXYZ(this.minX, this.minY, this.minZ)));
    withIt(matrix.multiplyVector3(vector.setXYZ(this.minX, this.maxY, this.minZ)));
    withIt(matrix.multiplyVector3(vector.setXYZ(this.maxX, this.minY, this.minZ)));
    withIt(matrix.multiplyVector3(vector.setXYZ(this.maxX, this.maxY, this.minZ)));
    withIt(matrix.multiplyVector3(vector.setXYZ(this.minX, this.minY, this.maxZ)));
    withIt(matrix.multiplyVector3(vector.setXYZ(this.minX, this.maxY, this.maxZ)));
    withIt(matrix.multiplyVector3(vector.setXYZ(this.maxX, this.minY, this.maxZ)));
    withIt(matrix.multiplyVector3(vector.setXYZ(this.maxX, this.maxY, this.maxZ)));
    return this.setMinMax(minX, minY, minZ, maxX, maxY, maxZ);
  }

  /**
   * Expands this bounds on all sides by the specified amount.
   * @public
   *
   * This is the mutable form of the function dilated(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} d
   * @returns {Bounds3}
   */
  dilate(d) {
    return this.dilateXYZ(d, d, d);
  }

  /**
   * Expands this bounds horizontally (left and right) by the specified amount.
   * @public
   *
   * This is the mutable form of the function dilatedX(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} x
   * @returns {Bounds3}
   */
  dilateX(x) {
    return this.setMinMax(this.minX - x, this.minY, this.minZ, this.maxX + x, this.maxY, this.maxZ);
  }

  /**
   * Expands this bounds vertically (top and bottom) by the specified amount.
   * @public
   *
   * This is the mutable form of the function dilatedY(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} y
   * @returns {Bounds3}
   */
  dilateY(y) {
    return this.setMinMax(this.minX, this.minY - y, this.minZ, this.maxX, this.maxY + y, this.maxZ);
  }

  /**
   * Expands this bounds depth-wise (front and back) by the specified amount.
   * @public
   *
   * This is the mutable form of the function dilatedZ(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} z
   * @returns {Bounds3}
   */
  dilateZ(z) {
    return this.setMinMax(this.minX, this.minY, this.minZ - z, this.maxX, this.maxY, this.maxZ + z);
  }

  /**
   * Expands this bounds independently along each axis. Will be equal to calling
   * bounds.dilateX( x ).dilateY( y ).dilateZ( z ).
   * @public
   *
   * This is the mutable form of the function dilatedXYZ(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @returns {Bounds3}
   */
  dilateXYZ(x, y, z) {
    return this.setMinMax(this.minX - x, this.minY - y, this.minZ - z, this.maxX + x, this.maxY + y, this.maxZ + z);
  }

  /**
   * Contracts this bounds on all sides by the specified amount.
   * @public
   *
   * This is the mutable form of the function eroded(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} d
   * @returns {Bounds3}
   */
  erode(d) {
    return this.dilate(-d);
  }

  /**
   * Contracts this bounds horizontally (left and right) by the specified amount.
   * @public
   *
   * This is the mutable form of the function erodedX(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} x
   * @returns {Bounds3}
   */
  erodeX(x) {
    return this.dilateX(-x);
  }

  /**
   * Contracts this bounds vertically (top and bottom) by the specified amount.
   * @public
   *
   * This is the mutable form of the function erodedY(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} y
   * @returns {Bounds3}
   */
  erodeY(y) {
    return this.dilateY(-y);
  }

  /**
   * Contracts this bounds depth-wise (front and back) by the specified amount.
   * @public
   *
   * This is the mutable form of the function erodedZ(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} z
   * @returns {Bounds3}
   */
  erodeZ(z) {
    return this.dilateZ(-z);
  }

  /**
   * Contracts this bounds independently along each axis. Will be equal to calling
   * bounds.erodeX( x ).erodeY( y ).erodeZ( z ).
   * @public
   *
   * This is the mutable form of the function erodedXYZ(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @returns {Bounds3}
   */
  erodeXYZ(x, y, z) {
    return this.dilateXYZ(-x, -y, -z);
  }

  /**
   * Translates our bounds horizontally by x.
   * @public
   *
   * This is the mutable form of the function shiftedX(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} x
   * @returns {Bounds3}
   */
  shiftX(x) {
    return this.setMinMax(this.minX + x, this.minY, this.minZ, this.maxX + x, this.maxY, this.maxZ);
  }

  /**
   * Translates our bounds vertically by y.
   * @public
   *
   * This is the mutable form of the function shiftedY(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} y
   * @returns {Bounds3}
   */
  shiftY(y) {
    return this.setMinMax(this.minX, this.minY + y, this.minZ, this.maxX, this.maxY + y, this.maxZ);
  }

  /**
   * Translates our bounds depth-wise by z.
   * @public
   *
   * This is the mutable form of the function shiftedZ(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} z
   * @returns {Bounds3}
   */
  shiftZ(z) {
    return this.setMinMax(this.minX, this.minY, this.minZ + z, this.maxX, this.maxY, this.maxZ + z);
  }

  /**
   * Translates our bounds by (x,y,z).
   * @public
   *
   * This is the mutable form of the function shifted(). This will mutate (change) this bounds, in addition to returning
   * this bounds itself.
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @returns {Bounds3}
   */
  shiftXYZ(x, y, z) {
    return this.setMinMax(this.minX + x, this.minY + y, this.minZ + z, this.maxX + x, this.maxY + y, this.maxZ + z);
  }

  /**
   * Translates our bounds by the given vector.
   * @public
   *
   * @param {Vector3} v
   * @returns {Bounds3}
   */
  shift(v) {
    return this.shiftXYZ(v.x, v.y, v.z);
  }

  /**
   * Returns a new Bounds3 object, with the cuboid (3d rectangle) construction with x, y, z, width, height and depth.
   * @public
   *
   * @param {number} x - The minimum value of X for the bounds.
   * @param {number} y - The minimum value of Y for the bounds.
   * @param {number} z - The minimum value of Z for the bounds.
   * @param {number} width - The width (maxX - minX) of the bounds.
   * @param {number} height - The height (maxY - minY) of the bounds.
   * @param {number} depth - The depth (maxZ - minZ) of the bounds.
   * @returns {Bounds3}
   */
  static cuboid(x, y, z, width, height, depth) {
    return new Bounds3(x, y, z, x + width, y + height, z + depth);
  }

  /**
   * Returns a new Bounds3 object that only contains the specified point (x,y,z). Useful for being dilated to form a
   * bounding box around a point. Note that the bounds will not be "empty" as it contains (x,y,z), but it will have
   * zero area.
   * @public
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @returns {Bounds3}
   */
  static point(x, y, z) {
    return new Bounds3(x, y, z, x, y, z);
  }
}

// @public (read-only) - Helps to identify the dimension of the bounds
Bounds3.prototype.isBounds = true;
Bounds3.prototype.dimension = 3;
js_dot.register('Bounds3', Bounds3);
js_Poolable.mixInto(Bounds3, {
  initialize: Bounds3.prototype.setMinMax
});

/**
 * A constant Bounds3 with minimums = $\infty$, maximums = $-\infty$, so that it represents "no bounds whatsoever".
 * @public
 *
 * This allows us to take the union (union/includeBounds) of this and any other Bounds3 to get the other bounds back,
 * e.g. Bounds3.NOTHING.union( bounds ).equals( bounds ). This object naturally serves as the base case as a union of
 * zero bounds objects.
 *
 * Additionally, intersections with NOTHING will always return a Bounds3 equivalent to NOTHING.
 *
 * @constant {Bounds3} NOTHING
 */
Bounds3.NOTHING = new Bounds3(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);

/**
 * A constant Bounds3 with minimums = $-\infty$, maximums = $\infty$, so that it represents "all bounds".
 * @public
 *
 * This allows us to take the intersection (intersection/constrainBounds) of this and any other Bounds3 to get the
 * other bounds back, e.g. Bounds3.EVERYTHING.intersection( bounds ).equals( bounds ). This object naturally serves as
 * the base case as an intersection of zero bounds objects.
 *
 * Additionally, unions with EVERYTHING will always return a Bounds3 equivalent to EVERYTHING.
 *
 * @constant {Bounds3} EVERYTHING
 */
Bounds3.EVERYTHING = new Bounds3(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
Bounds3.Bounds3IO = new IOType('Bounds3IO', {
  valueType: Bounds3,
  documentation: 'a 3-dimensional bounds (bounding box)',
  stateSchema: {
    minX: types_NumberIO,
    minY: types_NumberIO,
    minZ: types_NumberIO,
    maxX: types_NumberIO,
    maxY: types_NumberIO,
    maxZ: types_NumberIO
  },
  toStateObject: bounds3 => ({
    minX: bounds3.minX,
    minY: bounds3.minY,
    minZ: bounds3.minZ,
    maxX: bounds3.maxX,
    maxY: bounds3.maxY,
    maxZ: bounds3.maxZ
  }),
  fromStateObject: stateObject => new Bounds3(stateObject.minX, stateObject.minY, stateObject.minZ, stateObject.maxX, stateObject.maxY, stateObject.maxZ)
});
/* harmony default export */ const js_Bounds3 = ((/* unused pure expression or super */ null && (Bounds3)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Combination.js
// Copyright 2022, University of Colorado Boulder

/**
 * An immutable combination that represents a subset of a set
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */


class Combination {
  /**
   * Creates a combination that will include elements where list[i] === true
   */
  constructor(inclusions) {
    this.inclusions = inclusions;
  }
  size() {
    return this.inclusions.length;
  }
  includes(index) {
    return this.inclusions[index];
  }

  /**
   * Applies the combination to an array, returning a new array with the used elements.
   */
  apply(array) {
    return array.filter((element, index) => this.inclusions[index]);
  }

  /**
   * Creates a new combination that is the inverse of this (includes the opposite elements)
   */
  inverted() {
    return new Combination(this.inclusions.map(inclusion => !inclusion));
  }
  getIncludedIndices() {
    return _.range(0, this.size()).filter(i => this.inclusions[i]);
  }
  toString() {
    return `C[${this.inclusions.map(i => i ? '1' : '0').join('')}]`;
  }
  equals(combination) {
    return this.inclusions.length === combination.inclusions.length && _.isEqual(this.inclusions, combination.inclusions);
  }

  /**
   * Creates an empty combination of a given size.
   */
  static empty(size) {
    return new Combination(_.range(0, size).map(() => false));
  }

  /**
   * Creates a full combination of a given size.
   */
  static full(size) {
    return new Combination(_.range(0, size).map(() => true));
  }

  /**
   * Lists all combinations from a given size
   */
  static combinations(size) {
    const combinations = [];
    const stack = [];
    (function recurse(index) {
      if (index === size) {
        combinations.push(new Combination(stack.slice()));
      } else {
        stack.push(false);
        recurse(index + 1);
        stack.pop();
        stack.push(true);
        recurse(index + 1);
        stack.pop();
      }
    })(0);
    return combinations;
  }

  /**
   * Calls a callback on every single possible permutation of the given Array
   *
   * @param array
   * @param callback - Called on each permuted version of the array possible
   */
  static forEachCombination(array, callback) {
    const stack = [];
    (function recurse(index) {
      if (index === array.length) {
        callback(stack);
      } else {
        recurse(index + 1);
        stack.push(array[index]);
        recurse(index + 1);
        stack.pop();
      }
    })(0);
  }
  static combinationsOf(array) {
    const results = [];
    Combination.forEachCombination(array, result => {
      results.push(result.slice());
    });
    return results;
  }
}
js_dot.register('Combination', Combination);
/* harmony default export */ const js_Combination = ((/* unused pure expression or super */ null && (Combination)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/CompletePiecewiseLinearFunction.js
// Copyright 2022, University of Colorado Boulder

/**
 * Describes a 1d complete (fully defined for any number) function, where values are extrapolated given the final end
 * points.
 *
 * E.g. if the points (0,0) and (1,1) are provided, it represents the function f(x) = x for ALL values, especially
 * values outside of the range [0,1]. For example, f(6) = 6.
 *
 * If a single point is provided, it represents a constant function.
 *
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */




class CompletePiecewiseLinearFunction {
  // Assumed to be sorted by x value, and continuous
  constructor(points) {
    assert && assert(points.length > 0);
    assert && points.forEach((point, i) => {
      if (i < points.length - 1) {
        assert && assert(point.x < points[i + 1].x, 'Points should be strictly increasing in x value (ordered by their x value)');
      }
    });

    // We're going to remove collinear points, so we create an extra copy
    this.points = points.slice();

    // NOTE: The removal of collinear points helps improve performance, since we sometimes need to "expand" the number
    // of points. Repeated minimums/maximums for many inputs could otherwise become quite slow.
    for (let i = 0; i < this.points.length - 2; i++) {
      const a = this.points[i];
      const b = this.points[i + 1];
      const c = this.points[i + 2];
      if (js_Utils.arePointsCollinear(a, b, c)) {
        this.points.splice(i + 1, 1);
        i--;
      }
    }
  }

  /**
   * Returns the pair of points that the x value is defined by.
   *
   * NOTE: x may NOT be contained in these points, if it's either less than or greater than any points in the points
   * list.
   */
  findMatchingPair(x) {
    assert && assert(this.points.length > 1);
    let i = 0;
    while (i < this.points.length - 2 && this.points[i + 1].x < x) {
      i++;
    }
    return [this.points[i], this.points[i + 1]];
  }

  /**
   * Evaluates the function at the given x value, e.g. returns f(x).
   */
  evaluate(x) {
    if (this.points.length === 1) {
      return this.points[0].y;
    } else {
      const [leftPoint, rightPoint] = this.findMatchingPair(x);
      if (leftPoint.x === x) {
        return leftPoint.y;
      } else if (rightPoint.x === x) {
        return rightPoint.y;
      } else {
        return js_Utils.linear(leftPoint.x, rightPoint.x, leftPoint.y, rightPoint.y, x);
      }
    }
  }

  /**
   * Returns an array that combines sorted unique x-values provided by this function and/or the other function.
   */
  getCombinedXValues(linearFunction) {
    return CompletePiecewiseLinearFunction.sortedUniqueEpsilon(this.points.map(point => point.x).concat(linearFunction.points.map(point => point.x)));
  }

  /**
   * Returns an array that combines the sorted unique x-values included in this function and/or the other function, OR the unique x-values
   * that result from the intersection of the two functions.
   */
  getIntersectedXValues(linearFunction) {
    const xValues = this.getCombinedXValues(linearFunction);
    const newXValues = [];
    for (let i = 0; i < xValues.length - 1; i++) {
      const leftX = xValues[i];
      const rightX = xValues[i + 1];
      const intersectionPoint = js_Utils.lineLineIntersection(
      // The linear function defined in this
      new Vector2(leftX, this.evaluate(leftX)), new Vector2(rightX, this.evaluate(rightX)),
      // The passed in argument linear function
      new Vector2(leftX, linearFunction.evaluate(leftX)), new Vector2(rightX, linearFunction.evaluate(rightX)));
      if (intersectionPoint && (
      // If it's our first pair of points, don't filter out points that are on the left side of the left point
      i === 0 || intersectionPoint.x > leftX) && (
      // If it's our last pair of points, don't filter out points that are on the right side of the right point
      i === xValues.length - 2 || intersectionPoint.x < rightX)) {
        newXValues.push(intersectionPoint.x);
      }
    }

    // Remove duplicate values above and sort them
    const criticalXValues = CompletePiecewiseLinearFunction.sortedUniqueEpsilon([...xValues, ...newXValues]);

    // To capture the slope at the start/end, we'll add extra points to guarantee this. If they're duplicated, they'll
    // be removed during the collinear check on construction.
    return [criticalXValues[0] - 1, ...criticalXValues, criticalXValues[criticalXValues.length - 1] + 1];
  }

  /**
   * Returns a new function that's the result of applying the binary operation at the given x values.
   */
  binaryXOperation(linearFunction, operation, xValues) {
    return new CompletePiecewiseLinearFunction(xValues.map(x => {
      return new Vector2(x, operation(this.evaluate(x), linearFunction.evaluate(x)));
    }));
  }

  /**
   * Returns a new function that's the result of applying the binary operation at the x values that already occur
   * in each function.
   */
  binaryPointwiseOperation(linearFunction, operation) {
    return this.binaryXOperation(linearFunction, operation, this.getCombinedXValues(linearFunction));
  }

  /**
   * Returns a new function that's the result of applying the binary operation at the x values that either occur in
   * each function OR at the intersection of the two functions.
   */
  binaryIntersectingOperation(linearFunction, operation) {
    return this.binaryXOperation(linearFunction, operation, this.getIntersectedXValues(linearFunction));
  }

  /**
   * Returns a CompletePiecewiseLinearFunction that's the result of adding the two functions.
   */
  plus(linearFunction) {
    return this.binaryPointwiseOperation(linearFunction, (a, b) => a + b);
  }

  /**
   * Returns a CompletePiecewiseLinearFunction that's the result of subtracting the two functions.
   */
  minus(linearFunction) {
    return this.binaryPointwiseOperation(linearFunction, (a, b) => a - b);
  }

  /**
   * Returns a CompletePiecewiseLinearFunction that's the result of taking the minimum of the two functions
   */
  min(linearFunction) {
    return this.binaryIntersectingOperation(linearFunction, Math.min);
  }

  /**
   * Returns a CompletePiecewiseLinearFunction that's the result of taking the maximum of the two functions
   */
  max(linearFunction) {
    return this.binaryIntersectingOperation(linearFunction, Math.max);
  }

  /**
   * Allows redefining or clamping/truncating the function by only representing it from the given x values
   */
  withXValues(xValues) {
    return new CompletePiecewiseLinearFunction(xValues.map(x => new Vector2(x, this.evaluate(x))));
  }

  /**
   * Returns an inverted form of the function (assuming it is monotonically increasing or monotonically decreasing)
   */
  inverted() {
    const points = this.points.map(point => new Vector2(point.y, point.x));

    // NOTE: We'll rely on the constructor to make sure that the inverse is valid. Here we'll handle the monotonically
    // decreasing case (which is invertible, just needs a reversal of points)
    if (points.length > 1 && points[0].x > points[1].x) {
      points.reverse();
    }
    return new CompletePiecewiseLinearFunction(points);
  }
  static sum(...functions) {
    return functions.reduce((a, b) => a.plus(b));
  }
  static min(...functions) {
    return functions.reduce((a, b) => a.min(b));
  }
  static max(...functions) {
    return functions.reduce((a, b) => a.max(b));
  }
  static constant(y) {
    return new CompletePiecewiseLinearFunction([new Vector2(0, y)]);
  }

  // Represents the function ax+b
  static linear(a, b) {
    return new CompletePiecewiseLinearFunction([new Vector2(0, b), new Vector2(1, a + b)]);
  }

  /**
   * Returns a sorted list of the input numbers, ensuring no duplicates within a specified epsilon value
   */
  static sortedUniqueEpsilon(numbers, epsilon = 1e-10) {
    numbers = _.sortBy(numbers);
    for (let i = 0; i < numbers.length - 1; i++) {
      if (Math.abs(numbers[i] - numbers[i + 1]) < epsilon) {
        numbers.splice(i, 1);
        i--;
      }
    }
    return numbers;
  }
}
js_dot.register('CompletePiecewiseLinearFunction', CompletePiecewiseLinearFunction);
/* harmony default export */ const js_CompletePiecewiseLinearFunction = ((/* unused pure expression or super */ null && (CompletePiecewiseLinearFunction)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3QiLCJVdGlscyIsIlZlY3RvcjIiLCJDb21wbGV0ZVBpZWNld2lzZUxpbmVhckZ1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJwb2ludHMiLCJhc3NlcnQiLCJsZW5ndGgiLCJmb3JFYWNoIiwicG9pbnQiLCJpIiwieCIsInNsaWNlIiwiYSIsImIiLCJjIiwiYXJlUG9pbnRzQ29sbGluZWFyIiwic3BsaWNlIiwiZmluZE1hdGNoaW5nUGFpciIsImV2YWx1YXRlIiwieSIsImxlZnRQb2ludCIsInJpZ2h0UG9pbnQiLCJsaW5lYXIiLCJnZXRDb21iaW5lZFhWYWx1ZXMiLCJsaW5lYXJGdW5jdGlvbiIsInNvcnRlZFVuaXF1ZUVwc2lsb24iLCJtYXAiLCJjb25jYXQiLCJnZXRJbnRlcnNlY3RlZFhWYWx1ZXMiLCJ4VmFsdWVzIiwibmV3WFZhbHVlcyIsImxlZnRYIiwicmlnaHRYIiwiaW50ZXJzZWN0aW9uUG9pbnQiLCJsaW5lTGluZUludGVyc2VjdGlvbiIsInB1c2giLCJjcml0aWNhbFhWYWx1ZXMiLCJiaW5hcnlYT3BlcmF0aW9uIiwib3BlcmF0aW9uIiwiYmluYXJ5UG9pbnR3aXNlT3BlcmF0aW9uIiwiYmluYXJ5SW50ZXJzZWN0aW5nT3BlcmF0aW9uIiwicGx1cyIsIm1pbnVzIiwibWluIiwiTWF0aCIsIm1heCIsIndpdGhYVmFsdWVzIiwiaW52ZXJ0ZWQiLCJyZXZlcnNlIiwic3VtIiwiZnVuY3Rpb25zIiwicmVkdWNlIiwiY29uc3RhbnQiLCJudW1iZXJzIiwiZXBzaWxvbiIsIl8iLCJzb3J0QnkiLCJhYnMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNvbXBsZXRlUGllY2V3aXNlTGluZWFyRnVuY3Rpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIERlc2NyaWJlcyBhIDFkIGNvbXBsZXRlIChmdWxseSBkZWZpbmVkIGZvciBhbnkgbnVtYmVyKSBmdW5jdGlvbiwgd2hlcmUgdmFsdWVzIGFyZSBleHRyYXBvbGF0ZWQgZ2l2ZW4gdGhlIGZpbmFsIGVuZFxuICogcG9pbnRzLlxuICpcbiAqIEUuZy4gaWYgdGhlIHBvaW50cyAoMCwwKSBhbmQgKDEsMSkgYXJlIHByb3ZpZGVkLCBpdCByZXByZXNlbnRzIHRoZSBmdW5jdGlvbiBmKHgpID0geCBmb3IgQUxMIHZhbHVlcywgZXNwZWNpYWxseVxuICogdmFsdWVzIG91dHNpZGUgb2YgdGhlIHJhbmdlIFswLDFdLiBGb3IgZXhhbXBsZSwgZig2KSA9IDYuXG4gKlxuICogSWYgYSBzaW5nbGUgcG9pbnQgaXMgcHJvdmlkZWQsIGl0IHJlcHJlc2VudHMgYSBjb25zdGFudCBmdW5jdGlvbi5cbiAqXG4gKlxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxuICovXG5cbmltcG9ydCBkb3QgZnJvbSAnLi9kb3QuanMnO1xuaW1wb3J0IFV0aWxzIGZyb20gJy4vVXRpbHMuanMnO1xuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi9WZWN0b3IyLmpzJztcblxuY2xhc3MgQ29tcGxldGVQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbiB7XG5cbiAgcHVibGljIHBvaW50czogVmVjdG9yMltdO1xuXG4gIC8vIEFzc3VtZWQgdG8gYmUgc29ydGVkIGJ5IHggdmFsdWUsIGFuZCBjb250aW51b3VzXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcG9pbnRzOiBWZWN0b3IyW10gKSB7XG4gICAgYXNzZXJ0ICYmIGFzc2VydCggcG9pbnRzLmxlbmd0aCA+IDAgKTtcbiAgICBhc3NlcnQgJiYgcG9pbnRzLmZvckVhY2goICggcG9pbnQsIGkgKSA9PiB7XG4gICAgICBpZiAoIGkgPCBwb2ludHMubGVuZ3RoIC0gMSApIHtcbiAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCggcG9pbnQueCA8IHBvaW50c1sgaSArIDEgXS54LFxuICAgICAgICAgICdQb2ludHMgc2hvdWxkIGJlIHN0cmljdGx5IGluY3JlYXNpbmcgaW4geCB2YWx1ZSAob3JkZXJlZCBieSB0aGVpciB4IHZhbHVlKScgKTtcbiAgICAgIH1cbiAgICB9ICk7XG5cbiAgICAvLyBXZSdyZSBnb2luZyB0byByZW1vdmUgY29sbGluZWFyIHBvaW50cywgc28gd2UgY3JlYXRlIGFuIGV4dHJhIGNvcHlcbiAgICB0aGlzLnBvaW50cyA9IHBvaW50cy5zbGljZSgpO1xuXG4gICAgLy8gTk9URTogVGhlIHJlbW92YWwgb2YgY29sbGluZWFyIHBvaW50cyBoZWxwcyBpbXByb3ZlIHBlcmZvcm1hbmNlLCBzaW5jZSB3ZSBzb21ldGltZXMgbmVlZCB0byBcImV4cGFuZFwiIHRoZSBudW1iZXJcbiAgICAvLyBvZiBwb2ludHMuIFJlcGVhdGVkIG1pbmltdW1zL21heGltdW1zIGZvciBtYW55IGlucHV0cyBjb3VsZCBvdGhlcndpc2UgYmVjb21lIHF1aXRlIHNsb3cuXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5wb2ludHMubGVuZ3RoIC0gMjsgaSsrICkge1xuICAgICAgY29uc3QgYSA9IHRoaXMucG9pbnRzWyBpIF07XG4gICAgICBjb25zdCBiID0gdGhpcy5wb2ludHNbIGkgKyAxIF07XG4gICAgICBjb25zdCBjID0gdGhpcy5wb2ludHNbIGkgKyAyIF07XG5cbiAgICAgIGlmICggVXRpbHMuYXJlUG9pbnRzQ29sbGluZWFyKCBhLCBiLCBjICkgKSB7XG4gICAgICAgIHRoaXMucG9pbnRzLnNwbGljZSggaSArIDEsIDEgKTtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwYWlyIG9mIHBvaW50cyB0aGF0IHRoZSB4IHZhbHVlIGlzIGRlZmluZWQgYnkuXG4gICAqXG4gICAqIE5PVEU6IHggbWF5IE5PVCBiZSBjb250YWluZWQgaW4gdGhlc2UgcG9pbnRzLCBpZiBpdCdzIGVpdGhlciBsZXNzIHRoYW4gb3IgZ3JlYXRlciB0aGFuIGFueSBwb2ludHMgaW4gdGhlIHBvaW50c1xuICAgKiBsaXN0LlxuICAgKi9cbiAgcHVibGljIGZpbmRNYXRjaGluZ1BhaXIoIHg6IG51bWJlciApOiBbIFZlY3RvcjIsIFZlY3RvcjIgXSB7XG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5wb2ludHMubGVuZ3RoID4gMSApO1xuXG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlICggaSA8IHRoaXMucG9pbnRzLmxlbmd0aCAtIDIgJiYgdGhpcy5wb2ludHNbIGkgKyAxIF0ueCA8IHggKSB7XG4gICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiBbIHRoaXMucG9pbnRzWyBpIF0sIHRoaXMucG9pbnRzWyBpICsgMSBdIF07XG4gIH1cblxuICAvKipcbiAgICogRXZhbHVhdGVzIHRoZSBmdW5jdGlvbiBhdCB0aGUgZ2l2ZW4geCB2YWx1ZSwgZS5nLiByZXR1cm5zIGYoeCkuXG4gICAqL1xuICBwdWJsaWMgZXZhbHVhdGUoIHg6IG51bWJlciApOiBudW1iZXIge1xuICAgIGlmICggdGhpcy5wb2ludHMubGVuZ3RoID09PSAxICkge1xuICAgICAgcmV0dXJuIHRoaXMucG9pbnRzWyAwIF0ueTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjb25zdCBbIGxlZnRQb2ludCwgcmlnaHRQb2ludCBdID0gdGhpcy5maW5kTWF0Y2hpbmdQYWlyKCB4ICk7XG5cbiAgICAgIGlmICggbGVmdFBvaW50LnggPT09IHggKSB7XG4gICAgICAgIHJldHVybiBsZWZ0UG9pbnQueTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKCByaWdodFBvaW50LnggPT09IHggKSB7XG4gICAgICAgIHJldHVybiByaWdodFBvaW50Lnk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFV0aWxzLmxpbmVhciggbGVmdFBvaW50LngsIHJpZ2h0UG9pbnQueCwgbGVmdFBvaW50LnksIHJpZ2h0UG9pbnQueSwgeCApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IHRoYXQgY29tYmluZXMgc29ydGVkIHVuaXF1ZSB4LXZhbHVlcyBwcm92aWRlZCBieSB0aGlzIGZ1bmN0aW9uIGFuZC9vciB0aGUgb3RoZXIgZnVuY3Rpb24uXG4gICAqL1xuICBwcml2YXRlIGdldENvbWJpbmVkWFZhbHVlcyggbGluZWFyRnVuY3Rpb246IENvbXBsZXRlUGllY2V3aXNlTGluZWFyRnVuY3Rpb24gKTogbnVtYmVyW10ge1xuICAgIHJldHVybiBDb21wbGV0ZVBpZWNld2lzZUxpbmVhckZ1bmN0aW9uLnNvcnRlZFVuaXF1ZUVwc2lsb24oXG4gICAgICB0aGlzLnBvaW50cy5tYXAoIHBvaW50ID0+IHBvaW50LnggKS5jb25jYXQoIGxpbmVhckZ1bmN0aW9uLnBvaW50cy5tYXAoIHBvaW50ID0+IHBvaW50LnggKSApXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IHRoYXQgY29tYmluZXMgdGhlIHNvcnRlZCB1bmlxdWUgeC12YWx1ZXMgaW5jbHVkZWQgaW4gdGhpcyBmdW5jdGlvbiBhbmQvb3IgdGhlIG90aGVyIGZ1bmN0aW9uLCBPUiB0aGUgdW5pcXVlIHgtdmFsdWVzXG4gICAqIHRoYXQgcmVzdWx0IGZyb20gdGhlIGludGVyc2VjdGlvbiBvZiB0aGUgdHdvIGZ1bmN0aW9ucy5cbiAgICovXG4gIHByaXZhdGUgZ2V0SW50ZXJzZWN0ZWRYVmFsdWVzKCBsaW5lYXJGdW5jdGlvbjogQ29tcGxldGVQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbiApOiBudW1iZXJbXSB7XG4gICAgY29uc3QgeFZhbHVlcyA9IHRoaXMuZ2V0Q29tYmluZWRYVmFsdWVzKCBsaW5lYXJGdW5jdGlvbiApO1xuICAgIGNvbnN0IG5ld1hWYWx1ZXM6IG51bWJlcltdID0gW107XG5cbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCB4VmFsdWVzLmxlbmd0aCAtIDE7IGkrKyApIHtcbiAgICAgIGNvbnN0IGxlZnRYID0geFZhbHVlc1sgaSBdO1xuICAgICAgY29uc3QgcmlnaHRYID0geFZhbHVlc1sgaSArIDEgXTtcbiAgICAgIGNvbnN0IGludGVyc2VjdGlvblBvaW50ID0gVXRpbHMubGluZUxpbmVJbnRlcnNlY3Rpb24oXG5cbiAgICAgICAgLy8gVGhlIGxpbmVhciBmdW5jdGlvbiBkZWZpbmVkIGluIHRoaXNcbiAgICAgICAgbmV3IFZlY3RvcjIoIGxlZnRYLCB0aGlzLmV2YWx1YXRlKCBsZWZ0WCApICksXG4gICAgICAgIG5ldyBWZWN0b3IyKCByaWdodFgsIHRoaXMuZXZhbHVhdGUoIHJpZ2h0WCApICksXG5cbiAgICAgICAgLy8gVGhlIHBhc3NlZCBpbiBhcmd1bWVudCBsaW5lYXIgZnVuY3Rpb25cbiAgICAgICAgbmV3IFZlY3RvcjIoIGxlZnRYLCBsaW5lYXJGdW5jdGlvbi5ldmFsdWF0ZSggbGVmdFggKSApLFxuICAgICAgICBuZXcgVmVjdG9yMiggcmlnaHRYLCBsaW5lYXJGdW5jdGlvbi5ldmFsdWF0ZSggcmlnaHRYICkgKVxuICAgICAgKTtcbiAgICAgIGlmICggaW50ZXJzZWN0aW9uUG9pbnQgJiZcbiAgICAgICAgICAgLy8gSWYgaXQncyBvdXIgZmlyc3QgcGFpciBvZiBwb2ludHMsIGRvbid0IGZpbHRlciBvdXQgcG9pbnRzIHRoYXQgYXJlIG9uIHRoZSBsZWZ0IHNpZGUgb2YgdGhlIGxlZnQgcG9pbnRcbiAgICAgICAgICAgKCBpID09PSAwIHx8IGludGVyc2VjdGlvblBvaW50LnggPiBsZWZ0WCApICYmXG4gICAgICAgICAgIC8vIElmIGl0J3Mgb3VyIGxhc3QgcGFpciBvZiBwb2ludHMsIGRvbid0IGZpbHRlciBvdXQgcG9pbnRzIHRoYXQgYXJlIG9uIHRoZSByaWdodCBzaWRlIG9mIHRoZSByaWdodCBwb2ludFxuICAgICAgICAgICAoIGkgPT09IHhWYWx1ZXMubGVuZ3RoIC0gMiB8fCBpbnRlcnNlY3Rpb25Qb2ludC54IDwgcmlnaHRYIClcbiAgICAgICkge1xuICAgICAgICBuZXdYVmFsdWVzLnB1c2goIGludGVyc2VjdGlvblBvaW50LnggKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgZHVwbGljYXRlIHZhbHVlcyBhYm92ZSBhbmQgc29ydCB0aGVtXG4gICAgY29uc3QgY3JpdGljYWxYVmFsdWVzID0gQ29tcGxldGVQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbi5zb3J0ZWRVbmlxdWVFcHNpbG9uKCBbXG4gICAgICAuLi54VmFsdWVzLFxuICAgICAgLi4ubmV3WFZhbHVlc1xuICAgIF0gKTtcblxuICAgIC8vIFRvIGNhcHR1cmUgdGhlIHNsb3BlIGF0IHRoZSBzdGFydC9lbmQsIHdlJ2xsIGFkZCBleHRyYSBwb2ludHMgdG8gZ3VhcmFudGVlIHRoaXMuIElmIHRoZXkncmUgZHVwbGljYXRlZCwgdGhleSdsbFxuICAgIC8vIGJlIHJlbW92ZWQgZHVyaW5nIHRoZSBjb2xsaW5lYXIgY2hlY2sgb24gY29uc3RydWN0aW9uLlxuICAgIHJldHVybiBbXG4gICAgICBjcml0aWNhbFhWYWx1ZXNbIDAgXSAtIDEsXG4gICAgICAuLi5jcml0aWNhbFhWYWx1ZXMsXG4gICAgICBjcml0aWNhbFhWYWx1ZXNbIGNyaXRpY2FsWFZhbHVlcy5sZW5ndGggLSAxIF0gKyAxXG4gICAgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IGZ1bmN0aW9uIHRoYXQncyB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIHRoZSBiaW5hcnkgb3BlcmF0aW9uIGF0IHRoZSBnaXZlbiB4IHZhbHVlcy5cbiAgICovXG4gIHByaXZhdGUgYmluYXJ5WE9wZXJhdGlvbiggbGluZWFyRnVuY3Rpb246IENvbXBsZXRlUGllY2V3aXNlTGluZWFyRnVuY3Rpb24sIG9wZXJhdGlvbjogKCBhOiBudW1iZXIsIGI6IG51bWJlciApID0+IG51bWJlciwgeFZhbHVlczogbnVtYmVyW10gKTogQ29tcGxldGVQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbiB7XG4gICAgcmV0dXJuIG5ldyBDb21wbGV0ZVBpZWNld2lzZUxpbmVhckZ1bmN0aW9uKCB4VmFsdWVzLm1hcCggeCA9PiB7XG4gICAgICByZXR1cm4gbmV3IFZlY3RvcjIoIHgsIG9wZXJhdGlvbiggdGhpcy5ldmFsdWF0ZSggeCApLCBsaW5lYXJGdW5jdGlvbi5ldmFsdWF0ZSggeCApICkgKTtcbiAgICB9ICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IGZ1bmN0aW9uIHRoYXQncyB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIHRoZSBiaW5hcnkgb3BlcmF0aW9uIGF0IHRoZSB4IHZhbHVlcyB0aGF0IGFscmVhZHkgb2NjdXJcbiAgICogaW4gZWFjaCBmdW5jdGlvbi5cbiAgICovXG4gIHByaXZhdGUgYmluYXJ5UG9pbnR3aXNlT3BlcmF0aW9uKCBsaW5lYXJGdW5jdGlvbjogQ29tcGxldGVQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbiwgb3BlcmF0aW9uOiAoIGE6IG51bWJlciwgYjogbnVtYmVyICkgPT4gbnVtYmVyICk6IENvbXBsZXRlUGllY2V3aXNlTGluZWFyRnVuY3Rpb24ge1xuICAgIHJldHVybiB0aGlzLmJpbmFyeVhPcGVyYXRpb24oIGxpbmVhckZ1bmN0aW9uLCBvcGVyYXRpb24sIHRoaXMuZ2V0Q29tYmluZWRYVmFsdWVzKCBsaW5lYXJGdW5jdGlvbiApICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBmdW5jdGlvbiB0aGF0J3MgdGhlIHJlc3VsdCBvZiBhcHBseWluZyB0aGUgYmluYXJ5IG9wZXJhdGlvbiBhdCB0aGUgeCB2YWx1ZXMgdGhhdCBlaXRoZXIgb2NjdXIgaW5cbiAgICogZWFjaCBmdW5jdGlvbiBPUiBhdCB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSB0d28gZnVuY3Rpb25zLlxuICAgKi9cbiAgcHJpdmF0ZSBiaW5hcnlJbnRlcnNlY3RpbmdPcGVyYXRpb24oIGxpbmVhckZ1bmN0aW9uOiBDb21wbGV0ZVBpZWNld2lzZUxpbmVhckZ1bmN0aW9uLCBvcGVyYXRpb246ICggYTogbnVtYmVyLCBiOiBudW1iZXIgKSA9PiBudW1iZXIgKTogQ29tcGxldGVQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuYmluYXJ5WE9wZXJhdGlvbiggbGluZWFyRnVuY3Rpb24sIG9wZXJhdGlvbiwgdGhpcy5nZXRJbnRlcnNlY3RlZFhWYWx1ZXMoIGxpbmVhckZ1bmN0aW9uICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgQ29tcGxldGVQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbiB0aGF0J3MgdGhlIHJlc3VsdCBvZiBhZGRpbmcgdGhlIHR3byBmdW5jdGlvbnMuXG4gICAqL1xuICBwdWJsaWMgcGx1cyggbGluZWFyRnVuY3Rpb246IENvbXBsZXRlUGllY2V3aXNlTGluZWFyRnVuY3Rpb24gKTogQ29tcGxldGVQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuYmluYXJ5UG9pbnR3aXNlT3BlcmF0aW9uKCBsaW5lYXJGdW5jdGlvbiwgKCBhLCBiICkgPT4gYSArIGIgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgQ29tcGxldGVQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbiB0aGF0J3MgdGhlIHJlc3VsdCBvZiBzdWJ0cmFjdGluZyB0aGUgdHdvIGZ1bmN0aW9ucy5cbiAgICovXG4gIHB1YmxpYyBtaW51cyggbGluZWFyRnVuY3Rpb246IENvbXBsZXRlUGllY2V3aXNlTGluZWFyRnVuY3Rpb24gKTogQ29tcGxldGVQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuYmluYXJ5UG9pbnR3aXNlT3BlcmF0aW9uKCBsaW5lYXJGdW5jdGlvbiwgKCBhLCBiICkgPT4gYSAtIGIgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgQ29tcGxldGVQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbiB0aGF0J3MgdGhlIHJlc3VsdCBvZiB0YWtpbmcgdGhlIG1pbmltdW0gb2YgdGhlIHR3byBmdW5jdGlvbnNcbiAgICovXG4gIHB1YmxpYyBtaW4oIGxpbmVhckZ1bmN0aW9uOiBDb21wbGV0ZVBpZWNld2lzZUxpbmVhckZ1bmN0aW9uICk6IENvbXBsZXRlUGllY2V3aXNlTGluZWFyRnVuY3Rpb24ge1xuICAgIHJldHVybiB0aGlzLmJpbmFyeUludGVyc2VjdGluZ09wZXJhdGlvbiggbGluZWFyRnVuY3Rpb24sIE1hdGgubWluICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIENvbXBsZXRlUGllY2V3aXNlTGluZWFyRnVuY3Rpb24gdGhhdCdzIHRoZSByZXN1bHQgb2YgdGFraW5nIHRoZSBtYXhpbXVtIG9mIHRoZSB0d28gZnVuY3Rpb25zXG4gICAqL1xuICBwdWJsaWMgbWF4KCBsaW5lYXJGdW5jdGlvbjogQ29tcGxldGVQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbiApOiBDb21wbGV0ZVBpZWNld2lzZUxpbmVhckZ1bmN0aW9uIHtcbiAgICByZXR1cm4gdGhpcy5iaW5hcnlJbnRlcnNlY3RpbmdPcGVyYXRpb24oIGxpbmVhckZ1bmN0aW9uLCBNYXRoLm1heCApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsbG93cyByZWRlZmluaW5nIG9yIGNsYW1waW5nL3RydW5jYXRpbmcgdGhlIGZ1bmN0aW9uIGJ5IG9ubHkgcmVwcmVzZW50aW5nIGl0IGZyb20gdGhlIGdpdmVuIHggdmFsdWVzXG4gICAqL1xuICBwdWJsaWMgd2l0aFhWYWx1ZXMoIHhWYWx1ZXM6IG51bWJlcltdICk6IENvbXBsZXRlUGllY2V3aXNlTGluZWFyRnVuY3Rpb24ge1xuICAgIHJldHVybiBuZXcgQ29tcGxldGVQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbiggeFZhbHVlcy5tYXAoIHggPT4gbmV3IFZlY3RvcjIoIHgsIHRoaXMuZXZhbHVhdGUoIHggKSApICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGludmVydGVkIGZvcm0gb2YgdGhlIGZ1bmN0aW9uIChhc3N1bWluZyBpdCBpcyBtb25vdG9uaWNhbGx5IGluY3JlYXNpbmcgb3IgbW9ub3RvbmljYWxseSBkZWNyZWFzaW5nKVxuICAgKi9cbiAgcHVibGljIGludmVydGVkKCk6IENvbXBsZXRlUGllY2V3aXNlTGluZWFyRnVuY3Rpb24ge1xuICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzLm1hcCggcG9pbnQgPT4gbmV3IFZlY3RvcjIoIHBvaW50LnksIHBvaW50LnggKSApO1xuXG4gICAgLy8gTk9URTogV2UnbGwgcmVseSBvbiB0aGUgY29uc3RydWN0b3IgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGludmVyc2UgaXMgdmFsaWQuIEhlcmUgd2UnbGwgaGFuZGxlIHRoZSBtb25vdG9uaWNhbGx5XG4gICAgLy8gZGVjcmVhc2luZyBjYXNlICh3aGljaCBpcyBpbnZlcnRpYmxlLCBqdXN0IG5lZWRzIGEgcmV2ZXJzYWwgb2YgcG9pbnRzKVxuICAgIGlmICggcG9pbnRzLmxlbmd0aCA+IDEgJiYgcG9pbnRzWyAwIF0ueCA+IHBvaW50c1sgMSBdLnggKSB7XG4gICAgICBwb2ludHMucmV2ZXJzZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQ29tcGxldGVQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbiggcG9pbnRzICk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHN1bSggLi4uZnVuY3Rpb25zOiBDb21wbGV0ZVBpZWNld2lzZUxpbmVhckZ1bmN0aW9uW10gKTogQ29tcGxldGVQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbiB7XG4gICAgcmV0dXJuIGZ1bmN0aW9ucy5yZWR1Y2UoICggYSwgYiApID0+IGEucGx1cyggYiApICk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIG1pbiggLi4uZnVuY3Rpb25zOiBDb21wbGV0ZVBpZWNld2lzZUxpbmVhckZ1bmN0aW9uW10gKTogQ29tcGxldGVQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbiB7XG4gICAgcmV0dXJuIGZ1bmN0aW9ucy5yZWR1Y2UoICggYSwgYiApID0+IGEubWluKCBiICkgKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgbWF4KCAuLi5mdW5jdGlvbnM6IENvbXBsZXRlUGllY2V3aXNlTGluZWFyRnVuY3Rpb25bXSApOiBDb21wbGV0ZVBpZWNld2lzZUxpbmVhckZ1bmN0aW9uIHtcbiAgICByZXR1cm4gZnVuY3Rpb25zLnJlZHVjZSggKCBhLCBiICkgPT4gYS5tYXgoIGIgKSApO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBjb25zdGFudCggeTogbnVtYmVyICk6IENvbXBsZXRlUGllY2V3aXNlTGluZWFyRnVuY3Rpb24ge1xuICAgIHJldHVybiBuZXcgQ29tcGxldGVQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbiggWyBuZXcgVmVjdG9yMiggMCwgeSApIF0gKTtcbiAgfVxuXG4gIC8vIFJlcHJlc2VudHMgdGhlIGZ1bmN0aW9uIGF4K2JcbiAgcHVibGljIHN0YXRpYyBsaW5lYXIoIGE6IG51bWJlciwgYjogbnVtYmVyICk6IENvbXBsZXRlUGllY2V3aXNlTGluZWFyRnVuY3Rpb24ge1xuICAgIHJldHVybiBuZXcgQ29tcGxldGVQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbiggWyBuZXcgVmVjdG9yMiggMCwgYiApLCBuZXcgVmVjdG9yMiggMSwgYSArIGIgKSBdICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHNvcnRlZCBsaXN0IG9mIHRoZSBpbnB1dCBudW1iZXJzLCBlbnN1cmluZyBubyBkdXBsaWNhdGVzIHdpdGhpbiBhIHNwZWNpZmllZCBlcHNpbG9uIHZhbHVlXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBzb3J0ZWRVbmlxdWVFcHNpbG9uKCBudW1iZXJzOiBudW1iZXJbXSwgZXBzaWxvbiA9IDFlLTEwICk6IG51bWJlcltdIHtcbiAgICBudW1iZXJzID0gXy5zb3J0QnkoIG51bWJlcnMgKTtcblxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IG51bWJlcnMubGVuZ3RoIC0gMTsgaSsrICkge1xuICAgICAgaWYgKCBNYXRoLmFicyggbnVtYmVyc1sgaSBdIC0gbnVtYmVyc1sgaSArIDEgXSApIDwgZXBzaWxvbiApIHtcbiAgICAgICAgbnVtYmVycy5zcGxpY2UoIGksIDEgKTtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudW1iZXJzO1xuICB9XG59XG5cbmRvdC5yZWdpc3RlciggJ0NvbXBsZXRlUGllY2V3aXNlTGluZWFyRnVuY3Rpb24nLCBDb21wbGV0ZVBpZWNld2lzZUxpbmVhckZ1bmN0aW9uICk7XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBsZXRlUGllY2V3aXNlTGluZWFyRnVuY3Rpb247Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsR0FBRyxNQUFNLFVBQVU7QUFDMUIsT0FBT0MsS0FBSyxNQUFNLFlBQVk7QUFDOUIsT0FBT0MsT0FBTyxNQUFNLGNBQWM7QUFFbEMsTUFBTUMsK0JBQStCLENBQUM7RUFJcEM7RUFDT0MsV0FBV0EsQ0FBRUMsTUFBaUIsRUFBRztJQUN0Q0MsTUFBTSxJQUFJQSxNQUFNLENBQUVELE1BQU0sQ0FBQ0UsTUFBTSxHQUFHLENBQUMsQ0FBRTtJQUNyQ0QsTUFBTSxJQUFJRCxNQUFNLENBQUNHLE9BQU8sQ0FBRSxDQUFFQyxLQUFLLEVBQUVDLENBQUMsS0FBTTtNQUN4QyxJQUFLQSxDQUFDLEdBQUdMLE1BQU0sQ0FBQ0UsTUFBTSxHQUFHLENBQUMsRUFBRztRQUMzQkQsTUFBTSxJQUFJQSxNQUFNLENBQUVHLEtBQUssQ0FBQ0UsQ0FBQyxHQUFHTixNQUFNLENBQUVLLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FBQ0MsQ0FBQyxFQUMzQyw0RUFBNEUsQ0FBRTtNQUNsRjtJQUNGLENBQUMsQ0FBRTs7SUFFSDtJQUNBLElBQUksQ0FBQ04sTUFBTSxHQUFHQSxNQUFNLENBQUNPLEtBQUssRUFBRTs7SUFFNUI7SUFDQTtJQUNBLEtBQU0sSUFBSUYsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLElBQUksQ0FBQ0wsTUFBTSxDQUFDRSxNQUFNLEdBQUcsQ0FBQyxFQUFFRyxDQUFDLEVBQUUsRUFBRztNQUNqRCxNQUFN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
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Complex.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * A complex number with mutable and immutable methods.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Matt Pennington
 */



class Complex {
  /**
   * Creates a complex number, that has both a real and imaginary part.
   * @public
   *
   * @param {number} real - The real part. For a complex number $a+bi$, this should be $a$.
   * @param {number} imaginary - The imaginary part. For a complex number $a+bi$, this should be $b$.
   */
  constructor(real, imaginary) {
    // @public {number} - The real part. For a complex number $a+bi$, this is $a$.
    this.real = real;

    // @public {number} - The imaginary part. For a complex number $a+bi$, this is $b$.
    this.imaginary = imaginary;
  }

  /**
   * Creates a copy of this complex, or if a complex is passed in, set that complex's values to ours.
   * @public
   *
   * This is the immutable form of the function set(), if a complex is provided. This will return a new complex, and
   * will not modify this complex.
   *
   * @param {Complex} [complex] - If not provided, creates a new Complex with filled in values. Otherwise, fills
   *                              in the values of the provided complex so that it equals this complex.
   * @returns {Complex}
   */
  copy(complex) {
    if (complex) {
      return complex.set(this);
    } else {
      return new Complex(this.real, this.imaginary);
    }
  }

  /**
   * The phase / argument of the complex number.
   * @public
   *
   * @returns {number}
   */
  phase() {
    return Math.atan2(this.imaginary, this.real);
  }

  /**
   * The magnitude (Euclidean/L2 Norm) of this complex number, i.e. $\sqrt{a^2+b^2}$.
   * @public
   *
   * @returns {number}
   */
  getMagnitude() {
    return Math.sqrt(this.magnitudeSquared);
  }
  get magnitude() {
    return this.getMagnitude();
  }

  /**
   * The squared magnitude (square of the Euclidean/L2 Norm) of this complex, i.e. $a^2+b^2$.
   * @public
   *
   * @returns {number}
   */
  getMagnitudeSquared() {
    return this.real * this.real + this.imaginary * this.imaginary;
  }
  get magnitudeSquared() {
    return this.getMagnitudeSquared();
  }

  /**
   * Exact equality comparison between this Complex and another Complex.
   * @public
   *
   * @param {Complex} other
   * @returns {boolean} - Whether the two complex numbers have equal components
   */
  equals(other) {
    return this.real === other.real && this.imaginary === other.imaginary;
  }

  /**
   * Approximate equality comparison between this Complex and another Complex.
   * @public
   *
   * @param {Complex} other
   * @param {number} epsilon
   * @returns {boolean} - Whether difference between the two complex numbers has no component with an absolute value
   *                      greater than epsilon.
   */
  equalsEpsilon(other, epsilon) {
    if (!epsilon) {
      epsilon = 0;
    }
    return Math.max(Math.abs(this.real - other.real), Math.abs(this.imaginary - other.imaginary)) <= epsilon;
  }

  /**
   * Addition of this Complex and another Complex, returning a copy.
   * @public
   *
   * This is the immutable form of the function add(). This will return a new Complex, and will not modify
   * this Complex.
   *
   * @param {Complex} c
   * @returns {Complex}
   */
  plus(c) {
    return new Complex(this.real + c.real, this.imaginary + c.imaginary);
  }

  /**
   * Subtraction of this Complex by another Complex c, returning a copy.
   * @public
   *
   * This is the immutable form of the function subtract(). This will return a new Complex, and will not modify
   * this Complex.
   *
   * @param {Complex} c
   * @returns {Complex}
   */
  minus(c) {
    return new Complex(this.real - c.real, this.imaginary - c.imaginary);
  }

  /**
   * Complex multiplication.
   * Immutable version of multiply
   * @public
   *
   * @param {Complex} c
   * @returns {Complex}
   */
  times(c) {
    return new Complex(this.real * c.real - this.imaginary * c.imaginary, this.real * c.imaginary + this.imaginary * c.real);
  }

  /**
   * Complex division.
   * Immutable version of divide
   * @public
   *
   * @param {Complex} c
   * @returns {Complex}
   */
  dividedBy(c) {
    const cMag = c.magnitudeSquared;
    return new Complex((this.real * c.real + this.imaginary * c.imaginary) / cMag, (this.imaginary * c.real - this.real * c.imaginary) / cMag);
  }

  /**
   * Square root.
   * Immutable form of sqrt.
   * @public
   *
   * @returns {Complex}
   */
  sqrtOf() {
    const mag = this.magnitude;
    return new Complex(Math.sqrt((mag + this.real) / 2), (this.imaginary >= 0 ? 1 : -1) * Math.sqrt((mag - this.real) / 2));
  }

  /**
   * Returns the power of this complex number by a real number.
   * @public
   *
   * @param {number} realPower
   * @returns {Complex}
   */
  powerByReal(realPower) {
    const magTimes = Math.pow(this.magnitude, realPower);
    const angle = realPower * this.phase();
    return new Complex(magTimes * Math.cos(angle), magTimes * Math.sin(angle));
  }

  /**
   * Sine.
   * Immutable form of sin.
   * @public
   *
   * @returns {Complex}
   */
  sinOf() {
    return new Complex(Math.sin(this.real) * js_Utils.cosh(this.imaginary), Math.cos(this.real) * js_Utils.sinh(this.imaginary));
  }

  /**
   * Cosine.
   * Immutable form of cos.
   * @public
   *
   * @returns {Complex}
   */
  cosOf() {
    return new Complex(Math.cos(this.real) * js_Utils.cosh(this.imaginary), -Math.sin(this.real) * js_Utils.sinh(this.imaginary));
  }

  /**
   * Returns the square of this complex number and does not modify it.
   * This is the immutable version of square.
   * @public
   *
   * @returns {Complex}
   */
  squared() {
    return this.times(this);
  }

  /**
   * Complex conjugate.
   * Immutable form of conjugate
   * @public
   *
   * @returns {Complex}
   */
  conjugated() {
    return new Complex(this.real, -this.imaginary);
  }

  /**
   * Takes e to the power of this complex number. $e^{a+bi}=e^a\cos b + i\sin b$.
   * This is the immutable form of exponentiate.
   * @public
   *
   * @returns {Complex}
   */
  exponentiated() {
    return Complex.createPolar(Math.exp(this.real), this.imaginary);
  }

  /*** Mutable functions ***/

  /**
   * Sets all of the components of this complex, returning this
   * @public
   *
   * @param {number} real
   * @param {number} imaginary
   * @returns {Complex}
   */
  setRealImaginary(real, imaginary) {
    this.real = real;
    this.imaginary = imaginary;
    return this;
  }

  /**
   * Sets the real component of this complex, returning this
   * @public
   *
   * @param {number} real
   * @returns {Complex}
   */
  setReal(real) {
    this.real = real;
    return this;
  }

  /**
   * Sets the imaginary component of this complex, returning this
   * @public
   *
   * @param {number} imaginary
   * @returns {Complex}
   */
  setImaginary(imaginary) {
    this.imaginary = imaginary;
    return this;
  }

  /**
   * Sets the components of this complex to be a copy of the parameter
   * @public
   *
   * This is the mutable form of the function copy(). This will mutate (change) this complex, in addition to returning
   * this complex itself.
   *
   * @param {Complex} c
   * @returns {Complex}
   */
  set(c) {
    return this.setRealImaginary(c.real, c.imaginary);
  }

  /**
   * Sets this Complex's value to be the a,b values matching the given magnitude and phase (in radians), changing
   * this Complex, and returning itself.
   * @public
   *
   * @param {number} magnitude
   * @param {number} phase - In radians
   * @returns {Complex}
   */
  setPolar(magnitude, phase) {
    return this.setRealImaginary(magnitude * Math.cos(phase), magnitude * Math.sin(phase));
  }

  /**
   * Addition of this Complex and another Complex, returning a copy.
   * @public
   *
   * This is the mutable form of the function plus(). This will modify and return this.
   *
   * @param {Complex} c
   * @returns {Complex}
   */
  add(c) {
    return this.setRealImaginary(this.real + c.real, this.imaginary + c.imaginary);
  }

  /**
   * Subtraction of another Complex from this Complex, returning a copy.
   * @public
   *
   * This is the mutable form of the function minus(). This will modify and return this.
   *
   * @param {Complex} c
   * @returns {Complex}
   */
  subtract(c) {
    return this.setRealImaginary(this.real - c.real, this.imaginary - c.imaginary);
  }

  /**
   * Mutable Complex multiplication.
   * @public
   *
   * @param {Complex} c
   * @returns {Complex}
   */
  multiply(c) {
    return this.setRealImaginary(this.real * c.real - this.imaginary * c.imaginary, this.real * c.imaginary + this.imaginary * c.real);
  }

  /**
   * Mutable Complex division. The immutable form is dividedBy.
   * @public
   *
   * @param {Complex} c
   * @returns {Complex}
   */
  divide(c) {
    const cMag = c.magnitudeSquared;
    return this.setRealImaginary((this.real * c.real + this.imaginary * c.imaginary) / cMag, (this.imaginary * c.real - this.real * c.imaginary) / cMag);
  }

  /**
   * Sets this Complex to e to the power of this complex number. $e^{a+bi}=e^a\cos b + i\sin b$.
   * This is the mutable version of exponentiated
   * @public
   *
   * @returns {Complex}
   */
  exponentiate() {
    return this.setPolar(Math.exp(this.real), this.imaginary);
  }

  /**
   * Squares this complex number.
   * This is the mutable version of squared.
   * @public
   *
   * @returns {Complex}
   */
  square() {
    return this.multiply(this);
  }

  /**
   * Square root.
   * Mutable form of sqrtOf.
   * @public
   *
   * @returns {Complex}
   */
  sqrt() {
    const mag = this.magnitude;
    return this.setRealImaginary(Math.sqrt((mag + this.real) / 2), (this.imaginary >= 0 ? 1 : -1) * Math.sqrt((mag - this.real) / 2));
  }

  /**
   * Sine.
   * Mutable form of sinOf.
   * @public
   *
   * @returns {Complex}
   */
  sin() {
    return this.setRealImaginary(Math.sin(this.real) * js_Utils.cosh(this.imaginary), Math.cos(this.real) * js_Utils.sinh(this.imaginary));
  }

  /**
   * Cosine.
   * Mutable form of cosOf.
   * @public
   *
   * @returns {Complex}
   */
  cos() {
    return this.setRealImaginary(Math.cos(this.real) * js_Utils.cosh(this.imaginary), -Math.sin(this.real) * js_Utils.sinh(this.imaginary));
  }

  /**
   * Complex conjugate.
   * Mutable form of conjugated
   * @public
   *
   * @returns {Complex}
   */
  conjugate() {
    return this.setRealImaginary(this.real, -this.imaginary);
  }

  /**
   * Debugging string for the complex number (provides real and imaginary parts).
   * @public
   *
   * @returns {string}
   */
  toString() {
    return `Complex(${this.real}, ${this.imaginary})`;
  }

  /**
   * Constructs a complex number from just the real part (assuming the imaginary part is 0).
   * @public
   *
   * @param {number} real
   * @returns {Complex}
   */
  static real(real) {
    return new Complex(real, 0);
  }

  /**
   * Constructs a complex number from just the imaginary part (assuming the real part is 0).
   * @public
   *
   * @param {number} imaginary
   * @returns {Complex}
   */
  static imaginary(imaginary) {
    return new Complex(0, imaginary);
  }

  /**
   * Constructs a complex number from the polar form. For a magnitude $r$ and phase $\varphi$, this will be
   * $\cos\varphi+i r\sin\varphi$.
   * @public
   *
   * @param {number} magnitude
   * @param {number} phase
   * @returns {Complex}
   */
  static createPolar(magnitude, phase) {
    return new Complex(magnitude * Math.cos(phase), magnitude * Math.sin(phase));
  }
}
js_dot.register('Complex', Complex);

/**
 * Immutable constant $0$.
 * @public
 *
 * @constant {Complex} ZERO
 */
Complex.ZERO = new Complex(0, 0);

/**
 * Immutable constant $1$.
 * @public
 *
 * @constant {Complex} ONE
 */
Complex.ONE = new Complex(1, 0);

/**
 * Immutable constant $i$, the imaginary unit.
 * @public
 *
 * @constant {Complex} I
 */
Complex.I = Complex.imaginary(1);
/* harmony default export */ const js_Complex = ((/* unused pure expression or super */ null && (Complex)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/ConvexHull2.js
// Copyright 2013-2023, University of Colorado Boulder

/**
 * Construction of 2D convex hulls from a list of points.
 *
 * For example:
 * #begin canvasExample grahamScan 256x128
 * #on
 * var points = _.range( 50 ).map( function() {
 *   return new phet.dot.Vector2( 5 + ( 256 - 10 ) * Math.random(), 5 + ( 128 - 10 ) * Math.random() );
 * } );
 * var hullPoints = phet.dot.ConvexHull2.grahamScan( points, false );
 * #off
 * context.beginPath();
 * hullPoints.forEach( function( point ) {
 *   context.lineTo( point.x, point.y );
 * } );
 * context.closePath();
 * context.fillStyle = '#eee';
 * context.fill();
 * context.strokeStyle = '#f00';
 * context.stroke();
 *
 * context.beginPath();
 * points.forEach( function( point ) {
 *   context.arc( point.x, point.y, 2, 0, Math.PI * 2, false );
 *   context.closePath();
 * } );
 * context.fillStyle = '#00f';
 * context.fill();
 * #end canvasExample
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



/**
 * counter-clockwise turn if > 0, clockwise turn if < 0, collinear if === 0.
 * @param {Vector2} p1
 * @param {Vector2} p2
 * @param {Vector2} p3
 * @returns {number}
 */
function ccw(p1, p2, p3) {
  return p2.minus(p1).crossScalar(p3.minus(p1));
}
const ConvexHull2 = {
  // TODO testing: all collinear, multiple ways of having same angle, etc.

  /**
   * Given multiple points, this performs a Graham Scan (http://en.wikipedia.org/wiki/Graham_scan) to identify an
   * ordered list of points which define the minimal polygon that contains all of the points.
   * @public
   *
   * @param {Array.<Vector2>} points
   * @param {boolean} includeCollinear - If a point is along an edge of the convex hull (not at one of its vertices),
   *                                     should it be included?
   * @returns {Array.<Vector2>}
   */
  grahamScan: (points, includeCollinear) => {
    if (points.length <= 2) {
      return points;
    }

    // find the point 'p' with the lowest y value
    let minY = Number.POSITIVE_INFINITY;
    let p = null;
    _.each(points, point => {
      if (point.y <= minY) {
        // if two points have the same y value, take the one with the lowest x
        if (point.y === minY && p) {
          if (point.x < p.x) {
            p = point;
          }
        } else {
          minY = point.y;
          p = point;
        }
      }
    });

    // sorts the points by their angle. Between 0 and PI
    points = _.sortBy(points, point => {
      return point.minus(p).angle;
    });

    // remove p from points (relies on the above statement making a defensive copy)
    points.splice(_.indexOf(points, p), 1);

    // our result array
    const result = [p];
    _.each(points, point => {
      // ignore points equal to our starting point
      if (p.x === point.x && p.y === point.y) {
        return;
      }
      function isRightTurn() {
        if (result.length < 2) {
          return false;
        }
        const cross = ccw(result[result.length - 2], result[result.length - 1], point);
        return includeCollinear ? cross < 0 : cross <= 0;
      }
      while (isRightTurn()) {
        result.pop();
      }
      result.push(point);
    });
    return result;
  }
};
js_dot.register('ConvexHull2', ConvexHull2);
/* harmony default export */ const js_ConvexHull2 = ((/* unused pure expression or super */ null && (ConvexHull2)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3QiLCJjY3ciLCJwMSIsInAyIiwicDMiLCJtaW51cyIsImNyb3NzU2NhbGFyIiwiQ29udmV4SHVsbDIiLCJncmFoYW1TY2FuIiwicG9pbnRzIiwiaW5jbHVkZUNvbGxpbmVhciIsImxlbmd0aCIsIm1pblkiLCJOdW1iZXIiLCJQT1NJVElWRV9JTkZJTklUWSIsInAiLCJfIiwiZWFjaCIsInBvaW50IiwieSIsIngiLCJzb3J0QnkiLCJhbmdsZSIsInNwbGljZSIsImluZGV4T2YiLCJyZXN1bHQiLCJpc1JpZ2h0VHVybiIsImNyb3NzIiwicG9wIiwicHVzaCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ29udmV4SHVsbDIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogQ29uc3RydWN0aW9uIG9mIDJEIGNvbnZleCBodWxscyBmcm9tIGEgbGlzdCBvZiBwb2ludHMuXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKiAjYmVnaW4gY2FudmFzRXhhbXBsZSBncmFoYW1TY2FuIDI1NngxMjhcbiAqICNvblxuICogdmFyIHBvaW50cyA9IF8ucmFuZ2UoIDUwICkubWFwKCBmdW5jdGlvbigpIHtcbiAqICAgcmV0dXJuIG5ldyBwaGV0LmRvdC5WZWN0b3IyKCA1ICsgKCAyNTYgLSAxMCApICogTWF0aC5yYW5kb20oKSwgNSArICggMTI4IC0gMTAgKSAqIE1hdGgucmFuZG9tKCkgKTtcbiAqIH0gKTtcbiAqIHZhciBodWxsUG9pbnRzID0gcGhldC5kb3QuQ29udmV4SHVsbDIuZ3JhaGFtU2NhbiggcG9pbnRzLCBmYWxzZSApO1xuICogI29mZlxuICogY29udGV4dC5iZWdpblBhdGgoKTtcbiAqIGh1bGxQb2ludHMuZm9yRWFjaCggZnVuY3Rpb24oIHBvaW50ICkge1xuICogICBjb250ZXh0LmxpbmVUbyggcG9pbnQueCwgcG9pbnQueSApO1xuICogfSApO1xuICogY29udGV4dC5jbG9zZVBhdGgoKTtcbiAqIGNvbnRleHQuZmlsbFN0eWxlID0gJyNlZWUnO1xuICogY29udGV4dC5maWxsKCk7XG4gKiBjb250ZXh0LnN0cm9rZVN0eWxlID0gJyNmMDAnO1xuICogY29udGV4dC5zdHJva2UoKTtcbiAqXG4gKiBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICogcG9pbnRzLmZvckVhY2goIGZ1bmN0aW9uKCBwb2ludCApIHtcbiAqICAgY29udGV4dC5hcmMoIHBvaW50LngsIHBvaW50LnksIDIsIDAsIE1hdGguUEkgKiAyLCBmYWxzZSApO1xuICogICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICogfSApO1xuICogY29udGV4dC5maWxsU3R5bGUgPSAnIzAwZic7XG4gKiBjb250ZXh0LmZpbGwoKTtcbiAqICNlbmQgY2FudmFzRXhhbXBsZVxuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cbiAqL1xuXG5pbXBvcnQgZG90IGZyb20gJy4vZG90LmpzJztcblxuLyoqXG4gKiBjb3VudGVyLWNsb2Nrd2lzZSB0dXJuIGlmID4gMCwgY2xvY2t3aXNlIHR1cm4gaWYgPCAwLCBjb2xsaW5lYXIgaWYgPT09IDAuXG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IHAxXG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IHAyXG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IHAzXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBjY3coIHAxLCBwMiwgcDMgKSB7XG4gIHJldHVybiBwMi5taW51cyggcDEgKS5jcm9zc1NjYWxhciggcDMubWludXMoIHAxICkgKTtcbn1cblxuY29uc3QgQ29udmV4SHVsbDIgPSB7XG4gIC8vIFRPRE8gdGVzdGluZzogYWxsIGNvbGxpbmVhciwgbXVsdGlwbGUgd2F5cyBvZiBoYXZpbmcgc2FtZSBhbmdsZSwgZXRjLlxuXG4gIC8qKlxuICAgKiBHaXZlbiBtdWx0aXBsZSBwb2ludHMsIHRoaXMgcGVyZm9ybXMgYSBHcmFoYW0gU2NhbiAoaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HcmFoYW1fc2NhbikgdG8gaWRlbnRpZnkgYW5cbiAgICogb3JkZXJlZCBsaXN0IG9mIHBvaW50cyB3aGljaCBkZWZpbmUgdGhlIG1pbmltYWwgcG9seWdvbiB0aGF0IGNvbnRhaW5zIGFsbCBvZiB0aGUgcG9pbnRzLlxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXkuPFZlY3RvcjI+fSBwb2ludHNcbiAgICogQHBhcmFtIHtib29sZWFufSBpbmNsdWRlQ29sbGluZWFyIC0gSWYgYSBwb2ludCBpcyBhbG9uZyBhbiBlZGdlIG9mIHRoZSBjb252ZXggaHVsbCAobm90IGF0IG9uZSBvZiBpdHMgdmVydGljZXMpLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91bGQgaXQgYmUgaW5jbHVkZWQ/XG4gICAqIEByZXR1cm5zIHtBcnJheS48VmVjdG9yMj59XG4gICAqL1xuICBncmFoYW1TY2FuOiAoIHBvaW50cywgaW5jbHVkZUNvbGxpbmVhciApID0+IHtcbiAgICBpZiAoIHBvaW50cy5sZW5ndGggPD0gMiApIHtcbiAgICAgIHJldHVybiBwb2ludHM7XG4gICAgfVxuXG4gICAgLy8gZmluZCB0aGUgcG9pbnQgJ3AnIHdpdGggdGhlIGxvd2VzdCB5IHZhbHVlXG4gICAgbGV0IG1pblkgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgbGV0IHAgPSBudWxsO1xuICAgIF8uZWFjaCggcG9pbnRzLCBwb2ludCA9PiB7XG4gICAgICBpZiAoIHBvaW50LnkgPD0gbWluWSApIHtcbiAgICAgICAgLy8gaWYgdHdvIHBvaW50cyBoYXZlIHRoZSBzYW1lIHkgdmFsdWUsIHRha2UgdGhlIG9uZSB3aXRoIHRoZSBsb3dlc3QgeFxuICAgICAgICBpZiAoIHBvaW50LnkgPT09IG1pblkgJiYgcCApIHtcbiAgICAgICAgICBpZiAoIHBvaW50LnggPCBwLnggKSB7XG4gICAgICAgICAgICBwID0gcG9pbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIG1pblkgPSBwb2ludC55O1xuICAgICAgICAgIHAgPSBwb2ludDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gKTtcblxuICAgIC8vIHNvcnRzIHRoZSBwb2ludHMgYnkgdGhlaXIgYW5nbGUuIEJldHdlZW4gMCBhbmQgUElcbiAgICBwb2ludHMgPSBfLnNvcnRCeSggcG9pbnRzLCBwb2ludCA9PiB7XG4gICAgICByZXR1cm4gcG9pbnQubWludXMoIHAgKS5hbmdsZTtcbiAgICB9ICk7XG5cbiAgICAvLyByZW1vdmUgcCBmcm9tIHBvaW50cyAocmVsaWVzIG9uIHRoZSBhYm92ZSBzdGF0ZW1lbnQgbWFraW5nIGEgZGVmZW5zaXZlIGNvcHkpXG4gICAgcG9pbnRzLnNwbGljZSggXy5pbmRleE9mKCBwb2ludHMsIHAgKSwgMSApO1xuXG4gICAgLy8gb3VyIHJlc3VsdCBhcnJheVxuICAgIGNvbnN0IHJlc3VsdCA9IFsgcCBdO1xuXG4gICAgXy5lYWNoKCBwb2ludHMsIHBvaW50ID0+IHtcbiAgICAgIC8vIGlnbm9yZSBwb2ludHMgZXF1YWwgdG8gb3VyIHN0YXJ0aW5nIHBvaW50XG4gICAgICBpZiAoIHAueCA9PT0gcG9pbnQueCAmJiBwLnkgPT09IHBvaW50LnkgKSB7IHJldHVybjsgfVxuXG4gICAgICBmdW5jdGlvbiBpc1JpZ2h0VHVybigpIHtcbiAgICAgICAgaWYgKCByZXN1bHQubGVuZ3RoIDwgMiApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3Jvc3MgPSBjY3coIHJlc3VsdFsgcmVzdWx0Lmxlbmd0aCAtIDIgXSwgcmVzdWx0WyByZXN1bHQubGVuZ3RoIC0gMSBdLCBwb2ludCApO1xuICAgICAgICByZXR1cm4gaW5jbHVkZUNvbGxpbmVhciA/ICggY3Jvc3MgPCAwICkgOiAoIGNyb3NzIDw9IDAgKTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKCBpc1JpZ2h0VHVybigpICkge1xuICAgICAgICByZXN1bHQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXN1bHQucHVzaCggcG9pbnQgKTtcbiAgICB9ICk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuXG5kb3QucmVnaXN0ZXIoICdDb252ZXhIdWxsMicsIENvbnZleEh1bGwyICk7XG5cbmV4cG9ydCBkZWZhdWx0IENvbnZleEh1bGwyOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxHQUFHLE1BQU0sVUFBVTs7QUFFMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxHQUFHQSxDQUFFQyxFQUFFLEVBQUVDLEVBQUUsRUFBRUMsRUFBRSxFQUFHO0VBQ3pCLE9BQU9ELEVBQUUsQ0FBQ0UsS0FBSyxDQUFFSCxFQUFFLENBQUUsQ0FBQ0ksV0FBVyxDQUFFRixFQUFFLENBQUNDLEtBQUssQ0FBRUgsRUFBRSxDQUFFLENBQUU7QUFDckQ7QUFFQSxNQUFNSyxXQUFXLEdBQUc7RUFDbEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsVUFBVSxFQUFFQSxDQUFFQyxNQUFNLEVBQUVDLGdCQUFnQixLQUFNO0lBQzFDLElBQUtELE1BQU0sQ0FBQ0UsTUFBTSxJQUFJLENBQUMsRUFBRztNQUN4QixPQUFPRixNQUFNO0lBQ2Y7O0lBRUE7SUFDQSxJQUFJRyxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0MsaUJBQWlCO0lBQ25DLElBQUlDLENBQUMsR0FBRyxJQUFJO0lBQ1pDLENBQUMsQ0FBQ0MsSUFBSSxDQUFFUixNQUFNLEVBQUVTLEtBQUssSUFBSTtNQUN2QixJQUFLQSxLQUFLLENBQUNDLENBQUMsSUFBSVAsSUFBSSxFQUFHO1FBQ3JCO1FBQ0EsSUFBS00sS0FBSyxDQUFDQyxDQUFDLEtBQUtQLElBQUksSUFBSUcsQ0FBQyxFQUFHO1VBQzNCLElBQUtHLEtBQUssQ0FBQ0UsQ0FBQyxHQUFHTCxDQUFDLENBQUNLLENBQUMsRUFBRztZQUNuQkwsQ0FBQyxHQUFHRyxLQUFLO1VBQ1g7UUFDRixDQUFDLE1BQ0k7VUFDSE4sSUFBSSxHQUFHTSxLQUFLLENBQUNDLENBQUM7VUFDZEosQ0FBQyxHQUFHRyxLQUFLO1FBQ1g7TUFDRjtJQUNGLENBQUMsQ0FBRTs7SUFFSDtJQUNBVCxNQUFNLEdBQUdPLENBQUMsQ0FBQ0ssTUFBTSxDQUFFWixNQUFNLEVBQUVTLEtBQUssSUFBSTtNQUNsQyxPQUFPQSxLQUFLLENBQUNiLEtBQUssQ0FBRVUsQ0FBQyxDQUFFLENBQUNPLEtBQUs7SUFDL0IsQ0FBQyxDQUFFOztJQUVIO0lBQ0FiLE1BQU0sQ0FBQ2MsTUFBTSxDQUFFUCxDQUFDLENBQUNRLE9BQU8sQ0FBRWYsTUFBTSxFQUFFTSxDQUFDLENBQUUsRUFBRSxDQUFDLENBQUU7O0lBRTFDO0lBQ0EsTUFBTVUsTUFBTSxHQUFHLENBQUVWLENBQUMsQ0FBRTtJQUVwQkMsQ0FBQyxDQUFDQyxJQUFJLENBQUVSLE1BQU0sRUFBRVMsS0FBSyxJQUFJO01BQ3ZCO01BQ0EsSUFBS0gsQ0FBQyxDQUFDSyxDQUFDLEtBQUtGLEtBQUssQ0FBQ0UsQ0FBQyxJQUFJTCxDQUFDLENBQUNJLENBQUMsS0FBS0QsS0FBSyxDQUFDQyxDQUFDLEVBQUc7UUFBRTtNQUFRO01BRXBELFNBQVNPLFdBQVdBLENBQUEsRUFBRztRQUNyQixJQUFLRCxNQUFNLENBQUNkLE1BQU0sR0FBRyxDQUFDLEVBQUc7VUFDdkIsT0FBTyxLQUFLO1FBQ2Q7UUFDQSxNQUFNZ0IsS0FBSyxHQUFHMUIsR0FBRyxDQUFFd0IsTUFBTSxDQUFFQSxNQUFNLENBQUNkLE1BQU0sR0FBRyxDQUFDLENBQUUsRUFBRWMsTUFBTSxDQUFFQSxNQUFNLENBQUNkLE1BQU0sR0FBRyxDQUFDLENBQUUsRUFBRU8sS0FBSyxDQUFFO1FBQ3BGLE9BQU9SLGdCQUFnQixHQUFLaUIsS0FBSyxHQUFHLENBQUMsR0FBT0EsS0FBSyxJQUFJLENBQUc7TUFDMUQ7TUFFQSxPQUFRRCxXQUFXLEVBQUUsRUFBRztRQUN0QkQsTUFBTSxDQUFDRyxHQUFHLEVBQUU7TUFDZDtNQUNBSCxNQUFNLENBQUNJLElBQUksQ0FBRVgsS0FBSyxDQUFFO0lBQ3RCLENBQUMsQ0FBRTtJQUVILE9BQU9PLE1BQU07RUFDZjtBQUNGLENBQUM7QUFFRHpCLEdBQUcsQ0FBQzhCLFFBQVEsQ0FBRSxhQUFhLEVBQUV2QixXQUFXLENBQUU7QUFFMUMsZUFBZUEsV0FBVyJ9
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/DampedHarmonic.js
// Copyright 2023, University of Colorado Boulder

/**
 * Solves for a specific solution of a damped harmonic oscillator
 * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator), given the initial value and
 * derivative.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */




class SolutionType extends js_EnumerationValue {
  static OVER_DAMPED = new SolutionType();
  static UNDER_DAMPED = new SolutionType();
  static CRITICALLY_DAMPED = new SolutionType();
  static UNKNOWN = new SolutionType();
  static enumeration = new js_Enumeration(SolutionType);
}
class DampedHarmonic {
  // if critically damped
  // if under-damped
  // if over-damped
  // if over-damped

  /**
   * For solving ax'' + bx' + cx = 0 with initial conditions x(0) and x'(0).
   *
   * @param a - Coefficient in front of the second derivative.
   * @param b - Coefficient in front of the first derivative, responsible for the amount of damping applied.
   * @param c - Coefficient in front of the current value, responsible for the amount of force towards equilibrium.
   * @param initialValue - The value of x(0), i.e. the initial position at t=0.
   * @param initialDerivative - The value of x'(0), i.e. the initial velocity at t=0;
   */
  constructor(a, b, c, initialValue, initialDerivative) {
    assert && assert(isFinite(a) && a !== 0);
    assert && assert(isFinite(b));
    assert && assert(isFinite(c) && c !== 0);
    assert && assert(isFinite(initialValue));
    assert && assert(isFinite(initialDerivative));

    // We'll transform into the simpler: x'' + dampingConstant x' + angularFrequencySquared x = 0
    this.dampingConstant = b / a;
    this.angularFrequencySquared = c / a;
    assert && assert(this.dampingConstant >= 0, 'a and b should share the same sign');
    assert && assert(this.angularFrequencySquared > 0, 'a and c should share the same sign');

    // Determines what type of solution is required.
    this.discriminant = this.dampingConstant * this.dampingConstant - 4 * this.angularFrequencySquared;
    this.solutionType = SolutionType.UNKNOWN; // will be filled in below

    // Constants that determine what linear combination of solutions satisfies the initial conditions
    this.c1 = 0;
    this.c2 = 0;
    if (Math.abs(this.discriminant) < 1e-5) {
      this.solutionType = SolutionType.CRITICALLY_DAMPED;
      this.angularFrequency = Math.sqrt(this.angularFrequencySquared);
      this.c1 = initialValue;
      this.c2 = initialDerivative + this.angularFrequency * initialValue;
    } else if (this.discriminant < 0) {
      this.solutionType = SolutionType.UNDER_DAMPED;
      this.frequency = 0.5 * Math.sqrt(-this.discriminant);
      this.c1 = initialValue;
      this.c2 = this.dampingConstant * initialValue / (2 * this.frequency) + initialDerivative / this.frequency;
    } else {
      this.solutionType = SolutionType.OVER_DAMPED;
      this.positiveRoot = 0.5 * (-this.dampingConstant + Math.sqrt(this.discriminant));
      this.negativeRoot = 0.5 * (-this.dampingConstant - Math.sqrt(this.discriminant));
      this.c2 = (this.negativeRoot * initialValue - initialDerivative) / (this.negativeRoot - this.positiveRoot);
      this.c1 = initialValue - this.c2;
    }
  }

  /**
   * Returns the value of x(t) determined by the differential equation and initial conditions.
   */
  getValue(t) {
    if (this.solutionType === SolutionType.CRITICALLY_DAMPED) {
      assert && assert(this.angularFrequency !== undefined);
      return (this.c1 + this.c2 * t) * Math.exp(-this.angularFrequency * t);
    } else if (this.solutionType === SolutionType.UNDER_DAMPED) {
      assert && assert(this.frequency !== undefined);
      const theta = this.frequency * t;
      return Math.exp(-(this.dampingConstant / 2) * t) * (this.c1 * Math.cos(theta) + this.c2 * Math.sin(theta));
    } else if (this.solutionType === SolutionType.OVER_DAMPED) {
      assert && assert(this.positiveRoot !== undefined);
      assert && assert(this.negativeRoot !== undefined);
      return this.c1 * Math.exp(this.negativeRoot * t) + this.c2 * Math.exp(this.positiveRoot * t);
    } else {
      throw new Error('Unknown solution type?');
    }
  }

  /**
   * Returns the value of x'(t) determined by the differential equation and initial conditions.
   */
  getDerivative(t) {
    if (this.solutionType === SolutionType.CRITICALLY_DAMPED) {
      assert && assert(this.angularFrequency !== undefined);
      return Math.exp(-this.angularFrequency * t) * (this.c2 - this.angularFrequency * (this.c1 + this.c2 * t));
    } else if (this.solutionType === SolutionType.UNDER_DAMPED) {
      assert && assert(this.frequency !== undefined);
      const theta = this.frequency * t;
      const cos = Math.cos(theta);
      const sin = Math.sin(theta);
      const term1 = this.frequency * (this.c2 * cos - this.c1 * sin);
      const term2 = 0.5 * this.dampingConstant * (this.c1 * cos + this.c2 * sin);
      return Math.exp(-0.5 * this.dampingConstant * t) * (term1 - term2);
    } else if (this.solutionType === SolutionType.OVER_DAMPED) {
      assert && assert(this.positiveRoot !== undefined);
      assert && assert(this.negativeRoot !== undefined);
      return this.c1 * this.negativeRoot * Math.exp(this.negativeRoot * t) + this.c2 * this.positiveRoot * Math.exp(this.positiveRoot * t);
    } else {
      throw new Error('Unknown solution type?');
    }
  }
}
js_dot.register('DampedHarmonic', DampedHarmonic);
/* harmony default export */ const js_DampedHarmonic = ((/* unused pure expression or super */ null && (DampedHarmonic)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/DelaunayTriangulation.js
// Copyright 2017-2022, University of Colorado Boulder

/**
 * Handles constrained Delaunay triangulation based on "Sweep-line algorithm for constrained Delaunay triangulation"
 * by Domiter and Zalik (2008), with some details provided by "An efficient sweep-line Delaunay triangulation
 * algorithm" by Zalik (2005).
 *
 * TODO: Second (basin) heuristic not yet implemented.
 * TODO: Constraints not yet implemented.
 * TODO: Check number of triangles/edges/vertices with Euler's Formula
 * TODO: Handle "outside" cases (and changing the front edges) for constrained edges
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */







class DelaunayTriangulation {
  /**
   * @public
   *
   * @param {Array.<Vector2>} points
   * @param {Array.<Array.<number>>} constraints - Pairs of indices into the points that should be treated as
   *                                               constrained edges.
   * @param {Object} [options]
   */
  constructor(points, constraints, options) {
    options = js_merge({}, options);
    let i;

    // @public {Array.<Vector2>}
    this.points = points;

    // @public {Array.<Array.<number>>}
    this.constraints = constraints;

    // @public {Array.<Triangle>}
    this.triangles = [];

    // @public {Array.<Edge>}
    this.edges = [];

    // @public {Array.<Vertex>}
    this.convexHull = [];
    if (points.length === 0) {
      return;
    }

    // @private {Array.<Vertex>}
    this.vertices = points.map((point, index) => {
      assert && assert(point instanceof Vector2 && point.isFinite());
      return new Vertex(point, index);
    });
    for (i = 0; i < this.constraints.length; i++) {
      const constraint = this.constraints[i];
      const firstIndex = constraint[0];
      const secondIndex = constraint[1];
      assert && assert(typeof firstIndex === 'number' && isFinite(firstIndex) && firstIndex % 1 === 0 && firstIndex >= 0 && firstIndex < points.length);
      assert && assert(typeof secondIndex === 'number' && isFinite(secondIndex) && secondIndex % 1 === 0 && secondIndex >= 0 && secondIndex < points.length);
      assert && assert(firstIndex !== secondIndex);
      this.vertices[firstIndex].constrainedVertices.push(this.vertices[secondIndex]);
    }
    this.vertices.sort(DelaunayTriangulation.vertexComparison);
    for (i = 0; i < this.vertices.length; i++) {
      const vertex = this.vertices[i];
      vertex.sortedIndex = i;
      for (let j = vertex.constrainedVertices.length - 1; j >= 0; j--) {
        const otherVertex = vertex.constrainedVertices[j];

        // If the "other" vertex is later in the sweep-line order, it should have the reference to the earlier vertex,
        // not the other way around.
        if (otherVertex.sortedIndex === -1) {
          otherVertex.constrainedVertices.push(vertex);
          vertex.constrainedVertices.splice(j, 1);
        }
      }
    }

    // @private {Vertex}
    this.bottomVertex = this.vertices[0];

    // @private {Array.<Vertex>} - Our initialization will handle our first vertex
    this.remainingVertices = this.vertices.slice(1);
    const bounds = Bounds2.NOTHING.copy();
    for (i = points.length - 1; i >= 0; i--) {
      bounds.addPoint(points[i]);
    }
    const alpha = 0.4;
    // @private {Vertex} - Fake index -1
    this.artificialMinVertex = new Vertex(new Vector2(bounds.minX - bounds.width * alpha, bounds.minY - bounds.height * alpha), -1);
    // @private {Vertex} - Fake index -2
    this.artificialMaxVertex = new Vertex(new Vector2(bounds.maxX + bounds.width * alpha, bounds.minY - bounds.height * alpha), -2);
    this.edges.push(new Edge(this.artificialMinVertex, this.artificialMaxVertex));
    this.edges.push(new Edge(this.artificialMaxVertex, this.bottomVertex));
    this.edges.push(new Edge(this.bottomVertex, this.artificialMinVertex));

    // Set up our first (artificial) triangle.
    this.triangles.push(new Triangle(this.artificialMinVertex, this.artificialMaxVertex, this.bottomVertex, this.edges[1], this.edges[2], this.edges[0]));

    // @private {Edge|null} - The start of our front (the edges at the front of the sweep-line)
    this.firstFrontEdge = this.edges[1];
    this.edges[1].connectAfter(this.edges[2]);

    // @private {Edge} - The start of our hull (the edges at the back, making up the convex hull)
    this.firstHullEdge = this.edges[0];
  }

  /**
   * Moves the triangulation forward by a vertex.
   * @private
   */
  step() {
    // TODO: reverse the array prior to this?
    const vertex = this.remainingVertices.shift();
    const x = vertex.point.x;
    let frontEdge = this.firstFrontEdge;
    while (frontEdge) {
      // TODO: epsilon needed here?
      if (x > frontEdge.endVertex.point.x) {
        const edge1 = new Edge(frontEdge.startVertex, vertex);
        const edge2 = new Edge(vertex, frontEdge.endVertex);
        edge1.connectAfter(edge2);
        this.edges.push(edge1);
        this.edges.push(edge2);
        this.triangles.push(new Triangle(frontEdge.endVertex, frontEdge.startVertex, vertex, edge1, edge2, frontEdge));
        this.reconnectFrontEdges(frontEdge, frontEdge, edge1, edge2);
        this.legalizeEdge(frontEdge);
        this.addHalfPiHeuristic(edge1, edge2);
        this.constrainEdges(vertex, edge1, edge2);
        break;
      } else if (x === frontEdge.endVertex.point.x) {
        const leftOldEdge = frontEdge.nextEdge;
        const rightOldEdge = frontEdge;
        assert && assert(leftOldEdge !== null);
        const middleOldVertex = frontEdge.endVertex;
        const leftVertex = leftOldEdge.endVertex;
        const rightVertex = rightOldEdge.startVertex;
        const leftEdge = new Edge(vertex, leftVertex);
        const rightEdge = new Edge(rightVertex, vertex);
        const middleEdge = new Edge(middleOldVertex, vertex);
        rightEdge.connectAfter(leftEdge);
        this.edges.push(leftEdge);
        this.edges.push(rightEdge);
        this.edges.push(middleEdge);
        this.triangles.push(new Triangle(leftVertex, middleOldVertex, vertex, middleEdge, leftEdge, leftOldEdge));
        this.triangles.push(new Triangle(middleOldVertex, rightVertex, vertex, rightEdge, middleEdge, rightOldEdge));
        this.reconnectFrontEdges(rightOldEdge, leftOldEdge, rightEdge, leftEdge);
        this.legalizeEdge(leftOldEdge);
        this.legalizeEdge(rightOldEdge);
        this.legalizeEdge(middleEdge);
        this.addHalfPiHeuristic(rightEdge, leftEdge);
        this.constrainEdges(vertex, rightEdge, leftEdge);
        break;
      }
      frontEdge = frontEdge.nextEdge;
    }
  }

  /**
   * Builds a triangle between two vertices.
   * @private
   *
   * @param {Edge} firstEdge
   * @param {Edge} secondEdge
   * @param {Vertex} firstSideVertex
   * @param {Vertex} middleVertex
   * @param {Vertex} secondSideVertex
   * @returns {Edge} - The newly created edge
   */
  fillBorderTriangle(firstEdge, secondEdge, firstSideVertex, middleVertex, secondSideVertex) {
    assert && assert(firstEdge instanceof Edge);
    assert && assert(secondEdge instanceof Edge);
    assert && assert(firstSideVertex instanceof Vertex);
    assert && assert(middleVertex instanceof Vertex);
    assert && assert(secondSideVertex instanceof Vertex);
    assert && assert(middleVertex === firstEdge.startVertex || middleVertex === firstEdge.endVertex, 'middleVertex should be in firstEdge');
    assert && assert(middleVertex === secondEdge.startVertex || middleVertex === secondEdge.endVertex, 'middleVertex should be in secondEdge');
    assert && assert(firstSideVertex === firstEdge.startVertex || firstSideVertex === firstEdge.endVertex, 'firstSideVertex should be in firstEdge');
    assert && assert(secondSideVertex === secondEdge.startVertex || secondSideVertex === secondEdge.endVertex, 'secondSideVertex should be in secondEdge');
    const newEdge = new Edge(firstSideVertex, secondSideVertex);
    this.edges.push(newEdge);
    this.triangles.push(new Triangle(secondSideVertex, middleVertex, firstSideVertex, firstEdge, newEdge, secondEdge));
    this.legalizeEdge(firstEdge);
    this.legalizeEdge(secondEdge);
    return newEdge;
  }

  /**
   * Disconnects a section of front edges, and connects a new section.
   * @private
   *
   * Disconnects:
   * <nextEdge> (cut) <oldLeftEdge> ..... <oldRightEdge> (cut) <previousEdge>
   *
   * Connects:
   * <nextEdge> (join) <newLeftEdge> ..... <newRightEdge> (join) <previousEdge>
   *
   * If previousEdge is null, we'll need to set our firstFrontEdge to the newRightEdge.
   *
   * @param {Edge} oldRightEdge
   * @param {Edge} oldLeftEdge
   * @param {Edge} newRightEdge
   * @param {Edge} newLeftEdge
   */
  reconnectFrontEdges(oldRightEdge, oldLeftEdge, newRightEdge, newLeftEdge) {
    const previousEdge = oldRightEdge.previousEdge;
    const nextEdge = oldLeftEdge.nextEdge;
    if (previousEdge) {
      previousEdge.disconnectAfter();
      previousEdge.connectAfter(newRightEdge);
    } else {
      this.firstFrontEdge = newRightEdge;
    }
    if (nextEdge) {
      oldLeftEdge.disconnectAfter();
      newLeftEdge.connectAfter(nextEdge);
    }
  }

  /**
   * Tries to fill in acute angles with triangles after we add a vertex into the front.
   * @private
   *
   * @param {Edge} rightFrontEdge
   * @param {Edge} leftFrontEdge
   */
  addHalfPiHeuristic(rightFrontEdge, leftFrontEdge) {
    assert && assert(rightFrontEdge.endVertex === leftFrontEdge.startVertex);
    const middleVertex = rightFrontEdge.endVertex;
    while (rightFrontEdge.previousEdge && js_Utils.triangleAreaSigned(middleVertex.point, rightFrontEdge.startVertex.point, rightFrontEdge.previousEdge.startVertex.point) > 0 && middleVertex.point.minus(rightFrontEdge.startVertex.point).angleBetween(rightFrontEdge.previousEdge.startVertex.point.minus(rightFrontEdge.startVertex.point)) < Math.PI / 2) {
      const previousEdge = rightFrontEdge.previousEdge;
      const newRightEdge = new Edge(previousEdge.startVertex, middleVertex);
      this.edges.push(newRightEdge);
      this.triangles.push(new Triangle(middleVertex, rightFrontEdge.startVertex, previousEdge.startVertex, previousEdge, newRightEdge, rightFrontEdge));
      this.reconnectFrontEdges(previousEdge, rightFrontEdge, newRightEdge, newRightEdge);
      this.legalizeEdge(previousEdge);
      this.legalizeEdge(rightFrontEdge);
      rightFrontEdge = newRightEdge;
    }
    while (leftFrontEdge.nextEdge && js_Utils.triangleAreaSigned(middleVertex.point, leftFrontEdge.nextEdge.endVertex.point, leftFrontEdge.endVertex.point) > 0 && middleVertex.point.minus(leftFrontEdge.endVertex.point).angleBetween(leftFrontEdge.nextEdge.endVertex.point.minus(leftFrontEdge.endVertex.point)) < Math.PI / 2) {
      const nextEdge = leftFrontEdge.nextEdge;
      const newLeftEdge = new Edge(middleVertex, nextEdge.endVertex);
      this.edges.push(newLeftEdge);
      this.triangles.push(new Triangle(middleVertex, leftFrontEdge.nextEdge.endVertex, leftFrontEdge.endVertex, nextEdge, leftFrontEdge, newLeftEdge));
      this.reconnectFrontEdges(leftFrontEdge, nextEdge, newLeftEdge, newLeftEdge);
      this.legalizeEdge(nextEdge);
      this.legalizeEdge(leftFrontEdge);
      leftFrontEdge = newLeftEdge;
    }
  }

  /**
   * Handles any "edge events" that delete intersecting edges, creating the new edge, and filling in (all only if
   * necessary).
   * @private
   *
   * @param {Vertex} vertex
   * @param {Edge} rightFrontEdge
   * @param {Edge} leftFrontEdge
   */
  constrainEdges(vertex, rightFrontEdge, leftFrontEdge) {
    assert && assert(vertex instanceof Vertex);
    assert && assert(rightFrontEdge instanceof Edge);
    assert && assert(leftFrontEdge instanceof Edge);
    assert && assert(vertex === rightFrontEdge.endVertex);
    assert && assert(vertex === leftFrontEdge.startVertex);
    for (let i = 0; i < vertex.constrainedVertices.length; i++) {
      const bottomVertex = vertex.constrainedVertices[i];

      // Check if it's one of our front edge vertices (if so, bail out, since the edge already exists)
      if (bottomVertex === rightFrontEdge.startVertex || bottomVertex === leftFrontEdge.endVertex) {
        break;
      }
      const leftEdges = [];
      const rightEdges = [];
      let currentTriangle = null;
      let currentEdge = null;
      const trianglesToRemove = [];
      const edgesToRemove = [];
      let outsideRight = DelaunayTriangulation.vertexProduct(vertex, rightFrontEdge.startVertex, bottomVertex) > 0;
      let outsideLeft = DelaunayTriangulation.vertexProduct(vertex, leftFrontEdge.endVertex, bottomVertex) < 0;

      // If we start inside, we need to identify which triangle we're inside of.
      if (!outsideRight && !outsideLeft) {
        assert && assert(rightFrontEdge.triangles.length === 1);
        assert && assert(leftFrontEdge.triangles.length === 1);
        let lastVertex = rightFrontEdge.startVertex;
        let nextVertex;
        currentTriangle = rightFrontEdge.triangles[0];
        // TODO: Triangle operations to make this more readable
        while (DelaunayTriangulation.vertexProduct(vertex, nextVertex = currentTriangle.getEdgeOppositeFromVertex(vertex).getOtherVertex(lastVertex), bottomVertex) < 0) {
          currentTriangle = currentTriangle.getEdgeOppositeFromVertex(lastVertex).getOtherTriangle(currentTriangle);
          lastVertex = nextVertex;
        }

        // If our initial triangle has our vertex and bottomVertex, then bail out (edge already exists)
        if (currentTriangle.hasVertex(bottomVertex)) {
          break;
        }
        trianglesToRemove.push(currentTriangle);
        currentEdge = currentTriangle.getEdgeOppositeFromVertex(vertex);
        edgesToRemove.push(currentEdge);
        leftEdges.push(currentTriangle.getEdgeOppositeFromVertex(lastVertex));
        rightEdges.push(currentTriangle.getEdgeOppositeFromVertex(currentEdge.getOtherVertex(lastVertex)));
        assert && assert(leftEdges[0].getOtherVertex(vertex).point.x < rightEdges[0].getOtherVertex(vertex).point.x);
      }
      while (true) {
        // eslint-disable-line no-constant-condition
        if (outsideRight) {
          // TODO: implement
          break;
        } else if (outsideLeft) {
          // TODO: implement
          break;
        } else {
          if (currentEdge.triangles.length > 1) {
            const nextTriangle = currentEdge.getOtherTriangle(currentTriangle);
            if (nextTriangle.hasVertex(bottomVertex)) {
              // TODO: do things!
              trianglesToRemove.push(nextTriangle);
              leftEdges.push(nextTriangle.getNextEdge(currentEdge));
              rightEdges.push(nextTriangle.getPreviousEdge(currentEdge));
              break;
            } else {
              // If this is the next edge intersected
              let nextEdge;
              if (nextTriangle.aEdge !== currentEdge && nextTriangle.aEdge.intersectsConstrainedEdge(vertex, bottomVertex)) {
                nextEdge = nextTriangle.aEdge;
              } else if (nextTriangle.bEdge !== currentEdge && nextTriangle.bEdge.intersectsConstrainedEdge(vertex, bottomVertex)) {
                nextEdge = nextTriangle.bEdge;
              } else if (nextTriangle.cEdge !== currentEdge && nextTriangle.cEdge.intersectsConstrainedEdge(vertex, bottomVertex)) {
                nextEdge = nextTriangle.cEdge;
              }
              assert && assert(nextEdge);
              if (nextTriangle.getNextEdge(nextEdge) === currentEdge) {
                leftEdges.push(nextTriangle.getPreviousEdge(nextEdge));
              } else {
                rightEdges.push(nextTriangle.getNextEdge(nextEdge));
              }
              currentEdge = nextEdge;
              edgesToRemove.push(currentEdge);
              currentTriangle = nextTriangle;
              trianglesToRemove.push(currentTriangle);
            }
          }
          // No other triangle, exited
          else {
            if (bottomVertex.point.x < vertex.point.x) {
              outsideLeft = true;
            } else {
              outsideRight = true;
            }
          }
        }
      }
      for (let j = 0; j < trianglesToRemove.length; j++) {
        const triangleToRemove = trianglesToRemove[j];
        js_arrayRemove(this.triangles, triangleToRemove);
        triangleToRemove.remove();
      }
      for (let j = 0; j < edgesToRemove.length; j++) {
        js_arrayRemove(this.edges, edgesToRemove[j]);
      }
      const constraintEdge = new Edge(bottomVertex, vertex);
      constraintEdge.isConstrained = true;
      this.edges.push(constraintEdge);
      leftEdges.push(constraintEdge);
      rightEdges.push(constraintEdge);
      rightEdges.reverse(); // Put edges in counterclockwise order

      // TODO: remove this!
      window.triDebug && window.triDebug(this);
      this.triangulatePolygon(leftEdges);
      this.triangulatePolygon(rightEdges);
    }
  }

  /**
   * Creates edges/triangles to triangulate a simple polygon.
   * @private
   *
   * @param {Array.<Edge>} edges - Should be in counterclockwise order
   */
  triangulatePolygon(edges) {
    // TODO: Something more efficient than ear clipping method below
    while (edges.length > 3) {
      for (let k = 0; k < edges.length; k++) {
        const kx = k < edges.length - 1 ? k + 1 : 0;
        assert && assert(edges[k].getSharedVertex(edges[kx]));
      }

      // Check if each triple of vertices is an ear (and if so, remove it)
      for (let i = 0; i < edges.length; i++) {
        // Next index
        const ix = i < edges.length - 1 ? i + 1 : 0;

        // Information about our potential ear
        const edge = edges[i];
        const nextEdge = edges[ix];
        const sharedVertex = edge.getSharedVertex(nextEdge);
        const startVertex = edge.getOtherVertex(sharedVertex);
        const endVertex = nextEdge.getOtherVertex(sharedVertex);
        if (js_Utils.triangleAreaSigned(startVertex.point, sharedVertex.point, endVertex.point) <= 0) {
          continue;
        }

        // Variables for computing barycentric coordinates
        const endDelta = endVertex.point.minus(sharedVertex.point);
        const startDelta = startVertex.point.minus(sharedVertex.point);
        const endMagnitudeSquared = endDelta.dot(endDelta);
        const startEndProduct = endDelta.dot(startDelta);
        const startMagnitudeSquared = startDelta.dot(startDelta);
        const x = endMagnitudeSquared * startMagnitudeSquared - startEndProduct * startEndProduct;

        // See if there are other vertices in our triangle (it wouldn't be an ear if there is another in it)
        let lastVertex = edges[0].getSharedVertex(edges[edges.length - 1]);
        let hasInteriorVertex = false;
        for (let j = 0; j < edges.length; j++) {
          const vertex = edges[j].getOtherVertex(lastVertex);
          if (vertex !== sharedVertex && vertex !== startVertex && vertex !== endVertex) {
            const pointDelta = vertex.point.minus(sharedVertex.point);
            const pointEndProduct = endDelta.dot(pointDelta);
            const pointStartProduct = startDelta.dot(pointDelta);

            // Compute barycentric coordinates
            const u = (startMagnitudeSquared * pointEndProduct - startEndProduct * pointStartProduct) / x;
            const v = (endMagnitudeSquared * pointStartProduct - startEndProduct * pointEndProduct) / x;

            // Test for whether the point is in our triangle
            if (u >= -1e-10 && v >= -1e-10 && u + v < 1 + 1e-10) {
              hasInteriorVertex = true;
              break;
            }
          }
          lastVertex = vertex;
        }

        // If there is no interior vertex, then we reached an ear.
        if (!hasInteriorVertex) {
          const newEdge = new Edge(startVertex, endVertex);
          this.edges.push(newEdge);
          this.triangles.push(new Triangle(startVertex, sharedVertex, endVertex, nextEdge, newEdge, edge));
          if (ix > i) {
            edges.splice(i, 2, newEdge);
          } else {
            edges.splice(i, 1, newEdge);
            edges.splice(ix, 1);
          }

          // TODO: remove this!
          window.triDebug && window.triDebug(this);
        }
      }
    }

    // Fill in the last triangle
    if (edges.length === 3) {
      this.triangles.push(new Triangle(edges[0].getSharedVertex(edges[1]), edges[1].getSharedVertex(edges[2]), edges[0].getSharedVertex(edges[2]), edges[2], edges[0], edges[1]));

      // TODO: remove this!
      window.triDebug && window.triDebug(this);
    }
  }

  /**
   * Should be called when there are no more remaining vertices left to be processed.
   * @private
   */
  finalize() {
    // Accumulate front edges, excluding the first and last.
    const frontEdges = [];
    let frontEdge = this.firstFrontEdge.nextEdge;
    while (frontEdge && frontEdge.nextEdge) {
      frontEdges.push(frontEdge);
      frontEdge = frontEdge.nextEdge;
    }
    const firstFrontEdge = this.firstFrontEdge;
    const lastFrontEdge = frontEdge;
    assert && assert(this.firstFrontEdge.triangles.length === 1);
    assert && assert(lastFrontEdge.triangles.length === 1);

    // Handle adding any triangles not in the convex hull (on the front edge)
    for (let i = 0; i < frontEdges.length - 1; i++) {
      const firstEdge = frontEdges[i];
      const secondEdge = frontEdges[i + 1];
      if (js_Utils.triangleAreaSigned(secondEdge.endVertex.point, firstEdge.endVertex.point, firstEdge.startVertex.point) > 1e-10) {
        const newEdge = this.fillBorderTriangle(firstEdge, secondEdge, firstEdge.startVertex, firstEdge.endVertex, secondEdge.endVertex);
        frontEdges.splice(i, 2, newEdge);
        // start scanning from behind where we were previously (if possible)
        i = Math.max(i - 2, -1);
        // TODO: remove this!
        window.triDebug && window.triDebug(this);
      }
    }

    // Clear out front edge information, no longer needed.
    this.firstFrontEdge = null;

    // Accumulate back edges and items to get rid of
    const backEdges = [];
    const artificialEdges = [firstFrontEdge];
    let currentSplitEdge = firstFrontEdge;
    while (currentSplitEdge !== lastFrontEdge) {
      const nextTriangle = currentSplitEdge.triangles[0];
      nextTriangle.remove();
      js_arrayRemove(this.triangles, nextTriangle);
      const edge = nextTriangle.getNonArtificialEdge();
      if (edge) {
        backEdges.push(edge);
        const sharedVertex = edge.getSharedVertex(currentSplitEdge);
        currentSplitEdge = nextTriangle.getEdgeOppositeFromVertex(sharedVertex);
      }
      // Our min-max-bottomPoint triangle (pivot, no edge to add)
      else {
        assert && assert(currentSplitEdge.startVertex === this.artificialMaxVertex);

        // Remove the "bottom" edge connecting both artificial points
        artificialEdges.push(nextTriangle.getEdgeOppositeFromVertex(currentSplitEdge.endVertex));

        // Pivot
        currentSplitEdge = nextTriangle.getEdgeOppositeFromVertex(currentSplitEdge.startVertex);
      }
      artificialEdges.push(currentSplitEdge);
    }
    for (let i = 0; i < artificialEdges.length; i++) {
      js_arrayRemove(this.edges, artificialEdges[i]);
    }

    // TODO: remove this!
    window.triDebug && window.triDebug(this);

    // Handle adding any triangles not in the convex hull (on the back edge)
    for (let i = 0; i < backEdges.length - 1; i++) {
      const firstEdge = backEdges[i + 1];
      const secondEdge = backEdges[i];
      const sharedVertex = firstEdge.getSharedVertex(secondEdge);
      const firstVertex = firstEdge.getOtherVertex(sharedVertex);
      const secondVertex = secondEdge.getOtherVertex(sharedVertex);
      if (js_Utils.triangleAreaSigned(secondVertex.point, sharedVertex.point, firstVertex.point) > 1e-10) {
        const newEdge = this.fillBorderTriangle(firstEdge, secondEdge, firstVertex, sharedVertex, secondVertex);
        backEdges.splice(i, 2, newEdge);
        // start scanning from behind where we were previously (if possible)
        i = Math.max(i - 2, -1);
        // TODO: remove this!
        window.triDebug && window.triDebug(this);
      }
    }
    for (let i = 0; i < frontEdges.length; i++) {
      this.convexHull.push(frontEdges[i].startVertex);
    }
    this.convexHull.push(frontEdges[frontEdges.length - 1].endVertex);
    for (let i = backEdges.length - 1; i >= 1; i--) {
      this.convexHull.push(backEdges[i].getSharedVertex(backEdges[i - 1]));
    }
  }

  /**
   * Checks an edge to see whether its two adjacent triangles satisfy the delaunay condition (the far point of one
   * triangle should not be contained in the other triangle's circumcircle), and if it is not satisfied, flips the
   * edge so the condition is satisfied.
   * @private
   *
   * @param {Edge} edge
   */
  legalizeEdge(edge) {
    // Checking each edge to see if it isn't in our triangulation anymore (or can't be illegal because it doesn't
    // have multiple triangles) helps a lot.
    if (!_.includes(this.edges, edge) || edge.triangles.length !== 2 || edge.isConstrained) {
      return;
    }
    const triangle1 = edge.triangles[0];
    const triangle2 = edge.triangles[1];
    const farVertex1 = triangle1.getVertexOppositeFromEdge(edge);
    const farVertex2 = triangle2.getVertexOppositeFromEdge(edge);
    if (js_Utils.pointInCircleFromPoints(triangle1.aVertex.point, triangle1.bVertex.point, triangle1.cVertex.point, farVertex2.point) || js_Utils.pointInCircleFromPoints(triangle2.aVertex.point, triangle2.bVertex.point, triangle2.cVertex.point, farVertex1.point)) {
      // TODO: better helper functions for adding/removing triangles (takes care of the edge stuff)
      triangle1.remove();
      triangle2.remove();
      js_arrayRemove(this.triangles, triangle1);
      js_arrayRemove(this.triangles, triangle2);
      js_arrayRemove(this.edges, edge);
      const newEdge = new Edge(farVertex1, farVertex2);
      this.edges.push(newEdge);
      const triangle1Edge1 = triangle2.getEdgeOppositeFromVertex(triangle2.getVertexBefore(farVertex2));
      const triangle1Edge2 = triangle1.getEdgeOppositeFromVertex(triangle1.getVertexAfter(farVertex1));
      const triangle2Edge1 = triangle1.getEdgeOppositeFromVertex(triangle1.getVertexBefore(farVertex1));
      const triangle2Edge2 = triangle2.getEdgeOppositeFromVertex(triangle2.getVertexAfter(farVertex2));

      // Construct the new triangles with the correct orientations
      this.triangles.push(new Triangle(farVertex1, farVertex2, triangle1.getVertexBefore(farVertex1), triangle1Edge1, triangle1Edge2, newEdge));
      this.triangles.push(new Triangle(farVertex2, farVertex1, triangle2.getVertexBefore(farVertex2), triangle2Edge1, triangle2Edge2, newEdge));
      this.legalizeEdge(triangle1Edge1);
      this.legalizeEdge(triangle1Edge2);
      this.legalizeEdge(triangle2Edge1);
      this.legalizeEdge(triangle2Edge2);
    }
  }

  /**
   * Comparison for sorting points by y, then by x.
   * @private
   *
   * TODO: Do we need to reverse the x sort? "If our edge is horizontal, the ending point with smaller x coordinate
   *       is considered as the upper point"?
   *
   * @param {Vertex} a
   * @param {Vertex} b
   * @returns {number}
   */
  static vertexComparison(a, b) {
    assert && assert(a instanceof Vertex);
    assert && assert(b instanceof Vertex);
    a = a.point;
    b = b.point;
    if (a.y < b.y) {
      return -1;
    } else if (a.y > b.y) {
      return 1;
    } else if (a.x < b.x) {
      return -1;
    } else if (a.x > b.x) {
      return 1;
    } else {
      // NOTE: How would the algorithm work if this is the case? Would the comparison ever test the reflexive
      // property?
      return 0;
    }
  }

  /**
   * Returns the cross product of (aVertex-sharedVertex) and (bVertex-sharedVertex)
   * @private
   *
   * @param {Vertex} sharedVertex
   * @param {Vertex} aVertex
   * @param {Vertex} bVertex
   * @returns {number}
   */
  static vertexProduct(sharedVertex, aVertex, bVertex) {
    const aDiff = aVertex.point.minus(sharedVertex.point);
    const bDiff = bVertex.point.minus(sharedVertex.point);
    return aDiff.crossScalar(bDiff);
  }
}
js_dot.register('DelaunayTriangulation', DelaunayTriangulation);
class Vertex {
  /**
   * Vertex (point with an index)
   * @private
   *
   * @param {Vector2} point
   * @param {number} index - Index of the point in the points array
   */
  constructor(point, index) {
    assert && assert(point instanceof Vector2);
    assert && assert(point.isFinite());
    assert && assert(typeof index === 'number');

    // @public {Vector2}
    this.point = point;

    // @public {number}
    this.index = index;

    // @public {number} - Will be set after construction
    this.sortedIndex = -1;

    // @public {Array.<Vertex>} - Vertices with "lower" y values that have constrained edges with this vertex.
    this.constrainedVertices = [];
  }

  /**
   * Returns whether this is an artificial vertex (index less than zero).
   * @public
   *
   * @returns {boolean}
   */
  isArtificial() {
    return this.index < 0;
  }
}
class Edge {
  /**
   * Edge defined by two vertices
   * @private
   *
   * @param {Vertex} startVertex
   * @param {Vertex} endVertex
   */
  constructor(startVertex, endVertex) {
    assert && assert(startVertex instanceof Vertex);
    assert && assert(endVertex instanceof Vertex);
    assert && assert(startVertex !== endVertex, 'Should be different vertices');

    // @public {Vertex}
    this.startVertex = startVertex;
    this.endVertex = endVertex;

    // @public {Array.<Triangle>} - Adjacent triangles to the edge
    this.triangles = [];

    // @public {Edge|null} - Linked list for the front of the sweep-line (or in the back for the convex hull)
    this.nextEdge = null;
    this.previousEdge = null;

    // @public {boolean} - Can be set to note that it was constrained
    this.isConstrained = false;
  }

  /**
   * Returns whether this is an artificial edge (has an artificial vertex)
   * @public
   *
   * @returns {boolean}
   */
  isArtificial() {
    return this.startVertex.isArtificial() || this.endVertex.isArtificial();
  }

  /**
   * Appends the edge to the end of this edge (for our linked list).
   * @public
   *
   * @param {Edge} edge
   */
  connectAfter(edge) {
    assert && assert(edge instanceof Edge);
    assert && assert(this.endVertex === edge.startVertex);
    this.nextEdge = edge;
    edge.previousEdge = this;
  }

  /**
   * @public
   */
  disconnectAfter() {
    this.nextEdge.previousEdge = null;
    this.nextEdge = null;
  }

  /**
   * Adds an adjacent triangle.
   * @public
   *
   * @param {Triangle} triangle
   */
  addTriangle(triangle) {
    assert && assert(triangle instanceof Triangle);
    assert && assert(this.triangles.length <= 1);
    this.triangles.push(triangle);
  }

  /**
   * Removes an adjacent triangle.
   * @public
   *
   * @param {Triangle} triangle
   */
  removeTriangle(triangle) {
    assert && assert(triangle instanceof Triangle);
    assert && assert(_.includes(this.triangles, triangle));
    js_arrayRemove(this.triangles, triangle);
  }

  /**
   * Returns the triangle in common with both edges.
   * @public
   *
   * @param {Edge} otherEdge
   * @returns {Triangle}
   */
  getSharedTriangle(otherEdge) {
    assert && assert(otherEdge instanceof Edge);
    for (let i = 0; i < this.triangles.length; i++) {
      const triangle = this.triangles[i];
      for (let j = 0; j < otherEdge.triangles.length; j++) {
        if (otherEdge.triangles[j] === triangle) {
          return triangle;
        }
      }
    }
    throw new Error('No common triangle');
  }

  /**
   * Returns the vertex in common with both edges.
   * @public
   *
   * @param {Edge} otherEdge
   * @returns {Vertex}
   */
  getSharedVertex(otherEdge) {
    assert && assert(otherEdge instanceof Edge);
    if (this.startVertex === otherEdge.startVertex || this.startVertex === otherEdge.endVertex) {
      return this.startVertex;
    } else {
      assert && assert(this.endVertex === otherEdge.startVertex || this.endVertex === otherEdge.endVertex);
      return this.endVertex;
    }
  }

  /**
   * Returns the other vertex of the edge.
   * @public
   *
   * @param {Vertex} vertex
   * @returns {Vertex}
   */
  getOtherVertex(vertex) {
    assert && assert(vertex instanceof Vertex);
    assert && assert(vertex === this.startVertex || vertex === this.endVertex);
    if (vertex === this.startVertex) {
      return this.endVertex;
    } else {
      return this.startVertex;
    }
  }

  /**
   * Returns the other triangle associated with this edge (if there are two).
   * @public
   *
   * @param {Triangle} triangle
   * @returns {Triangle}
   */
  getOtherTriangle(triangle) {
    assert && assert(triangle instanceof Triangle);
    assert && assert(this.triangles.length === 2);
    if (this.triangles[0] === triangle) {
      return this.triangles[1];
    } else {
      return this.triangles[0];
    }
  }

  /**
   * Returns whether the line segment defined between the vertex and bottomVertex intersect this edge.
   * @public
   *
   * @param {Vertex} vertex
   * @param {Vertex} bottomVertex
   * @returns {boolean}
   */
  intersectsConstrainedEdge(vertex, bottomVertex) {
    return js_Utils.lineSegmentIntersection(vertex.point.x, vertex.point.y, bottomVertex.point.x, bottomVertex.point.y, this.startVertex.point.x, this.startVertex.point.y, this.endVertex.point.x, this.endVertex.point.y);
  }
}
class Triangle {
  /**
   * Triangle defined by three vertices (with edges)
   * @private
   *
   * @param {Vertex} aVertex
   * @param {Vertex} bVertex
   * @param {Vertex} cVertex
   * @param {Edge} aEdge - Edge opposite the 'a' vertex
   * @param {Edge} bEdge - Edge opposite the 'b' vertex
   * @param {Edge} cEdge - Edge opposite the 'c' vertex
   */
  constructor(aVertex, bVertex, cVertex, aEdge, bEdge, cEdge) {
    // Type checks
    assert && assert(aVertex instanceof Vertex);
    assert && assert(bVertex instanceof Vertex);
    assert && assert(cVertex instanceof Vertex);
    assert && assert(aEdge instanceof Edge);
    assert && assert(bEdge instanceof Edge);
    assert && assert(cEdge instanceof Edge);

    // Ensure each vertex is NOT in the opposite edge
    assert && assert(aVertex !== aEdge.startVertex && aVertex !== aEdge.endVertex, 'Should be an opposite edge');
    assert && assert(bVertex !== bEdge.startVertex && bVertex !== bEdge.endVertex, 'Should be an opposite edge');
    assert && assert(cVertex !== cEdge.startVertex && cVertex !== cEdge.endVertex, 'Should be an opposite edge');

    // Ensure each vertex IS in its adjacent edges
    assert && assert(aVertex === bEdge.startVertex || aVertex === bEdge.endVertex, 'aVertex should be in bEdge');
    assert && assert(aVertex === cEdge.startVertex || aVertex === cEdge.endVertex, 'aVertex should be in cEdge');
    assert && assert(bVertex === aEdge.startVertex || bVertex === aEdge.endVertex, 'bVertex should be in aEdge');
    assert && assert(bVertex === cEdge.startVertex || bVertex === cEdge.endVertex, 'bVertex should be in cEdge');
    assert && assert(cVertex === aEdge.startVertex || cVertex === aEdge.endVertex, 'cVertex should be in aEdge');
    assert && assert(cVertex === bEdge.startVertex || cVertex === bEdge.endVertex, 'cVertex should be in bEdge');
    assert && assert(js_Utils.triangleAreaSigned(aVertex.point, bVertex.point, cVertex.point) > 0, 'Should be counterclockwise');

    // @public {Vertex}
    this.aVertex = aVertex;
    this.bVertex = bVertex;
    this.cVertex = cVertex;

    // @public {Edge}
    this.aEdge = aEdge;
    this.bEdge = bEdge;
    this.cEdge = cEdge;
    this.aEdge.addTriangle(this);
    this.bEdge.addTriangle(this);
    this.cEdge.addTriangle(this);
  }

  /**
   * Returns whether the vertex is one in the triangle.
   * @public
   *
   * @param {Vertex} vertex
   * @returns {boolean}
   */
  hasVertex(vertex) {
    return this.aVertex === vertex || this.bVertex === vertex || this.cVertex === vertex;
  }

  /**
   * Returns the vertex that is opposite from the given edge.
   * @public
   *
   * @param {Edge} edge
   * @returns {Vertex}
   */
  getVertexOppositeFromEdge(edge) {
    assert && assert(edge instanceof Edge);
    assert && assert(edge === this.aEdge || edge === this.bEdge || edge === this.cEdge, 'Should be an edge that is part of this triangle');
    if (edge === this.aEdge) {
      return this.aVertex;
    } else if (edge === this.bEdge) {
      return this.bVertex;
    } else {
      return this.cVertex;
    }
  }

  /**
   * Returns the edge that is opposite from the given vertex.
   * @public
   *
   * @param {Vertex} vertex
   * @returns {Edge}
   */
  getEdgeOppositeFromVertex(vertex) {
    assert && assert(vertex instanceof Vertex);
    assert && assert(vertex === this.aVertex || vertex === this.bVertex || vertex === this.cVertex, 'Should be a vertex that is part of this triangle');
    if (vertex === this.aVertex) {
      return this.aEdge;
    } else if (vertex === this.bVertex) {
      return this.bEdge;
    } else {
      return this.cEdge;
    }
  }

  /**
   * Returns the vertex that is just before the given vertex (in counterclockwise order).
   * @public
   *
   * @param {Vertex} vertex
   * @returns {Vertex}
   */
  getVertexBefore(vertex) {
    assert && assert(vertex instanceof Vertex);
    assert && assert(vertex === this.aVertex || vertex === this.bVertex || vertex === this.cVertex);
    if (vertex === this.aVertex) {
      return this.cVertex;
    } else if (vertex === this.bVertex) {
      return this.aVertex;
    } else {
      return this.bVertex;
    }
  }

  /**
   * Returns the vertex that is just after the given vertex (in counterclockwise order).
   * @public
   *
   * @param {Vertex} vertex
   * @returns {Vertex}
   */
  getVertexAfter(vertex) {
    assert && assert(vertex instanceof Vertex);
    assert && assert(vertex === this.aVertex || vertex === this.bVertex || vertex === this.cVertex);
    if (vertex === this.aVertex) {
      return this.bVertex;
    } else if (vertex === this.bVertex) {
      return this.cVertex;
    } else {
      return this.aVertex;
    }
  }

  /**
   * Returns the one non-artificial edge in the triangle (assuming it exists).
   * @public
   *
   * @returns {Edge|null}
   */
  getNonArtificialEdge() {
    assert && assert(this.aEdge.isArtificial() && this.bEdge.isArtificial() && !this.cEdge.isArtificial() || this.aEdge.isArtificial() && !this.bEdge.isArtificial() && this.cEdge.isArtificial() || !this.aEdge.isArtificial() && this.bEdge.isArtificial() && this.cEdge.isArtificial() || this.aEdge.isArtificial() && this.bEdge.isArtificial() && this.cEdge.isArtificial(), 'At most one edge should be non-artificial');
    if (!this.aEdge.isArtificial()) {
      return this.aEdge;
    } else if (!this.bEdge.isArtificial()) {
      return this.bEdge;
    } else if (!this.cEdge.isArtificial()) {
      return this.cEdge;
    } else {
      return null;
    }
  }

  /**
   * Returns the next edge (counterclockwise).
   * @public
   *
   * @param {Edge} edge
   * @returns {Edge}
   */
  getNextEdge(edge) {
    assert && assert(edge === this.aEdge || edge === this.bEdge || edge === this.cEdge);
    if (this.aEdge === edge) {
      return this.bEdge;
    }
    if (this.bEdge === edge) {
      return this.cEdge;
    }
    if (this.cEdge === edge) {
      return this.aEdge;
    }
    throw new Error('illegal edge');
  }

  /**
   * Returns the previous edge (clockwise).
   * @public
   *
   * @param {Edge} edge
   * @returns {Edge}
   */
  getPreviousEdge(edge) {
    assert && assert(edge === this.aEdge || edge === this.bEdge || edge === this.cEdge);
    if (this.aEdge === edge) {
      return this.cEdge;
    }
    if (this.bEdge === edge) {
      return this.aEdge;
    }
    if (this.cEdge === edge) {
      return this.bEdge;
    }
    throw new Error('illegal edge');
  }

  /**
   * Returns whether this is an artificial triangle (has an artificial vertex)
   * @public
   *
   * @returns {boolean}
   */
  isArtificial() {
    return this.aVertex.isArtificial() || this.bVertex.isArtificial() || this.cVertex.isArtificial();
  }

  /**
   * @public
   */
  remove() {
    this.aEdge.removeTriangle(this);
    this.bEdge.removeTriangle(this);
    this.cEdge.removeTriangle(this);
  }
}
/* harmony default export */ const js_DelaunayTriangulation = ((/* unused pure expression or super */ null && (DelaunayTriangulation)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Dimension2.js
// Copyright 2013-2021, University of Colorado Boulder

/**
 * Basic width and height, like a Bounds2 but without the location defined.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



class Dimension2 {
  /**
   * Creates a 2-dimensional size with a width and height
   * @public
   *
   * @param {number} width
   * @param {number} height
   */
  constructor(width, height) {
    // @public {number} - Width of the dimension
    this.width = width;

    // @public {number} - Height of the dimension
    this.height = height;
  }

  /**
   * Debugging string for the dimension.
   * @public
   *
   * @returns {string}
   */
  toString() {
    return `[${this.width}w, ${this.height}h]`;
  }

  /**
   * Sets this dimension to be a copy of another dimension.
   * @public
   *
   * This is the mutable form of the function copy(). This will mutate (change) this dimension, in addition to returning
   * this dimension itself.
   *
   * @param {Dimension2} dimension
   * @returns {Dimension2}
   */
  set(dimension) {
    this.width = dimension.width;
    this.height = dimension.height;
    return this;
  }

  /**
   * Sets the width of the dimension, returning this.
   * @public
   *
   * @param {number} width
   * @returns {Dimension2}
   */
  setWidth(width) {
    this.width = width;
    return this;
  }

  /**
   * Sets the height of the dimension, returning this.
   * @public
   *
   * @param {number} height
   * @returns {Dimension2}
   */
  setHeight(height) {
    this.height = height;
    return this;
  }

  /**
   * Creates a copy of this dimension, or if a dimension is passed in, set that dimension's values to ours.
   * @public
   *
   * This is the immutable form of the function set(), if a dimension is provided. This will return a new dimension,
   * and will not modify this dimension.
   *
   * @param {Dimension2} [dimension] - If not provided, creates a new Dimension2 with filled in values. Otherwise, fills
   *                                   in the values of the provided dimension so that it equals this dimension.
   * @returns {Dimension2}
   */
  copy(dimension) {
    if (dimension) {
      return dimension.set(this);
    } else {
      return new Dimension2(this.width, this.height);
    }
  }

  /**
   * Swap width and height and return a new Dimension2
   * @returns {Dimension2}
   * @public
   */
  swapped() {
    return new Dimension2(this.height, this.width);
  }

  /**
   * Creates a Bounds2 from this dimension based on passing in the minimum (top-left) corner as (x,y).
   * @public
   *
   * @param {number} [x] - Minimum x coordinate of the bounds, or 0 if not provided.
   * @param {number} [y] - Minimum y coordinate of the bounds, or 0 if not provided.
   * @returns {Bounds2}
   */
  toBounds(x, y) {
    x = x !== undefined ? x : 0;
    y = y !== undefined ? y : 0;
    return new Bounds2(x, y, this.width + x, this.height + y);
  }

  /**
   * Exact equality comparison between this dimension and another dimension.
   * @public
   *
   * @param {Dimension2} other
   * @returns {boolean} - Whether the two dimensions have equal width and height
   */
  equals(other) {
    return this.width === other.width && this.height === other.height;
  }
}
js_dot.register('Dimension2', Dimension2);
/* harmony default export */ const js_Dimension2 = ((/* unused pure expression or super */ null && (Dimension2)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiZG90IiwiRGltZW5zaW9uMiIsImNvbnN0cnVjdG9yIiwid2lkdGgiLCJoZWlnaHQiLCJ0b1N0cmluZyIsInNldCIsImRpbWVuc2lvbiIsInNldFdpZHRoIiwic2V0SGVpZ2h0IiwiY29weSIsInN3YXBwZWQiLCJ0b0JvdW5kcyIsIngiLCJ5IiwidW5kZWZpbmVkIiwiZXF1YWxzIiwib3RoZXIiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRpbWVuc2lvbjIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogQmFzaWMgd2lkdGggYW5kIGhlaWdodCwgbGlrZSBhIEJvdW5kczIgYnV0IHdpdGhvdXQgdGhlIGxvY2F0aW9uIGRlZmluZWQuXG4gKlxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxuICovXG5cbmltcG9ydCBCb3VuZHMyIGZyb20gJy4vQm91bmRzMi5qcyc7XG5pbXBvcnQgZG90IGZyb20gJy4vZG90LmpzJztcblxuY2xhc3MgRGltZW5zaW9uMiB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgMi1kaW1lbnNpb25hbCBzaXplIHdpdGggYSB3aWR0aCBhbmQgaGVpZ2h0XG4gICAqIEBwdWJsaWNcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICovXG4gIGNvbnN0cnVjdG9yKCB3aWR0aCwgaGVpZ2h0ICkge1xuICAgIC8vIEBwdWJsaWMge251bWJlcn0gLSBXaWR0aCBvZiB0aGUgZGltZW5zaW9uXG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuXG4gICAgLy8gQHB1YmxpYyB7bnVtYmVyfSAtIEhlaWdodCBvZiB0aGUgZGltZW5zaW9uXG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVidWdnaW5nIHN0cmluZyBmb3IgdGhlIGRpbWVuc2lvbi5cbiAgICogQHB1YmxpY1xuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGBbJHt0aGlzLndpZHRofXcsICR7dGhpcy5oZWlnaHR9aF1gO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhpcyBkaW1lbnNpb24gdG8gYmUgYSBjb3B5IG9mIGFub3RoZXIgZGltZW5zaW9uLlxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIG11dGFibGUgZm9ybSBvZiB0aGUgZnVuY3Rpb24gY29weSgpLiBUaGlzIHdpbGwgbXV0YXRlIChjaGFuZ2UpIHRoaXMgZGltZW5zaW9uLCBpbiBhZGRpdGlvbiB0byByZXR1cm5pbmdcbiAgICogdGhpcyBkaW1lbnNpb24gaXRzZWxmLlxuICAgKlxuICAgKiBAcGFyYW0ge0RpbWVuc2lvbjJ9IGRpbWVuc2lvblxuICAgKiBAcmV0dXJucyB7RGltZW5zaW9uMn1cbiAgICovXG4gIHNldCggZGltZW5zaW9uICkge1xuICAgIHRoaXMud2lkdGggPSBkaW1lbnNpb24ud2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBkaW1lbnNpb24uaGVpZ2h0O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHdpZHRoIG9mIHRoZSBkaW1lbnNpb24sIHJldHVybmluZyB0aGlzLlxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcmV0dXJucyB7RGltZW5zaW9uMn1cbiAgICovXG4gIHNldFdpZHRoKCB3aWR0aCApIHtcbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSBkaW1lbnNpb24sIHJldHVybmluZyB0aGlzLlxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHJldHVybnMge0RpbWVuc2lvbjJ9XG4gICAqL1xuICBzZXRIZWlnaHQoIGhlaWdodCApIHtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIGRpbWVuc2lvbiwgb3IgaWYgYSBkaW1lbnNpb24gaXMgcGFzc2VkIGluLCBzZXQgdGhhdCBkaW1lbnNpb24ncyB2YWx1ZXMgdG8gb3Vycy5cbiAgICogQHB1YmxpY1xuICAgKlxuICAgKiBUaGlzIGlzIHRoZSBpbW11dGFibGUgZm9ybSBvZiB0aGUgZnVuY3Rpb24gc2V0KCksIGlmIGEgZGltZW5zaW9uIGlzIHByb3ZpZGVkLiBUaGlzIHdpbGwgcmV0dXJuIGEgbmV3IGRpbWVuc2lvbixcbiAgICogYW5kIHdpbGwgbm90IG1vZGlmeSB0aGlzIGRpbWVuc2lvbi5cbiAgICpcbiAgICogQHBhcmFtIHtEaW1lbnNpb24yfSBbZGltZW5zaW9uXSAtIElmIG5vdCBwcm92aWRlZCwgY3JlYXRlcyBhIG5ldyBEaW1lbnNpb24yIHdpdGggZmlsbGVkIGluIHZhbHVlcy4gT3RoZXJ3aXNlLCBmaWxsc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHZhbHVlcyBvZiB0aGUgcHJvdmlkZWQgZGltZW5zaW9uIHNvIHRoYXQgaXQgZXF1YWxzIHRoaXMgZGltZW5zaW9uLlxuICAgKiBAcmV0dXJucyB7RGltZW5zaW9uMn1cbiAgICovXG4gIGNvcHkoIGRpbWVuc2lvbiApIHtcbiAgICBpZiAoIGRpbWVuc2lvbiApIHtcbiAgICAgIHJldHVybiBkaW1lbnNpb24uc2V0KCB0aGlzICk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBEaW1lbnNpb24yKCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTd2FwIHdpZHRoIGFuZCBoZWlnaHQgYW5kIHJldHVybiBhIG5ldyBEaW1lbnNpb24yXG4gICAqIEByZXR1cm5zIHtEaW1lbnNpb24yfVxuICAgKiBAcHVibGljXG4gICAqL1xuICBzd2FwcGVkKCkge1xuICAgIHJldHVybiBuZXcgRGltZW5zaW9uMiggdGhpcy5oZWlnaHQsIHRoaXMud2lkdGggKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgQm91bmRzMiBmcm9tIHRoaXMgZGltZW5zaW9uIGJhc2VkIG9uIHBhc3NpbmcgaW4gdGhlIG1pbmltdW0gKHRvcC1sZWZ0KSBjb3JuZXIgYXMgKHgseSkuXG4gICAqIEBwdWJsaWNcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt4XSAtIE1pbmltdW0geCBjb29yZGluYXRlIG9mIHRoZSBib3VuZHMsIG9yIDAgaWYgbm90IHByb3ZpZGVkLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW3ldIC0gTWluaW11bSB5IGNvb3JkaW5hdGUgb2YgdGhlIGJvdW5kcywgb3IgMCBpZiBub3QgcHJvdmlkZWQuXG4gICAqIEByZXR1cm5zIHtCb3VuZHMyfVxuICAgKi9cbiAgdG9Cb3VuZHMoIHgsIHkgKSB7XG4gICAgeCA9IHggIT09IHVuZGVmaW5lZCA/IHggOiAwO1xuICAgIHkgPSB5ICE9PSB1bmRlZmluZWQgPyB5IDogMDtcbiAgICByZXR1cm4gbmV3IEJvdW5kczIoIHgsIHksIHRoaXMud2lkdGggKyB4LCB0aGlzLmhlaWdodCArIHkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGFjdCBlcXVhbGl0eSBjb21wYXJpc29uIGJldHdlZW4gdGhpcyBkaW1lbnNpb24gYW5kIGFub3RoZXIgZGltZW5zaW9uLlxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEBwYXJhbSB7RGltZW5zaW9uMn0gb3RoZXJcbiAgICogQHJldHVybnMge2Jvb2xlYW59IC0gV2hldGhlciB0aGUgdHdvIGRpbWVuc2lvbnMgaGF2ZSBlcXVhbCB3aWR0aCBhbmQgaGVpZ2h0XG4gICAqL1xuICBlcXVhbHMoIG90aGVyICkge1xuICAgIHJldHVybiB0aGlzLndpZHRoID09PSBvdGhlci53aWR0aCAmJiB0aGlzLmhlaWdodCA9PT0gb3RoZXIuaGVpZ2h0O1xuICB9XG59XG5cbmRvdC5yZWdpc3RlciggJ0RpbWVuc2lvbjInLCBEaW1lbnNpb24yICk7XG5cbmV4cG9ydCBkZWZhdWx0IERpbWVuc2lvbjI7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSxjQUFjO0FBQ2xDLE9BQU9DLEdBQUcsTUFBTSxVQUFVO0FBRTFCLE1BQU1DLFVBQVUsQ0FBQztFQUNmO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFHO0lBQzNCO0lBQ0EsSUFBSSxDQUFDRCxLQUFLLEdBQUdBLEtBQUs7O0lBRWxCO0lBQ0EsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLFFBQVFBLENBQUEsRUFBRztJQUNULE9BQVEsSUFBRyxJQUFJLENBQUNGLEtBQU0sTUFBSyxJQUFJLENBQUNDLE1BQU8sSUFBRztFQUM1Qzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRSxHQUFHQSxDQUFFQyxTQUFTLEVBQUc7SUFDZixJQUFJLENBQUNKLEtBQUssR0FBR0ksU0FBUyxDQUFDSixLQUFLO0lBQzVCLElBQUksQ0FBQ0MsTUFBTSxHQUFHRyxTQUFTLENBQUNILE1BQU07SUFDOUIsT0FBTyxJQUFJO0VBQ2I7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUksUUFBUUEsQ0FBRUwsS0FBSyxFQUFHO0lBQ2hCLElBQUksQ0FBQ0EsS0FBSyxHQUFHQSxLQUFLO0lBQ2xCLE9BQU8sSUFBSTtFQUNiOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VNLFNBQVNBLENBQUVMLE1BQU0sRUFBRztJQUNsQixJQUFJLENBQUNBLE1BQU0sR0FBR0EsTUFBTTtJQUNwQixPQUFPLElBQUk7RUFDYjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VNLElBQUlBLENBQUVILFNBQVMsRUFBRztJQUNoQixJQUFLQSxTQUFTLEVBQUc7TUFDZixPQUFPQSxTQUFTLENBQUNELEdBQUcsQ0FBRSxJQUFJLENBQUU7SUFDOUIsQ0FBQyxNQUNJO01BQ0gsT0FBTyxJQUFJTCxVQUFVLENBQUUsSUFBSSxDQUFDRSxLQUFLLEVBQUUsSUFBSSxDQUFDQyxNQUFNLENBQUU7SUFDbEQ7RUFDRjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VPLE9BQU9BLENBQUEsRUFBRztJQUNSLE9BQU8sSUFBSVYsVUFBVSxDQUFFLElBQUksQ0FBQ0csTUFBTSxFQUFFLElBQUksQ0FBQ0QsS0FBSyxDQUFFO0VBQ2xEOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRVMsUUFBUUEsQ0FBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUc7SUFDZkQsQ0FBQyxHQUFHQSxDQUFDLEtBQUtFLFNBQVMsR0FBR0YsQ0FBQyxHQUFHLENBQUM7SUFDM0JDLENBQUMsR0FBR0EsQ0FBQyxLQUFLQyxTQUFTLEdBQUdELENBQUMsR0FBRyxDQUFDO0lBQzNCLE9BQU8sSUFBSWYsT0FBTyxDQUFFYyxDQUFDLEVBQUVDLENBQUMsRUFBRSxJQUFJLENBQUNYLEtBQUssR0FBR1UsQ0FBQyxFQUFFLElBQUksQ0FBQ1QsTUFBTSxHQUFHVSxDQUFDLENBQUU7RUFDN0Q7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsTUFBTUEsQ0FBRUMsS0FBSyxFQUFHO0lBQ2QsT0FBTyxJQUFJLENBQUNkLEtBQUssS0FBS2MsS0FBSyxDQUFDZCxLQUFLLElBQUksSUFBSSxDQUFDQyxNQUFNLEtBQUthLEtBQUssQ0FBQ2IsTUFBTTtFQUNuRTtBQUNGO0FBRUFKLEdBQUcsQ0FBQ2tCLFFBQVEsQ0FBRSxZQUFZLEVBQUVqQixVQUFVLENBQUU7QUFFeEMsZUFBZUEsVUFBVSJ9
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/LUDecomposition.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * LU decomposition, based on Jama (http://math.nist.gov/javanumerics/jama/).  Please note the arbitrary-precision
 * copy LUDecompositionDecimal which should be maintained with this file.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



const ArrayType = window.Float64Array || Array;
class LUDecomposition {
  constructor(matrix) {
    let i;
    let j;
    let k;
    this.matrix = matrix;

    // TODO: size!
    this.LU = matrix.getArrayCopy();
    const LU = this.LU;
    this.m = matrix.getRowDimension();
    const m = this.m;
    this.n = matrix.getColumnDimension();
    const n = this.n;
    this.piv = new Uint32Array(m);
    for (i = 0; i < m; i++) {
      this.piv[i] = i;
    }
    this.pivsign = 1;
    const LUcolj = new ArrayType(m);

    // Outer loop.

    for (j = 0; j < n; j++) {
      // Make a copy of the j-th column to localize references.
      for (i = 0; i < m; i++) {
        LUcolj[i] = LU[matrix.index(i, j)];
      }

      // Apply previous transformations.

      for (i = 0; i < m; i++) {
        // Most of the time is spent in the following dot product.
        const kmax = Math.min(i, j);
        let s = 0.0;
        for (k = 0; k < kmax; k++) {
          const ik = matrix.index(i, k);
          s += LU[ik] * LUcolj[k];
        }
        LUcolj[i] -= s;
        LU[matrix.index(i, j)] = LUcolj[i];
      }

      // Find pivot and exchange if necessary.

      let p = j;
      for (i = j + 1; i < m; i++) {
        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {
          p = i;
        }
      }
      if (p !== j) {
        for (k = 0; k < n; k++) {
          const pk = matrix.index(p, k);
          const jk = matrix.index(j, k);
          const t = LU[pk];
          LU[pk] = LU[jk];
          LU[jk] = t;
        }
        k = this.piv[p];
        this.piv[p] = this.piv[j];
        this.piv[j] = k;
        this.pivsign = -this.pivsign;
      }

      // Compute multipliers.

      if (j < m && LU[this.matrix.index(j, j)] !== 0.0) {
        for (i = j + 1; i < m; i++) {
          LU[matrix.index(i, j)] /= LU[matrix.index(j, j)];
        }
      }
    }
  }

  /**
   * @public
   *
   * @returns {boolean}
   */
  isNonsingular() {
    for (let j = 0; j < this.n; j++) {
      const index = this.matrix.index(j, j);
      if (this.LU[index] === 0) {
        return false;
      }
    }
    return true;
  }

  /**
   * @public
   *
   * @returns {Matrix}
   */
  getL() {
    const result = new js_Matrix(this.m, this.n);
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        if (i > j) {
          result.entries[result.index(i, j)] = this.LU[this.matrix.index(i, j)];
        } else if (i === j) {
          result.entries[result.index(i, j)] = 1.0;
        } else {
          result.entries[result.index(i, j)] = 0.0;
        }
      }
    }
    return result;
  }

  /**
   * @public
   *
   * @returns {Matrix}
   */
  getU() {
    const result = new js_Matrix(this.n, this.n);
    for (let i = 0; i < this.n; i++) {
      for (let j = 0; j < this.n; j++) {
        if (i <= j) {
          result.entries[result.index(i, j)] = this.LU[this.matrix.index(i, j)];
        } else {
          result.entries[result.index(i, j)] = 0.0;
        }
      }
    }
    return result;
  }

  /**
   * @public
   *
   * @returns {Uint32Array}
   */
  getPivot() {
    const p = new Uint32Array(this.m);
    for (let i = 0; i < this.m; i++) {
      p[i] = this.piv[i];
    }
    return p;
  }

  /**
   * @public
   *
   * @returns {Float64Array}
   */
  getDoublePivot() {
    const vals = new ArrayType(this.m);
    for (let i = 0; i < this.m; i++) {
      vals[i] = this.piv[i];
    }
    return vals;
  }

  /**
   * @public
   *
   * @returns {number}
   */
  det() {
    if (this.m !== this.n) {
      throw new Error('Matrix must be square.');
    }
    let d = this.pivsign;
    for (let j = 0; j < this.n; j++) {
      d *= this.LU[this.matrix.index(j, j)];
    }
    return d;
  }

  /**
   * @public
   *
   * @param {Matrix} matrix
   * @returns {Matrix}
   */
  solve(matrix) {
    let i;
    let j;
    let k;
    if (matrix.getRowDimension() !== this.m) {
      throw new Error('Matrix row dimensions must agree.');
    }
    if (!this.isNonsingular()) {
      throw new Error('Matrix is singular.');
    }

    // Copy right hand side with pivoting
    const nx = matrix.getColumnDimension();
    const Xmat = matrix.getArrayRowMatrix(this.piv, 0, nx - 1);

    // Solve L*Y = B(piv,:)
    for (k = 0; k < this.n; k++) {
      for (i = k + 1; i < this.n; i++) {
        for (j = 0; j < nx; j++) {
          Xmat.entries[Xmat.index(i, j)] -= Xmat.entries[Xmat.index(k, j)] * this.LU[this.matrix.index(i, k)];
        }
      }
    }

    // Solve U*X = Y;
    for (k = this.n - 1; k >= 0; k--) {
      for (j = 0; j < nx; j++) {
        Xmat.entries[Xmat.index(k, j)] /= this.LU[this.matrix.index(k, k)];
      }
      for (i = 0; i < k; i++) {
        for (j = 0; j < nx; j++) {
          Xmat.entries[Xmat.index(i, j)] -= Xmat.entries[Xmat.index(k, j)] * this.LU[this.matrix.index(i, k)];
        }
      }
    }
    return Xmat;
  }
}
js_dot.register('LUDecomposition', LUDecomposition);
/* harmony default export */ const js_LUDecomposition = (LUDecomposition);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/QRDecomposition.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * QR decomposition, based on Jama (http://math.nist.gov/javanumerics/jama/)
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



const QRDecomposition_ArrayType = window.Float64Array || Array;
class QRDecomposition {
  /**
   * @param {Matrix} matrix
   */
  constructor(matrix) {
    this.matrix = matrix;

    // TODO: size!
    this.QR = matrix.getArrayCopy();
    const QR = this.QR;
    this.m = matrix.getRowDimension();
    const m = this.m;
    this.n = matrix.getColumnDimension();
    const n = this.n;
    this.Rdiag = new QRDecomposition_ArrayType(n);
    let i;
    let j;
    let k;

    // Main loop.
    for (k = 0; k < n; k++) {
      // Compute 2-norm of k-th column without under/overflow.
      let nrm = 0;
      for (i = k; i < m; i++) {
        nrm = js_Matrix.hypot(nrm, QR[this.matrix.index(i, k)]);
      }
      if (nrm !== 0.0) {
        // Form k-th Householder vector.
        if (QR[this.matrix.index(k, k)] < 0) {
          nrm = -nrm;
        }
        for (i = k; i < m; i++) {
          QR[this.matrix.index(i, k)] /= nrm;
        }
        QR[this.matrix.index(k, k)] += 1.0;

        // Apply transformation to remaining columns.
        for (j = k + 1; j < n; j++) {
          let s = 0.0;
          for (i = k; i < m; i++) {
            s += QR[this.matrix.index(i, k)] * QR[this.matrix.index(i, j)];
          }
          s = -s / QR[this.matrix.index(k, k)];
          for (i = k; i < m; i++) {
            QR[this.matrix.index(i, j)] += s * QR[this.matrix.index(i, k)];
          }
        }
      }
      this.Rdiag[k] = -nrm;
    }
  }

  /**
   * @public
   *
   * @returns {boolean}
   */
  isFullRank() {
    for (let j = 0; j < this.n; j++) {
      if (this.Rdiag[j] === 0) {
        return false;
      }
    }
    return true;
  }

  /**
   * @public
   *
   * @returns {Matrix}
   */
  getH() {
    const result = new js_Matrix(this.m, this.n);
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        if (i >= j) {
          result.entries[result.index(i, j)] = this.QR[this.matrix.index(i, j)];
        } else {
          result.entries[result.index(i, j)] = 0.0;
        }
      }
    }
    return result;
  }

  /**
   * @public
   *
   * @returns {Matrix}
   */
  getR() {
    const result = new js_Matrix(this.n, this.n);
    for (let i = 0; i < this.n; i++) {
      for (let j = 0; j < this.n; j++) {
        if (i < j) {
          result.entries[result.index(i, j)] = this.QR[this.matrix.index(i, j)];
        } else if (i === j) {
          result.entries[result.index(i, j)] = this.Rdiag[i];
        } else {
          result.entries[result.index(i, j)] = 0.0;
        }
      }
    }
    return result;
  }

  /**
   * @public
   *
   * @returns {Matrix}
   */
  getQ() {
    let i;
    let j;
    let k;
    const result = new js_Matrix(this.m, this.n);
    for (k = this.n - 1; k >= 0; k--) {
      for (i = 0; i < this.m; i++) {
        result.entries[result.index(i, k)] = 0.0;
      }
      result.entries[result.index(k, k)] = 1.0;
      for (j = k; j < this.n; j++) {
        if (this.QR[this.matrix.index(k, k)] !== 0) {
          let s = 0.0;
          for (i = k; i < this.m; i++) {
            s += this.QR[this.matrix.index(i, k)] * result.entries[result.index(i, j)];
          }
          s = -s / this.QR[this.matrix.index(k, k)];
          for (i = k; i < this.m; i++) {
            result.entries[result.index(i, j)] += s * this.QR[this.matrix.index(i, k)];
          }
        }
      }
    }
    return result;
  }

  /**
   * @public
   *
   * @param {Matrix} matrix
   * @returns {Matrix}
   */
  solve(matrix) {
    if (matrix.getRowDimension() !== this.m) {
      throw new Error('Matrix row dimensions must agree.');
    }
    if (!this.isFullRank()) {
      throw new Error('Matrix is rank deficient.');
    }
    let i;
    let j;
    let k;

    // Copy right hand side
    const nx = matrix.getColumnDimension();
    const X = matrix.getArrayCopy();

    // Compute Y = transpose(Q)*matrix
    for (k = 0; k < this.n; k++) {
      for (j = 0; j < nx; j++) {
        let s = 0.0;
        for (i = k; i < this.m; i++) {
          s += this.QR[this.matrix.index(i, k)] * X[matrix.index(i, j)];
        }
        s = -s / this.QR[this.matrix.index(k, k)];
        for (i = k; i < this.m; i++) {
          X[matrix.index(i, j)] += s * this.QR[this.matrix.index(i, k)];
        }
      }
    }

    // Solve R*X = Y;
    for (k = this.n - 1; k >= 0; k--) {
      for (j = 0; j < nx; j++) {
        X[matrix.index(k, j)] /= this.Rdiag[k];
      }
      for (i = 0; i < k; i++) {
        for (j = 0; j < nx; j++) {
          X[matrix.index(i, j)] -= X[matrix.index(k, j)] * this.QR[this.matrix.index(i, k)];
        }
      }
    }
    return new js_Matrix(this.n, nx, X, true).getMatrix(0, this.n - 1, 0, nx - 1);
  }
}
js_dot.register('QRDecomposition', QRDecomposition);
/* harmony default export */ const js_QRDecomposition = (QRDecomposition);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/SingularValueDecomposition.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * SVD decomposition, based on Jama (http://math.nist.gov/javanumerics/jama/)
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



const SingularValueDecomposition_ArrayType = window.Float64Array || Array;
class SingularValueDecomposition {
  /**
   * @param {Matrix} matrix
   */
  constructor(matrix) {
    this.matrix = matrix;
    const Arg = matrix;

    // Derived from LINPACK code.
    // Initialize.
    const A = Arg.getArrayCopy();
    this.m = Arg.getRowDimension();
    this.n = Arg.getColumnDimension();
    const m = this.m;
    const n = this.n;
    const min = Math.min;
    const max = Math.max;
    const pow = Math.pow;
    const abs = Math.abs;

    /* Apparently the failing cases are only a proper subset of (m<n),
     so let's not throw error.  Correct fix to come later?
     if (m<n) {
     throw new IllegalArgumentException("Jama SVD only works for m >= n"); }
     */
    const nu = min(m, n);
    this.s = new SingularValueDecomposition_ArrayType(min(m + 1, n));
    const s = this.s;
    this.U = new SingularValueDecomposition_ArrayType(m * nu);
    const U = this.U;
    this.V = new SingularValueDecomposition_ArrayType(n * n);
    const V = this.V;
    const e = new SingularValueDecomposition_ArrayType(n);
    const work = new SingularValueDecomposition_ArrayType(m);
    const wantu = true;
    const wantv = true;
    let i;
    let j;
    let k;
    let t;
    let f;
    let cs;
    let sn;
    const hypot = js_Matrix.hypot;

    // Reduce A to bidiagonal form, storing the diagonal elements
    // in s and the super-diagonal elements in e.

    const nct = min(m - 1, n);
    const nrt = max(0, min(n - 2, m));
    for (k = 0; k < max(nct, nrt); k++) {
      if (k < nct) {
        // Compute the transformation for the k-th column and
        // place the k-th diagonal in s[k].
        // Compute 2-norm of k-th column without under/overflow.
        s[k] = 0;
        for (i = k; i < m; i++) {
          s[k] = hypot(s[k], A[i * n + k]);
        }
        if (s[k] !== 0.0) {
          if (A[k * n + k] < 0.0) {
            s[k] = -s[k];
          }
          for (i = k; i < m; i++) {
            A[i * n + k] /= s[k];
          }
          A[k * n + k] += 1.0;
        }
        s[k] = -s[k];
      }
      for (j = k + 1; j < n; j++) {
        if (k < nct && s[k] !== 0.0) {
          // Apply the transformation.

          t = 0;
          for (i = k; i < m; i++) {
            t += A[i * n + k] * A[i * n + j];
          }
          t = -t / A[k * n + k];
          for (i = k; i < m; i++) {
            A[i * n + j] += t * A[i * n + k];
          }
        }

        // Place the k-th row of A into e for the
        // subsequent calculation of the row transformation.

        e[j] = A[k * n + j];
      }
      if (wantu && k < nct) {
        // Place the transformation in U for subsequent back
        // multiplication.

        for (i = k; i < m; i++) {
          U[i * nu + k] = A[i * n + k];
        }
      }
      if (k < nrt) {
        // Compute the k-th row transformation and place the
        // k-th super-diagonal in e[k].
        // Compute 2-norm without under/overflow.
        e[k] = 0;
        for (i = k + 1; i < n; i++) {
          e[k] = hypot(e[k], e[i]);
        }
        if (e[k] !== 0.0) {
          if (e[k + 1] < 0.0) {
            e[k] = -e[k];
          }
          for (i = k + 1; i < n; i++) {
            e[i] /= e[k];
          }
          e[k + 1] += 1.0;
        }
        e[k] = -e[k];
        if (k + 1 < m && e[k] !== 0.0) {
          // Apply the transformation.

          for (i = k + 1; i < m; i++) {
            work[i] = 0.0;
          }
          for (j = k + 1; j < n; j++) {
            for (i = k + 1; i < m; i++) {
              work[i] += e[j] * A[i * n + j];
            }
          }
          for (j = k + 1; j < n; j++) {
            t = -e[j] / e[k + 1];
            for (i = k + 1; i < m; i++) {
              A[i * n + j] += t * work[i];
            }
          }
        }
        if (wantv) {
          // Place the transformation in V for subsequent
          // back multiplication.

          for (i = k + 1; i < n; i++) {
            V[i * n + k] = e[i];
          }
        }
      }
    }

    // Set up the final bidiagonal matrix or order p.

    let p = min(n, m + 1);
    if (nct < n) {
      s[nct] = A[nct * n + nct];
    }
    if (m < p) {
      s[p - 1] = 0.0;
    }
    if (nrt + 1 < p) {
      e[nrt] = A[nrt * n + p - 1];
    }
    e[p - 1] = 0.0;

    // If required, generate U.

    if (wantu) {
      for (j = nct; j < nu; j++) {
        for (i = 0; i < m; i++) {
          U[i * nu + j] = 0.0;
        }
        U[j * nu + j] = 1.0;
      }
      for (k = nct - 1; k >= 0; k--) {
        if (s[k] !== 0.0) {
          for (j = k + 1; j < nu; j++) {
            t = 0;
            for (i = k; i < m; i++) {
              t += U[i * nu + k] * U[i * nu + j];
            }
            t = -t / U[k * nu + k];
            for (i = k; i < m; i++) {
              U[i * nu + j] += t * U[i * nu + k];
            }
          }
          for (i = k; i < m; i++) {
            U[i * nu + k] = -U[i * nu + k];
          }
          U[k * nu + k] = 1.0 + U[k * nu + k];
          for (i = 0; i < k - 1; i++) {
            U[i * nu + k] = 0.0;
          }
        } else {
          for (i = 0; i < m; i++) {
            U[i * nu + k] = 0.0;
          }
          U[k * nu + k] = 1.0;
        }
      }
    }

    // If required, generate V.

    if (wantv) {
      for (k = n - 1; k >= 0; k--) {
        if (k < nrt && e[k] !== 0.0) {
          for (j = k + 1; j < nu; j++) {
            t = 0;
            for (i = k + 1; i < n; i++) {
              t += V[i * n + k] * V[i * n + j];
            }
            t = -t / V[(k + 1) * n + k];
            for (i = k + 1; i < n; i++) {
              V[i * n + j] += t * V[i * n + k];
            }
          }
        }
        for (i = 0; i < n; i++) {
          V[i * n + k] = 0.0;
        }
        V[k * n + k] = 1.0;
      }
    }

    // Main iteration loop for the singular values.

    const pp = p - 1;
    let iter = 0;
    const eps = pow(2.0, -52.0);
    const tiny = pow(2.0, -966.0);
    while (p > 0) {
      let kase;

      // Here is where a test for too many iterations would go.
      if (iter > 500) {
        break;
      }

      // This section of the program inspects for
      // negligible elements in the s and e arrays.  On
      // completion the variables kase and k are set as follows.

      // kase = 1   if s(p) and e[k-1] are negligible and k<p
      // kase = 2   if s(k) is negligible and k<p
      // kase = 3   if e[k-1] is negligible, k<p, and
      //        s(k), ..., s(p) are not negligible (qr step).
      // kase = 4   if e(p-1) is negligible (convergence).

      for (k = p - 2; k >= -1; k--) {
        if (k === -1) {
          break;
        }
        if (abs(e[k]) <= tiny + eps * (abs(s[k]) + abs(s[k + 1]))) {
          e[k] = 0.0;
          break;
        }
      }
      if (k === p - 2) {
        kase = 4;
      } else {
        let ks;
        for (ks = p - 1; ks >= k; ks--) {
          if (ks === k) {
            break;
          }
          t = (ks !== p ? abs(e[ks]) : 0) + (ks !== k + 1 ? abs(e[ks - 1]) : 0);
          if (abs(s[ks]) <= tiny + eps * t) {
            s[ks] = 0.0;
            break;
          }
        }
        if (ks === k) {
          kase = 3;
        } else if (ks === p - 1) {
          kase = 1;
        } else {
          kase = 2;
          k = ks;
        }
      }
      k++;

      // Perform the task indicated by kase.

      switch (kase) {
        // Deflate negligible s(p).

        case 1:
          {
            f = e[p - 2];
            e[p - 2] = 0.0;
            for (j = p - 2; j >= k; j--) {
              t = hypot(s[j], f);
              cs = s[j] / t;
              sn = f / t;
              s[j] = t;
              if (j !== k) {
                f = -sn * e[j - 1];
                e[j - 1] = cs * e[j - 1];
              }
              if (wantv) {
                for (i = 0; i < n; i++) {
                  t = cs * V[i * n + j] + sn * V[i * n + p - 1];
                  V[i * n + p - 1] = -sn * V[i * n + j] + cs * V[i * n + p - 1];
                  V[i * n + j] = t;
                }
              }
            }
          }
          break;

        // Split at negligible s(k).

        case 2:
          {
            f = e[k - 1];
            e[k - 1] = 0.0;
            for (j = k; j < p; j++) {
              t = hypot(s[j], f);
              cs = s[j] / t;
              sn = f / t;
              s[j] = t;
              f = -sn * e[j];
              e[j] = cs * e[j];
              if (wantu) {
                for (i = 0; i < m; i++) {
                  t = cs * U[i * nu + j] + sn * U[i * nu + k - 1];
                  U[i * nu + k - 1] = -sn * U[i * nu + j] + cs * U[i * nu + k - 1];
                  U[i * nu + j] = t;
                }
              }
            }
          }
          break;

        // Perform one qr step.

        case 3:
          {
            // Calculate the shift.

            const scale = max(max(max(max(abs(s[p - 1]), abs(s[p - 2])), abs(e[p - 2])), abs(s[k])), abs(e[k]));
            const sp = s[p - 1] / scale;
            const spm1 = s[p - 2] / scale;
            const epm1 = e[p - 2] / scale;
            const sk = s[k] / scale;
            const ek = e[k] / scale;
            const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2.0;
            const c = sp * epm1 * (sp * epm1);
            let shift = 0.0;
            if (b !== 0.0 || c !== 0.0) {
              shift = Math.sqrt(b * b + c);
              if (b < 0.0) {
                shift = -shift;
              }
              shift = c / (b + shift);
            }
            f = (sk + sp) * (sk - sp) + shift;
            let g = sk * ek;

            // Chase zeros.

            for (j = k; j < p - 1; j++) {
              t = hypot(f, g);
              cs = f / t;
              sn = g / t;
              if (j !== k) {
                e[j - 1] = t;
              }
              f = cs * s[j] + sn * e[j];
              e[j] = cs * e[j] - sn * s[j];
              g = sn * s[j + 1];
              s[j + 1] = cs * s[j + 1];
              if (wantv) {
                for (i = 0; i < n; i++) {
                  t = cs * V[i * n + j] + sn * V[i * n + j + 1];
                  V[i * n + j + 1] = -sn * V[i * n + j] + cs * V[i * n + j + 1];
                  V[i * n + j] = t;
                }
              }
              t = hypot(f, g);
              cs = f / t;
              sn = g / t;
              s[j] = t;
              f = cs * e[j] + sn * s[j + 1];
              s[j + 1] = -sn * e[j] + cs * s[j + 1];
              g = sn * e[j + 1];
              e[j + 1] = cs * e[j + 1];
              if (wantu && j < m - 1) {
                for (i = 0; i < m; i++) {
                  t = cs * U[i * nu + j] + sn * U[i * nu + j + 1];
                  U[i * nu + j + 1] = -sn * U[i * nu + j] + cs * U[i * nu + j + 1];
                  U[i * nu + j] = t;
                }
              }
            }
            e[p - 2] = f;
            iter = iter + 1;
          }
          break;

        // Convergence.

        case 4:
          {
            // Make the singular values positive.

            if (s[k] <= 0.0) {
              s[k] = s[k] < 0.0 ? -s[k] : 0.0;
              if (wantv) {
                for (i = 0; i <= pp; i++) {
                  V[i * n + k] = -V[i * n + k];
                }
              }
            }

            // Order the singular values.

            while (k < pp) {
              if (s[k] >= s[k + 1]) {
                break;
              }
              t = s[k];
              s[k] = s[k + 1];
              s[k + 1] = t;
              if (wantv && k < n - 1) {
                for (i = 0; i < n; i++) {
                  t = V[i * n + k + 1];
                  V[i * n + k + 1] = V[i * n + k];
                  V[i * n + k] = t;
                }
              }
              if (wantu && k < m - 1) {
                for (i = 0; i < m; i++) {
                  t = U[i * nu + k + 1];
                  U[i * nu + k + 1] = U[i * nu + k];
                  U[i * nu + k] = t;
                }
              }
              k++;
            }
            iter = 0;
            p--;
          }
          break;
        default:
          throw new Error(`invalid kase: ${kase}`);
      }
    }
  }

  /**
   * @public
   *
   * @returns {Matrix}
   */
  getU() {
    return new js_Matrix(this.m, Math.min(this.m + 1, this.n), this.U, true); // the "fast" flag added, since U is ArrayType
  }

  /**
   * @public
   *
   * @returns {Matrix}
   */
  getV() {
    return new js_Matrix(this.n, this.n, this.V, true);
  }

  /**
   * @public
   *
   * @returns {Array.<number>}
   */
  getSingularValues() {
    return this.s;
  }

  /**
   * @public
   *
   * @returns {Matrix}
   */
  getS() {
    const result = new js_Matrix(this.n, this.n);
    for (let i = 0; i < this.n; i++) {
      for (let j = 0; j < this.n; j++) {
        result.entries[result.index(i, j)] = 0.0;
      }
      result.entries[result.index(i, i)] = this.s[i];
    }
    return result;
  }

  /**
   * @public
   *
   * @returns {number}
   */
  norm2() {
    return this.s[0];
  }

  /**
   * @public
   *
   * @returns {number}
   */
  cond() {
    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];
  }

  /**
   * @public
   *
   * @returns {number}
   */
  rank() {
    // changed to 23 from 52 (bits of mantissa), since we are using floats here!
    const eps = Math.pow(2.0, -23.0);
    const tol = Math.max(this.m, this.n) * this.s[0] * eps;
    let r = 0;
    for (let i = 0; i < this.s.length; i++) {
      if (this.s[i] > tol) {
        r++;
      }
    }
    return r;
  }

  /**
   * Constructs the Moore-Penrose pseudoinverse of the specified matrix, using the SVD construction.
   * @public
   *
   * See https://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_pseudoinverse for details. Helpful for
   * linear least-squares regression.
   *
   * @param {Matrix} matrix, m x n
   * @returns {Matrix} - n x m
   */
  static pseudoinverse(matrix) {
    const svd = new SingularValueDecomposition(matrix);
    const sigmaPseudoinverse = js_Matrix.diagonalMatrix(svd.getSingularValues().map(value => {
      if (Math.abs(value) < 1e-300) {
        return 0;
      } else {
        return 1 / value;
      }
    }));
    return svd.getV().times(sigmaPseudoinverse).times(svd.getU().transpose());
  }
}
js_dot.register('SingularValueDecomposition', SingularValueDecomposition);
/* harmony default export */ const js_SingularValueDecomposition = (SingularValueDecomposition);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Matrix.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * Arbitrary-dimensional matrix, based on Jama (http://math.nist.gov/javanumerics/jama/)
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */










const Matrix_ArrayType = window.Float64Array || Array;
class Matrix {
  /**
   * @param {number} m - number of rows
   * @param {number} n - number of columns
   * @param {number[] | number} [filler]
   * @param {boolean} [fast]
   */
  constructor(m, n, filler, fast) {
    // @public {number}
    this.m = m;
    this.n = n;
    const size = m * n;
    // @public {number}
    this.size = size;
    let i;
    if (fast) {
      // @public {Array.<number>|Float64Array}
      this.entries = filler;
    } else {
      if (!filler) {
        filler = 0;
      }

      // entries stored in row-major format
      this.entries = new Matrix_ArrayType(size);
      if (js_isArray(filler)) {
        assert && assert(filler.length === size);
        for (i = 0; i < size; i++) {
          this.entries[i] = filler[i];
        }
      } else {
        for (i = 0; i < size; i++) {
          this.entries[i] = filler;
        }
      }
    }
  }

  /**
   * @public
   *
   * @returns {Matrix}
   */
  copy() {
    const result = new Matrix(this.m, this.n);
    for (let i = 0; i < this.size; i++) {
      result.entries[i] = this.entries[i];
    }
    return result;
  }

  /**
   * @public
   *
   * @returns {Array.<number>}
   */
  getArray() {
    return this.entries;
  }

  /**
   * @public
   *
   * @returns {Array.<number>}
   */
  getArrayCopy() {
    return new Matrix_ArrayType(this.entries);
  }

  /**
   * @public
   *
   * @returns {number}
   */
  getRowDimension() {
    return this.m;
  }

  /**
   * @public
   *
   * @returns {number}
   */
  getColumnDimension() {
    return this.n;
  }

  /**
   * TODO: inline this places if we aren't using an inlining compiler! (check performance)
   * @public
   *
   * @param {number} i
   * @param {number} j
   * @returns {number}
   */
  index(i, j) {
    return i * this.n + j;
  }

  /**
   * Get the matrix element (i,j) with the convention that row and column indices start at zero
   * @public
   *
   * @param {number} i - row index
   * @param {number} j - column index
   * @returns {number}
   */
  get(i, j) {
    return this.entries[this.index(i, j)];
  }

  /**
   * Set the matrix element (i,j) to a value s with the convention that row and column indices start at zero
   * @public
   *
   * @param {number} i - row index
   * @param {number} j - column index
   * @param {number} s - value of the matrix element
   */
  set(i, j, s) {
    this.entries[this.index(i, j)] = s;
  }

  /**
   * @public
   *
   * @param {number} i0
   * @param {number} i1
   * @param {number} j0
   * @param {number} j1
   * @returns {Matrix}
   */
  getMatrix(i0, i1, j0, j1) {
    const result = new Matrix(i1 - i0 + 1, j1 - j0 + 1);
    for (let i = i0; i <= i1; i++) {
      for (let j = j0; j <= j1; j++) {
        result.entries[result.index(i - i0, j - j0)] = this.entries[this.index(i, j)];
      }
    }
    return result;
  }

  /**
   * @public
   *
   * @param {Array.<number>} r
   * @param {number} j0
   * @param {number} j1
   * @returns {Matrix}
   */
  getArrayRowMatrix(r, j0, j1) {
    const result = new Matrix(r.length, j1 - j0 + 1);
    for (let i = 0; i < r.length; i++) {
      for (let j = j0; j <= j1; j++) {
        result.entries[result.index(i, j - j0)] = this.entries[this.index(r[i], j)];
      }
    }
    return result;
  }

  /**
   * @public
   *
   * @param {Matrix} [result] - allow passing in a pre-constructed matrix
   * @returns {Matrix}
   */
  transpose(result) {
    result = result || new Matrix(this.n, this.m);
    assert && assert(result.m === this.n);
    assert && assert(result.n === this.m);
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        result.entries[result.index(j, i)] = this.entries[this.index(i, j)];
      }
    }
    return result;
  }

  /**
   * @public
   *
   * @returns {number}
   */
  norm1() {
    let f = 0;
    for (let j = 0; j < this.n; j++) {
      let s = 0;
      for (let i = 0; i < this.m; i++) {
        s += Math.abs(this.entries[this.index(i, j)]);
      }
      f = Math.max(f, s);
    }
    return f;
  }

  /**
   * @public
   *
   * @returns {number}
   */
  norm2() {
    return new js_SingularValueDecomposition(this).norm2();
  }

  /**
   * @public
   *
   * @returns {number}
   */
  normInf() {
    let f = 0;
    for (let i = 0; i < this.m; i++) {
      let s = 0;
      for (let j = 0; j < this.n; j++) {
        s += Math.abs(this.entries[this.index(i, j)]);
      }
      f = Math.max(f, s);
    }
    return f;
  }

  /**
   * @public
   *
   * @returns {number}
   */
  normF() {
    let f = 0;
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        f = Matrix.hypot(f, this.entries[this.index(i, j)]);
      }
    }
    return f;
  }

  /**
   * @public
   *
   * @returns {Matrix}
   */
  uminus() {
    const result = new Matrix(this.m, this.n);
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        result.entries[result.index(i, j)] = -this.entries[this.index(i, j)];
      }
    }
    return result;
  }

  /**
   * @public
   *
   * @param {Matrix} matrix
   * @returns {Matrix}
   */
  plus(matrix) {
    this.checkMatrixDimensions(matrix);
    const result = new Matrix(this.m, this.n);
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        const index = result.index(i, j);
        result.entries[index] = this.entries[index] + matrix.entries[index];
      }
    }
    return result;
  }

  /**
   * @public
   *
   * @param {Matrix} matrix
   * @returns {Matrix}
   */
  plusEquals(matrix) {
    this.checkMatrixDimensions(matrix);
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        const index = this.index(i, j);
        this.entries[index] = this.entries[index] + matrix.entries[index];
      }
    }
    return this;
  }

  /**
   * A linear interpolation between this Matrix (ratio=0) and another Matrix (ratio=1).
   * @public
   *
   * @param {Matrix} matrix
   * @param {number} ratio - Not necessarily constrained in [0, 1]
   * @returns {Matrix}
   */
  blendEquals(matrix, ratio) {
    this.checkMatrixDimensions(matrix);
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        const index = this.index(i, j);
        const a = this.entries[index];
        const b = matrix.entries[index];
        this.entries[index] = a + (b - a) * ratio;
      }
    }
    return this;
  }

  /**
   * @public
   *
   * @param {Matrix} matrix
   * @returns {Matrix}
   */
  minus(matrix) {
    this.checkMatrixDimensions(matrix);
    const result = new Matrix(this.m, this.n);
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        const index = this.index(i, j);
        result.entries[index] = this.entries[index] - matrix.entries[index];
      }
    }
    return result;
  }

  /**
   * @public
   *
   * @param {Matrix} matrix
   * @returns {Matrix}
   */
  minusEquals(matrix) {
    this.checkMatrixDimensions(matrix);
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        const index = this.index(i, j);
        this.entries[index] = this.entries[index] - matrix.entries[index];
      }
    }
    return this;
  }

  /**
   * @public
   *
   * @param {Matrix} matrix
   * @returns {Matrix}
   */
  arrayTimes(matrix) {
    this.checkMatrixDimensions(matrix);
    const result = new Matrix(this.m, this.n);
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        const index = result.index(i, j);
        result.entries[index] = this.entries[index] * matrix.entries[index];
      }
    }
    return result;
  }

  /**
   * @public
   *
   * @param {Matrix} matrix
   * @returns {Matrix}
   */
  arrayTimesEquals(matrix) {
    this.checkMatrixDimensions(matrix);
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        const index = this.index(i, j);
        this.entries[index] = this.entries[index] * matrix.entries[index];
      }
    }
    return this;
  }

  /**
   * @public
   *
   * @param {Matrix} matrix
   * @returns {Matrix}
   */
  arrayRightDivide(matrix) {
    this.checkMatrixDimensions(matrix);
    const result = new Matrix(this.m, this.n);
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        const index = this.index(i, j);
        result.entries[index] = this.entries[index] / matrix.entries[index];
      }
    }
    return result;
  }

  /**
   * @public
   *
   * @param {Matrix} matrix
   * @returns {Matrix}
   */
  arrayRightDivideEquals(matrix) {
    this.checkMatrixDimensions(matrix);
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        const index = this.index(i, j);
        this.entries[index] = this.entries[index] / matrix.entries[index];
      }
    }
    return this;
  }

  /**
   * @public
   *
   * @param {Matrix} matrix
   * @returns {Matrix}
   */
  arrayLeftDivide(matrix) {
    this.checkMatrixDimensions(matrix);
    const result = new Matrix(this.m, this.n);
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        const index = this.index(i, j);
        result.entries[index] = matrix.entries[index] / this.entries[index];
      }
    }
    return result;
  }

  /**
   * @public
   *
   * @param {Matrix} matrix
   * @returns {Matrix}
   */
  arrayLeftDivideEquals(matrix) {
    this.checkMatrixDimensions(matrix);
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        const index = this.index(i, j);
        this.entries[index] = matrix.entries[index] / this.entries[index];
      }
    }
    return this;
  }

  /**
   * @public
   *
   * @param {Matrix|number} matrixOrScalar
   * @returns {Matrix}
   */
  times(matrixOrScalar) {
    let result;
    let i;
    let j;
    let k;
    let s;
    let matrix;
    if (matrixOrScalar.isMatrix) {
      matrix = matrixOrScalar;
      if (matrix.m !== this.n) {
        throw new Error('Matrix inner dimensions must agree.');
      }
      result = new Matrix(this.m, matrix.n);
      const matrixcolj = new Matrix_ArrayType(this.n);
      for (j = 0; j < matrix.n; j++) {
        for (k = 0; k < this.n; k++) {
          matrixcolj[k] = matrix.entries[matrix.index(k, j)];
        }
        for (i = 0; i < this.m; i++) {
          s = 0;
          for (k = 0; k < this.n; k++) {
            s += this.entries[this.index(i, k)] * matrixcolj[k];
          }
          result.entries[result.index(i, j)] = s;
        }
      }
      return result;
    } else {
      s = matrixOrScalar;
      result = new Matrix(this.m, this.n);
      for (i = 0; i < this.m; i++) {
        for (j = 0; j < this.n; j++) {
          result.entries[result.index(i, j)] = s * this.entries[this.index(i, j)];
        }
      }
      return result;
    }
  }

  /**
   * @public
   *
   * @param {number} s
   * @returns {Matrix}
   */
  timesEquals(s) {
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        const index = this.index(i, j);
        this.entries[index] = s * this.entries[index];
      }
    }
    return this;
  }

  /**
   * @public
   *
   * @param {Matrix} matrix
   * @returns {Matrix}
   */
  solve(matrix) {
    return this.m === this.n ? new js_LUDecomposition(this).solve(matrix) : new js_QRDecomposition(this).solve(matrix);
  }

  /**
   * @public
   *
   * @param {Matrix} matrix
   * @returns {Matrix}
   */
  solveTranspose(matrix) {
    return this.transpose().solve(matrix.transpose());
  }

  /**
   * @public
   *
   * @returns {Matrix}
   */
  inverse() {
    return this.solve(Matrix.identity(this.m, this.m));
  }

  /**
   * @public
   *
   * @returns {number}
   */
  det() {
    return new js_LUDecomposition(this).det();
  }

  /**
   * @public
   *
   * @returns {number}
   */
  rank() {
    return new js_SingularValueDecomposition(this).rank();
  }

  /**
   * @public
   *
   * @returns {number}
   */
  cond() {
    return new js_SingularValueDecomposition(this).cond();
  }

  /**
   * @public
   *
   * @returns {number}
   */
  trace() {
    let t = 0;
    for (let i = 0; i < Math.min(this.m, this.n); i++) {
      t += this.entries[this.index(i, i)];
    }
    return t;
  }

  /**
   * @public
   *
   * @param {Matrix} matrix
   */
  checkMatrixDimensions(matrix) {
    if (matrix.m !== this.m || matrix.n !== this.n) {
      throw new Error('Matrix dimensions must agree.');
    }
  }

  /**
   * Returns a string form of this object
   * @public
   *
   * @returns {string}
   */
  toString() {
    let result = '';
    result += `dim: ${this.getRowDimension()}x${this.getColumnDimension()}\n`;
    for (let row = 0; row < this.getRowDimension(); row++) {
      for (let col = 0; col < this.getColumnDimension(); col++) {
        result += `${this.get(row, col)} `;
      }
      result += '\n';
    }
    return result;
  }

  /**
   * Returns a vector that is contained in the specified column
   * @public
   *
   * @param {number} column
   * @returns {Vector2}
   */
  extractVector2(column) {
    assert && assert(this.m === 2); // rows should match vector dimension
    return new Vector2(this.get(0, column), this.get(1, column));
  }

  /**
   * Returns a vector that is contained in the specified column
   * @public
   *
   * @param {number} column
   * @returns {Vector3}
   */
  extractVector3(column) {
    assert && assert(this.m === 3); // rows should match vector dimension
    return new Vector3(this.get(0, column), this.get(1, column), this.get(2, column));
  }

  /**
   * Returns a vector that is contained in the specified column
   * @public
   *
   * @param {number} column
   * @returns {Vector4}
   */
  extractVector4(column) {
    assert && assert(this.m === 4); // rows should match vector dimension
    return new Vector4(this.get(0, column), this.get(1, column), this.get(2, column), this.get(3, column));
  }

  /**
   * Sets the current matrix to the values of the listed column vectors (Vector3).
   * @public
   *
   * @param {Array.<Vector3>} vectors
   * @returns {Matrix}
   */
  setVectors3(vectors) {
    const m = 3;
    const n = vectors.length;
    assert && assert(this.m === m);
    assert && assert(this.n === n);
    for (let i = 0; i < n; i++) {
      const vector = vectors[i];
      this.entries[i] = vector.x;
      this.entries[i + n] = vector.y;
      this.entries[i + 2 * n] = vector.z;
    }
    return this;
  }

  /**
   * sqrt(a^2 + b^2) without under/overflow.
   * @public
   *
   * @param {number} a
   * @param {number} b
   * @returns {number}
   */
  static hypot(a, b) {
    let r;
    if (Math.abs(a) > Math.abs(b)) {
      r = b / a;
      r = Math.abs(a) * Math.sqrt(1 + r * r);
    } else if (b !== 0) {
      r = a / b;
      r = Math.abs(b) * Math.sqrt(1 + r * r);
    } else {
      r = 0.0;
    }
    return r;
  }

  /**
   * Sets this matrix to the identity.
   * @public
   *
   * @param {number} m
   * @param {number} n
   * @returns {Matrix}
   */
  static identity(m, n) {
    const result = new Matrix(m, n);
    for (let i = 0; i < m; i++) {
      for (let j = 0; j < n; j++) {
        result.entries[result.index(i, j)] = i === j ? 1.0 : 0.0;
      }
    }
    return result;
  }

  /**
   * Returns a square diagonal matrix, whose entries along the diagonal are specified by the passed-in array, and the
   * other entries are 0.
   * @public
   *
   * @param {Array.<number>} diagonalValues
   * @returns {Matrix}
   */
  static diagonalMatrix(diagonalValues) {
    const n = diagonalValues.length;
    const result = new Matrix(n, n); // Should fill in zeros
    for (let i = 0; i < n; i++) {
      result.entries[result.index(i, i)] = diagonalValues[i];
    }
    return result;
  }

  /**
   * @public
   *
   * @param {Vector2} vector
   * @returns {Matrix}
   */
  static rowVector2(vector) {
    return new Matrix(1, 2, [vector.x, vector.y]);
  }

  /**
   * @public
   *
   * @param {Vector3} vector
   * @returns {Matrix}
   */
  static rowVector3(vector) {
    return new Matrix(1, 3, [vector.x, vector.y, vector.z]);
  }

  /**
   * @public
   *
   * @param {Vector4} vector
   * @returns {Matrix}
   */
  static rowVector4(vector) {
    return new Matrix(1, 4, [vector.x, vector.y, vector.z, vector.w]);
  }

  /**
   * @public
   *
   * @param {Vector2|Vector3|Vector4} vector
   * @returns {Matrix}
   */
  static rowVector(vector) {
    if (vector.isVector2) {
      return Matrix.rowVector2(vector);
    } else if (vector.isVector3) {
      return Matrix.rowVector3(vector);
    } else if (vector.isVector4) {
      return Matrix.rowVector4(vector);
    } else {
      throw new Error(`undetected type of vector: ${vector.toString()}`);
    }
  }

  /**
   * @public
   *
   * @param {Vector2} vector
   * @returns {Matrix}
   */
  static columnVector2(vector) {
    return new Matrix(2, 1, [vector.x, vector.y]);
  }

  /**
   * @public
   *
   * @param {Vector3} vector
   * @returns {Matrix}
   */
  static columnVector3(vector) {
    return new Matrix(3, 1, [vector.x, vector.y, vector.z]);
  }

  /**
   * @public
   *
   * @param {Vector4} vector
   * @returns {Matrix}
   */
  static columnVector4(vector) {
    return new Matrix(4, 1, [vector.x, vector.y, vector.z, vector.w]);
  }

  /**
   * @public
   *
   * @param {Vector2|Vector3|Vector4} vector
   * @returns {Matrix}
   */
  static columnVector(vector) {
    if (vector.isVector2) {
      return Matrix.columnVector2(vector);
    } else if (vector.isVector3) {
      return Matrix.columnVector3(vector);
    } else if (vector.isVector4) {
      return Matrix.columnVector4(vector);
    } else {
      throw new Error(`undetected type of vector: ${vector.toString()}`);
    }
  }

  /**
   * Create a Matrix where each column is a vector
   * @public
   *
   * @param {Array.<Vector2>} vectors
   */
  static fromVectors2(vectors) {
    const dimension = 2;
    const n = vectors.length;
    const data = new Matrix_ArrayType(dimension * n);
    for (let i = 0; i < n; i++) {
      const vector = vectors[i];
      data[i] = vector.x;
      data[i + n] = vector.y;
    }
    return new Matrix(dimension, n, data, true);
  }

  /**
   * Create a Matrix where each column is a vector
   * @public
   *
   * @param {Array.<Vector3>} vectors
   */
  static fromVectors3(vectors) {
    const dimension = 3;
    const n = vectors.length;
    const data = new Matrix_ArrayType(dimension * n);
    for (let i = 0; i < n; i++) {
      const vector = vectors[i];
      data[i] = vector.x;
      data[i + n] = vector.y;
      data[i + 2 * n] = vector.z;
    }
    return new Matrix(dimension, n, data, true);
  }

  /**
   * Create a Matrix where each column is a vector
   * @public
   *
   * @param {Array.<Vector4>} vectors
   */
  static fromVectors4(vectors) {
    const dimension = 4;
    const n = vectors.length;
    const data = new Matrix_ArrayType(dimension * n);
    for (let i = 0; i < n; i++) {
      const vector = vectors[i];
      data[i] = vector.x;
      data[i + n] = vector.y;
      data[i + 2 * n] = vector.z;
      data[i + 3 * n] = vector.w;
    }
    return new Matrix(dimension, n, data, true);
  }
}

// @public {boolean}
Matrix.prototype.isMatrix = true;
js_dot.register('Matrix', Matrix);
/* harmony default export */ const js_Matrix = (Matrix);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/EigenvalueDecomposition.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * Eigensystem decomposition, based on Jama (http://math.nist.gov/javanumerics/jama/)
 *
 * Eigenvalues and eigenvectors of a real matrix.
 * <P>
 * If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
 * diagonal and the eigenvector matrix V is orthogonal.
 * I.e. A = V.times(D.times(V.transpose())) and
 * V.times(V.transpose()) equals the identity matrix.
 * <P>
 * If A is not symmetric, then the eigenvalue matrix D is block diagonal
 * with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
 * lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
 * columns of V represent the eigenvectors in the sense that A*V = V*D,
 * i.e. A.times(V) equals V.times(D).  The matrix V may be badly
 * conditioned, or even singular, so the validity of the equation
 * A = V*D*inverse(V) depends upon V.cond().
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



const EigenvalueDecomposition_ArrayType = window.Float64Array || Array;
class EigenvalueDecomposition {
  /**
   * @param {Matrix} matrix - must be a square matrix
   */
  constructor(matrix) {
    let i;
    let j;
    const A = matrix.entries;
    this.n = matrix.getColumnDimension(); // @private  Row and column dimension (square matrix).
    const n = this.n;
    this.V = new EigenvalueDecomposition_ArrayType(n * n); // @private Array for internal storage of eigenvectors.

    // Arrays for internal storage of eigenvalues.
    this.d = new EigenvalueDecomposition_ArrayType(n); // @private
    this.e = new EigenvalueDecomposition_ArrayType(n); // @private

    this.issymmetric = true;
    for (j = 0; j < n && this.issymmetric; j++) {
      for (i = 0; i < n && this.issymmetric; i++) {
        this.issymmetric = A[i * this.n + j] === A[j * this.n + i];
      }
    }
    if (this.issymmetric) {
      for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
          this.V[i * this.n + j] = A[i * this.n + j];
        }
      }

      // Tridiagonalize.
      this.tred2();

      // Diagonalize.
      this.tql2();
    } else {
      this.H = new EigenvalueDecomposition_ArrayType(n * n); // Array for internal storage of nonsymmetric Hessenberg form.
      this.ort = new EigenvalueDecomposition_ArrayType(n); // // Working storage for nonsymmetric algorithm.

      for (j = 0; j < n; j++) {
        for (i = 0; i < n; i++) {
          this.H[i * this.n + j] = A[i * this.n + j];
        }
      }

      // Reduce to Hessenberg form.
      this.orthes();

      // Reduce Hessenberg to real Schur form.
      this.hqr2();
    }
  }

  /**
   * Returns a square array of all eigenvectors arranged in a columnar format
   * @public
   * @returns {ArrayType.<number>} - a n*n matrix
   */
  getV() {
    return this.V.copy();
  }

  /**
   * Returns an array that contains the real part of the eigenvalues
   * @public
   * @returns {ArrayType.<number>} - a one dimensional array
   */
  getRealEigenvalues() {
    return this.d;
  }

  /**
   * Returns an array that contains the imaginary parts of the eigenvalues
   * @public
   * @returns {ArrayType.<number>} - a one dimensional array
   */
  getImagEigenvalues() {
    return this.e;
  }

  /**
   * Return the block diagonal eigenvalue matrix
   * @public
   * @returns {Matrix} - a n * n matrix
   */
  getD() {
    const n = this.n;
    const d = this.d;
    const e = this.e;
    const X = new js_Matrix(n, n);
    const D = X.entries;
    for (let i = 0; i < n; i++) {
      for (let j = 0; j < n; j++) {
        D[i * this.n + j] = 0.0;
      }
      D[i * this.n + i] = d[i];
      if (e[i] > 0) {
        D[i * this.n + i + 1] = e[i];
      } else if (e[i] < 0) {
        D[i * this.n + i - 1] = e[i];
      }
    }
    return X;
  }

  /**
   * Symmetric Householder reduction to tridiagonal form.
   * @private
   */
  tred2() {
    const n = this.n;
    const V = this.V;
    const d = this.d;
    const e = this.e;
    let i;
    let j;
    let k;
    let f;
    let g;
    let h;

    //  This is derived from the Algol procedures tred2 by
    //  Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
    //  Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
    //  Fortran subroutine in EISPACK.

    for (j = 0; j < n; j++) {
      d[j] = V[(n - 1) * n + j];
    }

    // Householder reduction to tridiagonal form.

    for (i = n - 1; i > 0; i--) {
      // Scale to avoid under/overflow.

      let scale = 0.0;
      h = 0.0;
      for (k = 0; k < i; k++) {
        scale = scale + Math.abs(d[k]);
      }
      if (scale === 0.0) {
        e[i] = d[i - 1];
        for (j = 0; j < i; j++) {
          d[j] = V[(i - 1) * n + j];
          V[i * this.n + j] = 0.0;
          V[j * this.n + i] = 0.0;
        }
      } else {
        // Generate Householder vector.

        for (k = 0; k < i; k++) {
          d[k] /= scale;
          h += d[k] * d[k];
        }
        f = d[i - 1];
        g = Math.sqrt(h);
        if (f > 0) {
          g = -g;
        }
        e[i] = scale * g;
        h = h - f * g;
        d[i - 1] = f - g;
        for (j = 0; j < i; j++) {
          e[j] = 0.0;
        }

        // Apply similarity transformation to remaining columns.

        for (j = 0; j < i; j++) {
          f = d[j];
          V[j * this.n + i] = f;
          g = e[j] + V[j * n + j] * f;
          for (k = j + 1; k <= i - 1; k++) {
            g += V[k * n + j] * d[k];
            e[k] += V[k * n + j] * f;
          }
          e[j] = g;
        }
        f = 0.0;
        for (j = 0; j < i; j++) {
          e[j] /= h;
          f += e[j] * d[j];
        }
        const hh = f / (h + h);
        for (j = 0; j < i; j++) {
          e[j] -= hh * d[j];
        }
        for (j = 0; j < i; j++) {
          f = d[j];
          g = e[j];
          for (k = j; k <= i - 1; k++) {
            V[k * n + j] -= f * e[k] + g * d[k];
          }
          d[j] = V[(i - 1) * n + j];
          V[i * this.n + j] = 0.0;
        }
      }
      d[i] = h;
    }

    // Accumulate transformations.

    for (i = 0; i < n - 1; i++) {
      V[(n - 1) * n + i] = V[i * n + i];
      V[i * n + i] = 1.0;
      h = d[i + 1];
      if (h !== 0.0) {
        for (k = 0; k <= i; k++) {
          d[k] = V[k * n + (i + 1)] / h;
        }
        for (j = 0; j <= i; j++) {
          g = 0.0;
          for (k = 0; k <= i; k++) {
            g += V[k * n + (i + 1)] * V[k * n + j];
          }
          for (k = 0; k <= i; k++) {
            V[k * n + j] -= g * d[k];
          }
        }
      }
      for (k = 0; k <= i; k++) {
        V[k * n + (i + 1)] = 0.0;
      }
    }
    for (j = 0; j < n; j++) {
      d[j] = V[(n - 1) * n + j];
      V[(n - 1) * n + j] = 0.0;
    }
    V[(n - 1) * n + (n - 1)] = 1.0;
    e[0] = 0.0;
  }

  /**
   * Symmetric tridiagonal QL algorithm.
   * @private
   */
  tql2() {
    const n = this.n;
    const V = this.V;
    const d = this.d;
    const e = this.e;
    let i;
    let j;
    let k;
    let l;
    let g;
    let p;
    let iter;

    //  This is derived from the Algol procedures tql2, by
    //  Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
    //  Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
    //  Fortran subroutine in EISPACK.

    for (i = 1; i < n; i++) {
      e[i - 1] = e[i];
    }
    e[n - 1] = 0.0;
    let f = 0.0;
    let tst1 = 0.0;
    const eps = Math.pow(2.0, -52.0);
    for (l = 0; l < n; l++) {
      // Find small subdiagonal element

      tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));
      let m = l;
      while (m < n) {
        if (Math.abs(e[m]) <= eps * tst1) {
          break;
        }
        m++;
      }

      // If m === l, d[l] is an eigenvalue,
      // otherwise, iterate.

      if (m > l) {
        iter = 0;
        do {
          iter = iter + 1; // (Could check iteration count here.)

          // Compute implicit shift

          g = d[l];
          p = (d[l + 1] - g) / (2.0 * e[l]);
          let r = js_Matrix.hypot(p, 1.0);
          if (p < 0) {
            r = -r;
          }
          d[l] = e[l] / (p + r);
          d[l + 1] = e[l] * (p + r);
          const dl1 = d[l + 1];
          let h = g - d[l];
          for (i = l + 2; i < n; i++) {
            d[i] -= h;
          }
          f = f + h;

          // Implicit QL transformation.

          p = d[m];
          let c = 1.0;
          let c2 = c;
          let c3 = c;
          const el1 = e[l + 1];
          let s = 0.0;
          let s2 = 0.0;
          for (i = m - 1; i >= l; i--) {
            c3 = c2;
            c2 = c;
            s2 = s;
            g = c * e[i];
            h = c * p;
            r = js_Matrix.hypot(p, e[i]);
            e[i + 1] = s * r;
            s = e[i] / r;
            c = p / r;
            p = c * d[i] - s * g;
            d[i + 1] = h + s * (c * g + s * d[i]);

            // Accumulate transformation.

            for (k = 0; k < n; k++) {
              h = V[k * n + (i + 1)];
              V[k * n + (i + 1)] = s * V[k * n + i] + c * h;
              V[k * n + i] = c * V[k * n + i] - s * h;
            }
          }
          p = -s * s2 * c3 * el1 * e[l] / dl1;
          e[l] = s * p;
          d[l] = c * p;

          // Check for convergence.
        } while (Math.abs(e[l]) > eps * tst1);
      }
      d[l] = d[l] + f;
      e[l] = 0.0;
    }

    // Sort eigenvalues and corresponding vectors.

    for (i = 0; i < n - 1; i++) {
      k = i;
      p = d[i];
      for (j = i + 1; j < n; j++) {
        if (d[j] < p) {
          k = j;
          p = d[j];
        }
      }
      if (k !== i) {
        d[k] = d[i];
        d[i] = p;
        for (j = 0; j < n; j++) {
          p = V[j * this.n + i];
          V[j * this.n + i] = V[j * n + k];
          V[j * n + k] = p;
        }
      }
    }
  }

  /**
   *  Nonsymmetric reduction to Hessenberg form.
   *  @private
   */
  orthes() {
    const n = this.n;
    const V = this.V;
    const H = this.H;
    const ort = this.ort;
    let i;
    let j;
    let m;
    let f;
    let g;

    //  This is derived from the Algol procedures orthes and ortran,
    //  by Martin and Wilkinson, Handbook for Auto. Comp.,
    //  Vol.ii-Linear Algebra, and the corresponding
    //  Fortran subroutines in EISPACK.

    const low = 0;
    const high = n - 1;
    for (m = low + 1; m <= high - 1; m++) {
      // Scale column.

      let scale = 0.0;
      for (i = m; i <= high; i++) {
        scale = scale + Math.abs(H[i * n + (m - 1)]);
      }
      if (scale !== 0.0) {
        // Compute Householder transformation.

        let h = 0.0;
        for (i = high; i >= m; i--) {
          ort[i] = H[i * n + (m - 1)] / scale;
          h += ort[i] * ort[i];
        }
        g = Math.sqrt(h);
        if (ort[m] > 0) {
          g = -g;
        }
        h = h - ort[m] * g;
        ort[m] = ort[m] - g;

        // Apply Householder similarity transformation
        // H = (I-u*u'/h)*H*(I-u*u')/h)

        for (j = m; j < n; j++) {
          f = 0.0;
          for (i = high; i >= m; i--) {
            f += ort[i] * H[i * this.n + j];
          }
          f = f / h;
          for (i = m; i <= high; i++) {
            H[i * this.n + j] -= f * ort[i];
          }
        }
        for (i = 0; i <= high; i++) {
          f = 0.0;
          for (j = high; j >= m; j--) {
            f += ort[j] * H[i * this.n + j];
          }
          f = f / h;
          for (j = m; j <= high; j++) {
            H[i * this.n + j] -= f * ort[j];
          }
        }
        ort[m] = scale * ort[m];
        H[m * n + (m - 1)] = scale * g;
      }
    }

    // Accumulate transformations (Algol's ortran).

    for (i = 0; i < n; i++) {
      for (j = 0; j < n; j++) {
        V[i * this.n + j] = i === j ? 1.0 : 0.0;
      }
    }
    for (m = high - 1; m >= low + 1; m--) {
      if (H[m * n + (m - 1)] !== 0.0) {
        for (i = m + 1; i <= high; i++) {
          ort[i] = H[i * n + (m - 1)];
        }
        for (j = m; j <= high; j++) {
          g = 0.0;
          for (i = m; i <= high; i++) {
            g += ort[i] * V[i * this.n + j];
          }
          // Double division avoids possible underflow
          g = g / ort[m] / H[m * n + (m - 1)];
          for (i = m; i <= high; i++) {
            V[i * this.n + j] += g * ort[i];
          }
        }
      }
    }
  }

  /**
   * Complex scalar division.
   * @private
   *
   * @param {*} xr
   * @param {*} xi
   * @param {*} yr
   * @param {*} yi
   */
  cdiv(xr, xi, yr, yi) {
    let r;
    let d;
    if (Math.abs(yr) > Math.abs(yi)) {
      r = yi / yr;
      d = yr + r * yi;
      this.cdivr = (xr + r * xi) / d;
      this.cdivi = (xi - r * xr) / d;
    } else {
      r = yr / yi;
      d = yi + r * yr;
      this.cdivr = (r * xr + xi) / d;
      this.cdivi = (r * xi - xr) / d;
    }
  }

  /**
   * This methods finds the eigenvalues and eigenvectors
   * of a real upper hessenberg matrix by the QR algorithm
   *
   * Nonsymmetric reduction from Hessenberg to real Schur form.
   * https://en.wikipedia.org/wiki/QR_algorithm
   *
   * @private
   */
  hqr2() {
    let n;
    const V = this.V;
    const d = this.d;
    const e = this.e;
    const H = this.H;
    let i;
    let j;
    let k;
    let l;
    let m;
    let iter;

    //  This is derived from the Algol procedure hqr2,
    //  by Martin and Wilkinson, Handbook for Auto. Comp.,
    //  Vol.ii-Linear Algebra, and the corresponding
    //  Fortran subroutine in EISPACK.

    // Initialize

    const nn = this.n;
    n = nn - 1;
    const low = 0;
    const high = nn - 1;
    const eps = Math.pow(2.0, -52.0);
    let exshift = 0.0;
    let p = 0;
    let q = 0;
    let r = 0;
    let s = 0;
    let z = 0;
    let t;
    let w;
    let x;
    let y;

    // Store roots isolated by balanc and compute matrix norm

    let norm = 0.0;
    for (i = 0; i < nn; i++) {
      if (i < low || i > high) {
        d[i] = H[i * n + i];
        e[i] = 0.0;
      }
      for (j = Math.max(i - 1, 0); j < nn; j++) {
        norm = norm + Math.abs(H[i * this.n + j]);
      }
    }

    // Outer loop over eigenvalue index

    iter = 0;
    while (n >= low) {
      // Look for single small sub-diagonal element

      l = n;
      while (l > low) {
        s = Math.abs(H[(l - 1) * n + (l - 1)]) + Math.abs(H[l * n + l]);
        if (s === 0.0) {
          s = norm;
        }
        if (Math.abs(H[l * n + (l - 1)]) < eps * s) {
          break;
        }
        l--;
      }

      // Check for convergence
      // One root found

      if (l === n) {
        H[n * n + n] = H[n * n + n] + exshift;
        d[n] = H[n * n + n];
        e[n] = 0.0;
        n--;
        iter = 0;

        // Two roots found
      } else if (l === n - 1) {
        w = H[n * n + n - 1] * H[(n - 1) * n + n];
        p = (H[(n - 1) * n + (n - 1)] - H[n * n + n]) / 2.0;
        q = p * p + w;
        z = Math.sqrt(Math.abs(q));
        H[n * n + n] = H[n * n + n] + exshift;
        H[(n - 1) * n + (n - 1)] = H[(n - 1) * n + (n - 1)] + exshift;
        x = H[n * n + n];

        // Real pair

        if (q >= 0) {
          if (p >= 0) {
            z = p + z;
          } else {
            z = p - z;
          }
          d[n - 1] = x + z;
          d[n] = d[n - 1];
          if (z !== 0.0) {
            d[n] = x - w / z;
          }
          e[n - 1] = 0.0;
          e[n] = 0.0;
          x = H[n * n + n - 1];
          s = Math.abs(x) + Math.abs(z);
          p = x / s;
          q = z / s;
          r = Math.sqrt(p * p + q * q);
          p = p / r;
          q = q / r;

          // Row modification

          for (j = n - 1; j < nn; j++) {
            z = H[(n - 1) * n + j];
            H[(n - 1) * n + j] = q * z + p * H[n * n + j];
            H[n * n + j] = q * H[n * n + j] - p * z;
          }

          // Column modification

          for (i = 0; i <= n; i++) {
            z = H[i * n + n - 1];
            H[i * n + n - 1] = q * z + p * H[i * n + n];
            H[i * n + n] = q * H[i * n + n] - p * z;
          }

          // Accumulate transformations

          for (i = low; i <= high; i++) {
            z = V[i * n + n - 1];
            V[i * n + n - 1] = q * z + p * V[i * n + n];
            V[i * n + n] = q * V[i * n + n] - p * z;
          }

          // Complex pair
        } else {
          d[n - 1] = x + p;
          d[n] = x + p;
          e[n - 1] = z;
          e[n] = -z;
        }
        n = n - 2;
        iter = 0;

        // No convergence yet
      } else {
        // Form shift

        x = H[n * n + n];
        y = 0.0;
        w = 0.0;
        if (l < n) {
          y = H[(n - 1) * n + (n - 1)];
          w = H[n * n + n - 1] * H[(n - 1) * n + n];
        }

        // Wilkinson's original ad hoc shift

        if (iter === 10) {
          exshift += x;
          for (i = low; i <= n; i++) {
            H[i * n + i] -= x;
          }
          s = Math.abs(H[n * n + n - 1]) + Math.abs(H[(n - 1) * n + n - 2]);
          x = y = 0.75 * s;
          w = -0.4375 * s * s;
        }

        // MATLAB's new ad hoc shift

        if (iter === 30) {
          s = (y - x) / 2.0;
          s = s * s + w;
          if (s > 0) {
            s = Math.sqrt(s);
            if (y < x) {
              s = -s;
            }
            s = x - w / ((y - x) / 2.0 + s);
            for (i = low; i <= n; i++) {
              H[i * n + i] -= s;
            }
            exshift += s;
            x = y = w = 0.964;
          }
        }
        iter = iter + 1; // (Could check iteration count here.)

        // Look for two consecutive small sub-diagonal elements

        m = n - 2;
        while (m >= l) {
          z = H[m * n + m];
          r = x - z;
          s = y - z;
          p = (r * s - w) / H[(m + 1) * n + m] + H[m * n + m + 1];
          q = H[(m + 1) * n + m + 1] - z - r - s;
          r = H[(m + 2) * n + m + 1];
          s = Math.abs(p) + Math.abs(q) + Math.abs(r);
          p = p / s;
          q = q / s;
          r = r / s;
          if (m === l) {
            break;
          }
          if (Math.abs(H[m * n + (m - 1)]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[(m - 1) * n + m - 1]) + Math.abs(z) + Math.abs(H[(m + 1) * n + m + 1])))) {
            break;
          }
          m--;
        }
        for (i = m + 2; i <= n; i++) {
          H[i * n + i - 2] = 0.0;
          if (i > m + 2) {
            H[i * n + i - 3] = 0.0;
          }
        }

        // Double QR step involving rows l:n and columns m:n

        for (k = m; k <= n - 1; k++) {
          const notlast = k !== n - 1;
          if (k !== m) {
            p = H[k * n + k - 1];
            q = H[(k + 1) * n + k - 1];
            r = notlast ? H[(k + 2) * n + k - 1] : 0.0;
            x = Math.abs(p) + Math.abs(q) + Math.abs(r);
            if (x !== 0.0) {
              p = p / x;
              q = q / x;
              r = r / x;
            }
          }
          if (x === 0.0) {
            break;
          }
          s = Math.sqrt(p * p + q * q + r * r);
          if (p < 0) {
            s = -s;
          }
          if (s !== 0) {
            if (k !== m) {
              H[k * n + k - 1] = -s * x;
            } else if (l !== m) {
              H[k * n + k - 1] = -H[k * n + k - 1];
            }
            p = p + s;
            x = p / s;
            y = q / s;
            z = r / s;
            q = q / p;
            r = r / p;

            // Row modification

            for (j = k; j < nn; j++) {
              p = H[k * n + j] + q * H[(k + 1) * n + j];
              if (notlast) {
                p = p + r * H[(k + 2) * n + j];
                H[(k + 2) * n + j] = H[(k + 2) * n + j] - p * z;
              }
              H[k * n + j] = H[k * n + j] - p * x;
              H[(k + 1) * n + j] = H[(k + 1) * n + j] - p * y;
            }

            // Column modification

            for (i = 0; i <= Math.min(n, k + 3); i++) {
              p = x * H[i * n + k] + y * H[i * n + k + 1];
              if (notlast) {
                p = p + z * H[i * n + k + 2];
                H[i * n + k + 2] = H[i * n + k + 2] - p * r;
              }
              H[i * n + k] = H[i * n + k] - p;
              H[i * n + k + 1] = H[i * n + k + 1] - p * q;
            }

            // Accumulate transformations

            for (i = low; i <= high; i++) {
              p = x * V[i * n + k] + y * V[i * n + k + 1];
              if (notlast) {
                p = p + z * V[i * n + k + 2];
                V[i * n + k + 2] = V[i * n + k + 2] - p * r;
              }
              V[i * n + k] = V[i * n + k] - p;
              V[i * n + k + 1] = V[i * n + k + 1] - p * q;
            }
          } // (s !== 0)
        } // k loop
      } // check convergence
    } // while (n >= low)

    // Backsubstitute to find vectors of upper triangular form

    if (norm === 0.0) {
      return;
    }
    for (n = nn - 1; n >= 0; n--) {
      p = d[n];
      q = e[n];

      // Real vector

      if (q === 0) {
        l = n;
        H[n * n + n] = 1.0;
        for (i = n - 1; i >= 0; i--) {
          w = H[i * n + i] - p;
          r = 0.0;
          for (j = l; j <= n; j++) {
            r = r + H[i * this.n + j] * H[j * n + n];
          }
          if (e[i] < 0.0) {
            z = w;
            s = r;
          } else {
            l = i;
            if (e[i] === 0.0) {
              if (w !== 0.0) {
                H[i * n + n] = -r / w;
              } else {
                H[i * n + n] = -r / (eps * norm);
              }

              // Solve real equations
            } else {
              x = H[i * n + i + 1];
              y = H[(i + 1) * n + i];
              q = (d[i] - p) * (d[i] - p) + e[i] * e[i];
              t = (x * s - z * r) / q;
              H[i * n + n] = t;
              if (Math.abs(x) > Math.abs(z)) {
                H[(i + 1) * n + n] = (-r - w * t) / x;
              } else {
                H[(i + 1) * n + n] = (-s - y * t) / z;
              }
            }

            // Overflow control

            t = Math.abs(H[i * n + n]);
            if (eps * t * t > 1) {
              for (j = i; j <= n; j++) {
                H[j * n + n] = H[j * n + n] / t;
              }
            }
          }
        }

        // Complex vector
      } else if (q < 0) {
        l = n - 1;

        // Last vector component imaginary so matrix is triangular

        if (Math.abs(H[n * n + n - 1]) > Math.abs(H[(n - 1) * n + n])) {
          H[(n - 1) * n + (n - 1)] = q / H[n * n + n - 1];
          H[(n - 1) * n + n] = -(H[n * n + n] - p) / H[n * n + n - 1];
        } else {
          this.cdiv(0.0, -H[(n - 1) * n + n], H[(n - 1) * n + (n - 1)] - p, q);
          H[(n - 1) * n + (n - 1)] = this.cdivr;
          H[(n - 1) * n + n] = this.cdivi;
        }
        H[n * n + n - 1] = 0.0;
        H[n * n + n] = 1.0;
        for (i = n - 2; i >= 0; i--) {
          let ra;
          let sa;
          let vr;
          let vi;
          ra = 0.0;
          sa = 0.0;
          for (j = l; j <= n; j++) {
            ra = ra + H[i * this.n + j] * H[j * n + n - 1];
            sa = sa + H[i * this.n + j] * H[j * n + n];
          }
          w = H[i * n + i] - p;
          if (e[i] < 0.0) {
            z = w;
            r = ra;
            s = sa;
          } else {
            l = i;
            if (e[i] === 0) {
              this.cdiv(-ra, -sa, w, q);
              H[i * n + n - 1] = this.cdivr;
              H[i * n + n] = this.cdivi;
            } else {
              // Solve complex equations

              x = H[i * n + i + 1];
              y = H[(i + 1) * n + i];
              vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;
              vi = (d[i] - p) * 2.0 * q;
              if (vr === 0.0 && vi === 0.0) {
                vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));
              }
              this.cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);
              H[i * n + n - 1] = this.cdivr;
              H[i * n + n] = this.cdivi;
              if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {
                H[(i + 1) * n + n - 1] = (-ra - w * H[i * n + n - 1] + q * H[i * n + n]) / x;
                H[(i + 1) * n + n] = (-sa - w * H[i * n + n] - q * H[i * n + n - 1]) / x;
              } else {
                this.cdiv(-r - y * H[i * n + n - 1], -s - y * H[i * n + n], z, q);
                H[(i + 1) * n + n - 1] = this.cdivr;
                H[(i + 1) * n + n] = this.cdivi;
              }
            }

            // Overflow control
            t = Math.max(Math.abs(H[i * n + n - 1]), Math.abs(H[i * n + n]));
            if (eps * t * t > 1) {
              for (j = i; j <= n; j++) {
                H[j * n + n - 1] = H[j * n + n - 1] / t;
                H[j * n + n] = H[j * n + n] / t;
              }
            }
          }
        }
      }
    }

    // Vectors of isolated roots
    for (i = 0; i < nn; i++) {
      if (i < low || i > high) {
        for (j = i; j < nn; j++) {
          V[i * this.n + j] = H[i * this.n + j];
        }
      }
    }

    // Back transformation to get eigenvectors of original matrix
    for (j = nn - 1; j >= low; j--) {
      for (i = low; i <= high; i++) {
        z = 0.0;
        for (k = low; k <= Math.min(j, high); k++) {
          z = z + V[i * n + k] * H[k * n + j];
        }
        V[i * this.n + j] = z;
      }
    }
  }
}
js_dot.register('EigenvalueDecomposition', EigenvalueDecomposition);
/* harmony default export */ const js_EigenvalueDecomposition = ((/* unused pure expression or super */ null && (EigenvalueDecomposition)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3QiLCJNYXRyaXgiLCJBcnJheVR5cGUiLCJ3aW5kb3ciLCJGbG9hdDY0QXJyYXkiLCJBcnJheSIsIkVpZ2VudmFsdWVEZWNvbXBvc2l0aW9uIiwiY29uc3RydWN0b3IiLCJtYXRyaXgiLCJpIiwiaiIsIkEiLCJlbnRyaWVzIiwibiIsImdldENvbHVtbkRpbWVuc2lvbiIsIlYiLCJkIiwiZSIsImlzc3ltbWV0cmljIiwidHJlZDIiLCJ0cWwyIiwiSCIsIm9ydCIsIm9ydGhlcyIsImhxcjIiLCJnZXRWIiwiY29weSIsImdldFJlYWxFaWdlbnZhbHVlcyIsImdldEltYWdFaWdlbnZhbHVlcyIsImdldEQiLCJYIiwiRCIsImsiLCJmIiwiZyIsImgiLCJzY2FsZSIsIk1hdGgiLCJhYnMiLCJzcXJ0IiwiaGgiLCJsIiwicCIsIml0ZXIiLCJ0c3QxIiwiZXBzIiwicG93IiwibWF4IiwibSIsInIiLCJoeXBvdCIsImRsMSIsImMiLCJjMiIsImMzIiwiZWwxIiwicyIsInMyIiwibG93IiwiaGlnaCIsImNkaXYiLCJ4ciIsInhpIiwieXIiLCJ5aSIsImNkaXZyIiwiY2RpdmkiLCJubiIsImV4c2hpZnQiLCJxIiwieiIsInQiLCJ3IiwieCIsInkiLCJub3JtIiwibm90bGFzdCIsIm1pbiIsInJhIiwic2EiLCJ2ciIsInZpIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFaWdlbnZhbHVlRGVjb21wb3NpdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBFaWdlbnN5c3RlbSBkZWNvbXBvc2l0aW9uLCBiYXNlZCBvbiBKYW1hIChodHRwOi8vbWF0aC5uaXN0Lmdvdi9qYXZhbnVtZXJpY3MvamFtYS8pXG4gKlxuICogRWlnZW52YWx1ZXMgYW5kIGVpZ2VudmVjdG9ycyBvZiBhIHJlYWwgbWF0cml4LlxuICogPFA+XG4gKiBJZiBBIGlzIHN5bW1ldHJpYywgdGhlbiBBID0gVipEKlYnIHdoZXJlIHRoZSBlaWdlbnZhbHVlIG1hdHJpeCBEIGlzXG4gKiBkaWFnb25hbCBhbmQgdGhlIGVpZ2VudmVjdG9yIG1hdHJpeCBWIGlzIG9ydGhvZ29uYWwuXG4gKiBJLmUuIEEgPSBWLnRpbWVzKEQudGltZXMoVi50cmFuc3Bvc2UoKSkpIGFuZFxuICogVi50aW1lcyhWLnRyYW5zcG9zZSgpKSBlcXVhbHMgdGhlIGlkZW50aXR5IG1hdHJpeC5cbiAqIDxQPlxuICogSWYgQSBpcyBub3Qgc3ltbWV0cmljLCB0aGVuIHRoZSBlaWdlbnZhbHVlIG1hdHJpeCBEIGlzIGJsb2NrIGRpYWdvbmFsXG4gKiB3aXRoIHRoZSByZWFsIGVpZ2VudmFsdWVzIGluIDEtYnktMSBibG9ja3MgYW5kIGFueSBjb21wbGV4IGVpZ2VudmFsdWVzLFxuICogbGFtYmRhICsgaSptdSwgaW4gMi1ieS0yIGJsb2NrcywgW2xhbWJkYSwgbXU7IC1tdSwgbGFtYmRhXS4gIFRoZVxuICogY29sdW1ucyBvZiBWIHJlcHJlc2VudCB0aGUgZWlnZW52ZWN0b3JzIGluIHRoZSBzZW5zZSB0aGF0IEEqViA9IFYqRCxcbiAqIGkuZS4gQS50aW1lcyhWKSBlcXVhbHMgVi50aW1lcyhEKS4gIFRoZSBtYXRyaXggViBtYXkgYmUgYmFkbHlcbiAqIGNvbmRpdGlvbmVkLCBvciBldmVuIHNpbmd1bGFyLCBzbyB0aGUgdmFsaWRpdHkgb2YgdGhlIGVxdWF0aW9uXG4gKiBBID0gVipEKmludmVyc2UoVikgZGVwZW5kcyB1cG9uIFYuY29uZCgpLlxuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cbiAqL1xuXG5pbXBvcnQgZG90IGZyb20gJy4vZG90LmpzJztcbmltcG9ydCBNYXRyaXggZnJvbSAnLi9NYXRyaXguanMnO1xuXG5jb25zdCBBcnJheVR5cGUgPSB3aW5kb3cuRmxvYXQ2NEFycmF5IHx8IEFycmF5O1xuXG5jbGFzcyBFaWdlbnZhbHVlRGVjb21wb3NpdGlvbiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge01hdHJpeH0gbWF0cml4IC0gbXVzdCBiZSBhIHNxdWFyZSBtYXRyaXhcbiAgICovXG4gIGNvbnN0cnVjdG9yKCBtYXRyaXggKSB7XG4gICAgbGV0IGk7XG4gICAgbGV0IGo7XG5cbiAgICBjb25zdCBBID0gbWF0cml4LmVudHJpZXM7XG4gICAgdGhpcy5uID0gbWF0cml4LmdldENvbHVtbkRpbWVuc2lvbigpOyAvLyBAcHJpdmF0ZSAgUm93IGFuZCBjb2x1bW4gZGltZW5zaW9uIChzcXVhcmUgbWF0cml4KS5cbiAgICBjb25zdCBuID0gdGhpcy5uO1xuICAgIHRoaXMuViA9IG5ldyBBcnJheVR5cGUoIG4gKiBuICk7IC8vIEBwcml2YXRlIEFycmF5IGZvciBpbnRlcm5hbCBzdG9yYWdlIG9mIGVpZ2VudmVjdG9ycy5cblxuICAgIC8vIEFycmF5cyBmb3IgaW50ZXJuYWwgc3RvcmFnZSBvZiBlaWdlbnZhbHVlcy5cbiAgICB0aGlzLmQgPSBuZXcgQXJyYXlUeXBlKCBuICk7IC8vIEBwcml2YXRlXG4gICAgdGhpcy5lID0gbmV3IEFycmF5VHlwZSggbiApOyAvLyBAcHJpdmF0ZVxuXG4gICAgdGhpcy5pc3N5bW1ldHJpYyA9IHRydWU7XG4gICAgZm9yICggaiA9IDA7ICggaiA8IG4gKSAmJiB0aGlzLmlzc3ltbWV0cmljOyBqKysgKSB7XG4gICAgICBmb3IgKCBpID0gMDsgKCBpIDwgbiApICYmIHRoaXMuaXNzeW1tZXRyaWM7IGkrKyApIHtcbiAgICAgICAgdGhpcy5pc3N5bW1ldHJpYyA9ICggQVsgaSAqIHRoaXMubiArIGogXSA9PT0gQVsgaiAqIHRoaXMubiArIGkgXSApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICggdGhpcy5pc3N5bW1ldHJpYyApIHtcbiAgICAgIGZvciAoIGkgPSAwOyBpIDwgbjsgaSsrICkge1xuICAgICAgICBmb3IgKCBqID0gMDsgaiA8IG47IGorKyApIHtcbiAgICAgICAgICB0aGlzLlZbIGkgKiB0aGlzLm4gKyBqIF0gPSBBWyBpICogdGhpcy5uICsgaiBdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRyaWRpYWdvbmFsaXplLlxuICAgICAgdGhpcy50cmVkMigpO1xuXG4gICAgICAvLyBEaWFnb25hbGl6ZS5cbiAgICAgIHRoaXMudHFsMigpO1xuXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5IID0gbmV3IEFycmF5VHlwZSggbiAqIG4gKTsgLy8gQXJyYXkgZm9yIGludGVybmFsIHN0b3JhZ2Ugb2Ygbm9uc3ltbWV0cmljIEhlc3NlbmJlcmcgZm9ybS5cbiAgICAgIHRoaXMub3J0ID0gbmV3IEFycmF5VHlwZSggbiApOyAvLyAvLyBXb3JraW5nIHN0b3JhZ2UgZm9yIG5vbnN5bW1ldHJpYyBhbGdvcml0aG0uXG5cbiAgICAgIGZvciAoIGogPSAwOyBqIDwgbjsgaisrICkge1xuICAgICAgICBmb3IgKCBpID0gMDsgaSA8IG47IGkrKyApIHtcbiAgICAgICAgICB0aGlzLkhbIGkgKiB0aGlzLm4gKyBqIF0gPSBBWyBpICogdGhpcy5uICsgaiBdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJlZHVjZSB0byBIZXNzZW5iZXJnIGZvcm0uXG4gICAgICB0aGlzLm9ydGhlcygpO1xuXG4gICAgICAvLyBSZWR1Y2UgSGVzc2VuYmVyZyB0byByZWFsIFNjaHVyIGZvcm0uXG4gICAgICB0aGlzLmhxcjIoKTtcbiAgICB9XG4gIH1cblxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3F1YXJlIGFycmF5IG9mIGFsbCBlaWdlbnZlY3RvcnMgYXJyYW5nZWQgaW4gYSBjb2x1bW5hciBmb3JtYXRcbiAgICogQHB1YmxpY1xuICAgKiBAcmV0dXJucyB7QXJyYXlUeXBlLjxudW1iZXI+fSAtIGEgbipuIG1hdHJpeFxuICAgKi9cbiAgZ2V0VigpIHtcbiAgICByZXR1cm4gdGhpcy5WLmNvcHkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IHRoYXQgY29udGFpbnMgdGhlIHJlYWwgcGFydCBvZiB0aGUgZWlnZW52YWx1ZXNcbiAgICogQHB1YmxpY1xuICAgKiBAcmV0dXJucyB7QXJyYXlUeXBlLjxudW1iZXI+fSAtIGEgb25lIGRpbWVuc2lvbmFsIGFycmF5XG4gICAqL1xuICBnZXRSZWFsRWlnZW52YWx1ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IHRoYXQgY29udGFpbnMgdGhlIGltYWdpbmFyeSBwYXJ0cyBvZiB0aGUgZWlnZW52YWx1ZXNcbiAgICogQHB1YmxpY1xuICAgKiBAcmV0dXJucyB7QXJyYXlUeXBlLjxudW1iZXI+fSAtIGEgb25lIGRpbWVuc2lvbmFsIGFycmF5XG4gICAqL1xuICBnZXRJbWFnRWlnZW52YWx1ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGJsb2NrIGRpYWdvbmFsIGVpZ2VudmFsdWUgbWF0cml4XG4gICAqIEBwdWJsaWNcbiAgICogQHJldHVybnMge01hdHJpeH0gLSBhIG4gKiBuIG1hdHJpeFxuICAgKi9cbiAgZ2V0RCgpIHtcbiAgICBjb25zdCBuID0gdGhpcy5uO1xuICAgIGNvbnN0IGQgPSB0aGlzLmQ7XG4gICAgY29uc3QgZSA9IHRoaXMuZTtcblxuICAgIGNvbnN0IFggPSBuZXcgTWF0cml4KCBuLCBuICk7XG4gICAgY29uc3QgRCA9IFguZW50cmllcztcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBuOyBpKysgKSB7XG4gICAgICBmb3IgKCBsZXQgaiA9IDA7IGogPCBuOyBqKysgKSB7XG4gICAgICAgIERbIGkgKiB0aGlzLm4gKyBqIF0gPSAwLjA7XG4gICAgICB9XG4gICAgICBEWyBpICogdGhpcy5uICsgaSBdID0gZFsgaSBdO1xuICAgICAgaWYgKCBlWyBpIF0gPiAwICkge1xuICAgICAgICBEWyBpICogdGhpcy5uICsgaSArIDEgXSA9IGVbIGkgXTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKCBlWyBpIF0gPCAwICkge1xuICAgICAgICBEWyBpICogdGhpcy5uICsgaSAtIDEgXSA9IGVbIGkgXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFg7XG4gIH1cblxuICAvKipcbiAgICogU3ltbWV0cmljIEhvdXNlaG9sZGVyIHJlZHVjdGlvbiB0byB0cmlkaWFnb25hbCBmb3JtLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdHJlZDIoKSB7XG4gICAgY29uc3QgbiA9IHRoaXMubjtcbiAgICBjb25zdCBWID0gdGhpcy5WO1xuICAgIGNvbnN0IGQgPSB0aGlzLmQ7XG4gICAgY29uc3QgZSA9IHRoaXMuZTtcbiAgICBsZXQgaTtcbiAgICBsZXQgajtcbiAgICBsZXQgaztcbiAgICBsZXQgZjtcbiAgICBsZXQgZztcbiAgICBsZXQgaDtcblxuICAgIC8vICBUaGlzIGlzIGRlcml2ZWQgZnJvbSB0aGUgQWxnb2wgcHJvY2VkdXJlcyB0cmVkMiBieVxuICAgIC8vICBCb3dkbGVyLCBNYXJ0aW4sIFJlaW5zY2gsIGFuZCBXaWxraW5zb24sIEhhbmRib29rIGZvclxuICAgIC8vICBBdXRvLiBDb21wLiwgVm9sLmlpLUxpbmVhciBBbGdlYnJhLCBhbmQgdGhlIGNvcnJlc3BvbmRpbmdcbiAgICAvLyAgRm9ydHJhbiBzdWJyb3V0aW5lIGluIEVJU1BBQ0suXG5cbiAgICBmb3IgKCBqID0gMDsgaiA8IG47IGorKyApIHtcbiAgICAgIGRbIGogXSA9IFZbICggbiAtIDEgKSAqIG4gKyBqIF07XG4gICAgfVxuXG4gICAgLy8gSG91c2Vob2xkZXIgcmVkdWN0aW9uIHRvIHRyaWRpYWdvbmFsIGZvcm0uXG5cbiAgICBmb3IgKCBpID0gbiAtIDE7IGkgPiAwOyBpLS0gKSB7XG5cbiAgICAgIC8vIFNjYWxlIHRvIGF2b2lkIHVuZGVyL292ZXJmbG93LlxuXG4gICAgICBsZXQgc2NhbGUgPSAwLjA7XG4gICAgICBoID0gMC4wO1xuICAgICAgZm9yICggayA9IDA7IGsgPCBpOyBrKysgKSB7XG4gICAgICAgIHNjYWxlID0gc2NhbGUgKyBNYXRoLmFicyggZFsgayBdICk7XG4gICAgICB9XG4gICAgICBpZiAoIHNjYWxlID09PSAwLjAgKSB7XG4gICAgICAgIGVbIGkgXSA9IGRbIGkgLSAxIF07XG4gICAgICAgIGZvciAoIGogPSAwOyBqIDwgaTsgaisrICkge1xuICAgICAgICAgIGRbIGogXSA9IFZbICggaSAtIDEgKSAqIG4gKyBqIF07XG4gICAgICAgICAgVlsgaSAqIHRoaXMubiArIGogXSA9IDAuMDtcbiAgICAgICAgICBWWyBqICogdGhpcy5uICsgaSBdID0gMC4wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcblxuICAgICAgICAvLyBHZW5lcmF0ZSBIb3VzZWhvbGRlciB2ZWN0b3IuXG5cbiAgICAgICAgZm9yICggayA9IDA7IGsgPCBpOyBrKysgKSB7XG4gICAgICAgICAgZFsgayBdIC89IHNjYWxlO1xuICAgICAgICAgIGggKz0gZFsgayBdICogZFsgayBdO1xuICAgICAgICB9XG4gICAgICAgIGYgPSBkWyBpIC0gMSBdO1xuICAgICAgICBnID0gTWF0aC5zcXJ0KCBoICk7XG4gICAgICAgIGlmICggZiA+IDAgKSB7XG4gICAgICAgICAgZyA9IC1nO1xuICAgICAgICB9XG4gICAgICAgIGVbIGkgXSA9IHNjYWxlICogZztcbiAgICAgICAgaCA9IGggLSBmICogZztcbiAgICAgICAgZFsgaSAtIDEgXSA9IGYgLSBnO1xuICAgICAgICBmb3IgKCBqID0gMDsgaiA8IGk7IGorKyApIHtcbiAgICAgICAgICBlWyBqIF0gPSAwLjA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBcHBseSBzaW1pbGFyaXR5IHRyYW5zZm9ybWF0aW9uIHRvIHJlbWFpbmluZyBjb2x1bW5zLlxuXG4gICAgICAgIGZvciAoIGogPSAwOyBqIDwgaTsgaisrICkge1xuICAgICAgICAgIGYgPSBkWyBqIF07XG4gICAgICAgICAgVlsgaiAqIHRoaXMubiArIGkgXSA9IGY7XG4gICAgICAgICAgZyA9IGVbIGogXSArIFZbIGogKiBuICsgaiBdICogZjtcbiAgICAgICAgICBmb3IgKCBrID0gaiArIDE7IGsgPD0gaSAtIDE7IGsrKyApIHtcbiAgICAgICAgICAgIGcgKz0gVlsgayAqIG4gKyBqIF0gKiBkWyBrIF07XG4gICAgICAgICAgICBlWyBrIF0gKz0gVlsgayAqIG4gKyBqIF0gKiBmO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlWyBqIF0gPSBnO1xuICAgICAgICB9XG4gICAgICAgIGYgPSAwLjA7XG4gICAgICAgIGZvciAoIGogPSAwOyBqIDwgaTsgaisrICkge1xuICAgICAgICAgIGVbIGogXSAvPSBoO1xuICAgICAgICAgIGYgKz0gZVsgaiBdICogZFsgaiBdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhoID0gZiAvICggaCArIGggKTtcbiAgICAgICAgZm9yICggaiA9IDA7IGogPCBpOyBqKysgKSB7XG4gICAgICAgICAgZVsgaiBdIC09IGhoICogZFsgaiBdO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoIGogPSAwOyBqIDwgaTsgaisrICkge1xuICAgICAgICAgIGYgPSBkWyBqIF07XG4gICAgICAgICAgZyA9IGVbIGogXTtcbiAgICAgICAgICBmb3IgKCBrID0gajsgayA8PSBpIC0gMTsgaysrICkge1xuICAgICAgICAgICAgVlsgayAqIG4gKyBqIF0gLT0gKCBmICogZVsgayBdICsgZyAqIGRbIGsgXSApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkWyBqIF0gPSBWWyAoIGkgLSAxICkgKiBuICsgaiBdO1xuICAgICAgICAgIFZbIGkgKiB0aGlzLm4gKyBqIF0gPSAwLjA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRbIGkgXSA9IGg7XG4gICAgfVxuXG4gICAgLy8gQWNjdW11bGF0ZSB0cmFuc2Zvcm1hdGlvbnMuXG5cbiAgICBmb3IgKCBpID0gMDsgaSA8IG4gLSAxOyBpKysgKSB7XG4gICAgICBWWyAoIG4gLSAxICkgKiBuICsgaSBdID0gVlsgaSAqIG4gKyBpIF07XG4gICAgICBWWyBpICogbiArIGkgXSA9IDEuMDtcbiAgICAgIGggPSBkWyBpICsgMSBdO1xuICAgICAgaWYgKCBoICE9PSAwLjAgKSB7XG4gICAgICAgIGZvciAoIGsgPSAwOyBrIDw9IGk7IGsrKyApIHtcbiAgICAgICAgICBkWyBrIF0gPSBWWyBrICogbiArICggaSArIDEgKSBdIC8gaDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKCBqID0gMDsgaiA8PSBpOyBqKysgKSB7XG4gICAgICAgICAgZyA9IDAuMDtcbiAgICAgICAgICBmb3IgKCBrID0gMDsgayA8PSBpOyBrKysgKSB7XG4gICAgICAgICAgICBnICs9IFZbIGsgKiBuICsgKCBpICsgMSApIF0gKiBWWyBrICogbiArIGogXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yICggayA9IDA7IGsgPD0gaTsgaysrICkge1xuICAgICAgICAgICAgVlsgayAqIG4gKyBqIF0gLT0gZyAqIGRbIGsgXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAoIGsgPSAwOyBrIDw9IGk7IGsrKyApIHtcbiAgICAgICAgVlsgayAqIG4gKyAoIGkgKyAxICkgXSA9IDAuMDtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICggaiA9IDA7IGogPCBuOyBqKysgKSB7XG4gICAgICBkWyBqIF0gPSBWWyAoIG4gLSAxICkgKiBuICsgaiBdO1xuICAgICAgVlsgKCBuIC0gMSApICogbiArIGogXSA9IDAuMDtcbiAgICB9XG4gICAgVlsgKCBuIC0gMSApICogbiArICggbiAtIDEgKSBdID0gMS4wO1xuICAgIGVbIDAgXSA9IDAuMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTeW1tZXRyaWMgdHJpZGlhZ29uYWwgUUwgYWxnb3JpdGhtLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdHFsMigpIHtcbiAgICBjb25zdCBuID0gdGhpcy5uO1xuICAgIGNvbnN0IFYgPSB0aGlzLlY7XG4gICAgY29uc3QgZCA9IHRoaXMuZDtcbiAgICBjb25zdCBlID0gdGhpcy5lO1xuICAgIGxldCBpO1xuICAgIGxldCBqO1xuICAgIGxldCBrO1xuICAgIGxldCBsO1xuICAgIGxldCBnO1xuICAgIGxldCBwO1xuICAgIGxldCBpdGVyO1xuXG4gICAgLy8gIFRoaXMgaXMgZGVyaXZlZCBmcm9tIHRoZSBBbGdvbCBwcm9jZWR1cmVzIHRxbDIsIGJ5XG4gICAgLy8gIEJvd2RsZXIsIE1hcnRpbiwgUmVpbnNjaCwgYW5kIFdpbGtpbnNvbiwgSGFuZGJvb2sgZm9yXG4gICAgLy8gIEF1dG8uIENvbXAuLCBWb2wuaWktTGluZWFyIEFsZ2VicmEsIGFuZCB0aGUgY29ycmVzcG9uZGluZ1xuICAgIC8vICBGb3J0cmFuIHN1YnJvdXRpbmUgaW4gRUlTUEFDSy5cblxuICAgIGZvciAoIGkgPSAxOyBpIDwgbjsgaSsrICkge1xuICAgICAgZVsgaSAtIDEgXSA9IGVbIGkgXTtcbiAgICB9XG4gICAgZVsgbiAtIDEgXSA9IDAuMDtcblxuICAgIGxldCBmID0gMC4wO1xuICAgIGxldCB0c3QxID0gMC4wO1xuICAgIGNvbnN0IGVwcyA9IE1hdGgucG93KCAyLjAsIC01Mi4wICk7XG4gICAgZm9yICggbCA9IDA7IGwgPCBuOyBsKysgKSB7XG5cbiAgICAgIC8vIEZpbmQgc21hbGwgc3ViZGlhZ29uYWwgZWxlbWVudFxuXG4gICAgICB0c3QxID0gTWF0aC5tYXgoIHRzdDEsIE1hdGguYWJzKCBkWyBsIF0gKSArIE1hdGguYWJzKCBlWyBsIF0gKSApO1xuICAgICAgbGV0IG0gPSBsO1xuICAgICAgd2hpbGUgKCBtIDwgbiApIHtcbiAgICAgICAgaWYgKCBNYXRoLmFicyggZVsgbSBdICkgPD0gZXBzICogdHN0MSApIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBtKys7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIG0gPT09IGwsIGRbbF0gaXMgYW4gZWlnZW52YWx1ZSxcbiAgICAgIC8vIG90aGVyd2lzZSwgaXRlcmF0ZS5cblxuICAgICAgaWYgKCBtID4gbCApIHtcbiAgICAgICAgaXRlciA9IDA7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpdGVyID0gaXRlciArIDE7ICAvLyAoQ291bGQgY2hlY2sgaXRlcmF0aW9uIGNvdW50IGhlcmUuKVxuXG4gICAgICAgICAgLy8gQ29tcHV0ZSBpbXBsaWNpdCBzaGlmdFxuXG4gICAgICAgICAgZyA9IGRbIGwgXTtcbiAgICAgICAgICBwID0gKCBkWyBsICsgMSBdIC0gZyApIC8gKCAyLjAgKiBlWyBsIF0gKTtcbiAgICAgICAgICBsZXQgciA9IE1hdHJpeC5oeXBvdCggcCwgMS4wICk7XG4gICAgICAgICAgaWYgKCBwIDwgMCApIHtcbiAgICAgICAgICAgIHIgPSAtcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZFsgbCBdID0gZVsgbCBdIC8gKCBwICsgciApO1xuICAgICAgICAgIGRbIGwgKyAxIF0gPSBlWyBsIF0gKiAoIHAgKyByICk7XG4gICAgICAgICAgY29uc3QgZGwxID0gZFsgbCArIDEgXTtcbiAgICAgICAgICBsZXQgaCA9IGcgLSBkWyBsIF07XG4gICAgICAgICAgZm9yICggaSA9IGwgKyAyOyBpIDwgbjsgaSsrICkge1xuICAgICAgICAgICAgZFsgaSBdIC09IGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGYgPSBmICsgaDtcblxuICAgICAgICAgIC8vIEltcGxpY2l0IFFMIHRyYW5zZm9ybWF0aW9uLlxuXG4gICAgICAgICAgcCA9IGRbIG0gXTtcbiAgICAgICAgICBsZXQgYyA9IDEuMDtcbiAgICAgICAgICBsZXQgYzIgPSBjO1xuICAgICAgICAgIGxldCBjMyA9IGM7XG4gICAgICAgICAgY29uc3QgZWwxID0gZVsgbCArIDEgXTtcbiAgICAgICAgICBsZXQgcyA9IDAuMDtcbiAgICAgICAgICBsZXQgczIgPSAwLjA7XG4gICAgICAgICAgZm9yICggaSA9IG0gLSAxOyBpID49IGw7IGktLSApIHtcbiAgICAgICAgICAgIGMzID0gYzI7XG4gICAgICAgICAgICBjMiA9IGM7XG4gICAgICAgICAgICBzMiA9IHM7XG4gICAgICAgICAgICBnID0gYyAqIGVbIGkgXTtcbiAgICAgICAgICAgIGggPSBjICogcDtcbiAgICAgICAgICAgIHIgPSBNYXRyaXguaHlwb3QoIHAsIGVbIGkgXSApO1xuICAgICAgICAgICAgZVsgaSArIDEgXSA9IHMgKiByO1xuICAgICAgICAgICAgcyA9IGVbIGkgXSAvIHI7XG4gICAgICAgICAgICBjID0gcCAvIHI7XG4gICAgICAgICAgICBwID0gYyAqIGRbIGkgXSAtIHMgKiBnO1xuICAgICAgICAgICAgZFsgaSArIDEgXSA9IGggKyBzICogKCBjICogZyArIHMgKiBkWyBpIF0gKTtcblxuICAgICAgICAgICAgLy8gQWNjdW11bGF0ZSB0cmFuc2Zvcm1hdGlvbi5cblxuICAgICAgICAgICAgZm9yICggayA9IDA7IGsgPCBuOyBrKysgKSB7XG4gICAgICAgICAgICAgIGggPSBWWyBrICogbiArICggaSArIDEgKSBdO1xuICAgICAgICAgICAgICBWWyBrICogbiArICggaSArIDEgKSBdID0gcyAqIFZbIGsgKiBuICsgaSBdICsgYyAqIGg7XG4gICAgICAgICAgICAgIFZbIGsgKiBuICsgaSBdID0gYyAqIFZbIGsgKiBuICsgaSBdIC0gcyAqIGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHAgPSAtcyAqIHMyICogYzMgKiBlbDEgKiBlWyBsIF0gLyBkbDE7XG4gICAgICAgICAgZVsgbCBdID0gcyAqIHA7XG4gICAgICAgICAgZFsgbCBdID0gYyAqIHA7XG5cbiAgICAgICAgICAvLyBDaGVjayBmb3IgY29udmVyZ2VuY2UuXG5cbiAgICAgICAgfSB3aGlsZSAoIE1hdGguYWJzKCBlWyBsIF0gKSA+IGVwcyAqIHRzdDEgKTtcbiAgICAgIH1cbiAgICAgIGRbIGwgXSA9IGRbIGwgXSArIGY7XG4gICAgICBlWyBsIF0gPSAwLjA7XG4gICAgfVxuXG4gICAgLy8gU29ydCBlaWdlbnZhbHVlcyBhbmQgY29ycmVzcG9uZGluZyB2ZWN0b3JzLlxuXG4gICAgZm9yICggaSA9IDA7IGkgPCBuIC0gMTsgaSsrICkge1xuICAgICAgayA9IGk7XG4gICAgICBwID0gZFsgaSBdO1xuICAgICAgZm9yICggaiA9IGkgKyAxOyBqIDwgbjsgaisrICkge1xuICAgICAgICBpZiAoIGRbIGogXSA8IHAgKSB7XG4gICAgICAgICAgayA9IGo7XG4gICAgICAgICAgcCA9IGRbIGogXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCBrICE9PSBpICkge1xuICAgICAgICBkWyBrIF0gPSBkWyBpIF07XG4gICAgICAgIGRbIGkgXSA9IHA7XG4gICAgICAgIGZvciAoIGogPSAwOyBqIDwgbjsgaisrICkge1xuICAgICAgICAgIHAgPSBWWyBqICogdGhpcy5uICsgaSBdO1xuICAgICAgICAgIFZbIGogKiB0aGlzLm4gKyBpIF0gPSBWWyBqICogbiArIGsgXTtcbiAgICAgICAgICBWWyBqICogbiArIGsgXSA9IHA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogIE5vbnN5bW1ldHJpYyByZWR1Y3Rpb24gdG8gSGVzc2VuYmVyZyBmb3JtLlxuICAgKiAgQHByaXZhdGVcbiAgICovXG4gIG9ydGhlcygpIHtcbiAgICBjb25zdCBuID0gdGhpcy5uO1xuICAgIGNvbnN0IFYgPSB0aGlzLlY7XG4gICAgY29uc3QgSCA9IHRoaXMuSDtcbiAgICBjb25zdCBvcnQgPSB0aGlzLm9ydDtcbiAgICBsZXQgaTtcbiAgICBsZXQgajtcbiAgICBsZXQgbTtcbiAgICBsZXQgZjtcbiAgICBsZXQgZztcblxuICAgIC8vICBUaGlzIGlzIGRlcml2ZWQgZnJvbSB0aGUgQWxnb2wgcHJvY2VkdXJlcyBvcnRoZXMgYW5kIG9ydHJhbixcbiAgICAvLyAgYnkgTWFydGluIGFuZCBXaWxraW5zb24sIEhhbmRib29rIGZvciBBdXRvLiBDb21wLixcbiAgICAvLyAgVm9sLmlpLUxpbmVhciBBbGdlYnJhLCBhbmQgdGhlIGNvcnJlc3BvbmRpbmdcbiAgICAvLyAgRm9ydHJhbiBzdWJyb3V0aW5lcyBpbiBFSVNQQUNLLlxuXG4gICAgY29uc3QgbG93ID0gMDtcbiAgICBjb25zdCBoaWdoID0gbiAtIDE7XG5cbiAgICBmb3IgKCBtID0gbG93ICsgMTsgbSA8PSBoaWdoIC0gMTsgbSsrICkge1xuXG4gICAgICAvLyBTY2FsZSBjb2x1bW4uXG5cbiAgICAgIGxldCBzY2FsZSA9IDAuMDtcbiAgICAgIGZvciAoIGkgPSBtOyBpIDw9IGhpZ2g7IGkrKyApIHtcbiAgICAgICAgc2NhbGUgPSBzY2FsZSArIE1hdGguYWJzKCBIWyBpICogbiArICggbSAtIDEgKSBdICk7XG4gICAgICB9XG4gICAgICBpZiAoIHNjYWxlICE9PSAwLjAgKSB7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSBIb3VzZWhvbGRlciB0cmFuc2Zvcm1hdGlvbi5cblxuICAgICAgICBsZXQgaCA9IDAuMDtcbiAgICAgICAgZm9yICggaSA9IGhpZ2g7IGkgPj0gbTsgaS0tICkge1xuICAgICAgICAgIG9ydFsgaSBdID0gSFsgaSAqIG4gKyAoIG0gLSAxICkgXSAvIHNjYWxlO1xuICAgICAgICAgIGggKz0gb3J0WyBpIF0gKiBvcnRbIGkgXTtcbiAgICAgICAgfVxuICAgICAgICBnID0gTWF0aC5zcXJ0KCBoICk7XG4gICAgICAgIGlmICggb3J0WyBtIF0gPiAwICkge1xuICAgICAgICAgIGcgPSAtZztcbiAgICAgICAgfVxuICAgICAgICBoID0gaCAtIG9ydFsgbSBdICogZztcbiAgICAgICAgb3J0WyBtIF0gPSBvcnRbIG0gXSAtIGc7XG5cbiAgICAgICAgLy8gQXBwbHkgSG91c2Vob2xkZXIgc2ltaWxhcml0eSB0cmFuc2Zvcm1hdGlvblxuICAgICAgICAvLyBIID0gKEktdSp1Jy9oKSpIKihJLXUqdScpL2gpXG5cbiAgICAgICAgZm9yICggaiA9IG07IGogPCBuOyBqKysgKSB7XG4gICAgICAgICAgZiA9IDAuMDtcbiAgICAgICAgICBmb3IgKCBpID0gaGlnaDsgaSA+PSBtOyBpLS0gKSB7XG4gICAgICAgICAgICBmICs9IG9ydFsgaSBdICogSFsgaSAqIHRoaXMubiArIGogXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZiA9IGYgLyBoO1xuICAgICAgICAgIGZvciAoIGkgPSBtOyBpIDw9IGhpZ2g7IGkrKyApIHtcbiAgICAgICAgICAgIEhbIGkgKiB0aGlzLm4gKyBqIF0gLT0gZiAqIG9ydFsgaSBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoIGkgPSAwOyBpIDw9IGhpZ2g7IGkrKyApIHtcbiAgICAgICAgICBmID0gMC4wO1xuICAgICAgICAgIGZvciAoIGogPSBoaWdoOyBqID49IG07IGotLSApIHtcbiAgICAgICAgICAgIGYgKz0gb3J0WyBqIF0gKiBIWyBpICogdGhpcy5uICsgaiBdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmID0gZiAvIGg7XG4gICAgICAgICAgZm9yICggaiA9IG07IGogPD0gaGlnaDsgaisrICkge1xuICAgICAgICAgICAgSFsgaSAqIHRoaXMubiArIGogXSAtPSBmICogb3J0WyBqIF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG9ydFsgbSBdID0gc2NhbGUgKiBvcnRbIG0gXTtcbiAgICAgICAgSFsgbSAqIG4gKyAoIG0gLSAxICkgXSA9IHNjYWxlICogZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBY2N1bXVsYXRlIHRyYW5zZm9ybWF0aW9ucyAoQWxnb2wncyBvcnRyYW4pLlxuXG4gICAgZm9yICggaSA9IDA7IGkgPCBuOyBpKysgKSB7XG4gICAgICBmb3IgKCBqID0gMDsgaiA8IG47IGorKyApIHtcbiAgICAgICAgVlsgaSAqIHRoaXMubiArIGogXSA9ICggaSA9PT0gaiA/IDEuMCA6IDAuMCApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoIG0gPSBoaWdoIC0gMTsgbSA+PSBsb3cgKyAxOyBtLS0gKSB7XG4gICAgICBpZiAoIEhbIG0gKiBuICsgKCBtIC0gMSApIF0gIT09IDAuMCApIHtcbiAgICAgICAgZm9yICggaSA9IG0gKyAxOyBpIDw9IGhpZ2g7IGkrKyApIHtcbiAgICAgICAgICBvcnRbIGkgXSA9IEhbIGkgKiBuICsgKCBtIC0gMSApIF07XG4gICAgICAgIH1cbiAgICAgICAgZm9yICggaiA9IG07IGogPD0gaGlnaDsgaisrICkge1xuICAgICAgICAgIGcgPSAwLjA7XG4gICAgICAgICAgZm9yICggaSA9IG07IGkgPD0gaGlnaDsgaSsrICkge1xuICAgICAgICAgICAgZyArPSBvcnRbIGkgXSAqIFZbIGkgKiB0aGlzLm4gKyBqIF07XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIERvdWJsZSBkaXZpc2lvbiBhdm9pZHMgcG9zc2libGUgdW5kZXJmbG93XG4gICAgICAgICAgZyA9ICggZyAvIG9ydFsgbSBdICkgLyBIWyBtICogbiArICggbSAtIDEgKSBdO1xuICAgICAgICAgIGZvciAoIGkgPSBtOyBpIDw9IGhpZ2g7IGkrKyApIHtcbiAgICAgICAgICAgIFZbIGkgKiB0aGlzLm4gKyBqIF0gKz0gZyAqIG9ydFsgaSBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wbGV4IHNjYWxhciBkaXZpc2lvbi5cbiAgICogQHByaXZhdGVcbiAgICpcbiAgICogQHBhcmFtIHsqfSB4clxuICAgKiBAcGFyYW0geyp9IHhpXG4gICAqIEBwYXJhbSB7Kn0geXJcbiAgICogQHBhcmFtIHsqfSB5aVxuICAgKi9cbiAgY2RpdiggeHIsIHhpLCB5ciwgeWkgKSB7XG4gICAgbGV0IHI7XG4gICAgbGV0IGQ7XG4gICAgaWYgKCBNYXRoLmFicyggeXIgKSA+IE1hdGguYWJzKCB5aSApICkge1xuICAgICAgciA9IHlpIC8geXI7XG4gICAgICBkID0geXIgKyByICogeWk7XG4gICAgICB0aGlzLmNkaXZyID0gKCB4ciArIHIgKiB4aSApIC8gZDtcbiAgICAgIHRoaXMuY2RpdmkgPSAoIHhpIC0gciAqIHhyICkgLyBkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHIgPSB5ciAvIHlpO1xuICAgICAgZCA9IHlpICsgciAqIHlyO1xuICAgICAgdGhpcy5jZGl2ciA9ICggciAqIHhyICsgeGkgKSAvIGQ7XG4gICAgICB0aGlzLmNkaXZpID0gKCByICogeGkgLSB4ciApIC8gZDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2RzIGZpbmRzIHRoZSBlaWdlbnZhbHVlcyBhbmQgZWlnZW52ZWN0b3JzXG4gICAqIG9mIGEgcmVhbCB1cHBlciBoZXNzZW5iZXJnIG1hdHJpeCBieSB0aGUgUVIgYWxnb3JpdGhtXG4gICAqXG4gICAqIE5vbnN5bW1ldHJpYyByZWR1Y3Rpb24gZnJvbSBIZXNzZW5iZXJnIHRvIHJlYWwgU2NodXIgZm9ybS5cbiAgICogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUVJfYWxnb3JpdGhtXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBocXIyKCkge1xuICAgIGxldCBuO1xuICAgIGNvbnN0IFYgPSB0aGlzLlY7XG4gICAgY29uc3QgZCA9IHRoaXMuZDtcbiAgICBjb25zdCBlID0gdGhpcy5lO1xuICAgIGNvbnN0IEggPSB0aGlzLkg7XG4gICAgbGV0IGk7XG4gICAgbGV0IGo7XG4gICAgbGV0IGs7XG4gICAgbGV0IGw7XG4gICAgbGV0IG07XG4gICAgbGV0IGl0ZXI7XG5cbiAgICAvLyAgVGhpcyBpcyBkZXJpdmVkIGZyb20gdGhlIEFsZ29sIHByb2NlZHVyZSBocXIyLFxuICAgIC8vICBieSBNYXJ0aW4gYW5kIFdpbGtpbnNvbiwgSGFuZGJvb2sgZm9yIEF1dG8uIENvbXAuLFxuICAgIC8vICBWb2wuaWktTGluZWFyIEFsZ2VicmEsIGFuZCB0aGUgY29ycmVzcG9uZGluZ1xuICAgIC8vICBGb3J0cmFuIHN1YnJvdXRpbmUgaW4gRUlTUEFDSy5cblxuICAgIC8vIEluaXRpYWxpemVcblxuICAgIGNvbnN0IG5uID0gdGhpcy5uO1xuICAgIG4gPSBubiAtIDE7XG4gICAgY29uc3QgbG93ID0gMDtcbiAgICBjb25zdCBoaWdoID0gbm4gLSAxO1xuICAgIGNvbnN0IGVwcyA9IE1hdGgucG93KCAyLjAsIC01Mi4wICk7XG4gICAgbGV0IGV4c2hpZnQgPSAwLjA7XG4gICAgbGV0IHAgPSAwO1xuICAgIGxldCBxID0gMDtcbiAgICBsZXQgciA9IDA7XG4gICAgbGV0IHMgPSAwO1xuICAgIGxldCB6ID0gMDtcbiAgICBsZXQgdDtcbiAgICBsZXQgdztcbiAgICBsZXQgeDtcbiAgICBsZXQgeTtcblxuICAgIC8vIFN0b3JlIHJvb3RzIGlzb2xhdGVkIGJ5IGJhbGFuYyBhbmQgY29tcHV0ZSBtYXRyaXggbm9ybVxuXG4gICAgbGV0IG5vcm0gPSAwLjA7XG4gICAgZm9yICggaSA9IDA7IGkgPCBubjsgaSsrICkge1xuICAgICAgaWYgKCBpIDwgbG93IHx8IGkgPiBoaWdoICkge1xuICAgICAgICBkWyBpIF0gPSBIWyBpICogbiArIGkgXTtcbiAgICAgICAgZVsgaSBdID0gMC4wO1xuICAgICAgfVxuICAgICAgZm9yICggaiA9IE1hdGgubWF4KCBpIC0gMSwgMCApOyBqIDwgbm47IGorKyApIHtcbiAgICAgICAgbm9ybSA9IG5vcm0gKyBNYXRoLmFicyggSFsgaSAqIHRoaXMubiArIGogXSApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE91dGVyIGxvb3Agb3ZlciBlaWdlbnZhbHVlIGluZGV4XG5cbiAgICBpdGVyID0gMDtcbiAgICB3aGlsZSAoIG4gPj0gbG93ICkge1xuXG4gICAgICAvLyBMb29rIGZvciBzaW5nbGUgc21hbGwgc3ViLWRpYWdvbmFsIGVsZW1lbnRcblxuICAgICAgbCA9IG47XG4gICAgICB3aGlsZSAoIGwgPiBsb3cgKSB7XG4gICAgICAgIHMgPSBNYXRoLmFicyggSFsgKCBsIC0gMSApICogbiArICggbCAtIDEgKSBdICkgKyBNYXRoLmFicyggSFsgbCAqIG4gKyBsIF0gKTtcbiAgICAgICAgaWYgKCBzID09PSAwLjAgKSB7XG4gICAgICAgICAgcyA9IG5vcm07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCBNYXRoLmFicyggSFsgbCAqIG4gKyAoIGwgLSAxICkgXSApIDwgZXBzICogcyApIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBsLS07XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIGZvciBjb252ZXJnZW5jZVxuICAgICAgLy8gT25lIHJvb3QgZm91bmRcblxuICAgICAgaWYgKCBsID09PSBuICkge1xuICAgICAgICBIWyBuICogbiArIG4gXSA9IEhbIG4gKiBuICsgbiBdICsgZXhzaGlmdDtcbiAgICAgICAgZFsgbiBdID0gSFsgbiAqIG4gKyBuIF07XG4gICAgICAgIGVbIG4gXSA9IDAuMDtcbiAgICAgICAgbi0tO1xuICAgICAgICBpdGVyID0gMDtcblxuICAgICAgICAvLyBUd28gcm9vdHMgZm91bmRcblxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoIGwgPT09IG4gLSAxICkge1xuICAgICAgICB3ID0gSFsgbiAqIG4gKyBuIC0gMSBdICogSFsgKCBuIC0gMSApICogbiArIG4gXTtcbiAgICAgICAgcCA9ICggSFsgKCBuIC0gMSApICogbiArICggbiAtIDEgKSBdIC0gSFsgbiAqIG4gKyBuIF0gKSAvIDIuMDtcbiAgICAgICAgcSA9IHAgKiBwICsgdztcbiAgICAgICAgeiA9IE1hdGguc3FydCggTWF0aC5hYnMoIHEgKSApO1xuICAgICAgICBIWyBuICogbiArIG4gXSA9IEhbIG4gKiBuICsgbiBdICsgZXhzaGlmdDtcbiAgICAgICAgSFsgKCBuIC0gMSApICogbiArICggbiAtIDEgKSBdID0gSFsgKCBuIC0gMSApICogbiArICggbiAtIDEgKSBdICsgZXhzaGlmdDtcbiAgICAgICAgeCA9IEhbIG4gKiBuICsgbiBdO1xuXG4gICAgICAgIC8vIFJlYWwgcGFpclxuXG4gICAgICAgIGlmICggcSA+PSAwICkge1xuICAgICAgICAgIGlmICggcCA+PSAwICkge1xuICAgICAgICAgICAgeiA9IHAgKyB6O1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHogPSBwIC0gejtcbiAgICAgICAgICB9XG4gICAgICAgICAgZFsgbiAtIDEgXSA9IHggKyB6O1xuICAgICAgICAgIGRbIG4gXSA9IGRbIG4gLSAxIF07XG4gICAgICAgICAgaWYgKCB6ICE9PSAwLjAgKSB7XG4gICAgICAgICAgICBkWyBuIF0gPSB4IC0gdyAvIHo7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVbIG4gLSAxIF0gPSAwLjA7XG4gICAgICAgICAgZVsgbiBdID0gMC4wO1xuICAgICAgICAgIHggPSBIWyBuICogbiArIG4gLSAxIF07XG4gICAgICAgICAgcyA9IE1hdGguYWJzKCB4ICkgKyBNYXRoLmFicyggeiApO1xuICAgICAgICAgIHAgPSB4IC8gcztcbiAgICAgICAgICBxID0geiAvIHM7XG4gICAgICAgICAgciA9IE1hdGguc3FydCggcCAqIHAgKyBxICogcSApO1xuICAgICAgICAgIHAgPSBwIC8gcjtcbiAgICAgICAgICBxID0gcSAvIHI7XG5cbiAgICAgICAgICAvLyBSb3cgbW9kaWZpY2F0aW9uXG5cbiAgICAgICAgICBmb3IgKCBqID0gbiAtIDE7IGogPCBubjsgaisrICkge1xuICAgICAgICAgICAgeiA9IEhbICggbiAtIDEgKSAqIG4gKyBqIF07XG4gICAgICAgICAgICBIWyAoIG4gLSAxICkgKiBuICsgaiBdID0gcSAqIHogKyBwICogSFsgbiAqIG4gKyBqIF07XG4gICAgICAgICAgICBIWyBuICogbiArIGogXSA9IHEgKiBIWyBuICogbiArIGogXSAtIHAgKiB6O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIENvbHVtbiBtb2RpZmljYXRpb25cblxuICAgICAgICAgIGZvciAoIGkgPSAwOyBpIDw9IG47IGkrKyApIHtcbiAgICAgICAgICAgIHogPSBIWyBpICogbiArIG4gLSAxIF07XG4gICAgICAgICAgICBIWyBpICogbiArIG4gLSAxIF0gPSBxICogeiArIHAgKiBIWyBpICogbiArIG4gXTtcbiAgICAgICAgICAgIEhbIGkgKiBuICsgbiBdID0gcSAqIEhbIGkgKiBuICsgbiBdIC0gcCAqIHo7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQWNjdW11bGF0ZSB0cmFuc2Zvcm1hdGlvbnNcblxuICAgICAgICAgIGZvciAoIGkgPSBsb3c7IGkgPD0gaGlnaDsgaSsrICkge1xuICAgICAgICAgICAgeiA9IFZbIGkgKiBuICsgbiAtIDEgXTtcbiAgICAgICAgICAgIFZbIGkgKiBuICsgbiAtIDEgXSA9IHEgKiB6ICsgcCAqIFZbIGkgKiBuICsgbiBdO1xuICAgICAgICAgICAgVlsgaSAqIG4gKyBuIF0gPSBxICogVlsgaSAqIG4gKyBuIF0gLSBwICogejtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDb21wbGV4IHBhaXJcblxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRbIG4gLSAxIF0gPSB4ICsgcDtcbiAgICAgICAgICBkWyBuIF0gPSB4ICsgcDtcbiAgICAgICAgICBlWyBuIC0gMSBdID0gejtcbiAgICAgICAgICBlWyBuIF0gPSAtejtcbiAgICAgICAgfVxuICAgICAgICBuID0gbiAtIDI7XG4gICAgICAgIGl0ZXIgPSAwO1xuXG4gICAgICAgIC8vIE5vIGNvbnZlcmdlbmNlIHlldFxuXG4gICAgICB9XG4gICAgICBlbHNlIHtcblxuICAgICAgICAvLyBGb3JtIHNoaWZ0XG5cbiAgICAgICAgeCA9IEhbIG4gKiBuICsgbiBdO1xuICAgICAgICB5ID0gMC4wO1xuICAgICAgICB3ID0gMC4wO1xuICAgICAgICBpZiAoIGwgPCBuICkge1xuICAgICAgICAgIHkgPSBIWyAoIG4gLSAxICkgKiBuICsgKCBuIC0gMSApIF07XG4gICAgICAgICAgdyA9IEhbIG4gKiBuICsgbiAtIDEgXSAqIEhbICggbiAtIDEgKSAqIG4gKyBuIF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXaWxraW5zb24ncyBvcmlnaW5hbCBhZCBob2Mgc2hpZnRcblxuICAgICAgICBpZiAoIGl0ZXIgPT09IDEwICkge1xuICAgICAgICAgIGV4c2hpZnQgKz0geDtcbiAgICAgICAgICBmb3IgKCBpID0gbG93OyBpIDw9IG47IGkrKyApIHtcbiAgICAgICAgICAgIEhbIGkgKiBuICsgaSBdIC09IHg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHMgPSBNYXRoLmFicyggSFsgbiAqIG4gKyBuIC0gMSBdICkgKyBNYXRoLmFicyggSFsgKCBuIC0gMSApICogbiArIG4gLSAyIF0gKTtcbiAgICAgICAgICB4ID0geSA9IDAuNzUgKiBzO1xuICAgICAgICAgIHcgPSAtMC40Mzc1ICogcyAqIHM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNQVRMQUIncyBuZXcgYWQgaG9jIHNoaWZ0XG5cbiAgICAgICAgaWYgKCBpdGVyID09PSAzMCApIHtcbiAgICAgICAgICBzID0gKCB5IC0geCApIC8gMi4wO1xuICAgICAgICAgIHMgPSBzICogcyArIHc7XG4gICAgICAgICAgaWYgKCBzID4gMCApIHtcbiAgICAgICAgICAgIHMgPSBNYXRoLnNxcnQoIHMgKTtcbiAgICAgICAgICAgIGlmICggeSA8IHggKSB7XG4gICAgICAgICAgICAgIHMgPSAtcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHMgPSB4IC0gdyAvICggKCB5IC0geCApIC8gMi4wICsgcyApO1xuICAgICAgICAgICAgZm9yICggaSA9IGxvdzsgaSA8PSBuOyBpKysgKSB7XG4gICAgICAgICAgICAgIEhbIGkgKiBuICsgaSBdIC09IHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleHNoaWZ0ICs9IHM7XG4gICAgICAgICAgICB4ID0geSA9IHcgPSAwLjk2NDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpdGVyID0gaXRlciArIDE7ICAgLy8gKENvdWxkIGNoZWNrIGl0ZXJhdGlvbiBjb3VudCBoZXJlLilcblxuICAgICAgICAvLyBMb29rIGZvciB0d28gY29uc2VjdXRpdmUgc21hbGwgc3ViLWRpYWdvbmFsIGVsZW1lbnRzXG5cbiAgICAgICAgbSA9IG4gLSAyO1xuICAgICAgICB3aGlsZSAoIG0gPj0gbCApIHtcbiAgICAgICAgICB6ID0gSFsgbSAqIG4gKyBtIF07XG4gICAgICAgICAgciA9IHggLSB6O1xuICAgICAgICAgIHMgPSB5IC0gejtcbiAgICAgICAgICBwID0gKCByICogcyAtIHcgKSAvIEhbICggbSArIDEgKSAqIG4gKyBtIF0gKyBIWyBtICogbiArIG0gKyAxIF07XG4gICAgICAgICAgcSA9IEhbICggbSArIDEgKSAqIG4gKyBtICsgMSBdIC0geiAtIHIgLSBzO1xuICAgICAgICAgIHIgPSBIWyAoIG0gKyAyICkgKiBuICsgbSArIDEgXTtcbiAgICAgICAgICBzID0gTWF0aC5hYnMoIHAgKSArIE1hdGguYWJzKCBxICkgKyBNYXRoLmFicyggciApO1xuICAgICAgICAgIHAgPSBwIC8gcztcbiAgICAgICAgICBxID0gcSAvIHM7XG4gICAgICAgICAgciA9IHIgLyBzO1xuICAgICAgICAgIGlmICggbSA9PT0gbCApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIE1hdGguYWJzKCBIWyBtICogbiArICggbSAtIDEgKSBdICkgKiAoIE1hdGguYWJzKCBxICkgKyBNYXRoLmFicyggciApICkgPFxuICAgICAgICAgICAgICAgZXBzICogKCBNYXRoLmFicyggcCApICogKCBNYXRoLmFicyggSFsgKCBtIC0gMSApICogbiArIG0gLSAxIF0gKSArIE1hdGguYWJzKCB6ICkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmFicyggSFsgKCBtICsgMSApICogbiArIG0gKyAxIF0gKSApICkgKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgbS0tO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICggaSA9IG0gKyAyOyBpIDw9IG47IGkrKyApIHtcbiAgICAgICAgICBIWyBpICogbiArIGkgLSAyIF0gPSAwLjA7XG4gICAgICAgICAgaWYgKCBpID4gbSArIDIgKSB7XG4gICAgICAgICAgICBIWyBpICogbiArIGkgLSAzIF0gPSAwLjA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRG91YmxlIFFSIHN0ZXAgaW52b2x2aW5nIHJvd3MgbDpuIGFuZCBjb2x1bW5zIG06blxuXG4gICAgICAgIGZvciAoIGsgPSBtOyBrIDw9IG4gLSAxOyBrKysgKSB7XG4gICAgICAgICAgY29uc3Qgbm90bGFzdCA9ICggayAhPT0gbiAtIDEgKTtcbiAgICAgICAgICBpZiAoIGsgIT09IG0gKSB7XG4gICAgICAgICAgICBwID0gSFsgayAqIG4gKyBrIC0gMSBdO1xuICAgICAgICAgICAgcSA9IEhbICggayArIDEgKSAqIG4gKyBrIC0gMSBdO1xuICAgICAgICAgICAgciA9ICggbm90bGFzdCA/IEhbICggayArIDIgKSAqIG4gKyBrIC0gMSBdIDogMC4wICk7XG4gICAgICAgICAgICB4ID0gTWF0aC5hYnMoIHAgKSArIE1hdGguYWJzKCBxICkgKyBNYXRoLmFicyggciApO1xuICAgICAgICAgICAgaWYgKCB4ICE9PSAwLjAgKSB7XG4gICAgICAgICAgICAgIHAgPSBwIC8geDtcbiAgICAgICAgICAgICAgcSA9IHEgLyB4O1xuICAgICAgICAgICAgICByID0gciAvIHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICggeCA9PT0gMC4wICkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHMgPSBNYXRoLnNxcnQoIHAgKiBwICsgcSAqIHEgKyByICogciApO1xuICAgICAgICAgIGlmICggcCA8IDAgKSB7XG4gICAgICAgICAgICBzID0gLXM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICggcyAhPT0gMCApIHtcbiAgICAgICAgICAgIGlmICggayAhPT0gbSApIHtcbiAgICAgICAgICAgICAgSFsgayAqIG4gKyBrIC0gMSBdID0gLXMgKiB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIGwgIT09IG0gKSB7XG4gICAgICAgICAgICAgIEhbIGsgKiBuICsgayAtIDEgXSA9IC1IWyBrICogbiArIGsgLSAxIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwID0gcCArIHM7XG4gICAgICAgICAgICB4ID0gcCAvIHM7XG4gICAgICAgICAgICB5ID0gcSAvIHM7XG4gICAgICAgICAgICB6ID0gciAvIHM7XG4gICAgICAgICAgICBxID0gcSAvIHA7XG4gICAgICAgICAgICByID0gciAvIHA7XG5cbiAgICAgICAgICAgIC8vIFJvdyBtb2RpZmljYXRpb25cblxuICAgICAgICAgICAgZm9yICggaiA9IGs7IGogPCBubjsgaisrICkge1xuICAgICAgICAgICAgICBwID0gSFsgayAqIG4gKyBqIF0gKyBxICogSFsgKCBrICsgMSApICogbiArIGogXTtcbiAgICAgICAgICAgICAgaWYgKCBub3RsYXN0ICkge1xuICAgICAgICAgICAgICAgIHAgPSBwICsgciAqIEhbICggayArIDIgKSAqIG4gKyBqIF07XG4gICAgICAgICAgICAgICAgSFsgKCBrICsgMiApICogbiArIGogXSA9IEhbICggayArIDIgKSAqIG4gKyBqIF0gLSBwICogejtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBIWyBrICogbiArIGogXSA9IEhbIGsgKiBuICsgaiBdIC0gcCAqIHg7XG4gICAgICAgICAgICAgIEhbICggayArIDEgKSAqIG4gKyBqIF0gPSBIWyAoIGsgKyAxICkgKiBuICsgaiBdIC0gcCAqIHk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENvbHVtbiBtb2RpZmljYXRpb25cblxuICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPD0gTWF0aC5taW4oIG4sIGsgKyAzICk7IGkrKyApIHtcbiAgICAgICAgICAgICAgcCA9IHggKiBIWyBpICogbiArIGsgXSArIHkgKiBIWyBpICogbiArIGsgKyAxIF07XG4gICAgICAgICAgICAgIGlmICggbm90bGFzdCApIHtcbiAgICAgICAgICAgICAgICBwID0gcCArIHogKiBIWyBpICogbiArIGsgKyAyIF07XG4gICAgICAgICAgICAgICAgSFsgaSAqIG4gKyBrICsgMiBdID0gSFsgaSAqIG4gKyBrICsgMiBdIC0gcCAqIHI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgSFsgaSAqIG4gKyBrIF0gPSBIWyBpICogbiArIGsgXSAtIHA7XG4gICAgICAgICAgICAgIEhbIGkgKiBuICsgayArIDEgXSA9IEhbIGkgKiBuICsgayArIDEgXSAtIHAgKiBxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBY2N1bXVsYXRlIHRyYW5zZm9ybWF0aW9uc1xuXG4gICAgICAgICAgICBmb3IgKCBpID0gbG93OyBpIDw9IGhpZ2g7IGkrKyApIHtcbiAgICAgICAgICAgICAgcCA9IHggKiBWWyBpICogbiArIGsgXSArIHkgKiBWWyBpICogbiArIGsgKyAxIF07XG4gICAgICAgICAgICAgIGlmICggbm90bGFzdCApIHtcbiAgICAgICAgICAgICAgICBwID0gcCArIHogKiBWWyBpICogbiArIGsgKyAyIF07XG4gICAgICAgICAgICAgICAgVlsgaSAqIG4gKyBrICsgMiBdID0gVlsgaSAqIG4gKyBrICsgMiBdIC0gcCAqIHI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgVlsgaSAqIG4gKyBrIF0gPSBWWyBpICogbiArIGsgXSAtIHA7XG4gICAgICAgICAgICAgIFZbIGkgKiBuICsgayArIDEgXSA9IFZbIGkgKiBuICsgayArIDEgXSAtIHAgKiBxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gIC8vIChzICE9PSAwKVxuICAgICAgICB9ICAvLyBrIGxvb3BcbiAgICAgIH0gIC8vIGNoZWNrIGNvbnZlcmdlbmNlXG4gICAgfSAgLy8gd2hpbGUgKG4gPj0gbG93KVxuXG4gICAgLy8gQmFja3N1YnN0aXR1dGUgdG8gZmluZCB2ZWN0b3JzIG9mIHVwcGVyIHRyaWFuZ3VsYXIgZm9ybVxuXG4gICAgaWYgKCBub3JtID09PSAwLjAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICggbiA9IG5uIC0gMTsgbiA+PSAwOyBuLS0gKSB7XG4gICAgICBwID0gZFsgbiBdO1xuICAgICAgcSA9IGVbIG4gXTtcblxuICAgICAgLy8gUmVhbCB2ZWN0b3JcblxuICAgICAgaWYgKCBxID09PSAwICkge1xuICAgICAgICBsID0gbjtcbiAgICAgICAgSFsgbiAqIG4gKyBuIF0gPSAxLjA7XG4gICAgICAgIGZvciAoIGkgPSBuIC0gMTsgaSA+PSAwOyBpLS0gKSB7XG4gICAgICAgICAgdyA9IEhbIGkgKiBuICsgaSBdIC0gcDtcbiAgICAgICAgICByID0gMC4wO1xuICAgICAgICAgIGZvciAoIGogPSBsOyBqIDw9IG47IGorKyApIHtcbiAgICAgICAgICAgIHIgPSByICsgSFsgaSAqIHRoaXMubiArIGogXSAqIEhbIGogKiBuICsgbiBdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIGVbIGkgXSA8IDAuMCApIHtcbiAgICAgICAgICAgIHogPSB3O1xuICAgICAgICAgICAgcyA9IHI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbCA9IGk7XG4gICAgICAgICAgICBpZiAoIGVbIGkgXSA9PT0gMC4wICkge1xuICAgICAgICAgICAgICBpZiAoIHcgIT09IDAuMCApIHtcbiAgICAgICAgICAgICAgICBIWyBpICogbiArIG4gXSA9IC1yIC8gdztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBIWyBpICogbiArIG4gXSA9IC1yIC8gKCBlcHMgKiBub3JtICk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBTb2x2ZSByZWFsIGVxdWF0aW9uc1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgeCA9IEhbIGkgKiBuICsgaSArIDEgXTtcbiAgICAgICAgICAgICAgeSA9IEhbICggaSArIDEgKSAqIG4gKyBpIF07XG4gICAgICAgICAgICAgIHEgPSAoIGRbIGkgXSAtIHAgKSAqICggZFsgaSBdIC0gcCApICsgZVsgaSBdICogZVsgaSBdO1xuICAgICAgICAgICAgICB0ID0gKCB4ICogcyAtIHogKiByICkgLyBxO1xuICAgICAgICAgICAgICBIWyBpICogbiArIG4gXSA9IHQ7XG4gICAgICAgICAgICAgIGlmICggTWF0aC5hYnMoIHggKSA+IE1hdGguYWJzKCB6ICkgKSB7XG4gICAgICAgICAgICAgICAgSFsgKCBpICsgMSApICogbiArIG4gXSA9ICggLXIgLSB3ICogdCApIC8geDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBIWyAoIGkgKyAxICkgKiBuICsgbiBdID0gKCAtcyAtIHkgKiB0ICkgLyB6O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE92ZXJmbG93IGNvbnRyb2xcblxuICAgICAgICAgICAgdCA9IE1hdGguYWJzKCBIWyBpICogbiArIG4gXSApO1xuICAgICAgICAgICAgaWYgKCAoIGVwcyAqIHQgKSAqIHQgPiAxICkge1xuICAgICAgICAgICAgICBmb3IgKCBqID0gaTsgaiA8PSBuOyBqKysgKSB7XG4gICAgICAgICAgICAgICAgSFsgaiAqIG4gKyBuIF0gPSBIWyBqICogbiArIG4gXSAvIHQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb21wbGV4IHZlY3RvclxuXG4gICAgICB9XG4gICAgICBlbHNlIGlmICggcSA8IDAgKSB7XG4gICAgICAgIGwgPSBuIC0gMTtcblxuICAgICAgICAvLyBMYXN0IHZlY3RvciBjb21wb25lbnQgaW1hZ2luYXJ5IHNvIG1hdHJpeCBpcyB0cmlhbmd1bGFyXG5cbiAgICAgICAgaWYgKCBNYXRoLmFicyggSFsgbiAqIG4gKyBuIC0gMSBdICkgPiBNYXRoLmFicyggSFsgKCBuIC0gMSApICogbiArIG4gXSApICkge1xuICAgICAgICAgIEhbICggbiAtIDEgKSAqIG4gKyAoIG4gLSAxICkgXSA9IHEgLyBIWyBuICogbiArIG4gLSAxIF07XG4gICAgICAgICAgSFsgKCBuIC0gMSApICogbiArIG4gXSA9IC0oIEhbIG4gKiBuICsgbiBdIC0gcCApIC8gSFsgbiAqIG4gKyBuIC0gMSBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRoaXMuY2RpdiggMC4wLCAtSFsgKCBuIC0gMSApICogbiArIG4gXSwgSFsgKCBuIC0gMSApICogbiArICggbiAtIDEgKSBdIC0gcCwgcSApO1xuICAgICAgICAgIEhbICggbiAtIDEgKSAqIG4gKyAoIG4gLSAxICkgXSA9IHRoaXMuY2RpdnI7XG4gICAgICAgICAgSFsgKCBuIC0gMSApICogbiArIG4gXSA9IHRoaXMuY2Rpdmk7XG4gICAgICAgIH1cbiAgICAgICAgSFsgbiAqIG4gKyBuIC0gMSBdID0gMC4wO1xuICAgICAgICBIWyBuICogbiArIG4gXSA9IDEuMDtcbiAgICAgICAgZm9yICggaSA9IG4gLSAyOyBpID49IDA7IGktLSApIHtcbiAgICAgICAgICBsZXQgcmE7XG4gICAgICAgICAgbGV0IHNhO1xuICAgICAgICAgIGxldCB2cjtcbiAgICAgICAgICBsZXQgdmk7XG4gICAgICAgICAgcmEgPSAwLjA7XG4gICAgICAgICAgc2EgPSAwLjA7XG4gICAgICAgICAgZm9yICggaiA9IGw7IGogPD0gbjsgaisrICkge1xuICAgICAgICAgICAgcmEgPSByYSArIEhbIGkgKiB0aGlzLm4gKyBqIF0gKiBIWyBqICogbiArIG4gLSAxIF07XG4gICAgICAgICAgICBzYSA9IHNhICsgSFsgaSAqIHRoaXMubiArIGogXSAqIEhbIGogKiBuICsgbiBdO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3ID0gSFsgaSAqIG4gKyBpIF0gLSBwO1xuXG4gICAgICAgICAgaWYgKCBlWyBpIF0gPCAwLjAgKSB7XG4gICAgICAgICAgICB6ID0gdztcbiAgICAgICAgICAgIHIgPSByYTtcbiAgICAgICAgICAgIHMgPSBzYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsID0gaTtcbiAgICAgICAgICAgIGlmICggZVsgaSBdID09PSAwICkge1xuICAgICAgICAgICAgICB0aGlzLmNkaXYoIC1yYSwgLXNhLCB3LCBxICk7XG4gICAgICAgICAgICAgIEhbIGkgKiBuICsgbiAtIDEgXSA9IHRoaXMuY2RpdnI7XG4gICAgICAgICAgICAgIEhbIGkgKiBuICsgbiBdID0gdGhpcy5jZGl2aTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuXG4gICAgICAgICAgICAgIC8vIFNvbHZlIGNvbXBsZXggZXF1YXRpb25zXG5cbiAgICAgICAgICAgICAgeCA9IEhbIGkgKiBuICsgaSArIDEgXTtcbiAgICAgICAgICAgICAgeSA9IEhbICggaSArIDEgKSAqIG4gKyBpIF07XG4gICAgICAgICAgICAgIHZyID0gKCBkWyBpIF0gLSBwICkgKiAoIGRbIGkgXSAtIHAgKSArIGVbIGkgXSAqIGVbIGkgXSAtIHEgKiBxO1xuICAgICAgICAgICAgICB2aSA9ICggZFsgaSBdIC0gcCApICogMi4wICogcTtcbiAgICAgICAgICAgICAgaWYgKCB2ciA9PT0gMC4wICYmIHZpID09PSAwLjAgKSB7XG4gICAgICAgICAgICAgICAgdnIgPSBlcHMgKiBub3JtICogKCBNYXRoLmFicyggdyApICsgTWF0aC5hYnMoIHEgKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmFicyggeCApICsgTWF0aC5hYnMoIHkgKSArIE1hdGguYWJzKCB6ICkgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0aGlzLmNkaXYoIHggKiByIC0geiAqIHJhICsgcSAqIHNhLCB4ICogcyAtIHogKiBzYSAtIHEgKiByYSwgdnIsIHZpICk7XG4gICAgICAgICAgICAgIEhbIGkgKiBuICsgbiAtIDEgXSA9IHRoaXMuY2RpdnI7XG4gICAgICAgICAgICAgIEhbIGkgKiBuICsgbiBdID0gdGhpcy5jZGl2aTtcbiAgICAgICAgICAgICAgaWYgKCBNYXRoLmFicyggeCApID4gKCBNYXRoLmFicyggeiApICsgTWF0aC5hYnMoIHEgKSApICkge1xuICAgICAgICAgICAgICAgIEhbICggaSArIDEgKSAqIG4gKyBuIC0gMSBdID0gKCAtcmEgLSB3ICogSFsgaSAqIG4gKyBuIC0gMSBdICsgcSAqIEhbIGkgKiBuICsgbiBdICkgLyB4O1xuICAgICAgICAgICAgICAgIEhbICggaSArIDEgKSAqIG4gKyBuIF0gPSAoIC1zYSAtIHcgKiBIWyBpICogbiArIG4gXSAtIHEgKiBIWyBpICogbiArIG4gLSAxIF0gKSAvIHg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jZGl2KCAtciAtIHkgKiBIWyBpICogbiArIG4gLSAxIF0sIC1zIC0geSAqIEhbIGkgKiBuICsgbiBdLCB6LCBxICk7XG4gICAgICAgICAgICAgICAgSFsgKCBpICsgMSApICogbiArIG4gLSAxIF0gPSB0aGlzLmNkaXZyO1xuICAgICAgICAgICAgICAgIEhbICggaSArIDEgKSAqIG4gKyBuIF0gPSB0aGlzLmNkaXZpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE92ZXJmbG93IGNvbnRyb2xcbiAgICAgICAgICAgIHQgPSBNYXRoLm1heCggTWF0aC5hYnMoIEhbIGkgKiBuICsgbiAtIDEgXSApLCBNYXRoLmFicyggSFsgaSAqIG4gKyBuIF0gKSApO1xuICAgICAgICAgICAgaWYgKCAoIGVwcyAqIHQgKSAqIHQgPiAxICkge1xuICAgICAgICAgICAgICBmb3IgKCBqID0gaTsgaiA8PSBuOyBqKysgKSB7XG4gICAgICAgICAgICAgICAgSFsgaiAqIG4gKyBuIC0gMSBdID0gSFsgaiAqIG4gKyBuIC0gMSBdIC8gdDtcbiAgICAgICAgICAgICAgICBIWyBqICogbiArIG4gXSA9IEhbIGogKiBuICsgbiBdIC8gdDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFZlY3RvcnMgb2YgaXNvbGF0ZWQgcm9vdHNcbiAgICBmb3IgKCBpID0gMDsgaSA8IG5uOyBpKysgKSB7XG4gICAgICBpZiAoIGkgPCBsb3cgfHwgaSA+IGhpZ2ggKSB7XG4gICAgICAgIGZvciAoIGogPSBpOyBqIDwgbm47IGorKyApIHtcbiAgICAgICAgICBWWyBpICogdGhpcy5uICsgaiBdID0gSFsgaSAqIHRoaXMubiArIGogXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEJhY2sgdHJhbnNmb3JtYXRpb24gdG8gZ2V0IGVpZ2VudmVjdG9ycyBvZiBvcmlnaW5hbCBtYXRyaXhcbiAgICBmb3IgKCBqID0gbm4gLSAxOyBqID49IGxvdzsgai0tICkge1xuICAgICAgZm9yICggaSA9IGxvdzsgaSA8PSBoaWdoOyBpKysgKSB7XG4gICAgICAgIHogPSAwLjA7XG4gICAgICAgIGZvciAoIGsgPSBsb3c7IGsgPD0gTWF0aC5taW4oIGosIGhpZ2ggKTsgaysrICkge1xuICAgICAgICAgIHogPSB6ICsgVlsgaSAqIG4gKyBrIF0gKiBIWyBrICogbiArIGogXTtcbiAgICAgICAgfVxuICAgICAgICBWWyBpICogdGhpcy5uICsgaiBdID0gejtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZG90LnJlZ2lzdGVyKCAnRWlnZW52YWx1ZURlY29tcG9zaXRpb24nLCBFaWdlbnZhbHVlRGVjb21wb3NpdGlvbiApO1xuXG5leHBvcnQgZGVmYXVsdCBFaWdlbnZhbHVlRGVjb21wb3NpdGlvbjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/LinearFunction.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * Function for doing a linear mapping between two domains ('a' and 'b').
 * <p>
 * Example usage:
 * <code>
 * var f = new LinearFunction( 0, 100, 0, 200 );
 * f.evaluate( 50 ); // 100
 * f.inverse( 100 ); // 50
 * </code>
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */



class LinearFunction {
  /**
   * @param a1
   * @param a2
   * @param b1
   * @param b2
   * @param clamp - clamp the result to the provided ranges, false by default
   */
  constructor(a1, a2, b1, b2, clamp = false) {
    this.a1 = a1;
    this.a2 = a2;
    this.b1 = b1;
    this.b2 = b2;
    this.clamp = clamp;
  }

  /**
   * Maps from a to b.
   */
  evaluate(a3) {
    return map(this.a1, this.a2, this.b1, this.b2, a3, this.clamp);
  }

  /**
   * Maps from b to a
   */
  inverse(b3) {
    return map(this.b1, this.b2, this.a1, this.a2, b3, this.clamp);
  }
}

/**
 * Linearly interpolate two points and evaluate the line equation for a third point.
 * f( a1 ) = b1, f( a2 ) = b2, f( a3 ) = <linear mapped value>
 * Optionally clamp the result to the range [b1,b2].
 */
const map = (a1, a2, b1, b2, a3, clamp) => {
  let b3 = js_Utils.linear(a1, a2, b1, b2, a3);
  if (clamp) {
    const max = Math.max(b1, b2);
    const min = Math.min(b1, b2);
    b3 = js_Utils.clamp(b3, min, max);
  }
  return b3;
};
js_dot.register('LinearFunction', LinearFunction);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsImRvdCIsIkxpbmVhckZ1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJhMSIsImEyIiwiYjEiLCJiMiIsImNsYW1wIiwiZXZhbHVhdGUiLCJhMyIsIm1hcCIsImludmVyc2UiLCJiMyIsImxpbmVhciIsIm1heCIsIk1hdGgiLCJtaW4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxpbmVhckZ1bmN0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIEZ1bmN0aW9uIGZvciBkb2luZyBhIGxpbmVhciBtYXBwaW5nIGJldHdlZW4gdHdvIGRvbWFpbnMgKCdhJyBhbmQgJ2InKS5cbiAqIDxwPlxuICogRXhhbXBsZSB1c2FnZTpcbiAqIDxjb2RlPlxuICogdmFyIGYgPSBuZXcgTGluZWFyRnVuY3Rpb24oIDAsIDEwMCwgMCwgMjAwICk7XG4gKiBmLmV2YWx1YXRlKCA1MCApOyAvLyAxMDBcbiAqIGYuaW52ZXJzZSggMTAwICk7IC8vIDUwXG4gKiA8L2NvZGU+XG4gKlxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcbiAqL1xuXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi9VdGlscy5qcyc7XG5pbXBvcnQgZG90IGZyb20gJy4vZG90LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGluZWFyRnVuY3Rpb24ge1xuICBwcml2YXRlIGExOiBudW1iZXI7XG4gIHByaXZhdGUgYTI6IG51bWJlcjtcbiAgcHJpdmF0ZSBiMTogbnVtYmVyO1xuICBwcml2YXRlIGIyOiBudW1iZXI7XG4gIHByaXZhdGUgY2xhbXA6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBhMVxuICAgKiBAcGFyYW0gYTJcbiAgICogQHBhcmFtIGIxXG4gICAqIEBwYXJhbSBiMlxuICAgKiBAcGFyYW0gY2xhbXAgLSBjbGFtcCB0aGUgcmVzdWx0IHRvIHRoZSBwcm92aWRlZCByYW5nZXMsIGZhbHNlIGJ5IGRlZmF1bHRcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYTE6IG51bWJlciwgYTI6IG51bWJlciwgYjE6IG51bWJlciwgYjI6IG51bWJlciwgY2xhbXAgPSBmYWxzZSApIHtcbiAgICB0aGlzLmExID0gYTE7XG4gICAgdGhpcy5hMiA9IGEyO1xuICAgIHRoaXMuYjEgPSBiMTtcbiAgICB0aGlzLmIyID0gYjI7XG4gICAgdGhpcy5jbGFtcCA9IGNsYW1wO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcHMgZnJvbSBhIHRvIGIuXG4gICAqL1xuICBwdWJsaWMgZXZhbHVhdGUoIGEzOiBudW1iZXIgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gbWFwKCB0aGlzLmExLCB0aGlzLmEyLCB0aGlzLmIxLCB0aGlzLmIyLCBhMywgdGhpcy5jbGFtcCApO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcHMgZnJvbSBiIHRvIGFcbiAgICovXG4gIHB1YmxpYyBpbnZlcnNlKCBiMzogbnVtYmVyICk6IG51bWJlciB7XG4gICAgcmV0dXJuIG1hcCggdGhpcy5iMSwgdGhpcy5iMiwgdGhpcy5hMSwgdGhpcy5hMiwgYjMsIHRoaXMuY2xhbXAgKTtcbiAgfVxufVxuXG4vKipcbiAqIExpbmVhcmx5IGludGVycG9sYXRlIHR3byBwb2ludHMgYW5kIGV2YWx1YXRlIHRoZSBsaW5lIGVxdWF0aW9uIGZvciBhIHRoaXJkIHBvaW50LlxuICogZiggYTEgKSA9IGIxLCBmKCBhMiApID0gYjIsIGYoIGEzICkgPSA8bGluZWFyIG1hcHBlZCB2YWx1ZT5cbiAqIE9wdGlvbmFsbHkgY2xhbXAgdGhlIHJlc3VsdCB0byB0aGUgcmFuZ2UgW2IxLGIyXS5cbiAqL1xuY29uc3QgbWFwID0gKCBhMTogbnVtYmVyLCBhMjogbnVtYmVyLCBiMTogbnVtYmVyLCBiMjogbnVtYmVyLCBhMzogbnVtYmVyLCBjbGFtcDogYm9vbGVhbiApOiBudW1iZXIgPT4ge1xuICBsZXQgYjMgPSBVdGlscy5saW5lYXIoIGExLCBhMiwgYjEsIGIyLCBhMyApO1xuICBpZiAoIGNsYW1wICkge1xuICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KCBiMSwgYjIgKTtcbiAgICBjb25zdCBtaW4gPSBNYXRoLm1pbiggYjEsIGIyICk7XG4gICAgYjMgPSBVdGlscy5jbGFtcCggYjMsIG1pbiwgbWF4ICk7XG4gIH1cbiAgcmV0dXJuIGIzO1xufTtcblxuZG90LnJlZ2lzdGVyKCAnTGluZWFyRnVuY3Rpb24nLCBMaW5lYXJGdW5jdGlvbiApO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLFlBQVk7QUFDOUIsT0FBT0MsR0FBRyxNQUFNLFVBQVU7QUFFMUIsZUFBZSxNQUFNQyxjQUFjLENBQUM7RUFPbEM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0MsV0FBV0EsQ0FBRUMsRUFBVSxFQUFFQyxFQUFVLEVBQUVDLEVBQVUsRUFBRUMsRUFBVSxFQUFFQyxLQUFLLEdBQUcsS0FBSyxFQUFHO0lBQ2xGLElBQUksQ0FBQ0osRUFBRSxHQUFHQSxFQUFFO0lBQ1osSUFBSSxDQUFDQyxFQUFFLEdBQUdBLEVBQUU7SUFDWixJQUFJLENBQUNDLEVBQUUsR0FBR0EsRUFBRTtJQUNaLElBQUksQ0FBQ0MsRUFBRSxHQUFHQSxFQUFFO0lBQ1osSUFBSSxDQUFDQyxLQUFLLEdBQUdBLEtBQUs7RUFDcEI7O0VBRUE7QUFDRjtBQUNBO0VBQ1NDLFFBQVFBLENBQUVDLEVBQVUsRUFBVztJQUNwQyxPQUFPQyxHQUFHLENBQUUsSUFBSSxDQUFDUCxFQUFFLEVBQUUsSUFBSSxDQUFDQyxFQUFFLEVBQUUsSUFBSSxDQUFDQyxFQUFFLEVBQUUsSUFBSSxDQUFDQyxFQUFFLEVBQUVHLEVBQUUsRUFBRSxJQUFJLENBQUNGLEtBQUssQ0FBRTtFQUNsRTs7RUFFQTtBQUNGO0FBQ0E7RUFDU0ksT0FBT0EsQ0FBRUMsRUFBVSxFQUFXO0lBQ25DLE9BQU9GLEdBQUcsQ0FBRSxJQUFJLENBQUNMLEVBQUUsRUFBRSxJQUFJLENBQUNDLEVBQUUsRUFBRSxJQUFJLENBQUNILEVBQUUsRUFBRSxJQUFJLENBQUNDLEVBQUUsRUFBRVEsRUFBRSxFQUFFLElBQUksQ0FBQ0wsS0FBSyxDQUFFO0VBQ2xFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1HLEdBQUcsR0FBR0EsQ0FBRVAsRUFBVSxFQUFFQyxFQUFVLEVBQUVDLEVBQVUsRUFBRUMsRUFBVSxFQUFFRyxFQUFVLEVBQUVGLEtBQWMsS0FBYztFQUNwRyxJQUFJSyxFQUFFLEdBQUdiLEtBQUssQ0FBQ2MsTUFBTSxDQUFFVixFQUFFLEVBQUVDLEVBQUUsRUFBRUMsRUFBRSxFQUFFQyxFQUFFLEVBQUVHLEVBQUUsQ0FBRTtFQUMzQyxJQUFLRixLQUFLLEVBQUc7SUFDWCxNQUFNTyxHQUFHLEdBQUdDLElBQUksQ0FBQ0QsR0FBRyxDQUFFVCxFQUFFLEVBQUVDLEVBQUUsQ0FBRTtJQUM5QixNQUFNVSxHQUFHLEdBQUdELElBQUksQ0FBQ0MsR0FBRyxDQUFFWCxFQUFFLEVBQUVDLEVBQUUsQ0FBRTtJQUM5Qk0sRUFBRSxHQUFHYixLQUFLLENBQUNRLEtBQUssQ0FBRUssRUFBRSxFQUFFSSxHQUFHLEVBQUVGLEdBQUcsQ0FBRTtFQUNsQztFQUNBLE9BQU9GLEVBQUU7QUFDWCxDQUFDO0FBRURaLEdBQUcsQ0FBQ2lCLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRWhCLGNBQWMsQ0FBRSJ9
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Matrix4.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * 4-dimensional Matrix
 *
 * TODO: consider adding affine flag if it will help performance (a la Matrix3)
 * TODO: get rotation angles
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

/* eslint-disable bad-sim-text */





const Float32Array = window.Float32Array || Array;
class Matrix4 {
  /**
   * @param {number} [v00]
   * @param {number} [v01]
   * @param {number} [v02]
   * @param {number} [v03]
   * @param {number} [v10]
   * @param {number} [v11]
   * @param {number} [v12]
   * @param {number} [v13]
   * @param {number} [v20]
   * @param {number} [v21]
   * @param {number} [v22]
   * @param {number} [v23]
   * @param {number} [v30]
   * @param {number} [v31]
   * @param {number} [v32]
   * @param {number} [v33]
   * @param {Matrix4.Types|undefined} [type]
   */
  constructor(v00, v01, v02, v03, v10, v11, v12, v13, v20, v21, v22, v23, v30, v31, v32, v33, type) {
    // @public {Float32Array} - entries stored in column-major format
    this.entries = new Float32Array(16);

    // @public {Matrix4.Types}
    this.type = Types.OTHER; // will be set by rowMajor

    this.rowMajor(v00 !== undefined ? v00 : 1, v01 !== undefined ? v01 : 0, v02 !== undefined ? v02 : 0, v03 !== undefined ? v03 : 0, v10 !== undefined ? v10 : 0, v11 !== undefined ? v11 : 1, v12 !== undefined ? v12 : 0, v13 !== undefined ? v13 : 0, v20 !== undefined ? v20 : 0, v21 !== undefined ? v21 : 0, v22 !== undefined ? v22 : 1, v23 !== undefined ? v23 : 0, v30 !== undefined ? v30 : 0, v31 !== undefined ? v31 : 0, v32 !== undefined ? v32 : 0, v33 !== undefined ? v33 : 1, type);
  }

  /**
   * Sets all entries of the matrix in row-major order.
   * @public
   *
   * @param {number} v00
   * @param {number} v01
   * @param {number} v02
   * @param {number} v03
   * @param {number} v10
   * @param {number} v11
   * @param {number} v12
   * @param {number} v13
   * @param {number} v20
   * @param {number} v21
   * @param {number} v22
   * @param {number} v23
   * @param {number} v30
   * @param {number} v31
   * @param {number} v32
   * @param {number} v33
   * @param {Matrix4.Types|undefined} [type]
   * @returns {Matrix4} - Self reference
   */
  rowMajor(v00, v01, v02, v03, v10, v11, v12, v13, v20, v21, v22, v23, v30, v31, v32, v33, type) {
    this.entries[0] = v00;
    this.entries[1] = v10;
    this.entries[2] = v20;
    this.entries[3] = v30;
    this.entries[4] = v01;
    this.entries[5] = v11;
    this.entries[6] = v21;
    this.entries[7] = v31;
    this.entries[8] = v02;
    this.entries[9] = v12;
    this.entries[10] = v22;
    this.entries[11] = v32;
    this.entries[12] = v03;
    this.entries[13] = v13;
    this.entries[14] = v23;
    this.entries[15] = v33;

    // TODO: consider performance of the affine check here
    this.type = type === undefined ? v30 === 0 && v31 === 0 && v32 === 0 && v33 === 1 ? Types.AFFINE : Types.OTHER : type;
    return this;
  }

  /**
   * Sets all entries of the matrix in column-major order.
   * @public
   *
   * @param {*} v00
   * @param {*} v10
   * @param {*} v20
   * @param {*} v30
   * @param {*} v01
   * @param {*} v11
   * @param {*} v21
   * @param {*} v31
   * @param {*} v02
   * @param {*} v12
   * @param {*} v22
   * @param {*} v32
   * @param {*} v03
   * @param {*} v13
   * @param {*} v23
   * @param {*} v33
   * @param {Matrix4.Types|undefined} [type]
   * @returns {Matrix4} - Self reference
   */
  columnMajor(v00, v10, v20, v30, v01, v11, v21, v31, v02, v12, v22, v32, v03, v13, v23, v33, type) {
    return this.rowMajor(v00, v01, v02, v03, v10, v11, v12, v13, v20, v21, v22, v23, v30, v31, v32, v33, type);
  }

  /**
   * Sets this matrix to the value of the passed-in matrix.
   * @public
   *
   * @param {Matrix4} matrix
   * @returns {Matrix4} - Self reference
   */
  set(matrix) {
    return this.rowMajor(matrix.m00(), matrix.m01(), matrix.m02(), matrix.m03(), matrix.m10(), matrix.m11(), matrix.m12(), matrix.m13(), matrix.m20(), matrix.m21(), matrix.m22(), matrix.m23(), matrix.m30(), matrix.m31(), matrix.m32(), matrix.m33(), matrix.type);
  }

  /**
   * Returns the 0,0 entry of this matrix.
   * @public
   *
   * @returns {number}
   */
  m00() {
    return this.entries[0];
  }

  /**
   * Returns the 0,1 entry of this matrix.
   * @public
   *
   * @returns {number}
   */
  m01() {
    return this.entries[4];
  }

  /**
   * Returns the 0,2 entry of this matrix.
   * @public
   *
   * @returns {number}
   */
  m02() {
    return this.entries[8];
  }

  /**
   * Returns the 0,3 entry of this matrix.
   * @public
   *
   * @returns {number}
   */
  m03() {
    return this.entries[12];
  }

  /**
   * Returns the 1,0 entry of this matrix.
   * @public
   *
   * @returns {number}
   */
  m10() {
    return this.entries[1];
  }

  /**
   * Returns the 1,1 entry of this matrix.
   * @public
   *
   * @returns {number}
   */
  m11() {
    return this.entries[5];
  }

  /**
   * Returns the 1,2 entry of this matrix.
   * @public
   *
   * @returns {number}
   */
  m12() {
    return this.entries[9];
  }

  /**
   * Returns the 1,3 entry of this matrix.
   * @public
   *
   * @returns {number}
   */
  m13() {
    return this.entries[13];
  }

  /**
   * Returns the 2,0 entry of this matrix.
   * @public
   *
   * @returns {number}
   */
  m20() {
    return this.entries[2];
  }

  /**
   * Returns the 2,1 entry of this matrix.
   * @public
   *
   * @returns {number}
   */
  m21() {
    return this.entries[6];
  }

  /**
   * Returns the 2,2 entry of this matrix.
   * @public
   *
   * @returns {number}
   */
  m22() {
    return this.entries[10];
  }

  /**
   * Returns the 2,3 entry of this matrix.
   * @public
   *
   * @returns {number}
   */
  m23() {
    return this.entries[14];
  }

  /**
   * Returns the 3,0 entry of this matrix.
   * @public
   *
   * @returns {number}
   */
  m30() {
    return this.entries[3];
  }

  /**
   * Returns the 3,1 entry of this matrix.
   * @public
   *
   * @returns {number}
   */
  m31() {
    return this.entries[7];
  }

  /**
   * Returns the 3,2 entry of this matrix.
   * @public
   *
   * @returns {number}
   */
  m32() {
    return this.entries[11];
  }

  /**
   * Returns the 3,3 entry of this matrix.
   * @public
   *
   * @returns {number}
   */
  m33() {
    return this.entries[15];
  }

  /**
   * Returns whether all of this matrix's entries are finite (non-infinite and non-NaN).
   * @public
   *
   * @returns {boolean}
   */
  isFinite() {
    return isFinite(this.m00()) && isFinite(this.m01()) && isFinite(this.m02()) && isFinite(this.m03()) && isFinite(this.m10()) && isFinite(this.m11()) && isFinite(this.m12()) && isFinite(this.m13()) && isFinite(this.m20()) && isFinite(this.m21()) && isFinite(this.m22()) && isFinite(this.m23()) && isFinite(this.m30()) && isFinite(this.m31()) && isFinite(this.m32()) && isFinite(this.m33());
  }

  /**
   * Returns the 3D translation, assuming multiplication with a homogeneous vector.
   * @public
   *
   * @returns {Vector3}
   */
  getTranslation() {
    return new Vector3(this.m03(), this.m13(), this.m23());
  }
  get translation() {
    return this.getTranslation();
  }

  /**
   * Returns a vector that is equivalent to ( T(1,0,0).magnitude, T(0,1,0).magnitude, T(0,0,1).magnitude )
   * where T is a relative transform.
   * @public
   *
   * @returns {Vector3}
   */
  getScaleVector() {
    const m0003 = this.m00() + this.m03();
    const m1013 = this.m10() + this.m13();
    const m2023 = this.m20() + this.m23();
    const m3033 = this.m30() + this.m33();
    const m0103 = this.m01() + this.m03();
    const m1113 = this.m11() + this.m13();
    const m2123 = this.m21() + this.m23();
    const m3133 = this.m31() + this.m33();
    const m0203 = this.m02() + this.m03();
    const m1213 = this.m12() + this.m13();
    const m2223 = this.m22() + this.m23();
    const m3233 = this.m32() + this.m33();
    return new Vector3(Math.sqrt(m0003 * m0003 + m1013 * m1013 + m2023 * m2023 + m3033 * m3033), Math.sqrt(m0103 * m0103 + m1113 * m1113 + m2123 * m2123 + m3133 * m3133), Math.sqrt(m0203 * m0203 + m1213 * m1213 + m2223 * m2223 + m3233 * m3233));
  }
  get scaleVector() {
    return this.getScaleVector();
  }

  /**
   * Returns the CSS transform string for the associated homogeneous 3d transformation.
   * @public
   *
   * @returns {string}
   */
  getCSSTransform() {
    // See http://www.w3.org/TR/css3-transforms/, particularly Section 13 that discusses the SVG compatibility

    // the inner part of a CSS3 transform, but remember to add the browser-specific parts!
    // NOTE: the toFixed calls are inlined for performance reasons
    return `matrix3d(${this.entries[0].toFixed(20)},${this.entries[1].toFixed(20)},${this.entries[2].toFixed(20)},${this.entries[3].toFixed(20)},${this.entries[4].toFixed(20)},${this.entries[5].toFixed(20)},${this.entries[6].toFixed(20)},${this.entries[7].toFixed(20)},${this.entries[8].toFixed(20)},${this.entries[9].toFixed(20)},${this.entries[10].toFixed(20)},${this.entries[11].toFixed(20)},${this.entries[12].toFixed(20)},${this.entries[13].toFixed(20)},${this.entries[14].toFixed(20)},${this.entries[15].toFixed(20)})`;
  }
  get cssTransform() {
    return this.getCSSTransform();
  }

  /**
   * Returns exact equality with another matrix
   * @public
   *
   * @param {Matrix4} matrix
   * @returns {boolean}
   */
  equals(matrix) {
    return this.m00() === matrix.m00() && this.m01() === matrix.m01() && this.m02() === matrix.m02() && this.m03() === matrix.m03() && this.m10() === matrix.m10() && this.m11() === matrix.m11() && this.m12() === matrix.m12() && this.m13() === matrix.m13() && this.m20() === matrix.m20() && this.m21() === matrix.m21() && this.m22() === matrix.m22() && this.m23() === matrix.m23() && this.m30() === matrix.m30() && this.m31() === matrix.m31() && this.m32() === matrix.m32() && this.m33() === matrix.m33();
  }

  /**
   * Returns equality within a margin of error with another matrix
   * @public
   *
   * @param {Matrix4} matrix
   * @param {number} epsilon
   * @returns {boolean}
   */
  equalsEpsilon(matrix, epsilon) {
    return Math.abs(this.m00() - matrix.m00()) < epsilon && Math.abs(this.m01() - matrix.m01()) < epsilon && Math.abs(this.m02() - matrix.m02()) < epsilon && Math.abs(this.m03() - matrix.m03()) < epsilon && Math.abs(this.m10() - matrix.m10()) < epsilon && Math.abs(this.m11() - matrix.m11()) < epsilon && Math.abs(this.m12() - matrix.m12()) < epsilon && Math.abs(this.m13() - matrix.m13()) < epsilon && Math.abs(this.m20() - matrix.m20()) < epsilon && Math.abs(this.m21() - matrix.m21()) < epsilon && Math.abs(this.m22() - matrix.m22()) < epsilon && Math.abs(this.m23() - matrix.m23()) < epsilon && Math.abs(this.m30() - matrix.m30()) < epsilon && Math.abs(this.m31() - matrix.m31()) < epsilon && Math.abs(this.m32() - matrix.m32()) < epsilon && Math.abs(this.m33() - matrix.m33()) < epsilon;
  }

  /*---------------------------------------------------------------------------*
   * Immutable operations (returning a new matrix)
   *----------------------------------------------------------------------------*/

  /**
   * Returns a copy of this matrix
   * @public
   *
   * @returns {Matrix4}
   */
  copy() {
    return new Matrix4(this.m00(), this.m01(), this.m02(), this.m03(), this.m10(), this.m11(), this.m12(), this.m13(), this.m20(), this.m21(), this.m22(), this.m23(), this.m30(), this.m31(), this.m32(), this.m33(), this.type);
  }

  /**
   * Returns a new matrix, defined by this matrix plus the provided matrix
   * @public
   *
   * @param {Matrix4} matrix
   * @returns {Matrix4}
   */
  plus(matrix) {
    return new Matrix4(this.m00() + matrix.m00(), this.m01() + matrix.m01(), this.m02() + matrix.m02(), this.m03() + matrix.m03(), this.m10() + matrix.m10(), this.m11() + matrix.m11(), this.m12() + matrix.m12(), this.m13() + matrix.m13(), this.m20() + matrix.m20(), this.m21() + matrix.m21(), this.m22() + matrix.m22(), this.m23() + matrix.m23(), this.m30() + matrix.m30(), this.m31() + matrix.m31(), this.m32() + matrix.m32(), this.m33() + matrix.m33());
  }

  /**
   * Returns a new matrix, defined by this matrix plus the provided matrix
   * @public
   *
   * @param {Matrix4} matrix
   * @returns {Matrix4}
   */
  minus(matrix) {
    return new Matrix4(this.m00() - matrix.m00(), this.m01() - matrix.m01(), this.m02() - matrix.m02(), this.m03() - matrix.m03(), this.m10() - matrix.m10(), this.m11() - matrix.m11(), this.m12() - matrix.m12(), this.m13() - matrix.m13(), this.m20() - matrix.m20(), this.m21() - matrix.m21(), this.m22() - matrix.m22(), this.m23() - matrix.m23(), this.m30() - matrix.m30(), this.m31() - matrix.m31(), this.m32() - matrix.m32(), this.m33() - matrix.m33());
  }

  /**
   * Returns a transposed copy of this matrix
   * @public
   *
   * @returns {Matrix4}
   */
  transposed() {
    return new Matrix4(this.m00(), this.m10(), this.m20(), this.m30(), this.m01(), this.m11(), this.m21(), this.m31(), this.m02(), this.m12(), this.m22(), this.m32(), this.m03(), this.m13(), this.m23(), this.m33());
  }

  /**
   * Returns a negated copy of this matrix
   * @public
   *
   * @returns {Matrix3}
   */
  negated() {
    return new Matrix4(-this.m00(), -this.m01(), -this.m02(), -this.m03(), -this.m10(), -this.m11(), -this.m12(), -this.m13(), -this.m20(), -this.m21(), -this.m22(), -this.m23(), -this.m30(), -this.m31(), -this.m32(), -this.m33());
  }

  /**
   * Returns an inverted copy of this matrix
   * @public
   *
   * @returns {Matrix3}
   */
  inverted() {
    let det;
    switch (this.type) {
      case Types.IDENTITY:
        return this;
      case Types.TRANSLATION_3D:
        return new Matrix4(1, 0, 0, -this.m03(), 0, 1, 0, -this.m13(), 0, 0, 1, -this.m23(), 0, 0, 0, 1, Types.TRANSLATION_3D);
      case Types.SCALING:
        return new Matrix4(1 / this.m00(), 0, 0, 0, 0, 1 / this.m11(), 0, 0, 0, 0, 1 / this.m22(), 0, 0, 0, 0, 1 / this.m33(), Types.SCALING);
      case Types.AFFINE:
      case Types.OTHER:
        det = this.getDeterminant();
        if (det !== 0) {
          return new Matrix4((-this.m31() * this.m22() * this.m13() + this.m21() * this.m32() * this.m13() + this.m31() * this.m12() * this.m23() - this.m11() * this.m32() * this.m23() - this.m21() * this.m12() * this.m33() + this.m11() * this.m22() * this.m33()) / det, (this.m31() * this.m22() * this.m03() - this.m21() * this.m32() * this.m03() - this.m31() * this.m02() * this.m23() + this.m01() * this.m32() * this.m23() + this.m21() * this.m02() * this.m33() - this.m01() * this.m22() * this.m33()) / det, (-this.m31() * this.m12() * this.m03() + this.m11() * this.m32() * this.m03() + this.m31() * this.m02() * this.m13() - this.m01() * this.m32() * this.m13() - this.m11() * this.m02() * this.m33() + this.m01() * this.m12() * this.m33()) / det, (this.m21() * this.m12() * this.m03() - this.m11() * this.m22() * this.m03() - this.m21() * this.m02() * this.m13() + this.m01() * this.m22() * this.m13() + this.m11() * this.m02() * this.m23() - this.m01() * this.m12() * this.m23()) / det, (this.m30() * this.m22() * this.m13() - this.m20() * this.m32() * this.m13() - this.m30() * this.m12() * this.m23() + this.m10() * this.m32() * this.m23() + this.m20() * this.m12() * this.m33() - this.m10() * this.m22() * this.m33()) / det, (-this.m30() * this.m22() * this.m03() + this.m20() * this.m32() * this.m03() + this.m30() * this.m02() * this.m23() - this.m00() * this.m32() * this.m23() - this.m20() * this.m02() * this.m33() + this.m00() * this.m22() * this.m33()) / det, (this.m30() * this.m12() * this.m03() - this.m10() * this.m32() * this.m03() - this.m30() * this.m02() * this.m13() + this.m00() * this.m32() * this.m13() + this.m10() * this.m02() * this.m33() - this.m00() * this.m12() * this.m33()) / det, (-this.m20() * this.m12() * this.m03() + this.m10() * this.m22() * this.m03() + this.m20() * this.m02() * this.m13() - this.m00() * this.m22() * this.m13() - this.m10() * this.m02() * this.m23() + this.m00() * this.m12() * this.m23()) / det, (-this.m30() * this.m21() * this.m13() + this.m20() * this.m31() * this.m13() + this.m30() * this.m11() * this.m23() - this.m10() * this.m31() * this.m23() - this.m20() * this.m11() * this.m33() + this.m10() * this.m21() * this.m33()) / det, (this.m30() * this.m21() * this.m03() - this.m20() * this.m31() * this.m03() - this.m30() * this.m01() * this.m23() + this.m00() * this.m31() * this.m23() + this.m20() * this.m01() * this.m33() - this.m00() * this.m21() * this.m33()) / det, (-this.m30() * this.m11() * this.m03() + this.m10() * this.m31() * this.m03() + this.m30() * this.m01() * this.m13() - this.m00() * this.m31() * this.m13() - this.m10() * this.m01() * this.m33() + this.m00() * this.m11() * this.m33()) / det, (this.m20() * this.m11() * this.m03() - this.m10() * this.m21() * this.m03() - this.m20() * this.m01() * this.m13() + this.m00() * this.m21() * this.m13() + this.m10() * this.m01() * this.m23() - this.m00() * this.m11() * this.m23()) / det, (this.m30() * this.m21() * this.m12() - this.m20() * this.m31() * this.m12() - this.m30() * this.m11() * this.m22() + this.m10() * this.m31() * this.m22() + this.m20() * this.m11() * this.m32() - this.m10() * this.m21() * this.m32()) / det, (-this.m30() * this.m21() * this.m02() + this.m20() * this.m31() * this.m02() + this.m30() * this.m01() * this.m22() - this.m00() * this.m31() * this.m22() - this.m20() * this.m01() * this.m32() + this.m00() * this.m21() * this.m32()) / det, (this.m30() * this.m11() * this.m02() - this.m10() * this.m31() * this.m02() - this.m30() * this.m01() * this.m12() + this.m00() * this.m31() * this.m12() + this.m10() * this.m01() * this.m32() - this.m00() * this.m11() * this.m32()) / det, (-this.m20() * this.m11() * this.m02() + this.m10() * this.m21() * this.m02() + this.m20() * this.m01() * this.m12() - this.m00() * this.m21() * this.m12() - this.m10() * this.m01() * this.m22() + this.m00() * this.m11() * this.m22()) / det);
        } else {
          throw new Error('Matrix could not be inverted, determinant === 0');
        }
      default:
        throw new Error(`Matrix4.inverted with unknown type: ${this.type}`);
    }
  }

  /**
   * Returns a matrix, defined by the multiplication of this * matrix.
   * @public
   *
   * @param {Matrix4} matrix
   * @returns {Matrix4} - NOTE: this may be the same matrix!
   */
  timesMatrix(matrix) {
    // I * M === M * I === I (the identity)
    if (this.type === Types.IDENTITY || matrix.type === Types.IDENTITY) {
      return this.type === Types.IDENTITY ? matrix : this;
    }
    if (this.type === matrix.type) {
      // currently two matrices of the same type will result in the same result type
      if (this.type === Types.TRANSLATION_3D) {
        // faster combination of translations
        return new Matrix4(1, 0, 0, this.m03() + matrix.m02(), 0, 1, 0, this.m13() + matrix.m12(), 0, 0, 1, this.m23() + matrix.m23(), 0, 0, 0, 1, Types.TRANSLATION_3D);
      } else if (this.type === Types.SCALING) {
        // faster combination of scaling
        return new Matrix4(this.m00() * matrix.m00(), 0, 0, 0, 0, this.m11() * matrix.m11(), 0, 0, 0, 0, this.m22() * matrix.m22(), 0, 0, 0, 0, 1, Types.SCALING);
      }
    }
    if (this.type !== Types.OTHER && matrix.type !== Types.OTHER) {
      // currently two matrices that are anything but "other" are technically affine, and the result will be affine

      // affine case
      return new Matrix4(this.m00() * matrix.m00() + this.m01() * matrix.m10() + this.m02() * matrix.m20(), this.m00() * matrix.m01() + this.m01() * matrix.m11() + this.m02() * matrix.m21(), this.m00() * matrix.m02() + this.m01() * matrix.m12() + this.m02() * matrix.m22(), this.m00() * matrix.m03() + this.m01() * matrix.m13() + this.m02() * matrix.m23() + this.m03(), this.m10() * matrix.m00() + this.m11() * matrix.m10() + this.m12() * matrix.m20(), this.m10() * matrix.m01() + this.m11() * matrix.m11() + this.m12() * matrix.m21(), this.m10() * matrix.m02() + this.m11() * matrix.m12() + this.m12() * matrix.m22(), this.m10() * matrix.m03() + this.m11() * matrix.m13() + this.m12() * matrix.m23() + this.m13(), this.m20() * matrix.m00() + this.m21() * matrix.m10() + this.m22() * matrix.m20(), this.m20() * matrix.m01() + this.m21() * matrix.m11() + this.m22() * matrix.m21(), this.m20() * matrix.m02() + this.m21() * matrix.m12() + this.m22() * matrix.m22(), this.m20() * matrix.m03() + this.m21() * matrix.m13() + this.m22() * matrix.m23() + this.m23(), 0, 0, 0, 1, Types.AFFINE);
    }

    // general case
    return new Matrix4(this.m00() * matrix.m00() + this.m01() * matrix.m10() + this.m02() * matrix.m20() + this.m03() * matrix.m30(), this.m00() * matrix.m01() + this.m01() * matrix.m11() + this.m02() * matrix.m21() + this.m03() * matrix.m31(), this.m00() * matrix.m02() + this.m01() * matrix.m12() + this.m02() * matrix.m22() + this.m03() * matrix.m32(), this.m00() * matrix.m03() + this.m01() * matrix.m13() + this.m02() * matrix.m23() + this.m03() * matrix.m33(), this.m10() * matrix.m00() + this.m11() * matrix.m10() + this.m12() * matrix.m20() + this.m13() * matrix.m30(), this.m10() * matrix.m01() + this.m11() * matrix.m11() + this.m12() * matrix.m21() + this.m13() * matrix.m31(), this.m10() * matrix.m02() + this.m11() * matrix.m12() + this.m12() * matrix.m22() + this.m13() * matrix.m32(), this.m10() * matrix.m03() + this.m11() * matrix.m13() + this.m12() * matrix.m23() + this.m13() * matrix.m33(), this.m20() * matrix.m00() + this.m21() * matrix.m10() + this.m22() * matrix.m20() + this.m23() * matrix.m30(), this.m20() * matrix.m01() + this.m21() * matrix.m11() + this.m22() * matrix.m21() + this.m23() * matrix.m31(), this.m20() * matrix.m02() + this.m21() * matrix.m12() + this.m22() * matrix.m22() + this.m23() * matrix.m32(), this.m20() * matrix.m03() + this.m21() * matrix.m13() + this.m22() * matrix.m23() + this.m23() * matrix.m33(), this.m30() * matrix.m00() + this.m31() * matrix.m10() + this.m32() * matrix.m20() + this.m33() * matrix.m30(), this.m30() * matrix.m01() + this.m31() * matrix.m11() + this.m32() * matrix.m21() + this.m33() * matrix.m31(), this.m30() * matrix.m02() + this.m31() * matrix.m12() + this.m32() * matrix.m22() + this.m33() * matrix.m32(), this.m30() * matrix.m03() + this.m31() * matrix.m13() + this.m32() * matrix.m23() + this.m33() * matrix.m33());
  }

  /**
   * Returns the multiplication of this matrix times the provided vector
   * @public
   *
   * @param {Vector4} vector4
   * @returns {Vector4}
   */
  timesVector4(vector4) {
    const x = this.m00() * vector4.x + this.m01() * vector4.y + this.m02() * vector4.z + this.m03() * vector4.w;
    const y = this.m10() * vector4.x + this.m11() * vector4.y + this.m12() * vector4.z + this.m13() * vector4.w;
    const z = this.m20() * vector4.x + this.m21() * vector4.y + this.m22() * vector4.z + this.m23() * vector4.w;
    const w = this.m30() * vector4.x + this.m31() * vector4.y + this.m32() * vector4.z + this.m33() * vector4.w;
    return new Vector4(x, y, z, w);
  }

  /**
   * Returns the multiplication of this matrix times the provided vector (treating this matrix as homogeneous, so that
   * it is the technical multiplication of (x,y,z,1)).
   * @public
   *
   * @param {Vector3} vector3
   * @returns {Vector3}
   */
  timesVector3(vector3) {
    return this.timesVector4(vector3.toVector4()).toVector3();
  }

  /**
   * Returns the multiplication of this matrix's transpose times the provided vector
   * @public
   *
   * @param {Vector4} vector4
   * @returns {Vector4}
   */
  timesTransposeVector4(vector4) {
    const x = this.m00() * vector4.x + this.m10() * vector4.y + this.m20() * vector4.z + this.m30() * vector4.w;
    const y = this.m01() * vector4.x + this.m11() * vector4.y + this.m21() * vector4.z + this.m31() * vector4.w;
    const z = this.m02() * vector4.x + this.m12() * vector4.y + this.m22() * vector4.z + this.m32() * vector4.w;
    const w = this.m03() * vector4.x + this.m13() * vector4.y + this.m23() * vector4.z + this.m33() * vector4.w;
    return new Vector4(x, y, z, w);
  }

  /**
   * Returns the multiplication of this matrix's transpose times the provided vector (homogeneous).
   * @public
   *
   * @param {Vector3} vector3
   * @returns {Vector3}
   */
  timesTransposeVector3(vector3) {
    return this.timesTransposeVector4(vector3.toVector4()).toVector3();
  }

  /**
   * Equivalent to the multiplication of (x,y,z,0), ignoring the homogeneous part.
   * @public
   *
   * @param {Vector3} vector3
   * @returns {Vector3}
   */
  timesRelativeVector3(vector3) {
    const x = this.m00() * vector3.x + this.m10() * vector3.y + this.m20() * vector3.z;
    const y = this.m01() * vector3.y + this.m11() * vector3.y + this.m21() * vector3.z;
    const z = this.m02() * vector3.z + this.m12() * vector3.y + this.m22() * vector3.z;
    return new Vector3(x, y, z);
  }

  /**
   * Returns the determinant of this matrix.
   * @public
   *
   * @returns {number}
   */
  getDeterminant() {
    return this.m03() * this.m12() * this.m21() * this.m30() - this.m02() * this.m13() * this.m21() * this.m30() - this.m03() * this.m11() * this.m22() * this.m30() + this.m01() * this.m13() * this.m22() * this.m30() + this.m02() * this.m11() * this.m23() * this.m30() - this.m01() * this.m12() * this.m23() * this.m30() - this.m03() * this.m12() * this.m20() * this.m31() + this.m02() * this.m13() * this.m20() * this.m31() + this.m03() * this.m10() * this.m22() * this.m31() - this.m00() * this.m13() * this.m22() * this.m31() - this.m02() * this.m10() * this.m23() * this.m31() + this.m00() * this.m12() * this.m23() * this.m31() + this.m03() * this.m11() * this.m20() * this.m32() - this.m01() * this.m13() * this.m20() * this.m32() - this.m03() * this.m10() * this.m21() * this.m32() + this.m00() * this.m13() * this.m21() * this.m32() + this.m01() * this.m10() * this.m23() * this.m32() - this.m00() * this.m11() * this.m23() * this.m32() - this.m02() * this.m11() * this.m20() * this.m33() + this.m01() * this.m12() * this.m20() * this.m33() + this.m02() * this.m10() * this.m21() * this.m33() - this.m00() * this.m12() * this.m21() * this.m33() - this.m01() * this.m10() * this.m22() * this.m33() + this.m00() * this.m11() * this.m22() * this.m33();
  }
  get determinant() {
    return this.getDeterminant();
  }

  /**
   * Returns a string form of this object
   * @public
   *
   * @returns {string}
   */
  toString() {
    return `${this.m00()} ${this.m01()} ${this.m02()} ${this.m03()}\n${this.m10()} ${this.m11()} ${this.m12()} ${this.m13()}\n${this.m20()} ${this.m21()} ${this.m22()} ${this.m23()}\n${this.m30()} ${this.m31()} ${this.m32()} ${this.m33()}`;
  }

  /**
   * Makes this matrix effectively immutable to the normal methods (except direct setters?)
   * @public
   *
   * @returns {Matrix3} - Self reference
   */
  makeImmutable() {
    if (assert) {
      this.rowMajor = () => {
        throw new Error('Cannot modify immutable matrix');
      };
    }
    return this;
  }

  /**
   * Copies the entries of this matrix over to an arbitrary array (typed or normal).
   * @public
   *
   * @param {Array|Float32Array|Float64Array} array
   * @returns {Array|Float32Array|Float64Array} - Returned for chaining
   */
  copyToArray(array) {
    array[0] = this.m00();
    array[1] = this.m10();
    array[2] = this.m20();
    array[3] = this.m30();
    array[4] = this.m01();
    array[5] = this.m11();
    array[6] = this.m21();
    array[7] = this.m31();
    array[8] = this.m02();
    array[9] = this.m12();
    array[10] = this.m22();
    array[11] = this.m32();
    array[12] = this.m03();
    array[13] = this.m13();
    array[14] = this.m23();
    array[15] = this.m33();
    return array;
  }

  /**
   * Returns an identity matrix.
   * @public
   *
   * @returns {Matrix4}
   */
  static identity() {
    return new Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, Types.IDENTITY);
  }

  /**
   * Returns a translation matrix.
   * @public
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @returns {Matrix4}
   */
  static translation(x, y, z) {
    return new Matrix4(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1, Types.TRANSLATION_3D);
  }

  /**
   * Returns a translation matrix computed from a vector.
   * @public
   *
   * @param {Vector3|Vector4} vector
   * @returns {Matrix4}
   */
  static translationFromVector(vector) {
    return Matrix4.translation(vector.x, vector.y, vector.z);
  }

  /**
   * Returns a matrix that scales things in each dimension.
   * @public
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @returns {Matrix4}
   */
  static scaling(x, y, z) {
    // allow using one parameter to scale everything
    y = y === undefined ? x : y;
    z = z === undefined ? x : z;
    return new Matrix4(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1, Types.SCALING);
  }

  /**
   * Returns a homogeneous matrix rotation defined by a rotation of the specified angle around the given unit axis.
   * @public
   *
   * @param {Vector3} axis - normalized
   * @param {number} angle - in radians
   * @returns {Matrix4}
   */
  static rotationAxisAngle(axis, angle) {
    const c = Math.cos(angle);
    const s = Math.sin(angle);
    const C = 1 - c;
    return new Matrix4(axis.x * axis.x * C + c, axis.x * axis.y * C - axis.z * s, axis.x * axis.z * C + axis.y * s, 0, axis.y * axis.x * C + axis.z * s, axis.y * axis.y * C + c, axis.y * axis.z * C - axis.x * s, 0, axis.z * axis.x * C - axis.y * s, axis.z * axis.y * C + axis.x * s, axis.z * axis.z * C + c, 0, 0, 0, 0, 1, Types.AFFINE);
  }

  // TODO: add in rotation from quaternion, and from quat + translation

  /**
   * Returns a rotation matrix in the yz plane.
   * @public
   *
   * @param {number} angle - in radians
   * @returns {Matrix4}
   */
  static rotationX(angle) {
    const c = Math.cos(angle);
    const s = Math.sin(angle);
    return new Matrix4(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, Types.AFFINE);
  }

  /**
   * Returns a rotation matrix in the xz plane.
   * @public
   *
   * @param {number} angle - in radians
   * @returns {Matrix4}
   */
  static rotationY(angle) {
    const c = Math.cos(angle);
    const s = Math.sin(angle);
    return new Matrix4(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1, Types.AFFINE);
  }

  /**
   * Returns a rotation matrix in the xy plane.
   * @public
   *
   * @param {number} angle - in radians
   * @returns {Matrix4}
   */
  static rotationZ(angle) {
    const c = Math.cos(angle);
    const s = Math.sin(angle);
    return new Matrix4(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, Types.AFFINE);
  }

  /**
   * Returns the specific perspective matrix needed for certain WebGL contexts.
   * @public
   *
   * @param {number} fovYRadians
   * @param {number} aspect - aspect === width / height
   * @param {number} zNear
   * @param {number} zFar
   * @returns {Matrix4}
   */
  static gluPerspective(fovYRadians, aspect, zNear, zFar) {
    const cotangent = Math.cos(fovYRadians) / Math.sin(fovYRadians);
    return new Matrix4(cotangent / aspect, 0, 0, 0, 0, cotangent, 0, 0, 0, 0, (zFar + zNear) / (zNear - zFar), 2 * zFar * zNear / (zNear - zFar), 0, 0, -1, 0);
  }
}
js_dot.register('Matrix4', Matrix4);
const Types = js_EnumerationDeprecated.byKeys(['OTHER', 'IDENTITY', 'TRANSLATION_3D', 'SCALING', 'AFFINE']);

// @public {EnumerationDeprecated}
Matrix4.Types = Types;

// @public {Matrix4}
Matrix4.IDENTITY = new Matrix4().makeImmutable();
/* harmony default export */ const js_Matrix4 = (Matrix4);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbnVtZXJhdGlvbkRlcHJlY2F0ZWQiLCJkb3QiLCJWZWN0b3IzIiwiVmVjdG9yNCIsIkZsb2F0MzJBcnJheSIsIndpbmRvdyIsIkFycmF5IiwiTWF0cml4NCIsImNvbnN0cnVjdG9yIiwidjAwIiwidjAxIiwidjAyIiwidjAzIiwidjEwIiwidjExIiwidjEyIiwidjEzIiwidjIwIiwidjIxIiwidjIyIiwidjIzIiwidjMwIiwidjMxIiwidjMyIiwidjMzIiwidHlwZSIsImVudHJpZXMiLCJUeXBlcyIsIk9USEVSIiwicm93TWFqb3IiLCJ1bmRlZmluZWQiLCJBRkZJTkUiLCJjb2x1bW5NYWpvciIsInNldCIsIm1hdHJpeCIsIm0wMCIsIm0wMSIsIm0wMiIsIm0wMyIsIm0xMCIsIm0xMSIsIm0xMiIsIm0xMyIsIm0yMCIsIm0yMSIsIm0yMiIsIm0yMyIsIm0zMCIsIm0zMSIsIm0zMiIsIm0zMyIsImlzRmluaXRlIiwiZ2V0VHJhbnNsYXRpb24iLCJ0cmFuc2xhdGlvbiIsImdldFNjYWxlVmVjdG9yIiwibTAwMDMiLCJtMTAxMyIsIm0yMDIzIiwibTMwMzMiLCJtMDEwMyIsIm0xMTEzIiwibTIxMjMiLCJtMzEzMyIsIm0wMjAzIiwibTEyMTMiLCJtMjIyMyIsIm0zMjMzIiwiTWF0aCIsInNxcnQiLCJzY2FsZVZlY3RvciIsImdldENTU1RyYW5zZm9ybSIsInRvRml4ZWQiLCJjc3NUcmFuc2Zvcm0iLCJlcXVhbHMiLCJlcXVhbHNFcHNpbG9uIiwiZXBzaWxvbiIsImFicyIsImNvcHkiLCJwbHVzIiwibWludXMiLCJ0cmFuc3Bvc2VkIiwibmVnYXRlZCIsImludmVydGVkIiwiZGV0IiwiSURFTlRJVFkiLCJUUkFOU0xBVElPTl8zRCIsIlNDQUxJTkciLCJnZXREZXRlcm1pbmFudCIsIkVycm9yIiwidGltZXNNYXRyaXgiLCJ0aW1lc1ZlY3RvcjQiLCJ2ZWN0b3I0IiwieCIsInkiLCJ6IiwidyIsInRpbWVzVmVjdG9yMyIsInZlY3RvcjMiLCJ0b1ZlY3RvcjQiLCJ0b1ZlY3RvcjMiLCJ0aW1lc1RyYW5zcG9zZVZlY3RvcjQiLCJ0aW1lc1RyYW5zcG9zZVZlY3RvcjMiLCJ0aW1lc1JlbGF0aXZlVmVjdG9yMyIsImRldGVybWluYW50IiwidG9TdHJpbmciLCJtYWtlSW1tdXRhYmxlIiwiYXNzZXJ0IiwiY29weVRvQXJyYXkiLCJhcnJheSIsImlkZW50aXR5IiwidHJhbnNsYXRpb25Gcm9tVmVjdG9yIiwidmVjdG9yIiwic2NhbGluZyIsInJvdGF0aW9uQXhpc0FuZ2xlIiwiYXhpcyIsImFuZ2xlIiwiYyIsImNvcyIsInMiLCJzaW4iLCJDIiwicm90YXRpb25YIiwicm90YXRpb25ZIiwicm90YXRpb25aIiwiZ2x1UGVyc3BlY3RpdmUiLCJmb3ZZUmFkaWFucyIsImFzcGVjdCIsInpOZWFyIiwiekZhciIsImNvdGFuZ2VudCIsInJlZ2lzdGVyIiwiYnlLZXlzIl0sInNvdXJjZXMiOlsiTWF0cml4NC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiA0LWRpbWVuc2lvbmFsIE1hdHJpeFxuICpcbiAqIFRPRE86IGNvbnNpZGVyIGFkZGluZyBhZmZpbmUgZmxhZyBpZiBpdCB3aWxsIGhlbHAgcGVyZm9ybWFuY2UgKGEgbGEgTWF0cml4MylcbiAqIFRPRE86IGdldCByb3RhdGlvbiBhbmdsZXNcbiAqXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgYmFkLXNpbS10ZXh0ICovXG5cbmltcG9ydCBFbnVtZXJhdGlvbkRlcHJlY2F0ZWQgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL0VudW1lcmF0aW9uRGVwcmVjYXRlZC5qcyc7XG5pbXBvcnQgZG90IGZyb20gJy4vZG90LmpzJztcbmltcG9ydCBWZWN0b3IzIGZyb20gJy4vVmVjdG9yMy5qcyc7XG5pbXBvcnQgVmVjdG9yNCBmcm9tICcuL1ZlY3RvcjQuanMnO1xuXG5jb25zdCBGbG9hdDMyQXJyYXkgPSB3aW5kb3cuRmxvYXQzMkFycmF5IHx8IEFycmF5O1xuXG5jbGFzcyBNYXRyaXg0IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbdjAwXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3YwMV1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFt2MDJdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbdjAzXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3YxMF1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFt2MTFdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbdjEyXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3YxM11cbiAgICogQHBhcmFtIHtudW1iZXJ9IFt2MjBdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbdjIxXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3YyMl1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFt2MjNdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbdjMwXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3YzMV1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFt2MzJdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbdjMzXVxuICAgKiBAcGFyYW0ge01hdHJpeDQuVHlwZXN8dW5kZWZpbmVkfSBbdHlwZV1cbiAgICovXG4gIGNvbnN0cnVjdG9yKCB2MDAsIHYwMSwgdjAyLCB2MDMsIHYxMCwgdjExLCB2MTIsIHYxMywgdjIwLCB2MjEsIHYyMiwgdjIzLCB2MzAsIHYzMSwgdjMyLCB2MzMsIHR5cGUgKSB7XG5cbiAgICAvLyBAcHVibGljIHtGbG9hdDMyQXJyYXl9IC0gZW50cmllcyBzdG9yZWQgaW4gY29sdW1uLW1ham9yIGZvcm1hdFxuICAgIHRoaXMuZW50cmllcyA9IG5ldyBGbG9hdDMyQXJyYXkoIDE2ICk7XG5cbiAgICAvLyBAcHVibGljIHtNYXRyaXg0LlR5cGVzfVxuICAgIHRoaXMudHlwZSA9IFR5cGVzLk9USEVSOyAvLyB3aWxsIGJlIHNldCBieSByb3dNYWpvclxuXG4gICAgdGhpcy5yb3dNYWpvcihcbiAgICAgIHYwMCAhPT0gdW5kZWZpbmVkID8gdjAwIDogMSwgdjAxICE9PSB1bmRlZmluZWQgPyB2MDEgOiAwLCB2MDIgIT09IHVuZGVmaW5lZCA/IHYwMiA6IDAsIHYwMyAhPT0gdW5kZWZpbmVkID8gdjAzIDogMCxcbiAgICAgIHYxMCAhPT0gdW5kZWZpbmVkID8gdjEwIDogMCwgdjExICE9PSB1bmRlZmluZWQgPyB2MTEgOiAxLCB2MTIgIT09IHVuZGVmaW5lZCA/IHYxMiA6IDAsIHYxMyAhPT0gdW5kZWZpbmVkID8gdjEzIDogMCxcbiAgICAgIHYyMCAhPT0gdW5kZWZpbmVkID8gdjIwIDogMCwgdjIxICE9PSB1bmRlZmluZWQgPyB2MjEgOiAwLCB2MjIgIT09IHVuZGVmaW5lZCA/IHYyMiA6IDEsIHYyMyAhPT0gdW5kZWZpbmVkID8gdjIzIDogMCxcbiAgICAgIHYzMCAhPT0gdW5kZWZpbmVkID8gdjMwIDogMCwgdjMxICE9PSB1bmRlZmluZWQgPyB2MzEgOiAwLCB2MzIgIT09IHVuZGVmaW5lZCA/IHYzMiA6IDAsIHYzMyAhPT0gdW5kZWZpbmVkID8gdjMzIDogMSxcbiAgICAgIHR5cGUgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGFsbCBlbnRyaWVzIG9mIHRoZSBtYXRyaXggaW4gcm93LW1ham9yIG9yZGVyLlxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2MDBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHYwMVxuICAgKiBAcGFyYW0ge251bWJlcn0gdjAyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2MDNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHYxMFxuICAgKiBAcGFyYW0ge251bWJlcn0gdjExXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2MTJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHYxM1xuICAgKiBAcGFyYW0ge251bWJlcn0gdjIwXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2MjFcbiAgICogQHBhcmFtIHtudW1iZXJ9IHYyMlxuICAgKiBAcGFyYW0ge251bWJlcn0gdjIzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2MzBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHYzMVxuICAgKiBAcGFyYW0ge251bWJlcn0gdjMyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2MzNcbiAgICogQHBhcmFtIHtNYXRyaXg0LlR5cGVzfHVuZGVmaW5lZH0gW3R5cGVdXG4gICAqIEByZXR1cm5zIHtNYXRyaXg0fSAtIFNlbGYgcmVmZXJlbmNlXG4gICAqL1xuICByb3dNYWpvciggdjAwLCB2MDEsIHYwMiwgdjAzLCB2MTAsIHYxMSwgdjEyLCB2MTMsIHYyMCwgdjIxLCB2MjIsIHYyMywgdjMwLCB2MzEsIHYzMiwgdjMzLCB0eXBlICkge1xuICAgIHRoaXMuZW50cmllc1sgMCBdID0gdjAwO1xuICAgIHRoaXMuZW50cmllc1sgMSBdID0gdjEwO1xuICAgIHRoaXMuZW50cmllc1sgMiBdID0gdjIwO1xuICAgIHRoaXMuZW50cmllc1sgMyBdID0gdjMwO1xuICAgIHRoaXMuZW50cmllc1sgNCBdID0gdjAxO1xuICAgIHRoaXMuZW50cmllc1sgNSBdID0gdjExO1xuICAgIHRoaXMuZW50cmllc1sgNiBdID0gdjIxO1xuICAgIHRoaXMuZW50cmllc1sgNyBdID0gdjMxO1xuICAgIHRoaXMuZW50cmllc1sgOCBdID0gdjAyO1xuICAgIHRoaXMuZW50cmllc1sgOSBdID0gdjEyO1xuICAgIHRoaXMuZW50cmllc1sgMTAgXSA9IHYyMjtcbiAgICB0aGlzLmVudHJpZXNbIDExIF0gPSB2MzI7XG4gICAgdGhpcy5lbnRyaWVzWyAxMiBdID0gdjAzO1xuICAgIHRoaXMuZW50cmllc1sgMTMgXSA9IHYxMztcbiAgICB0aGlzLmVudHJpZXNbIDE0IF0gPSB2MjM7XG4gICAgdGhpcy5lbnRyaWVzWyAxNSBdID0gdjMzO1xuXG4gICAgLy8gVE9ETzogY29uc2lkZXIgcGVyZm9ybWFuY2Ugb2YgdGhlIGFmZmluZSBjaGVjayBoZXJlXG4gICAgdGhpcy50eXBlID0gdHlwZSA9PT0gdW5kZWZpbmVkID8gKCAoIHYzMCA9PT0gMCAmJiB2MzEgPT09IDAgJiYgdjMyID09PSAwICYmIHYzMyA9PT0gMSApID8gVHlwZXMuQUZGSU5FIDogVHlwZXMuT1RIRVIgKSA6IHR5cGU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhbGwgZW50cmllcyBvZiB0aGUgbWF0cml4IGluIGNvbHVtbi1tYWpvciBvcmRlci5cbiAgICogQHB1YmxpY1xuICAgKlxuICAgKiBAcGFyYW0geyp9IHYwMFxuICAgKiBAcGFyYW0geyp9IHYxMFxuICAgKiBAcGFyYW0geyp9IHYyMFxuICAgKiBAcGFyYW0geyp9IHYzMFxuICAgKiBAcGFyYW0geyp9IHYwMVxuICAgKiBAcGFyYW0geyp9IHYxMVxuICAgKiBAcGFyYW0geyp9IHYyMVxuICAgKiBAcGFyYW0geyp9IHYzMVxuICAgKiBAcGFyYW0geyp9IHYwMlxuICAgKiBAcGFyYW0geyp9IHYxMlxuICAgKiBAcGFyYW0geyp9IHYyMlxuICAgKiBAcGFyYW0geyp9IHYzMlxuICAgKiBAcGFyYW0geyp9IHYwM1xuICAgKiBAcGFyYW0geyp9IHYxM1xuICAgKiBAcGFyYW0geyp9IHYyM1xuICAgKiBAcGFyYW0geyp9IHYzM1xuICAgKiBAcGFyYW0ge01hdHJpeDQuVHlwZXN8dW5kZWZpbmVkfSBbdHlwZV1cbiAgICogQHJldHVybnMge01hdHJpeDR9IC0gU2VsZiByZWZlcmVuY2VcbiAgICovXG4gIGNvbHVtbk1ham9yKCB2MDAsIHYxMCwgdjIwLCB2MzAsIHYwMSwgdjExLCB2MjEsIHYzMSwgdjAyLCB2MTIsIHYyMiwgdjMyLCB2MDMsIHYxMywgdjIzLCB2MzMsIHR5cGUgKSB7XG4gICAgcmV0dXJuIHRoaXMucm93TWFqb3IoIHYwMCwgdjAxLCB2MDIsIHYwMywgdjEwLCB2MTEsIHYxMiwgdjEzLCB2MjAsIHYyMSwgdjIyLCB2MjMsIHYzMCwgdjMxLCB2MzIsIHYzMywgdHlwZSApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhpcyBtYXRyaXggdG8gdGhlIHZhbHVlIG9mIHRoZSBwYXNzZWQtaW4gbWF0cml4LlxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEBwYXJhbSB7TWF0cml4NH0gbWF0cml4XG4gICAqIEByZXR1cm5zIHtNYXRyaXg0fSAtIFNlbGYgcmVmZXJlbmNlXG4gICAqL1xuICBzZXQoIG1hdHJpeCApIHtcbiAgICByZXR1cm4gdGhpcy5yb3dNYWpvcihcbiAgICAgIG1hdHJpeC5tMDAoKSwgbWF0cml4Lm0wMSgpLCBtYXRyaXgubTAyKCksIG1hdHJpeC5tMDMoKSxcbiAgICAgIG1hdHJpeC5tMTAoKSwgbWF0cml4Lm0xMSgpLCBtYXRyaXgubTEyKCksIG1hdHJpeC5tMTMoKSxcbiAgICAgIG1hdHJpeC5tMjAoKSwgbWF0cml4Lm0yMSgpLCBtYXRyaXgubTIyKCksIG1hdHJpeC5tMjMoKSxcbiAgICAgIG1hdHJpeC5tMzAoKSwgbWF0cml4Lm0zMSgpLCBtYXRyaXgubTMyKCksIG1hdHJpeC5tMzMoKSxcbiAgICAgIG1hdHJpeC50eXBlICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgMCwwIGVudHJ5IG9mIHRoaXMgbWF0cml4LlxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBtMDAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW50cmllc1sgMCBdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIDAsMSBlbnRyeSBvZiB0aGlzIG1hdHJpeC5cbiAgICogQHB1YmxpY1xuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgbTAxKCkge1xuICAgIHJldHVybiB0aGlzLmVudHJpZXNbIDQgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSAwLDIgZW50cnkgb2YgdGhpcyBtYXRyaXguXG4gICAqIEBwdWJsaWNcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIG0wMigpIHtcbiAgICByZXR1cm4gdGhpcy5lbnRyaWVzWyA4IF07XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgMCwzIGVudHJ5IG9mIHRoaXMgbWF0cml4LlxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBtMDMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW50cmllc1sgMTIgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSAxLDAgZW50cnkgb2YgdGhpcyBtYXRyaXguXG4gICAqIEBwdWJsaWNcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIG0xMCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbnRyaWVzWyAxIF07XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgMSwxIGVudHJ5IG9mIHRoaXMgbWF0cml4LlxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBtMTEoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW50cmllc1sgNSBdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIDEsMiBlbnRyeSBvZiB0aGlzIG1hdHJpeC5cbiAgICogQHB1YmxpY1xuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgbTEyKCkge1xuICAgIHJldHVybiB0aGlzLmVudHJpZXNbIDkgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSAxLDMgZW50cnkgb2YgdGhpcyBtYXRyaXguXG4gICAqIEBwdWJsaWNcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIG0xMygpIHtcbiAgICByZXR1cm4gdGhpcy5lbnRyaWVzWyAxMyBdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIDIsMCBlbnRyeSBvZiB0aGlzIG1hdHJpeC5cbiAgICogQHB1YmxpY1xuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgbTIwKCkge1xuICAgIHJldHVybiB0aGlzLmVudHJpZXNbIDIgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSAyLDEgZW50cnkgb2YgdGhpcyBtYXRyaXguXG4gICAqIEBwdWJsaWNcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIG0yMSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbnRyaWVzWyA2IF07XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgMiwyIGVudHJ5IG9mIHRoaXMgbWF0cml4LlxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBtMjIoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW50cmllc1sgMTAgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSAyLDMgZW50cnkgb2YgdGhpcyBtYXRyaXguXG4gICAqIEBwdWJsaWNcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIG0yMygpIHtcbiAgICByZXR1cm4gdGhpcy5lbnRyaWVzWyAxNCBdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIDMsMCBlbnRyeSBvZiB0aGlzIG1hdHJpeC5cbiAgICogQHB1YmxpY1xuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgbTMwKCkge1xuICAgIHJldHVybiB0aGlzLmVudHJpZXNbIDMgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSAzLDEgZW50cnkgb2YgdGhpcyBtYXRyaXguXG4gICAqIEBwdWJsaWNcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIG0zMSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbnRyaWVzWyA3IF07XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgMywyIGVudHJ5IG9mIHRoaXMgbWF0cml4LlxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBtMzIoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW50cmllc1sgMTEgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSAzLDMgZW50cnkgb2YgdGhpcyBtYXRyaXguXG4gICAqIEBwdWJsaWNcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIG0zMygpIHtcbiAgICByZXR1cm4gdGhpcy5lbnRyaWVzWyAxNSBdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciBhbGwgb2YgdGhpcyBtYXRyaXgncyBlbnRyaWVzIGFyZSBmaW5pdGUgKG5vbi1pbmZpbml0ZSBhbmQgbm9uLU5hTikuXG4gICAqIEBwdWJsaWNcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBpc0Zpbml0ZSgpIHtcbiAgICByZXR1cm4gaXNGaW5pdGUoIHRoaXMubTAwKCkgKSAmJlxuICAgICAgICAgICBpc0Zpbml0ZSggdGhpcy5tMDEoKSApICYmXG4gICAgICAgICAgIGlzRmluaXRlKCB0aGlzLm0wMigpICkgJiZcbiAgICAgICAgICAgaXNGaW5pdGUoIHRoaXMubTAzKCkgKSAmJlxuICAgICAgICAgICBpc0Zpbml0ZSggdGhpcy5tMTAoKSApICYmXG4gICAgICAgICAgIGlzRmluaXRlKCB0aGlzLm0xMSgpICkgJiZcbiAgICAgICAgICAgaXNGaW5pdGUoIHRoaXMubTEyKCkgKSAmJlxuICAgICAgICAgICBpc0Zpbml0ZSggdGhpcy5tMTMoKSApICYmXG4gICAgICAgICAgIGlzRmluaXRlKCB0aGlzLm0yMCgpICkgJiZcbiAgICAgICAgICAgaXNGaW5pdGUoIHRoaXMubTIxKCkgKSAmJlxuICAgICAgICAgICBpc0Zpbml0ZSggdGhpcy5tMjIoKSApICYmXG4gICAgICAgICAgIGlzRmluaXRlKCB0aGlzLm0yMygpICkgJiZcbiAgICAgICAgICAgaXNGaW5pdGUoIHRoaXMubTMwKCkgKSAmJlxuICAgICAgICAgICBpc0Zpbml0ZSggdGhpcy5tMzEoKSApICYmXG4gICAgICAgICAgIGlzRmluaXRlKCB0aGlzLm0zMigpICkgJiZcbiAgICAgICAgICAgaXNGaW5pdGUoIHRoaXMubTMzKCkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSAzRCB0cmFuc2xhdGlvbiwgYXNzdW1pbmcgbXVsdGlwbGljYXRpb24gd2l0aCBhIGhvbW9nZW5lb3VzIHZlY3Rvci5cbiAgICogQHB1YmxpY1xuICAgKlxuICAgKiBAcmV0dXJucyB7VmVjdG9yM31cbiAgICovXG4gIGdldFRyYW5zbGF0aW9uKCkge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMyggdGhpcy5tMDMoKSwgdGhpcy5tMTMoKSwgdGhpcy5tMjMoKSApO1xuICB9XG5cbiAgZ2V0IHRyYW5zbGF0aW9uKCkgeyByZXR1cm4gdGhpcy5nZXRUcmFuc2xhdGlvbigpOyB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB2ZWN0b3IgdGhhdCBpcyBlcXVpdmFsZW50IHRvICggVCgxLDAsMCkubWFnbml0dWRlLCBUKDAsMSwwKS5tYWduaXR1ZGUsIFQoMCwwLDEpLm1hZ25pdHVkZSApXG4gICAqIHdoZXJlIFQgaXMgYSByZWxhdGl2ZSB0cmFuc2Zvcm0uXG4gICAqIEBwdWJsaWNcbiAgICpcbiAgICogQHJldHVybnMge1ZlY3RvcjN9XG4gICAqL1xuICBnZXRTY2FsZVZlY3RvcigpIHtcbiAgICBjb25zdCBtMDAwMyA9IHRoaXMubTAwKCkgKyB0aGlzLm0wMygpO1xuICAgIGNvbnN0IG0xMDEzID0gdGhpcy5tMTAoKSArIHRoaXMubTEzKCk7XG4gICAgY29uc3QgbTIwMjMgPSB0aGlzLm0yMCgpICsgdGhpcy5tMjMoKTtcbiAgICBjb25zdCBtMzAzMyA9IHRoaXMubTMwKCkgKyB0aGlzLm0zMygpO1xuICAgIGNvbnN0IG0wMTAzID0gdGhpcy5tMDEoKSArIHRoaXMubTAzKCk7XG4gICAgY29uc3QgbTExMTMgPSB0aGlzLm0xMSgpICsgdGhpcy5tMTMoKTtcbiAgICBjb25zdCBtMjEyMyA9IHRoaXMubTIxKCkgKyB0aGlzLm0yMygpO1xuICAgIGNvbnN0IG0zMTMzID0gdGhpcy5tMzEoKSArIHRoaXMubTMzKCk7XG4gICAgY29uc3QgbTAyMDMgPSB0aGlzLm0wMigpICsgdGhpcy5tMDMoKTtcbiAgICBjb25zdCBtMTIxMyA9IHRoaXMubTEyKCkgKyB0aGlzLm0xMygpO1xuICAgIGNvbnN0IG0yMjIzID0gdGhpcy5tMjIoKSArIHRoaXMubTIzKCk7XG4gICAgY29uc3QgbTMyMzMgPSB0aGlzLm0zMigpICsgdGhpcy5tMzMoKTtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjMoXG4gICAgICBNYXRoLnNxcnQoIG0wMDAzICogbTAwMDMgKyBtMTAxMyAqIG0xMDEzICsgbTIwMjMgKiBtMjAyMyArIG0zMDMzICogbTMwMzMgKSxcbiAgICAgIE1hdGguc3FydCggbTAxMDMgKiBtMDEwMyArIG0xMTEzICogbTExMTMgKyBtMjEyMyAqIG0yMTIzICsgbTMxMzMgKiBtMzEzMyApLFxuICAgICAgTWF0aC5zcXJ0KCBtMDIwMyAqIG0wMjAzICsgbTEyMTMgKiBtMTIxMyArIG0yMjIzICogbTIyMjMgKyBtMzIzMyAqIG0zMjMzICkgKTtcbiAgfVxuXG4gIGdldCBzY2FsZVZlY3RvcigpIHsgcmV0dXJuIHRoaXMuZ2V0U2NhbGVWZWN0b3IoKTsgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBDU1MgdHJhbnNmb3JtIHN0cmluZyBmb3IgdGhlIGFzc29jaWF0ZWQgaG9tb2dlbmVvdXMgM2QgdHJhbnNmb3JtYXRpb24uXG4gICAqIEBwdWJsaWNcbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldENTU1RyYW5zZm9ybSgpIHtcbiAgICAvLyBTZWUgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy10cmFuc2Zvcm1zLywgcGFydGljdWxhcmx5IFNlY3Rpb24gMTMgdGhhdCBkaXNjdXNzZXMgdGhlIFNWRyBjb21wYXRpYmlsaXR5XG5cbiAgICAvLyB0aGUgaW5uZXIgcGFydCBvZiBhIENTUzMgdHJhbnNmb3JtLCBidXQgcmVtZW1iZXIgdG8gYWRkIHRoZSBicm93c2VyLXNwZWNpZmljIHBhcnRzIVxuICAgIC8vIE5PVEU6IHRoZSB0b0ZpeGVkIGNhbGxzIGFyZSBpbmxpbmVkIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gICAgcmV0dXJuIGBtYXRyaXgzZCgke1xuICAgICAgdGhpcy5lbnRyaWVzWyAwIF0udG9GaXhlZCggMjAgKX0sJHtcbiAgICAgIHRoaXMuZW50cmllc1sgMSBdLnRvRml4ZWQoIDIwICl9LCR7XG4gICAgICB0aGlzLmVudHJpZXNbIDIgXS50b0ZpeGVkKCAyMCApfSwke1xuICAgICAgdGhpcy5lbnRyaWVzWyAzIF0udG9GaXhlZCggMjAgKX0sJHtcbiAgICAgIHRoaXMuZW50cmllc1sgNCBdLnRvRml4ZWQoIDIwICl9LCR7XG4gICAgICB0aGlzLmVudHJpZXNbIDUgXS50b0ZpeGVkKCAyMCApfSwke1xuICAgICAgdGhpcy5lbnRyaWVzWyA2IF0udG9GaXhlZCggMjAgKX0sJHtcbiAgICAgIHRoaXMuZW50cmllc1sgNyBdLnRvRml4ZWQoIDIwICl9LCR7XG4gICAgICB0aGlzLmVudHJpZXNbIDggXS50b0ZpeGVkKCAyMCApfSwke1xuICAgICAgdGhpcy5lbnRyaWVzWyA5IF0udG9GaXhlZCggMjAgKX0sJHtcbiAgICAgIHRoaXMuZW50cmllc1sgMTAgXS50b0ZpeGVkKCAyMCApfSwke1xuICAgICAgdGhpcy5lbnRyaWVzWyAxMSBdLnRvRml4ZWQoIDIwICl9LCR7XG4gICAgICB0aGlzLmVudHJpZXNbIDEyIF0udG9GaXhlZCggMjAgKX0sJHtcbiAgICAgIHRoaXMuZW50cmllc1sgMTMgXS50b0ZpeGVkKCAyMCApfSwke1xuICAgICAgdGhpcy5lbnRyaWVzWyAxNCBdLnRvRml4ZWQoIDIwICl9LCR7XG4gICAgICB0aGlzLmVudHJpZXNbIDE1IF0udG9GaXhlZCggMjAgKX0pYDtcbiAgfVxuXG4gIGdldCBjc3NUcmFuc2Zvcm0oKSB7IHJldHVybiB0aGlzLmdldENTU1RyYW5zZm9ybSgpOyB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZXhhY3QgZXF1YWxpdHkgd2l0aCBhbm90aGVyIG1hdHJpeFxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEBwYXJhbSB7TWF0cml4NH0gbWF0cml4XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZXF1YWxzKCBtYXRyaXggKSB7XG4gICAgcmV0dXJuIHRoaXMubTAwKCkgPT09IG1hdHJpeC5tMDAoKSAmJiB0aGlzLm0wMSgpID09PSBtYXRyaXgubTAxKCkgJiYgdGhpcy5tMDIoKSA9PT0gbWF0cml4Lm0wMigpICYmIHRoaXMubTAzKCkgPT09IG1hdHJpeC5tMDMoKSAmJlxuICAgICAgICAgICB0aGlzLm0xMCgpID09PSBtYXRyaXgubTEwKCkgJiYgdGhpcy5tMTEoKSA9PT0gbWF0cml4Lm0xMSgpICYmIHRoaXMubTEyKCkgPT09IG1hdHJpeC5tMTIoKSAmJiB0aGlzLm0xMygpID09PSBtYXRyaXgubTEzKCkgJiZcbiAgICAgICAgICAgdGhpcy5tMjAoKSA9PT0gbWF0cml4Lm0yMCgpICYmIHRoaXMubTIxKCkgPT09IG1hdHJpeC5tMjEoKSAmJiB0aGlzLm0yMigpID09PSBtYXRyaXgubTIyKCkgJiYgdGhpcy5tMjMoKSA9PT0gbWF0cml4Lm0yMygpICYmXG4gICAgICAgICAgIHRoaXMubTMwKCkgPT09IG1hdHJpeC5tMzAoKSAmJiB0aGlzLm0zMSgpID09PSBtYXRyaXgubTMxKCkgJiYgdGhpcy5tMzIoKSA9PT0gbWF0cml4Lm0zMigpICYmIHRoaXMubTMzKCkgPT09IG1hdHJpeC5tMzMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGVxdWFsaXR5IHdpdGhpbiBhIG1hcmdpbiBvZiBlcnJvciB3aXRoIGFub3RoZXIgbWF0cml4XG4gICAqIEBwdWJsaWNcbiAgICpcbiAgICogQHBhcmFtIHtNYXRyaXg0fSBtYXRyaXhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGVwc2lsb25cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBlcXVhbHNFcHNpbG9uKCBtYXRyaXgsIGVwc2lsb24gKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKCB0aGlzLm0wMCgpIC0gbWF0cml4Lm0wMCgpICkgPCBlcHNpbG9uICYmXG4gICAgICAgICAgIE1hdGguYWJzKCB0aGlzLm0wMSgpIC0gbWF0cml4Lm0wMSgpICkgPCBlcHNpbG9uICYmXG4gICAgICAgICAgIE1hdGguYWJzKCB0aGlzLm0wMigpIC0gbWF0cml4Lm0wMigpICkgPCBlcHNpbG9uICYmXG4gICAgICAgICAgIE1hdGguYWJzKCB0aGlzLm0wMygpIC0gbWF0cml4Lm0wMygpICkgPCBlcHNpbG9uICYmXG4gICAgICAgICAgIE1hdGguYWJzKCB0aGlzLm0xMCgpIC0gbWF0cml4Lm0xMCgpICkgPCBlcHNpbG9uICYmXG4gICAgICAgICAgIE1hdGguYWJzKCB0aGlzLm0xMSgpIC0gbWF0cml4Lm0xMSgpICkgPCBlcHNpbG9uICYmXG4gICAgICAgICAgIE1hdGguYWJzKCB0aGlzLm0xMigpIC0gbWF0cml4Lm0xMigpICkgPCBlcHNpbG9uICYmXG4gICAgICAgICAgIE1hdGguYWJzKCB0aGlzLm0xMygpIC0gbWF0cml4Lm0xMygpICkgPCBlcHNpbG9uICYmXG4gICAgICAgICAgIE1hdGguYWJzKCB0aGlzLm0yMCgpIC0gbWF0cml4Lm0yMCgpICkgPCBlcHNpbG9uICYmXG4gICAgICAgICAgIE1hdGguYWJzKCB0aGlzLm0yMSgpIC0gbWF0cml4Lm0yMSgpICkgPCBlcHNpbG9uICYmXG4gICAgICAgICAgIE1hdGguYWJzKCB0aGlzLm0yMigpIC0gbWF0cml4Lm0yMigpICkgPCBlcHNpbG9uICYmXG4gICAgICAgICAgIE1hdGguYWJzKCB0aGlzLm0yMygpIC0gbWF0cml4Lm0yMygpICkgPCBlcHNpbG9uICYmXG4gICAgICAgICAgIE1hdGguYWJzKCB0aGlzLm0zMCgpIC0gbWF0cml4Lm0zMCgpICkgPCBlcHNpbG9uICYmXG4gICAgICAgICAgIE1hdGguYWJzKCB0aGlzLm0zMSgpIC0gbWF0cml4Lm0zMSgpICkgPCBlcHNpbG9uICYmXG4gICAgICAgICAgIE1hdGguYWJzKCB0aGlzLm0zMigpIC0gbWF0cml4Lm0zMigpICkgPCBlcHNpbG9uICYmXG4gICAgICAgICAgIE1hdGguYWJzKCB0aGlzLm0zMygpIC0gbWF0cml4Lm0zMygpICkgPCBlcHNpbG9uO1xuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXG4gICAqIEltbXV0YWJsZSBvcGVyYXRpb25zIChyZXR1cm5pbmcgYSBuZXcgbWF0cml4KVxuICAgKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgY29weSBvZiB0aGlzIG1hdHJpeFxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEByZXR1cm5zIHtNYXRyaXg0fVxuICAgKi9cbiAgY29weSgpIHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDQoXG4gICAgICB0aGlzLm0wMCgpLCB0aGlzLm0wMSgpLCB0aGlzLm0wMigpLCB0aGlzLm0wMygpLFxuICAgICAgdGhpcy5tMTAoKSwgdGhpcy5tMTEoKSwgdGhpcy5tMTIoKSwgdGhpcy5tMTMoKSxcbiAgICAgIHRoaXMubTIwKCksIHRoaXMubTIxKCksIHRoaXMubTIyKCksIHRoaXMubTIzKCksXG4gICAgICB0aGlzLm0zMCgpLCB0aGlzLm0zMSgpLCB0aGlzLm0zMigpLCB0aGlzLm0zMygpLFxuICAgICAgdGhpcy50eXBlXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IG1hdHJpeCwgZGVmaW5lZCBieSB0aGlzIG1hdHJpeCBwbHVzIHRoZSBwcm92aWRlZCBtYXRyaXhcbiAgICogQHB1YmxpY1xuICAgKlxuICAgKiBAcGFyYW0ge01hdHJpeDR9IG1hdHJpeFxuICAgKiBAcmV0dXJucyB7TWF0cml4NH1cbiAgICovXG4gIHBsdXMoIG1hdHJpeCApIHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDQoXG4gICAgICB0aGlzLm0wMCgpICsgbWF0cml4Lm0wMCgpLCB0aGlzLm0wMSgpICsgbWF0cml4Lm0wMSgpLCB0aGlzLm0wMigpICsgbWF0cml4Lm0wMigpLCB0aGlzLm0wMygpICsgbWF0cml4Lm0wMygpLFxuICAgICAgdGhpcy5tMTAoKSArIG1hdHJpeC5tMTAoKSwgdGhpcy5tMTEoKSArIG1hdHJpeC5tMTEoKSwgdGhpcy5tMTIoKSArIG1hdHJpeC5tMTIoKSwgdGhpcy5tMTMoKSArIG1hdHJpeC5tMTMoKSxcbiAgICAgIHRoaXMubTIwKCkgKyBtYXRyaXgubTIwKCksIHRoaXMubTIxKCkgKyBtYXRyaXgubTIxKCksIHRoaXMubTIyKCkgKyBtYXRyaXgubTIyKCksIHRoaXMubTIzKCkgKyBtYXRyaXgubTIzKCksXG4gICAgICB0aGlzLm0zMCgpICsgbWF0cml4Lm0zMCgpLCB0aGlzLm0zMSgpICsgbWF0cml4Lm0zMSgpLCB0aGlzLm0zMigpICsgbWF0cml4Lm0zMigpLCB0aGlzLm0zMygpICsgbWF0cml4Lm0zMygpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IG1hdHJpeCwgZGVmaW5lZCBieSB0aGlzIG1hdHJpeCBwbHVzIHRoZSBwcm92aWRlZCBtYXRyaXhcbiAgICogQHB1YmxpY1xuICAgKlxuICAgKiBAcGFyYW0ge01hdHJpeDR9IG1hdHJpeFxuICAgKiBAcmV0dXJucyB7TWF0cml4NH1cbiAgICovXG4gIG1pbnVzKCBtYXRyaXggKSB7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXg0KFxuICAgICAgdGhpcy5tMDAoKSAtIG1hdHJpeC5tMDAoKSwgdGhpcy5tMDEoKSAtIG1hdHJpeC5tMDEoKSwgdGhpcy5tMDIoKSAtIG1hdHJpeC5tMDIoKSwgdGhpcy5tMDMoKSAtIG1hdHJpeC5tMDMoKSxcbiAgICAgIHRoaXMubTEwKCkgLSBtYXRyaXgubTEwKCksIHRoaXMubTExKCkgLSBtYXRyaXgubTExKCksIHRoaXMubTEyKCkgLSBtYXRyaXgubTEyKCksIHRoaXMubTEzKCkgLSBtYXRyaXgubTEzKCksXG4gICAgICB0aGlzLm0yMCgpIC0gbWF0cml4Lm0yMCgpLCB0aGlzLm0yMSgpIC0gbWF0cml4Lm0yMSgpLCB0aGlzLm0yMigpIC0gbWF0cml4Lm0yMigpLCB0aGlzLm0yMygpIC0gbWF0cml4Lm0yMygpLFxuICAgICAgdGhpcy5tMzAoKSAtIG1hdHJpeC5tMzAoKSwgdGhpcy5tMzEoKSAtIG1hdHJpeC5tMzEoKSwgdGhpcy5tMzIoKSAtIG1hdHJpeC5tMzIoKSwgdGhpcy5tMzMoKSAtIG1hdHJpeC5tMzMoKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHRyYW5zcG9zZWQgY29weSBvZiB0aGlzIG1hdHJpeFxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEByZXR1cm5zIHtNYXRyaXg0fVxuICAgKi9cbiAgdHJhbnNwb3NlZCgpIHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDQoXG4gICAgICB0aGlzLm0wMCgpLCB0aGlzLm0xMCgpLCB0aGlzLm0yMCgpLCB0aGlzLm0zMCgpLFxuICAgICAgdGhpcy5tMDEoKSwgdGhpcy5tMTEoKSwgdGhpcy5tMjEoKSwgdGhpcy5tMzEoKSxcbiAgICAgIHRoaXMubTAyKCksIHRoaXMubTEyKCksIHRoaXMubTIyKCksIHRoaXMubTMyKCksXG4gICAgICB0aGlzLm0wMygpLCB0aGlzLm0xMygpLCB0aGlzLm0yMygpLCB0aGlzLm0zMygpICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIG5lZ2F0ZWQgY29weSBvZiB0aGlzIG1hdHJpeFxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEByZXR1cm5zIHtNYXRyaXgzfVxuICAgKi9cbiAgbmVnYXRlZCgpIHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDQoXG4gICAgICAtdGhpcy5tMDAoKSwgLXRoaXMubTAxKCksIC10aGlzLm0wMigpLCAtdGhpcy5tMDMoKSxcbiAgICAgIC10aGlzLm0xMCgpLCAtdGhpcy5tMTEoKSwgLXRoaXMubTEyKCksIC10aGlzLm0xMygpLFxuICAgICAgLXRoaXMubTIwKCksIC10aGlzLm0yMSgpLCAtdGhpcy5tMjIoKSwgLXRoaXMubTIzKCksXG4gICAgICAtdGhpcy5tMzAoKSwgLXRoaXMubTMxKCksIC10aGlzLm0zMigpLCAtdGhpcy5tMzMoKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gaW52ZXJ0ZWQgY29weSBvZiB0aGlzIG1hdHJpeFxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEByZXR1cm5zIHtNYXRyaXgzfVxuICAgKi9cbiAgaW52ZXJ0ZWQoKSB7XG4gICAgbGV0IGRldDtcbiAgICBzd2l0Y2goIHRoaXMudHlwZSApIHtcbiAgICAgIGNhc2UgVHlwZXMuSURFTlRJVFk6XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgY2FzZSBUeXBlcy5UUkFOU0xBVElPTl8zRDpcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXg0KFxuICAgICAgICAgIDEsIDAsIDAsIC10aGlzLm0wMygpLFxuICAgICAgICAgIDAsIDEsIDAsIC10aGlzLm0xMygpLFxuICAgICAgICAgIDAsIDAsIDEsIC10aGlzLm0yMygpLFxuICAgICAgICAgIDAsIDAsIDAsIDEsIFR5cGVzLlRSQU5TTEFUSU9OXzNEICk7XG4gICAgICBjYXNlIFR5cGVzLlNDQUxJTkc6XG4gICAgICAgIHJldHVybiBuZXcgTWF0cml4NChcbiAgICAgICAgICAxIC8gdGhpcy5tMDAoKSwgMCwgMCwgMCxcbiAgICAgICAgICAwLCAxIC8gdGhpcy5tMTEoKSwgMCwgMCxcbiAgICAgICAgICAwLCAwLCAxIC8gdGhpcy5tMjIoKSwgMCxcbiAgICAgICAgICAwLCAwLCAwLCAxIC8gdGhpcy5tMzMoKSwgVHlwZXMuU0NBTElORyApO1xuICAgICAgY2FzZSBUeXBlcy5BRkZJTkU6XG4gICAgICBjYXNlIFR5cGVzLk9USEVSOlxuICAgICAgICBkZXQgPSB0aGlzLmdldERldGVybWluYW50KCk7XG4gICAgICAgIGlmICggZGV0ICE9PSAwICkge1xuICAgICAgICAgIHJldHVybiBuZXcgTWF0cml4NChcbiAgICAgICAgICAgICggLXRoaXMubTMxKCkgKiB0aGlzLm0yMigpICogdGhpcy5tMTMoKSArIHRoaXMubTIxKCkgKiB0aGlzLm0zMigpICogdGhpcy5tMTMoKSArIHRoaXMubTMxKCkgKiB0aGlzLm0xMigpICogdGhpcy5tMjMoKSAtIHRoaXMubTExKCkgKiB0aGlzLm0zMigpICogdGhpcy5tMjMoKSAtIHRoaXMubTIxKCkgKiB0aGlzLm0xMigpICogdGhpcy5tMzMoKSArIHRoaXMubTExKCkgKiB0aGlzLm0yMigpICogdGhpcy5tMzMoKSApIC8gZGV0LFxuICAgICAgICAgICAgKCB0aGlzLm0zMSgpICogdGhpcy5tMjIoKSAqIHRoaXMubTAzKCkgLSB0aGlzLm0yMSgpICogdGhpcy5tMzIoKSAqIHRoaXMubTAzKCkgLSB0aGlzLm0zMSgpICogdGhpcy5tMDIoKSAqIHRoaXMubTIzKCkgKyB0aGlzLm0wMSgpICogdGhpcy5tMzIoKSAqIHRoaXMubTIzKCkgKyB0aGlzLm0yMSgpICogdGhpcy5tMDIoKSAqIHRoaXMubTMzKCkgLSB0aGlzLm0wMSgpICogdGhpcy5tMjIoKSAqIHRoaXMubTMzKCkgKSAvIGRldCxcbiAgICAgICAgICAgICggLXRoaXMubTMxKCkgKiB0aGlzLm0xMigpICogdGhpcy5tMDMoKSArIHRoaXMubTExKCkgKiB0aGlzLm0zMigpICogdGhpcy5tMDMoKSArIHRoaXMubTMxKCkgKiB0aGlzLm0wMigpICogdGhpcy5tMTMoKSAtIHRoaXMubTAxKCkgKiB0aGlzLm0zMigpICogdGhpcy5tMTMoKSAtIHRoaXMubTExKCkgKiB0aGlzLm0wMigpICogdGhpcy5tMzMoKSArIHRoaXMubTAxKCkgKiB0aGlzLm0xMigpICogdGhpcy5tMzMoKSApIC8gZGV0LFxuICAgICAgICAgICAgKCB0aGlzLm0yMSgpICogdGhpcy5tMTIoKSAqIHRoaXMubTAzKCkgLSB0aGlzLm0xMSgpICogdGhpcy5tMjIoKSAqIHRoaXMubTAzKCkgLSB0aGlzLm0yMSgpICogdGhpcy5tMDIoKSAqIHRoaXMubTEzKCkgKyB0aGlzLm0wMSgpICogdGhpcy5tMjIoKSAqIHRoaXMubTEzKCkgKyB0aGlzLm0xMSgpICogdGhpcy5tMDIoKSAqIHRoaXMubTIzKCkgLSB0aGlzLm0wMSgpICogdGhpcy5tMTIoKSAqIHRoaXMubTIzKCkgKSAvIGRldCxcbiAgICAgICAgICAgICggdGhpcy5tMzAoKSAqIHRoaXMubTIyKCkgKiB0aGlzLm0xMygpIC0gdGhpcy5tMjAoKSAqIHRoaXMubTMyKCkgKiB0aGlzLm0xMygpIC0gdGhpcy5tMzAoKSAqIHRoaXMubTEyKCkgKiB0aGlzLm0yMygpICsgdGhpcy5tMTAoKSAqIHRoaXMubTMyKCkgKiB0aGlzLm0yMygpICsgdGhpcy5tMjAoKSAqIHRoaXMubTEyKCkgKiB0aGlzLm0zMygpIC0gdGhpcy5tMTAoKSAqIHRoaXMubTIyKCkgKiB0aGlzLm0zMygpICkgLyBkZXQsXG4gICAgICAgICAgICAoIC10aGlzLm0zMCgpICogdGhpcy5tMjIoKSAqIHRoaXMubTAzKCkgKyB0aGlzLm0yMCgpICogdGhpcy5tMzIoKSAqIHRoaXMubTAzKCkgKyB0aGlzLm0zMCgpICogdGhpcy5tMDIoKSAqIHRoaXMubTIzKCkgLSB0aGlzLm0wMCgpICogdGhpcy5tMzIoKSAqIHRoaXMubTIzKCkgLSB0aGlzLm0yMCgpICogdGhpcy5tMDIoKSAqIHRoaXMubTMzKCkgKyB0aGlzLm0wMCgpICogdGhpcy5tMjIoKSAqIHRoaXMubTMzKCkgKSAvIGRldCxcbiAgICAgICAgICAgICggdGhpcy5tMzAoKSAqIHRoaXMubTEyKCkgKiB0aGlzLm0wMygpIC0gdGhpcy5tMTAoKSAqIHRoaXMubTMyKCkgKiB0aGlzLm0wMygpIC0gdGhpcy5tMzAoKSAqIHRoaXMubTAyKCkgKiB0aGlzLm0xMygpICsgdGhpcy5tMDAoKSAqIHRoaXMubTMyKCkgKiB0aGlzLm0xMygpICsgdGhpcy5tMTAoKSAqIHRoaXMubTAyKCkgKiB0aGlzLm0zMygpIC0gdGhpcy5tMDAoKSAqIHRoaXMubTEyKCkgKiB0aGlzLm0zMygpICkgLyBkZXQsXG4gICAgICAgICAgICAoIC10aGlzLm0yMCgpICogdGhpcy5tMTIoKSAqIHRoaXMubTAzKCkgKyB0aGlzLm0xMCgpICogdGhpcy5tMjIoKSAqIHRoaXMubTAzKCkgKyB0aGlzLm0yMCgpICogdGhpcy5tMDIoKSAqIHRoaXMubTEzKCkgLSB0aGlzLm0wMCgpICogdGhpcy5tMjIoKSAqIHRoaXMubTEzKCkgLSB0aGlzLm0xMCgpICogdGhpcy5tMDIoKSAqIHRoaXMubTIzKCkgKyB0aGlzLm0wMCgpICogdGhpcy5tMTIoKSAqIHRoaXMubTIzKCkgKSAvIGRldCxcbiAgICAgICAgICAgICggLXRoaXMubTMwKCkgKiB0aGlzLm0yMSgpICogdGhpcy5tMTMoKSArIHRoaXMubTIwKCkgKiB0aGlzLm0zMSgpICogdGhpcy5tMTMoKSArIHRoaXMubTMwKCkgKiB0aGlzLm0xMSgpICogdGhpcy5tMjMoKSAtIHRoaXMubTEwKCkgKiB0aGlzLm0zMSgpICogdGhpcy5tMjMoKSAtIHRoaXMubTIwKCkgKiB0aGlzLm0xMSgpICogdGhpcy5tMzMoKSArIHRoaXMubTEwKCkgKiB0aGlzLm0yMSgpICogdGhpcy5tMzMoKSApIC8gZGV0LFxuICAgICAgICAgICAgKCB0aGlzLm0zMCgpICogdGhpcy5tMjEoKSAqIHRoaXMubTAzKCkgLSB0aGlzLm0yMCgpICogdGhpcy5tMzEoKSAqIHRoaXMubTAzKCkgLSB0aGlzLm0zMCgpICogdGhpcy5tMDEoKSAqIHRoaXMubTIzKCkgKyB0aGlzLm0wMCgpICogdGhpcy5tMzEoKSAqIHRoaXMubTIzKCkgKyB0aGlzLm0yMCgpICogdGhpcy5tMDEoKSAqIHRoaXMubTMzKCkgLSB0aGlzLm0wMCgpICogdGhpcy5tMjEoKSAqIHRoaXMubTMzKCkgKSAvIGRldCxcbiAgICAgICAgICAgICggLXRoaXMubTMwKCkgKiB0aGlzLm0xMSgpICogdGhpcy5tMDMoKSArIHRoaXMubTEwKCkgKiB0aGlzLm0zMSgpICogdGhpcy5tMDMoKSArIHRoaXMubTMwKCkgKiB0aGlzLm0wMSgpICogdGhpcy5tMTMoKSAtIHRoaXMubTAwKCkgKiB0aGlzLm0zMSgpICogdGhpcy5tMTMoKSAtIHRoaXMubTEwKCkgKiB0aGlzLm0wMSgpICogdGhpcy5tMzMoKSArIHRoaXMubTAwKCkgKiB0aGlzLm0xMSgpICogdGhpcy5tMzMoKSApIC8gZGV0LFxuICAgICAgICAgICAgKCB0aGlzLm0yMCgpICogdGhpcy5tMTEoKSAqIHRoaXMubTAzKCkgLSB0aGlzLm0xMCgpICogdGhpcy5tMjEoKSAqIHRoaXMubTAzKCkgLSB0aGlzLm0yMCgpICogdGhpcy5tMDEoKSAqIHRoaXMubTEzKCkgKyB0aGlzLm0wMCgpICogdGhpcy5tMjEoKSAqIHRoaXMubTEzKCkgKyB0aGlzLm0xMCgpICogdGhpcy5tMDEoKSAqIHRoaXMubTIzKCkgLSB0aGlzLm0wMCgpICogdGhpcy5tMTEoKSAqIHRoaXMubTIzKCkgKSAvIGRldCxcbiAgICAgICAgICAgICggdGhpcy5tMzAoKSAqIHRoaXMubTIxKCkgKiB0aGlzLm0xMigpIC0gdGhpcy5tMjAoKSAqIHRoaXMubTMxKCkgKiB0aGlzLm0xMigpIC0gdGhpcy5tMzAoKSAqIHRoaXMubTExKCkgKiB0aGlzLm0yMigpICsgdGhpcy5tMTAoKSAqIHRoaXMubTMxKCkgKiB0aGlzLm0yMigpICsgdGhpcy5tMjAoKSAqIHRoaXMubTExKCkgKiB0aGlzLm0zMigpIC0gdGhpcy5tMTAoKSAqIHRoaXMubTIxKCkgKiB0aGlzLm0zMigpICkgLyBkZXQsXG4gICAgICAgICAgICAoIC10aGlzLm0zMCgpICogdGhpcy5tMjEoKSAqIHRoaXMubTAyKCkgKyB0aGlzLm0yMCgpICogdGhpcy5tMzEoKSAqIHRoaXMubTAyKCkgKyB0aGlzLm0zMCgpICogdGhpcy5tMDEoKSAqIHRoaXMubTIyKCkgLSB0aGlzLm0wMCgpICogdGhpcy5tMzEoKSAqIHRoaXMubTIyKCkgLSB0aGlzLm0yMCgpICogdGhpcy5tMDEoKSAqIHRoaXMubTMyKCkgKyB0aGlzLm0wMCgpICogdGhpcy5tMjEoKSAqIHRoaXMubTMyKCkgKSAvIGRldCxcbiAgICAgICAgICAgICggdGhpcy5tMzAoKSAqIHRoaXMubTExKCkgKiB0aGlzLm0wMigpIC0gdGhpcy5tMTAoKSAqIHRoaXMubTMxKCkgKiB0aGlzLm0wMigpIC0gdGhpcy5tMzAoKSAqIHRoaXMubTAxKCkgKiB0aGlzLm0xMigpICsgdGhpcy5tMDAoKSAqIHRoaXMubTMxKCkgKiB0aGlzLm0xMigpICsgdGhpcy5tMTAoKSAqIHRoaXMubTAxKCkgKiB0aGlzLm0zMigpIC0gdGhpcy5tMDAoKSAqIHRoaXMubTExKCkgKiB0aGlzLm0zMigpICkgLyBkZXQsXG4gICAgICAgICAgICAoIC10aGlzLm0yMCgpICogdGhpcy5tMTEoKSAqIHRoaXMubTAyKCkgKyB0aGlzLm0xMCgpICogdGhpcy5tMjEoKSAqIHRoaXMubTAyKCkgKyB0aGlzLm0yMCgpICogdGhpcy5tMDEoKSAqIHRoaXMubTEyKCkgLSB0aGlzLm0wMCgpICogdGhpcy5tMjEoKSAqIHRoaXMubTEyKCkgLSB0aGlzLm0xMCgpICogdGhpcy5tMDEoKSAqIHRoaXMubTIyKCkgKyB0aGlzLm0wMCgpICogdGhpcy5tMTEoKSAqIHRoaXMubTIyKCkgKSAvIGRldFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCAnTWF0cml4IGNvdWxkIG5vdCBiZSBpbnZlcnRlZCwgZGV0ZXJtaW5hbnQgPT09IDAnICk7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvciggYE1hdHJpeDQuaW52ZXJ0ZWQgd2l0aCB1bmtub3duIHR5cGU6ICR7dGhpcy50eXBlfWAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIG1hdHJpeCwgZGVmaW5lZCBieSB0aGUgbXVsdGlwbGljYXRpb24gb2YgdGhpcyAqIG1hdHJpeC5cbiAgICogQHB1YmxpY1xuICAgKlxuICAgKiBAcGFyYW0ge01hdHJpeDR9IG1hdHJpeFxuICAgKiBAcmV0dXJucyB7TWF0cml4NH0gLSBOT1RFOiB0aGlzIG1heSBiZSB0aGUgc2FtZSBtYXRyaXghXG4gICAqL1xuICB0aW1lc01hdHJpeCggbWF0cml4ICkge1xuICAgIC8vIEkgKiBNID09PSBNICogSSA9PT0gSSAodGhlIGlkZW50aXR5KVxuICAgIGlmICggdGhpcy50eXBlID09PSBUeXBlcy5JREVOVElUWSB8fCBtYXRyaXgudHlwZSA9PT0gVHlwZXMuSURFTlRJVFkgKSB7XG4gICAgICByZXR1cm4gdGhpcy50eXBlID09PSBUeXBlcy5JREVOVElUWSA/IG1hdHJpeCA6IHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKCB0aGlzLnR5cGUgPT09IG1hdHJpeC50eXBlICkge1xuICAgICAgLy8gY3VycmVudGx5IHR3byBtYXRyaWNlcyBvZiB0aGUgc2FtZSB0eXBlIHdpbGwgcmVzdWx0IGluIHRoZSBzYW1lIHJlc3VsdCB0eXBlXG4gICAgICBpZiAoIHRoaXMudHlwZSA9PT0gVHlwZXMuVFJBTlNMQVRJT05fM0QgKSB7XG4gICAgICAgIC8vIGZhc3RlciBjb21iaW5hdGlvbiBvZiB0cmFuc2xhdGlvbnNcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXg0KFxuICAgICAgICAgIDEsIDAsIDAsIHRoaXMubTAzKCkgKyBtYXRyaXgubTAyKCksXG4gICAgICAgICAgMCwgMSwgMCwgdGhpcy5tMTMoKSArIG1hdHJpeC5tMTIoKSxcbiAgICAgICAgICAwLCAwLCAxLCB0aGlzLm0yMygpICsgbWF0cml4Lm0yMygpLFxuICAgICAgICAgIDAsIDAsIDAsIDEsIFR5cGVzLlRSQU5TTEFUSU9OXzNEICk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICggdGhpcy50eXBlID09PSBUeXBlcy5TQ0FMSU5HICkge1xuICAgICAgICAvLyBmYXN0ZXIgY29tYmluYXRpb24gb2Ygc2NhbGluZ1xuICAgICAgICByZXR1cm4gbmV3IE1hdHJpeDQoXG4gICAgICAgICAgdGhpcy5tMDAoKSAqIG1hdHJpeC5tMDAoKSwgMCwgMCwgMCxcbiAgICAgICAgICAwLCB0aGlzLm0xMSgpICogbWF0cml4Lm0xMSgpLCAwLCAwLFxuICAgICAgICAgIDAsIDAsIHRoaXMubTIyKCkgKiBtYXRyaXgubTIyKCksIDAsXG4gICAgICAgICAgMCwgMCwgMCwgMSwgVHlwZXMuU0NBTElORyApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICggdGhpcy50eXBlICE9PSBUeXBlcy5PVEhFUiAmJiBtYXRyaXgudHlwZSAhPT0gVHlwZXMuT1RIRVIgKSB7XG4gICAgICAvLyBjdXJyZW50bHkgdHdvIG1hdHJpY2VzIHRoYXQgYXJlIGFueXRoaW5nIGJ1dCBcIm90aGVyXCIgYXJlIHRlY2huaWNhbGx5IGFmZmluZSwgYW5kIHRoZSByZXN1bHQgd2lsbCBiZSBhZmZpbmVcblxuICAgICAgLy8gYWZmaW5lIGNhc2VcbiAgICAgIHJldHVybiBuZXcgTWF0cml4NChcbiAgICAgICAgdGhpcy5tMDAoKSAqIG1hdHJpeC5tMDAoKSArIHRoaXMubTAxKCkgKiBtYXRyaXgubTEwKCkgKyB0aGlzLm0wMigpICogbWF0cml4Lm0yMCgpLFxuICAgICAgICB0aGlzLm0wMCgpICogbWF0cml4Lm0wMSgpICsgdGhpcy5tMDEoKSAqIG1hdHJpeC5tMTEoKSArIHRoaXMubTAyKCkgKiBtYXRyaXgubTIxKCksXG4gICAgICAgIHRoaXMubTAwKCkgKiBtYXRyaXgubTAyKCkgKyB0aGlzLm0wMSgpICogbWF0cml4Lm0xMigpICsgdGhpcy5tMDIoKSAqIG1hdHJpeC5tMjIoKSxcbiAgICAgICAgdGhpcy5tMDAoKSAqIG1hdHJpeC5tMDMoKSArIHRoaXMubTAxKCkgKiBtYXRyaXgubTEzKCkgKyB0aGlzLm0wMigpICogbWF0cml4Lm0yMygpICsgdGhpcy5tMDMoKSxcbiAgICAgICAgdGhpcy5tMTAoKSAqIG1hdHJpeC5tMDAoKSArIHRoaXMubTExKCkgKiBtYXRyaXgubTEwKCkgKyB0aGlzLm0xMigpICogbWF0cml4Lm0yMCgpLFxuICAgICAgICB0aGlzLm0xMCgpICogbWF0cml4Lm0wMSgpICsgdGhpcy5tMTEoKSAqIG1hdHJpeC5tMTEoKSArIHRoaXMubTEyKCkgKiBtYXRyaXgubTIxKCksXG4gICAgICAgIHRoaXMubTEwKCkgKiBtYXRyaXgubTAyKCkgKyB0aGlzLm0xMSgpICogbWF0cml4Lm0xMigpICsgdGhpcy5tMTIoKSAqIG1hdHJpeC5tMjIoKSxcbiAgICAgICAgdGhpcy5tMTAoKSAqIG1hdHJpeC5tMDMoKSArIHRoaXMubTExKCkgKiBtYXRyaXgubTEzKCkgKyB0aGlzLm0xMigpICogbWF0cml4Lm0yMygpICsgdGhpcy5tMTMoKSxcbiAgICAgICAgdGhpcy5tMjAoKSAqIG1hdHJpeC5tMDAoKSArIHRoaXMubTIxKCkgKiBtYXRyaXgubTEwKCkgKyB0aGlzLm0yMigpICogbWF0cml4Lm0yMCgpLFxuICAgICAgICB0aGlzLm0yMCgpICogbWF0cml4Lm0wMSgpICsgdGhpcy5tMjEoKSAqIG1hdHJpeC5tMTEoKSArIHRoaXMubTIyKCkgKiBtYXRyaXgubTIxKCksXG4gICAgICAgIHRoaXMubTIwKCkgKiBtYXRyaXgubTAyKCkgKyB0aGlzLm0yMSgpICogbWF0cml4Lm0xMigpICsgdGhpcy5tMjIoKSAqIG1hdHJpeC5tMjIoKSxcbiAgICAgICAgdGhpcy5tMjAoKSAqIG1hdHJpeC5tMDMoKSArIHRoaXMubTIxKCkgKiBtYXRyaXgubTEzKCkgKyB0aGlzLm0yMigpICogbWF0cml4Lm0yMygpICsgdGhpcy5tMjMoKSxcbiAgICAgICAgMCwgMCwgMCwgMSwgVHlwZXMuQUZGSU5FICk7XG4gICAgfVxuXG4gICAgLy8gZ2VuZXJhbCBjYXNlXG4gICAgcmV0dXJuIG5ldyBNYXRyaXg0KFxuICAgICAgdGhpcy5tMDAoKSAqIG1hdHJpeC5tMDAoKSArIHRoaXMubTAxKCkgKiBtYXRyaXgubTEwKCkgKyB0aGlzLm0wMigpICogbWF0cml4Lm0yMCgpICsgdGhpcy5tMDMoKSAqIG1hdHJpeC5tMzAoKSxcbiAgICAgIHRoaXMubTAwKCkgKiBtYXRyaXgubTAxKCkgKyB0aGlzLm0wMSgpICogbWF0cml4Lm0xMSgpICsgdGhpcy5tMDIoKSAqIG1hdHJpeC5tMjEoKSArIHRoaXMubTAzKCkgKiBtYXRyaXgubTMxKCksXG4gICAgICB0aGlzLm0wMCgpICogbWF0cml4Lm0wMigpICsgdGhpcy5tMDEoKSAqIG1hdHJpeC5tMTIoKSArIHRoaXMubTAyKCkgKiBtYXRyaXgubTIyKCkgKyB0aGlzLm0wMygpICogbWF0cml4Lm0zMigpLFxuICAgICAgdGhpcy5tMDAoKSAqIG1hdHJpeC5tMDMoKSArIHRoaXMubTAxKCkgKiBtYXRyaXgubTEzKCkgKyB0aGlzLm0wMigpICogbWF0cml4Lm0yMygpICsgdGhpcy5tMDMoKSAqIG1hdHJpeC5tMzMoKSxcbiAgICAgIHRoaXMubTEwKCkgKiBtYXRyaXgubTAwKCkgKyB0aGlzLm0xMSgpICogbWF0cml4Lm0xMCgpICsgdGhpcy5tMTIoKSAqIG1hdHJpeC5tMjAoKSArIHRoaXMubTEzKCkgKiBtYXRyaXgubTMwKCksXG4gICAgICB0aGlzLm0xMCgpICogbWF0cml4Lm0wMSgpICsgdGhpcy5tMTEoKSAqIG1hdHJpeC5tMTEoKSArIHRoaXMubTEyKCkgKiBtYXRyaXgubTIxKCkgKyB0aGlzLm0xMygpICogbWF0cml4Lm0zMSgpLFxuICAgICAgdGhpcy5tMTAoKSAqIG1hdHJpeC5tMDIoKSArIHRoaXMubTExKCkgKiBtYXRyaXgubTEyKCkgKyB0aGlzLm0xMigpICogbWF0cml4Lm0yMigpICsgdGhpcy5tMTMoKSAqIG1hdHJpeC5tMzIoKSxcbiAgICAgIHRoaXMubTEwKCkgKiBtYXRyaXgubTAzKCkgKyB0aGlzLm0xMSgpICogbWF0cml4Lm0xMygpICsgdGhpcy5tMTIoKSAqIG1hdHJpeC5tMjMoKSArIHRoaXMubTEzKCkgKiBtYXRyaXgubTMzKCksXG4gICAgICB0aGlzLm0yMCgpICogbWF0cml4Lm0wMCgpICsgdGhpcy5tMjEoKSAqIG1hdHJpeC5tMTAoKSArIHRoaXMubTIyKCkgKiBtYXRyaXgubTIwKCkgKyB0aGlzLm0yMygpICogbWF0cml4Lm0zMCgpLFxuICAgICAgdGhpcy5tMjAoKSAqIG1hdHJpeC5tMDEoKSArIHRoaXMubTIxKCkgKiBtYXRyaXgubTExKCkgKyB0aGlzLm0yMigpICogbWF0cml4Lm0yMSgpICsgdGhpcy5tMjMoKSAqIG1hdHJpeC5tMzEoKSxcbiAgICAgIHRoaXMubTIwKCkgKiBtYXRyaXgubTAyKCkgKyB0aGlzLm0yMSgpICogbWF0cml4Lm0xMigpICsgdGhpcy5tMjIoKSAqIG1hdHJpeC5tMjIoKSArIHRoaXMubTIzKCkgKiBtYXRyaXgubTMyKCksXG4gICAgICB0aGlzLm0yMCgpICogbWF0cml4Lm0wMygpICsgdGhpcy5tMjEoKSAqIG1hdHJpeC5tMTMoKSArIHRoaXMubTIyKCkgKiBtYXRyaXgubTIzKCkgKyB0aGlzLm0yMygpICogbWF0cml4Lm0zMygpLFxuICAgICAgdGhpcy5tMzAoKSAqIG1hdHJpeC5tMDAoKSArIHRoaXMubTMxKCkgKiBtYXRyaXgubTEwKCkgKyB0aGlzLm0zMigpICogbWF0cml4Lm0yMCgpICsgdGhpcy5tMzMoKSAqIG1hdHJpeC5tMzAoKSxcbiAgICAgIHRoaXMubTMwKCkgKiBtYXRyaXgubTAxKCkgKyB0aGlzLm0zMSgpICogbWF0cml4Lm0xMSgpICsgdGhpcy5tMzIoKSAqIG1hdHJpeC5tMjEoKSArIHRoaXMubTMzKCkgKiBtYXRyaXgubTMxKCksXG4gICAgICB0aGlzLm0zMCgpICogbWF0cml4Lm0wMigpICsgdGhpcy5tMzEoKSAqIG1hdHJpeC5tMTIoKSArIHRoaXMubTMyKCkgKiBtYXRyaXgubTIyKCkgKyB0aGlzLm0zMygpICogbWF0cml4Lm0zMigpLFxuICAgICAgdGhpcy5tMzAoKSAqIG1hdHJpeC5tMDMoKSArIHRoaXMubTMxKCkgKiBtYXRyaXgubTEzKCkgKyB0aGlzLm0zMigpICogbWF0cml4Lm0yMygpICsgdGhpcy5tMzMoKSAqIG1hdHJpeC5tMzMoKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG11bHRpcGxpY2F0aW9uIG9mIHRoaXMgbWF0cml4IHRpbWVzIHRoZSBwcm92aWRlZCB2ZWN0b3JcbiAgICogQHB1YmxpY1xuICAgKlxuICAgKiBAcGFyYW0ge1ZlY3RvcjR9IHZlY3RvcjRcbiAgICogQHJldHVybnMge1ZlY3RvcjR9XG4gICAqL1xuICB0aW1lc1ZlY3RvcjQoIHZlY3RvcjQgKSB7XG4gICAgY29uc3QgeCA9IHRoaXMubTAwKCkgKiB2ZWN0b3I0LnggKyB0aGlzLm0wMSgpICogdmVjdG9yNC55ICsgdGhpcy5tMDIoKSAqIHZlY3RvcjQueiArIHRoaXMubTAzKCkgKiB2ZWN0b3I0Lnc7XG4gICAgY29uc3QgeSA9IHRoaXMubTEwKCkgKiB2ZWN0b3I0LnggKyB0aGlzLm0xMSgpICogdmVjdG9yNC55ICsgdGhpcy5tMTIoKSAqIHZlY3RvcjQueiArIHRoaXMubTEzKCkgKiB2ZWN0b3I0Lnc7XG4gICAgY29uc3QgeiA9IHRoaXMubTIwKCkgKiB2ZWN0b3I0LnggKyB0aGlzLm0yMSgpICogdmVjdG9yNC55ICsgdGhpcy5tMjIoKSAqIHZlY3RvcjQueiArIHRoaXMubTIzKCkgKiB2ZWN0b3I0Lnc7XG4gICAgY29uc3QgdyA9IHRoaXMubTMwKCkgKiB2ZWN0b3I0LnggKyB0aGlzLm0zMSgpICogdmVjdG9yNC55ICsgdGhpcy5tMzIoKSAqIHZlY3RvcjQueiArIHRoaXMubTMzKCkgKiB2ZWN0b3I0Lnc7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3I0KCB4LCB5LCB6LCB3ICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbXVsdGlwbGljYXRpb24gb2YgdGhpcyBtYXRyaXggdGltZXMgdGhlIHByb3ZpZGVkIHZlY3RvciAodHJlYXRpbmcgdGhpcyBtYXRyaXggYXMgaG9tb2dlbmVvdXMsIHNvIHRoYXRcbiAgICogaXQgaXMgdGhlIHRlY2huaWNhbCBtdWx0aXBsaWNhdGlvbiBvZiAoeCx5LHosMSkpLlxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjdG9yM30gdmVjdG9yM1xuICAgKiBAcmV0dXJucyB7VmVjdG9yM31cbiAgICovXG4gIHRpbWVzVmVjdG9yMyggdmVjdG9yMyApIHtcbiAgICByZXR1cm4gdGhpcy50aW1lc1ZlY3RvcjQoIHZlY3RvcjMudG9WZWN0b3I0KCkgKS50b1ZlY3RvcjMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBtdWx0aXBsaWNhdGlvbiBvZiB0aGlzIG1hdHJpeCdzIHRyYW5zcG9zZSB0aW1lcyB0aGUgcHJvdmlkZWQgdmVjdG9yXG4gICAqIEBwdWJsaWNcbiAgICpcbiAgICogQHBhcmFtIHtWZWN0b3I0fSB2ZWN0b3I0XG4gICAqIEByZXR1cm5zIHtWZWN0b3I0fVxuICAgKi9cbiAgdGltZXNUcmFuc3Bvc2VWZWN0b3I0KCB2ZWN0b3I0ICkge1xuICAgIGNvbnN0IHggPSB0aGlzLm0wMCgpICogdmVjdG9yNC54ICsgdGhpcy5tMTAoKSAqIHZlY3RvcjQueSArIHRoaXMubTIwKCkgKiB2ZWN0b3I0LnogKyB0aGlzLm0zMCgpICogdmVjdG9yNC53O1xuICAgIGNvbnN0IHkgPSB0aGlzLm0wMSgpICogdmVjdG9yNC54ICsgdGhpcy5tMTEoKSAqIHZlY3RvcjQueSArIHRoaXMubTIxKCkgKiB2ZWN0b3I0LnogKyB0aGlzLm0zMSgpICogdmVjdG9yNC53O1xuICAgIGNvbnN0IHogPSB0aGlzLm0wMigpICogdmVjdG9yNC54ICsgdGhpcy5tMTIoKSAqIHZlY3RvcjQueSArIHRoaXMubTIyKCkgKiB2ZWN0b3I0LnogKyB0aGlzLm0zMigpICogdmVjdG9yNC53O1xuICAgIGNvbnN0IHcgPSB0aGlzLm0wMygpICogdmVjdG9yNC54ICsgdGhpcy5tMTMoKSAqIHZlY3RvcjQueSArIHRoaXMubTIzKCkgKiB2ZWN0b3I0LnogKyB0aGlzLm0zMygpICogdmVjdG9yNC53O1xuICAgIHJldHVybiBuZXcgVmVjdG9yNCggeCwgeSwgeiwgdyApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG11bHRpcGxpY2F0aW9uIG9mIHRoaXMgbWF0cml4J3MgdHJhbnNwb3NlIHRpbWVzIHRoZSBwcm92aWRlZCB2ZWN0b3IgKGhvbW9nZW5lb3VzKS5cbiAgICogQHB1YmxpY1xuICAgKlxuICAgKiBAcGFyYW0ge1ZlY3RvcjN9IHZlY3RvcjNcbiAgICogQHJldHVybnMge1ZlY3RvcjN9XG4gICAqL1xuICB0aW1lc1RyYW5zcG9zZVZlY3RvcjMoIHZlY3RvcjMgKSB7XG4gICAgcmV0dXJuIHRoaXMudGltZXNUcmFuc3Bvc2VWZWN0b3I0KCB2ZWN0b3IzLnRvVmVjdG9yNCgpICkudG9WZWN0b3IzKCk7XG4gIH1cblxuICAvKipcbiAgICogRXF1aXZhbGVudCB0byB0aGUgbXVsdGlwbGljYXRpb24gb2YgKHgseSx6LDApLCBpZ25vcmluZyB0aGUgaG9tb2dlbmVvdXMgcGFydC5cbiAgICogQHB1YmxpY1xuICAgKlxuICAgKiBAcGFyYW0ge1ZlY3RvcjN9IHZlY3RvcjNcbiAgICogQHJldHVybnMge1ZlY3RvcjN9XG4gICAqL1xuICB0aW1lc1JlbGF0aXZlVmVjdG9yMyggdmVjdG9yMyApIHtcbiAgICBjb25zdCB4ID0gdGhpcy5tMDAoKSAqIHZlY3RvcjMueCArIHRoaXMubTEwKCkgKiB2ZWN0b3IzLnkgKyB0aGlzLm0yMCgpICogdmVjdG9yMy56O1xuICAgIGNvbnN0IHkgPSB0aGlzLm0wMSgpICogdmVjdG9yMy55ICsgdGhpcy5tMTEoKSAqIHZlY3RvcjMueSArIHRoaXMubTIxKCkgKiB2ZWN0b3IzLno7XG4gICAgY29uc3QgeiA9IHRoaXMubTAyKCkgKiB2ZWN0b3IzLnogKyB0aGlzLm0xMigpICogdmVjdG9yMy55ICsgdGhpcy5tMjIoKSAqIHZlY3RvcjMuejtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjMoIHgsIHksIHogKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkZXRlcm1pbmFudCBvZiB0aGlzIG1hdHJpeC5cbiAgICogQHB1YmxpY1xuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0RGV0ZXJtaW5hbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMubTAzKCkgKiB0aGlzLm0xMigpICogdGhpcy5tMjEoKSAqIHRoaXMubTMwKCkgLVxuICAgICAgICAgICB0aGlzLm0wMigpICogdGhpcy5tMTMoKSAqIHRoaXMubTIxKCkgKiB0aGlzLm0zMCgpIC1cbiAgICAgICAgICAgdGhpcy5tMDMoKSAqIHRoaXMubTExKCkgKiB0aGlzLm0yMigpICogdGhpcy5tMzAoKSArXG4gICAgICAgICAgIHRoaXMubTAxKCkgKiB0aGlzLm0xMygpICogdGhpcy5tMjIoKSAqIHRoaXMubTMwKCkgK1xuICAgICAgICAgICB0aGlzLm0wMigpICogdGhpcy5tMTEoKSAqIHRoaXMubTIzKCkgKiB0aGlzLm0zMCgpIC1cbiAgICAgICAgICAgdGhpcy5tMDEoKSAqIHRoaXMubTEyKCkgKiB0aGlzLm0yMygpICogdGhpcy5tMzAoKSAtXG4gICAgICAgICAgIHRoaXMubTAzKCkgKiB0aGlzLm0xMigpICogdGhpcy5tMjAoKSAqIHRoaXMubTMxKCkgK1xuICAgICAgICAgICB0aGlzLm0wMigpICogdGhpcy5tMTMoKSAqIHRoaXMubTIwKCkgKiB0aGlzLm0zMSgpICtcbiAgICAgICAgICAgdGhpcy5tMDMoKSAqIHRoaXMubTEwKCkgKiB0aGlzLm0yMigpICogdGhpcy5tMzEoKSAtXG4gICAgICAgICAgIHRoaXMubTAwKCkgKiB0aGlzLm0xMygpICogdGhpcy5tMjIoKSAqIHRoaXMubTMxKCkgLVxuICAgICAgICAgICB0aGlzLm0wMigpICogdGhpcy5tMTAoKSAqIHRoaXMubTIzKCkgKiB0aGlzLm0zMSgpICtcbiAgICAgICAgICAgdGhpcy5tMDAoKSAqIHRoaXMubTEyKCkgKiB0aGlzLm0yMygpICogdGhpcy5tMzEoKSArXG4gICAgICAgICAgIHRoaXMubTAzKCkgKiB0aGlzLm0xMSgpICogdGhpcy5tMjAoKSAqIHRoaXMubTMyKCkgLVxuICAgICAgICAgICB0aGlzLm0wMSgpICogdGhpcy5tMTMoKSAqIHRoaXMubTIwKCkgKiB0aGlzLm0zMigpIC1cbiAgICAgICAgICAgdGhpcy5tMDMoKSAqIHRoaXMubTEwKCkgKiB0aGlzLm0yMSgpICogdGhpcy5tMzIoKSArXG4gICAgICAgICAgIHRoaXMubTAwKCkgKiB0aGlzLm0xMygpICogdGhpcy5tMjEoKSAqIHRoaXMubTMyKCkgK1xuICAgICAgICAgICB0aGlzLm0wMSgpICogdGhpcy5tMTAoKSAqIHRoaXMubTIzKCkgKiB0aGlzLm0zMigpIC1cbiAgICAgICAgICAgdGhpcy5tMDAoKSAqIHRoaXMubTExKCkgKiB0aGlzLm0yMygpICogdGhpcy5tMzIoKSAtXG4gICAgICAgICAgIHRoaXMubTAyKCkgKiB0aGlzLm0xMSgpICogdGhpcy5tMjAoKSAqIHRoaXMubTMzKCkgK1xuICAgICAgICAgICB0aGlzLm0wMSgpICogdGhpcy5tMTIoKSAqIHRoaXMubTIwKCkgKiB0aGlzLm0zMygpICtcbiAgICAgICAgICAgdGhpcy5tMDIoKSAqIHRoaXMubTEwKCkgKiB0aGlzLm0yMSgpICogdGhpcy5tMzMoKSAtXG4gICAgICAgICAgIHRoaXMubTAwKCkgKiB0aGlzLm0xMigpICogdGhpcy5tMjEoKSAqIHRoaXMubTMzKCkgLVxuICAgICAgICAgICB0aGlzLm0wMSgpICogdGhpcy5tMTAoKSAqIHRoaXMubTIyKCkgKiB0aGlzLm0zMygpICtcbiAgICAgICAgICAgdGhpcy5tMDAoKSAqIHRoaXMubTExKCkgKiB0aGlzLm0yMigpICogdGhpcy5tMzMoKTtcbiAgfVxuXG4gIGdldCBkZXRlcm1pbmFudCgpIHsgcmV0dXJuIHRoaXMuZ2V0RGV0ZXJtaW5hbnQoKTsgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIGZvcm0gb2YgdGhpcyBvYmplY3RcbiAgICogQHB1YmxpY1xuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMubTAwKCl9ICR7dGhpcy5tMDEoKX0gJHt0aGlzLm0wMigpfSAke3RoaXMubTAzKCl9XFxuJHtcbiAgICAgIHRoaXMubTEwKCl9ICR7dGhpcy5tMTEoKX0gJHt0aGlzLm0xMigpfSAke3RoaXMubTEzKCl9XFxuJHtcbiAgICAgIHRoaXMubTIwKCl9ICR7dGhpcy5tMjEoKX0gJHt0aGlzLm0yMigpfSAke3RoaXMubTIzKCl9XFxuJHtcbiAgICAgIHRoaXMubTMwKCl9ICR7dGhpcy5tMzEoKX0gJHt0aGlzLm0zMigpfSAke3RoaXMubTMzKCl9YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlcyB0aGlzIG1hdHJpeCBlZmZlY3RpdmVseSBpbW11dGFibGUgdG8gdGhlIG5vcm1hbCBtZXRob2RzIChleGNlcHQgZGlyZWN0IHNldHRlcnM/KVxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEByZXR1cm5zIHtNYXRyaXgzfSAtIFNlbGYgcmVmZXJlbmNlXG4gICAqL1xuICBtYWtlSW1tdXRhYmxlKCkge1xuICAgIGlmICggYXNzZXJ0ICkge1xuICAgICAgdGhpcy5yb3dNYWpvciA9ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCAnQ2Fubm90IG1vZGlmeSBpbW11dGFibGUgbWF0cml4JyApO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ29waWVzIHRoZSBlbnRyaWVzIG9mIHRoaXMgbWF0cml4IG92ZXIgdG8gYW4gYXJiaXRyYXJ5IGFycmF5ICh0eXBlZCBvciBub3JtYWwpLlxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl8RmxvYXQzMkFycmF5fEZsb2F0NjRBcnJheX0gYXJyYXlcbiAgICogQHJldHVybnMge0FycmF5fEZsb2F0MzJBcnJheXxGbG9hdDY0QXJyYXl9IC0gUmV0dXJuZWQgZm9yIGNoYWluaW5nXG4gICAqL1xuICBjb3B5VG9BcnJheSggYXJyYXkgKSB7XG4gICAgYXJyYXlbIDAgXSA9IHRoaXMubTAwKCk7XG4gICAgYXJyYXlbIDEgXSA9IHRoaXMubTEwKCk7XG4gICAgYXJyYXlbIDIgXSA9IHRoaXMubTIwKCk7XG4gICAgYXJyYXlbIDMgXSA9IHRoaXMubTMwKCk7XG4gICAgYXJyYXlbIDQgXSA9IHRoaXMubTAxKCk7XG4gICAgYXJyYXlbIDUgXSA9IHRoaXMubTExKCk7XG4gICAgYXJyYXlbIDYgXSA9IHRoaXMubTIxKCk7XG4gICAgYXJyYXlbIDcgXSA9IHRoaXMubTMxKCk7XG4gICAgYXJyYXlbIDggXSA9IHRoaXMubTAyKCk7XG4gICAgYXJyYXlbIDkgXSA9IHRoaXMubTEyKCk7XG4gICAgYXJyYXlbIDEwIF0gPSB0aGlzLm0yMigpO1xuICAgIGFycmF5WyAxMSBdID0gdGhpcy5tMzIoKTtcbiAgICBhcnJheVsgMTIgXSA9IHRoaXMubTAzKCk7XG4gICAgYXJyYXlbIDEzIF0gPSB0aGlzLm0xMygpO1xuICAgIGFycmF5WyAxNCBdID0gdGhpcy5tMjMoKTtcbiAgICBhcnJheVsgMTUgXSA9IHRoaXMubTMzKCk7XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gaWRlbnRpdHkgbWF0cml4LlxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEByZXR1cm5zIHtNYXRyaXg0fVxuICAgKi9cbiAgc3RhdGljIGlkZW50aXR5KCkge1xuICAgIHJldHVybiBuZXcgTWF0cml4NChcbiAgICAgIDEsIDAsIDAsIDAsXG4gICAgICAwLCAxLCAwLCAwLFxuICAgICAgMCwgMCwgMSwgMCxcbiAgICAgIDAsIDAsIDAsIDEsXG4gICAgICBUeXBlcy5JREVOVElUWSApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB0cmFuc2xhdGlvbiBtYXRyaXguXG4gICAqIEBwdWJsaWNcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHpcbiAgICogQHJldHVybnMge01hdHJpeDR9XG4gICAqL1xuICBzdGF0aWMgdHJhbnNsYXRpb24oIHgsIHksIHogKSB7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXg0KFxuICAgICAgMSwgMCwgMCwgeCxcbiAgICAgIDAsIDEsIDAsIHksXG4gICAgICAwLCAwLCAxLCB6LFxuICAgICAgMCwgMCwgMCwgMSxcbiAgICAgIFR5cGVzLlRSQU5TTEFUSU9OXzNEICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHRyYW5zbGF0aW9uIG1hdHJpeCBjb21wdXRlZCBmcm9tIGEgdmVjdG9yLlxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjdG9yM3xWZWN0b3I0fSB2ZWN0b3JcbiAgICogQHJldHVybnMge01hdHJpeDR9XG4gICAqL1xuICBzdGF0aWMgdHJhbnNsYXRpb25Gcm9tVmVjdG9yKCB2ZWN0b3IgKSB7XG4gICAgcmV0dXJuIE1hdHJpeDQudHJhbnNsYXRpb24oIHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnogKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbWF0cml4IHRoYXQgc2NhbGVzIHRoaW5ncyBpbiBlYWNoIGRpbWVuc2lvbi5cbiAgICogQHB1YmxpY1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcGFyYW0ge251bWJlcn0gelxuICAgKiBAcmV0dXJucyB7TWF0cml4NH1cbiAgICovXG4gIHN0YXRpYyBzY2FsaW5nKCB4LCB5LCB6ICkge1xuICAgIC8vIGFsbG93IHVzaW5nIG9uZSBwYXJhbWV0ZXIgdG8gc2NhbGUgZXZlcnl0aGluZ1xuICAgIHkgPSB5ID09PSB1bmRlZmluZWQgPyB4IDogeTtcbiAgICB6ID0geiA9PT0gdW5kZWZpbmVkID8geCA6IHo7XG5cbiAgICByZXR1cm4gbmV3IE1hdHJpeDQoXG4gICAgICB4LCAwLCAwLCAwLFxuICAgICAgMCwgeSwgMCwgMCxcbiAgICAgIDAsIDAsIHosIDAsXG4gICAgICAwLCAwLCAwLCAxLFxuICAgICAgVHlwZXMuU0NBTElORyApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBob21vZ2VuZW91cyBtYXRyaXggcm90YXRpb24gZGVmaW5lZCBieSBhIHJvdGF0aW9uIG9mIHRoZSBzcGVjaWZpZWQgYW5nbGUgYXJvdW5kIHRoZSBnaXZlbiB1bml0IGF4aXMuXG4gICAqIEBwdWJsaWNcbiAgICpcbiAgICogQHBhcmFtIHtWZWN0b3IzfSBheGlzIC0gbm9ybWFsaXplZFxuICAgKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgLSBpbiByYWRpYW5zXG4gICAqIEByZXR1cm5zIHtNYXRyaXg0fVxuICAgKi9cbiAgc3RhdGljIHJvdGF0aW9uQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApIHtcbiAgICBjb25zdCBjID0gTWF0aC5jb3MoIGFuZ2xlICk7XG4gICAgY29uc3QgcyA9IE1hdGguc2luKCBhbmdsZSApO1xuICAgIGNvbnN0IEMgPSAxIC0gYztcblxuICAgIHJldHVybiBuZXcgTWF0cml4NChcbiAgICAgIGF4aXMueCAqIGF4aXMueCAqIEMgKyBjLCBheGlzLnggKiBheGlzLnkgKiBDIC0gYXhpcy56ICogcywgYXhpcy54ICogYXhpcy56ICogQyArIGF4aXMueSAqIHMsIDAsXG4gICAgICBheGlzLnkgKiBheGlzLnggKiBDICsgYXhpcy56ICogcywgYXhpcy55ICogYXhpcy55ICogQyArIGMsIGF4aXMueSAqIGF4aXMueiAqIEMgLSBheGlzLnggKiBzLCAwLFxuICAgICAgYXhpcy56ICogYXhpcy54ICogQyAtIGF4aXMueSAqIHMsIGF4aXMueiAqIGF4aXMueSAqIEMgKyBheGlzLnggKiBzLCBheGlzLnogKiBheGlzLnogKiBDICsgYywgMCxcbiAgICAgIDAsIDAsIDAsIDEsXG4gICAgICBUeXBlcy5BRkZJTkUgKTtcbiAgfVxuXG4gIC8vIFRPRE86IGFkZCBpbiByb3RhdGlvbiBmcm9tIHF1YXRlcm5pb24sIGFuZCBmcm9tIHF1YXQgKyB0cmFuc2xhdGlvblxuXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSByb3RhdGlvbiBtYXRyaXggaW4gdGhlIHl6IHBsYW5lLlxuICAgKiBAcHVibGljXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSAtIGluIHJhZGlhbnNcbiAgICogQHJldHVybnMge01hdHJpeDR9XG4gICAqL1xuICBzdGF0aWMgcm90YXRpb25YKCBhbmdsZSApIHtcbiAgICBjb25zdCBjID0gTWF0aC5jb3MoIGFuZ2xlICk7XG4gICAgY29uc3QgcyA9IE1hdGguc2luKCBhbmdsZSApO1xuXG4gICAgcmV0dXJuIG5ldyBNYXRyaXg0KFxuICAgICAgMSwgMCwgMCwgMCxcbiAgICAgIDAsIGMsIC1zLCAwLFxuICAgICAgMCwgcywgYywgMCxcbiAgICAgIDAsIDAsIDAsIDEsXG4gICAgICBUeXBlcy5BRkZJTkUgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcm90YXRpb24gbWF0cml4IGluIHRoZSB4eiBwbGFuZS5cbiAgICogQHB1YmxpY1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgLSBpbiByYWRpYW5zXG4gICAqIEByZXR1cm5zIHtNYXRyaXg0fVxuICAgKi9cbiAgc3RhdGljIHJvdGF0aW9uWSggYW5nbGUgKSB7XG4gICAgY29uc3QgYyA9IE1hdGguY29zKCBhbmdsZSApO1xuICAgIGNvbnN0IHMgPSBNYXRoLnNpbiggYW5nbGUgKTtcblxuICAgIHJldHVybiBuZXcgTWF0cml4NChcbiAgICAgIGMsIDAsIHMsIDAsXG4gICAgICAwLCAxLCAwLCAwLFxuICAgICAgLXMsIDAsIGMsIDAsXG4gICAgICAwLCAwLCAwLCAxLFxuICAgICAgVHlwZXMuQUZGSU5FICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHJvdGF0aW9uIG1hdHJpeCBpbiB0aGUgeHkgcGxhbmUuXG4gICAqIEBwdWJsaWNcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gaW4gcmFkaWFuc1xuICAgKiBAcmV0dXJucyB7TWF0cml4NH1cbiAgICovXG4gIHN0YXRpYyByb3RhdGlvblooIGFuZ2xlICkge1xuICAgIGNvbnN0IGMgPSBNYXRoLmNvcyggYW5nbGUgKTtcbiAgICBjb25zdCBzID0gTWF0aC5zaW4oIGFuZ2xlICk7XG5cbiAgICByZXR1cm4gbmV3IE1hdHJpeDQoXG4gICAgICBjLCAtcywgMCwgMCxcbiAgICAgIHMsIGMsIDAsIDAsXG4gICAgICAwLCAwLCAxLCAwLFxuICAgICAgMCwgMCwgMCwgMSxcbiAgICAgIFR5cGVzLkFGRklORSApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHNwZWNpZmljIHBlcnNwZWN0aXZlIG1hdHJpeCBuZWVkZWQgZm9yIGNlcnRhaW4gV2ViR0wgY29udGV4dHMuXG4gICAqIEBwdWJsaWNcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGZvdllSYWRpYW5zXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhc3BlY3QgLSBhc3BlY3QgPT09IHdpZHRoIC8gaGVpZ2h0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB6TmVhclxuICAgKiBAcGFyYW0ge251bWJlcn0gekZhclxuICAgKiBAcmV0dXJucyB7TWF0cml4NH1cbiAgICovXG4gIHN0YXRpYyBnbHVQZXJzcGVjdGl2ZSggZm92WVJhZGlhbnMsIGFzcGVjdCwgek5lYXIsIHpGYXIgKSB7XG4gICAgY29uc3QgY290YW5nZW50ID0gTWF0aC5jb3MoIGZvdllSYWRpYW5zICkgLyBNYXRoLnNpbiggZm92WVJhZGlhbnMgKTtcblxuICAgIHJldHVybiBuZXcgTWF0cml4NChcbiAgICAgIGNvdGFuZ2VudCAvIGFzcGVjdCwgMCwgMCwgMCxcbiAgICAgIDAsIGNvdGFuZ2VudCwgMCwgMCxcbiAgICAgIDAsIDAsICggekZhciArIHpOZWFyICkgLyAoIHpOZWFyIC0gekZhciApLCAoIDIgKiB6RmFyICogek5lYXIgKSAvICggek5lYXIgLSB6RmFyICksXG4gICAgICAwLCAwLCAtMSwgMCApO1xuICB9XG59XG5cbmRvdC5yZWdpc3RlciggJ01hdHJpeDQnLCBNYXRyaXg0ICk7XG5cbmNvbnN0IFR5cGVzID0gRW51bWVyYXRpb25EZXByZWNhdGVkLmJ5S2V5cyggW1xuICAnT1RIRVInLFxuICAnSURFTlRJVFknLFxuICAnVFJBTlNMQVRJT05fM0QnLFxuICAnU0NBTElORycsXG4gICdBRkZJTkUnXG5dICk7XG5cbi8vIEBwdWJsaWMge0VudW1lcmF0aW9uRGVwcmVjYXRlZH1cbk1hdHJpeDQuVHlwZXMgPSBUeXBlcztcblxuLy8gQHB1YmxpYyB7TWF0cml4NH1cbk1hdHJpeDQuSURFTlRJVFkgPSBuZXcgTWF0cml4NCgpLm1ha2VJbW11dGFibGUoKTtcblxuZXhwb3J0IGRlZmF1bHQgTWF0cml4NDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsT0FBT0EscUJBQXFCLE1BQU0sNkNBQTZDO0FBQy9FLE9BQU9DLEdBQUcsTUFBTSxVQUFVO0FBQzFCLE9BQU9DLE9BQU8sTUFBTSxjQUFjO0FBQ2xDLE9BQU9DLE9BQU8sTUFBTSxjQUFjO0FBRWxDLE1BQU1DLFlBQVksR0FBR0MsTUFBTSxDQUFDRCxZQUFZLElBQUlFLEtBQUs7QUFFakQsTUFBTUMsT0FBTyxDQUFDO0VBQ1o7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsV0FBV0EsQ0FBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEVBQUc7SUFFbEc7SUFDQSxJQUFJLENBQUNDLE9BQU8sR0FBRyxJQUFJdEIsWUFBWSxDQUFFLEVBQUUsQ0FBRTs7SUFFckM7SUFDQSxJQUFJLENBQUNxQixJQUFJLEdBQUdF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QyxJQUFJLENBQUNYLEdBQUcsRUFBRSxFQUFFLElBQUksQ0FBQ0ksR0FBRyxFQUFFLEVBQUUsSUFBSSxDQUFDSSxHQUFHLEVBQUUsRUFBRSxJQUFJLENBQUNJLEdBQUcsRUFBRSxFQUM5QyxJQUFJLENBQUNYLEdBQUcsRUFBRSxFQUFFLElBQUksQ0FBQ0ksR0FBRyxFQUFFLEVBQUUsSUFBSSxDQUFDSSxHQUFHLEVBQUUsRUFBRSxJQUFJLENBQUNJLEdBQUcsRUFBRSxFQUM5QyxJQUFJLENBQUNYLEdBQUcsRUFBRSxFQUFFLElBQUksQ0FBQ0ksR0FBRyxFQUFFLEVBQUUsSUFBSSxDQUFDSSxHQUFHLEVBQUUsRUFBRSxJQUFJLENBQUNJLEdBQUcsRUFBRSxDQUFFO0VBQ3BEOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFK0IsT0FBT0EsQ0FBQSxFQUFHO0lBQ1IsT0FBTyxJQUFJMUUsT0FBTyxDQUNoQixDQUFDLElBQUksQ0FBQzRCLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQ0MsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUNDLEdBQUcsRUFBRSxFQUNsRCxDQUFDLElBQUksQ0FBQ0MsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUNDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQ0MsR0FBRyxFQUFFLEVBQ2xELENBQUMsSUFBSSxDQUFDQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQ0MsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUNDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDQyxHQUFHLEVBQUUsRUFDbEQsQ0FBQyxJQUFJLENBQUNDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQ0MsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUNDLEdBQUcsRUFBRSxD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RyxJQUFJLENBQUNQLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ2EsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDZCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNTLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0ssR0FBRyxFQUFFLElBQUtpQyxHQUFHLEVBQ2pQLENBQUUsQ0FBQyxJQUFJLENBQUNuQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNQLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0gsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNTLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1gsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDVSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNYLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0ssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDTixHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNhLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1AsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRixHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNILEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ2EsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDZCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1MsR0FBRyxFQUFFLElBQUtpQyxHQUFHLEVBQ2xQLENBQUUsSUFBSSxDQUFDdkMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNILEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0UsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNQLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ00sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ04sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNILEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0YsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNTLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1YsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxJQUFLcUMsR0FBRyxFQUNqUCxDQUFFLElBQUksQ0FBQ3BDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0YsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ00sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ04sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNQLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1UsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNILEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0YsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNYLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ00sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSyxHQUFHLEVBQUUsSUFBS2lDLEdBQUcsRUFDalAsQ0FBRSxDQUFDLElBQUksQ0FBQ3BDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0YsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ00sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDWCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNTLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1YsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNYLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ2MsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNILEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ04sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDYSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNmLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1UsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSyxHQUFHLEVBQUUsSUFBS2lDLEdBQUcsRUFDbFAsQ0FBRSxJQUFJLENBQUNwQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNOLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0gsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNVLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1gsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNWLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0ssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNjLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1AsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNGLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ2EsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDZixHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNNLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1MsR0FBRyxFQUFFLElBQUtpQyxHQUFHLEVBQ2pQLENBQUUsQ0FBQyxJQUFJLENBQUN4QyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNGLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0gsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNNLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1AsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNOLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0ssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNVLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0gsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNGLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1MsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDWCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNNLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0ssR0FBRyxFQUFFLElBQUtxQyxHQUFHLEVBQ2xQLENBQUUsQ0FBQyxJQUFJLENBQUNwQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNILEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0YsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ04sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNQLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ00sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNTLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0YsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNILEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1UsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDWCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ00sR0FBRyxFQUFFLElBQUtpQyxHQUFHLEVBQ2xQLENBQUUsSUFBSSxDQUFDcEMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNOLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0ssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNWLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1MsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDWCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNVLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1gsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDYSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNGLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0gsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNjLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ2YsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNNLEdBQUcsRUFBRSxJQUFLaUMsR0FBRyxFQUNqUCxDQUFFLENBQUMsSUFBSSxDQUFDcEMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNGLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0MsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNWLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1MsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDWCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNNLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1AsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDYSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNOLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0gsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNjLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ2YsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNVLEdBQUcsRUFBRSxJQUFLaUMsR0FBRyxFQUNsUCxDQUFFLElBQUksQ0FBQ3hDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0gsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRixHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0ssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDTixHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1AsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDTSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNQLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1MsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRixHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNILEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0gsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDVSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNYLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0ssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDTSxHQUFHLEVBQUUsSUFBS3FDLEdBQUcsRUFDalAsQ0FBRSxJQUFJLENBQUNwQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNILEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0gsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1AsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDTSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNQLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0ssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDTixHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNTLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0gsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRixHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNILEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1MsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDVixHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0ssR0FBRyxFQUFFLElBQUtrQyxHQUFHLEVBQ2pQLENBQUUsQ0FBQyxJQUFJLENBQUNwQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNILEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1AsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDTSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1gsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDVSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNYLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1MsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDVixHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNhLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0gsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRixHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNQLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ2EsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDZCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNTLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0ssR0FBRyxFQUFFLElBQUtrQyxHQUFHLEVBQ2xQLENBQUUsSUFBSSxDQUFDcEMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNILEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0UsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNYLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ1UsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDWCxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ04sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDYSxHQUFH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LElBQUksQ0FBQ0wsR0FBRyxFQUFFLEdBQUdILE1BQU0sQ0FBQ1ksR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUixHQUFHLEVBQUUsRUFDOUYsSUFBSSxDQUFDQyxHQUFHLEVBQUUsR0FBR0wsTUFBTSxDQUFDQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUFHTixNQUFNLENBQUNLLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0UsR0FBRyxFQUFFLEdBQUdQLE1BQU0sQ0FBQ1MsR0FBRyxFQUFFLEVBQ2pGLElBQUksQ0FBQ0osR0FBRyxFQUFFLEdBQUdMLE1BQU0sQ0FBQ0UsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSSxHQUFHLEVBQUUsR0FBR04sTUFBTSxDQUFDTSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNDLEdBQUcsRUFBRSxHQUFHUCxNQUFNLENBQUNVLEdBQUcsRUFBRSxFQUNqRixJQUFJLENBQUNMLEdBQUcsRUFBRSxHQUFHTCxNQUFNLENBQUNHLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0csR0FBRyxFQUFFLEdBQUdOLE1BQU0sQ0FBQ08sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDQSxHQUFHLEVBQUUsR0FBR1AsTUFBTSxDQUFDVyxHQUFHLEVBQUUsRUFDakYsSUFBSSxDQUFDTixHQUFHLEVBQUUsR0FBR0wsTUFBTSxDQUFDSSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNFLEdBQUcsRUFBRSxHQUFHTixNQUFNLENBQUNRLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0QsR0FBRyxFQUFFLEdBQUdQLE1BQU0sQ0FBQ1ksR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSixHQUFHLEVBQUUsRUFDOUYsSUFBSSxDQUFDQyxHQUFHLEVBQUUsR0FBR1QsTUFBTSxDQUFDQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNTLEdBQUcsRUFBRSxHQUFHVixNQUFNLENBQUNLLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ00sR0FBRyxFQUFFLEdBQUdYLE1BQU0sQ0FBQ1MsR0FBRyxFQUFFLEVBQ2pGLElBQUksQ0FBQ0EsR0FBRyxFQUFFLEdBQUdULE1BQU0sQ0FBQ0UsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUSxHQUFHLEVBQUUsR0FBR1YsTUFBTSxDQUFDTSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUFHWCxNQUFNLENBQUNVLEdBQUcsRUFBRSxFQUNqRixJQUFJLENBQUNELEdBQUcsRUFBRSxHQUFHVCxNQUFNLENBQUNHLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ08sR0FBRyxFQUFFLEdBQUdWLE1BQU0sQ0FBQ08sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSSxHQUFHLEVBQUUsR0FBR1gsTUFBTSxDQUFDVyxHQUFHLEVBQUUsRUFDakYsSUFBSSxDQUFDRixHQUFHLEVBQUUsR0FBR1QsTUFBTSxDQUFDSSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNNLEdBQUcsRUFBRSxHQUFHVixNQUFNLENBQUNRLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0csR0FBRyxFQUFFLEdBQUdYLE1BQU0sQ0FBQ1ksR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDQSxHQUFHLEVBQUUsRUFDOUYsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFbkIsS0FBSyxDQUFDSSxNQUFNLENBQUU7SUFDOUI7O0lBRUE7SUFDQSxPQUFPLElBQUl4QixPQUFPLENBQ2hCLElBQUksQ0FBQzRCLEdBQUcsRUFBRSxHQUFHRCxNQUFNLENBQUNDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0MsR0FBRyxFQUFFLEdBQUdGLE1BQU0sQ0FBQ0ssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRixHQUFHLEVBQUUsR0FBR0gsTUFBTSxDQUFDUyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNMLEdBQUcsRUFBRSxHQUFHSixNQUFNLENBQUNhLEdBQUcsRUFBRSxFQUM3RyxJQUFJLENBQUNaLEdBQUcsRUFBRSxHQUFHRCxNQUFNLENBQUNFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0EsR0FBRyxFQUFFLEdBQUdGLE1BQU0sQ0FBQ00sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSCxHQUFHLEVBQUUsR0FBR0gsTUFBTSxDQUFDVSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNOLEdBQUcsRUFBRSxHQUFHSixNQUFNLENBQUNjLEdBQUcsRUFBRSxFQUM3RyxJQUFJLENBQUNiLEdBQUcsRUFBRSxHQUFHRCxNQUFNLENBQUNHLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0QsR0FBRyxFQUFFLEdBQUdGLE1BQU0sQ0FBQ08sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSixHQUFHLEVBQUUsR0FBR0gsTUFBTSxDQUFDVyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNQLEdBQUcsRUFBRSxHQUFHSixNQUFNLENBQUNlLEdBQUcsRUFBRSxFQUM3RyxJQUFJLENBQUNkLEdBQUcsRUFBRSxHQUFHRCxNQUFNLENBQUNJLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0YsR0FBRyxFQUFFLEdBQUdGLE1BQU0sQ0FBQ1EsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDTCxHQUFHLEVBQUUsR0FBR0gsTUFBTSxDQUFDWSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNSLEdBQUcsRUFBRSxHQUFHSixNQUFNLENBQUNnQixHQUFHLEVBQUUsRUFDN0csSUFBSSxDQUFDWCxHQUFHLEVBQUUsR0FBR0wsTUFBTSxDQUFDQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUFHTixNQUFNLENBQUNLLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0UsR0FBRyxFQUFFLEdBQUdQLE1BQU0sQ0FBQ1MsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRCxHQUFHLEVBQUUsR0FBR1IsTUFBTSxDQUFDYSxHQUFHLEVBQUUsRUFDN0csSUFBSSxDQUFDUixHQUFHLEVBQUUsR0FBR0wsTUFBTSxDQUFDRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNJLEdBQUcsRUFBRSxHQUFHTixNQUFNLENBQUNNLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0MsR0FBRyxFQUFFLEdBQUdQLE1BQU0sQ0FBQ1UsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRixHQUFHLEVBQUUsR0FBR1IsTUFBTSxDQUFDYyxHQUFHLEVBQUUsRUFDN0csSUFBSSxDQUFDVCxHQUFHLEVBQUUsR0FBR0wsTUFBTSxDQUFDRyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNHLEdBQUcsRUFBRSxHQUFHTixNQUFNLENBQUNPLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0EsR0FBRyxFQUFFLEdBQUdQLE1BQU0sQ0FBQ1csR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSCxHQUFHLEVBQUUsR0FBR1IsTUFBTSxDQUFDZSxHQUFHLEVBQUUsRUFDN0csSUFBSSxDQUFDVixHQUFHLEVBQUUsR0FBR0wsTUFBTSxDQUFDSSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNFLEdBQUcsRUFBRSxHQUFHTixNQUFNLENBQUNRLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0QsR0FBRyxFQUFFLEdBQUdQLE1BQU0sQ0FBQ1ksR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSixHQUFHLEVBQUUsR0FBR1IsTUFBTSxDQUFDZ0IsR0FBRyxFQUFFLEVBQzdHLElBQUksQ0FBQ1AsR0FBRyxFQUFFLEdBQUdULE1BQU0sQ0FBQ0MsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUyxHQUFHLEVBQUUsR0FBR1YsTUFBTSxDQUFDSyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNNLEdBQUcsRUFBRSxHQUFHWCxNQUFNLENBQUNTLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0csR0FBRyxFQUFFLEdBQUdaLE1BQU0sQ0FBQ2EsR0FBRyxFQUFFLEVBQzdHLElBQUksQ0FBQ0osR0FBRyxFQUFFLEdBQUdULE1BQU0sQ0FBQ0UsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDUSxHQUFHLEVBQUUsR0FBR1YsTUFBTSxDQUFDTSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUFHWCxNQUFNLENBQUNVLEdBQUcsRUFBRSxHQUFHLElBQUks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Q0ssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNHLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNULEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0UsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNFLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNYLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ00sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNFLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNWLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0csR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDTSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNDLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNYLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0ssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNDLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNULEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0csR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNYLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0ssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNWLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0MsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDTSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNHLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNiLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ08sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNHLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNYLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0UsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDTyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNFLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNiLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ00sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNFLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNWLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0UsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNNLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNiLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ00sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNNLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNYLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0MsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNkLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ08sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNiLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0csR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDTyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNHLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNkLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0ssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDTSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNHLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNaLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0csR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNPLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNkLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0ssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNPLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNiLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0UsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNNLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNmLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ00sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDRyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNNLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNkLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0csR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDTSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRSxHQUNqRCxJQUFJLENBQUNmLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQ0ssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDSyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUNLLEdBQUcsRUFBRTtFQUMxRDtFQUVBLElBQUlxRCxXQUFXQSxDQUFBLEVBQUc7SUFBRSxPQUFPLElBQUksQ0FBQ2hCLGNBQWMsRUFBRTtFQUFFOztFQUVsRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRWlCLFFBQVFBLENBQUEsRUFBRztJQUNULE9BQVEsR0FBRSxJQUFJLENBQUNyRSxHQUFHLEVBQUcsSUFBRyxJQUFJLENBQUNDLEdBQUcsRUFBRyxJQUFHLElBQUksQ0FBQ0MsR0FBRyxFQUFHLElBQUcsSUFBSSxDQUFDQyxHQUFHLEVBQUcsS0FDN0QsSUFBSSxDQUFDQyxHQUFHLEVBQUcsSUFBRyxJQUFJLENBQUNDLEdBQUcsRUFBRyxJQUFHLElBQUksQ0FBQ0MsR0FBRyxFQUFHLElBQUcs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
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/toSVGNumber.js
// Copyright 2020-2021, University of Colorado Boulder

/**
 * Outputs a number for use in SVG's style/transform/path strings.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



/**
 * Outputs a number for use in SVG's style/transform/path strings.
 *
 * We need to prevent the numbers from being in an exponential toString form, since the CSS transform does not support
 * that.
 *
 * @param {number} number
 * @returns {string}
 */
function toSVGNumber(number) {
  // Largest guaranteed number of digits according to https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toFixed
  // See https://github.com/phetsims/dot/issues/36
  return number.toFixed(20); // eslint-disable-line bad-sim-text
}

js_dot.register('toSVGNumber', toSVGNumber);
/* harmony default export */ const js_toSVGNumber = (toSVGNumber);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3QiLCJ0b1NWR051bWJlciIsIm51bWJlciIsInRvRml4ZWQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbInRvU1ZHTnVtYmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIE91dHB1dHMgYSBudW1iZXIgZm9yIHVzZSBpbiBTVkcncyBzdHlsZS90cmFuc2Zvcm0vcGF0aCBzdHJpbmdzLlxuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cbiAqL1xuXG5pbXBvcnQgZG90IGZyb20gJy4vZG90LmpzJztcblxuLyoqXG4gKiBPdXRwdXRzIGEgbnVtYmVyIGZvciB1c2UgaW4gU1ZHJ3Mgc3R5bGUvdHJhbnNmb3JtL3BhdGggc3RyaW5ncy5cbiAqXG4gKiBXZSBuZWVkIHRvIHByZXZlbnQgdGhlIG51bWJlcnMgZnJvbSBiZWluZyBpbiBhbiBleHBvbmVudGlhbCB0b1N0cmluZyBmb3JtLCBzaW5jZSB0aGUgQ1NTIHRyYW5zZm9ybSBkb2VzIG5vdCBzdXBwb3J0XG4gKiB0aGF0LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHRvU1ZHTnVtYmVyKCBudW1iZXIgKSB7XG4gIC8vIExhcmdlc3QgZ3VhcmFudGVlZCBudW1iZXIgb2YgZGlnaXRzIGFjY29yZGluZyB0byBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL051bWJlci90b0ZpeGVkXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvZG90L2lzc3Vlcy8zNlxuICByZXR1cm4gbnVtYmVyLnRvRml4ZWQoIDIwICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFkLXNpbS10ZXh0XG59XG5cbmRvdC5yZWdpc3RlciggJ3RvU1ZHTnVtYmVyJywgdG9TVkdOdW1iZXIgKTtcbmV4cG9ydCBkZWZhdWx0IHRvU1ZHTnVtYmVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxHQUFHLE1BQU0sVUFBVTs7QUFFMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsV0FBV0EsQ0FBRUMsTUFBTSxFQUFHO0VBQzdCO0VBQ0E7RUFDQSxPQUFPQSxNQUFNLENBQUNDLE9BQU8sQ0FBRSxFQUFFLENBQUUsQ0FBQyxDQUFDO0FBQy9COztBQUVBSCxHQUFHLENBQUNJLFFBQVEsQ0FBRSxhQUFhLEVBQUVILFdBQVcsQ0FBRTtBQUMxQyxlQUFlQSxXQUFXIn0=
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Matrix3.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * 3-dimensional Matrix
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */













class Matrix3Type extends js_EnumerationValue {
  static OTHER = new Matrix3Type();
  static IDENTITY = new Matrix3Type();
  static TRANSLATION_2D = new Matrix3Type();
  static SCALING = new Matrix3Type();
  static AFFINE = new Matrix3Type();
  static enumeration = new js_Enumeration(Matrix3Type);
}
class Matrix3 {
  // Entries stored in column-major format

  /**
   * Creates an identity matrix, that can then be mutated into the proper form.
   */
  constructor() {
    //Make sure no clients are expecting to create a matrix with non-identity values
    assert && assert(arguments.length === 0, 'Matrix3 constructor should not be called with any arguments.  Use m3()/Matrix3.identity()/etc.');
    this.entries = [1, 0, 0, 0, 1, 0, 0, 0, 1];
    this.type = Matrix3Type.IDENTITY;
  }

  /**
   * Convenience getter for the individual 0,0 entry of the matrix.
   */
  m00() {
    return this.entries[0];
  }

  /**
   * Convenience getter for the individual 0,1 entry of the matrix.
   */
  m01() {
    return this.entries[3];
  }

  /**
   * Convenience getter for the individual 0,2 entry of the matrix.
   */
  m02() {
    return this.entries[6];
  }

  /**
   * Convenience getter for the individual 1,0 entry of the matrix.
   */
  m10() {
    return this.entries[1];
  }

  /**
   * Convenience getter for the individual 1,1 entry of the matrix.
   */
  m11() {
    return this.entries[4];
  }

  /**
   * Convenience getter for the individual 1,2 entry of the matrix.
   */
  m12() {
    return this.entries[7];
  }

  /**
   * Convenience getter for the individual 2,0 entry of the matrix.
   */
  m20() {
    return this.entries[2];
  }

  /**
   * Convenience getter for the individual 2,1 entry of the matrix.
   */
  m21() {
    return this.entries[5];
  }

  /**
   * Convenience getter for the individual 2,2 entry of the matrix.
   */
  m22() {
    return this.entries[8];
  }

  /**
   * Returns whether this matrix is an identity matrix.
   */
  isIdentity() {
    return this.type === Matrix3Type.IDENTITY || this.equals(Matrix3.IDENTITY);
  }

  /**
   * Returns whether this matrix is likely to be an identity matrix (returning false means "inconclusive, may be
   * identity or not"), but true is guaranteed to be an identity matrix.
   */
  isFastIdentity() {
    return this.type === Matrix3Type.IDENTITY;
  }

  /**
   * Returns whether this matrix is a translation matrix.
   * By this we mean it has no shear, rotation, or scaling
   * It may be a translation of zero.
   */
  isTranslation() {
    return this.type === Matrix3Type.TRANSLATION_2D || this.m00() === 1 && this.m11() === 1 && this.m22() === 1 && this.m01() === 0 && this.m10() === 0 && this.m20() === 0 && this.m21() === 0;
  }

  /**
   * Returns whether this matrix is an affine matrix (e.g. no shear).
   */
  isAffine() {
    return this.type === Matrix3Type.AFFINE || this.m20() === 0 && this.m21() === 0 && this.m22() === 1;
  }

  /**
   * Returns whether it's an affine matrix where the components of transforms are independent, i.e. constructed from
   * arbitrary component scaling and translation.
   */
  isAligned() {
    // non-diagonal non-translation entries should all be zero.
    return this.isAffine() && this.m01() === 0 && this.m10() === 0;
  }

  /**
   * Returns if it's an affine matrix where the components of transforms are independent, but may be switched (unlike isAligned)
   *
   * i.e. the 2x2 rotational sub-matrix is of one of the two forms:
   * A 0  or  0  A
   * 0 B      B  0
   * This means that moving a transformed point by (x,0) or (0,y) will result in a motion along one of the axes.
   */
  isAxisAligned() {
    return this.isAffine() && (this.m01() === 0 && this.m10() === 0 || this.m00() === 0 && this.m11() === 0);
  }

  /**
   * Returns whether every single entry in this matrix is a finite number (non-NaN, non-infinite).
   */
  isFinite() {
    return isFinite(this.m00()) && isFinite(this.m01()) && isFinite(this.m02()) && isFinite(this.m10()) && isFinite(this.m11()) && isFinite(this.m12()) && isFinite(this.m20()) && isFinite(this.m21()) && isFinite(this.m22());
  }

  /**
   * Returns the determinant of this matrix.
   */
  getDeterminant() {
    return this.m00() * this.m11() * this.m22() + this.m01() * this.m12() * this.m20() + this.m02() * this.m10() * this.m21() - this.m02() * this.m11() * this.m20() - this.m01() * this.m10() * this.m22() - this.m00() * this.m12() * this.m21();
  }
  get determinant() {
    return this.getDeterminant();
  }

  /**
   * Returns the 2D translation, assuming multiplication with a homogeneous vector
   */
  getTranslation() {
    return new Vector2(this.m02(), this.m12());
  }
  get translation() {
    return this.getTranslation();
  }

  /**
   * Returns a vector that is equivalent to ( T(1,0).magnitude(), T(0,1).magnitude() ) where T is a relative transform
   */
  getScaleVector() {
    return new Vector2(Math.sqrt(this.m00() * this.m00() + this.m10() * this.m10()), Math.sqrt(this.m01() * this.m01() + this.m11() * this.m11()));
  }
  get scaleVector() {
    return this.getScaleVector();
  }

  /**
   * Returns the angle in radians for the 2d rotation from this matrix, between pi, -pi
   */
  getRotation() {
    return Math.atan2(this.m10(), this.m00());
  }
  get rotation() {
    return this.getRotation();
  }

  /**
   * Returns an identity-padded copy of this matrix with an increased dimension.
   */
  toMatrix4() {
    return new js_Matrix4(this.m00(), this.m01(), this.m02(), 0, this.m10(), this.m11(), this.m12(), 0, this.m20(), this.m21(), this.m22(), 0, 0, 0, 0, 1);
  }

  /**
   * Returns an identity-padded copy of this matrix with an increased dimension, treating this matrix's affine
   * components only.
   */
  toAffineMatrix4() {
    return new js_Matrix4(this.m00(), this.m01(), 0, this.m02(), this.m10(), this.m11(), 0, this.m12(), 0, 0, 1, 0, 0, 0, 0, 1);
  }

  /**
   * Returns a string form of this object
   */
  toString() {
    return `${this.m00()} ${this.m01()} ${this.m02()}\n${this.m10()} ${this.m11()} ${this.m12()}\n${this.m20()} ${this.m21()} ${this.m22()}`;
  }

  /**
   * Creates an SVG form of this matrix, for high-performance processing in SVG output.
   */
  toSVGMatrix() {
    const result = document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGMatrix();

    // top two rows
    result.a = this.m00();
    result.b = this.m10();
    result.c = this.m01();
    result.d = this.m11();
    result.e = this.m02();
    result.f = this.m12();
    return result;
  }

  /**
   * Returns the CSS form (simplified if possible) for this transformation matrix.
   */
  getCSSTransform() {
    // See http://www.w3.org/TR/css3-transforms/, particularly Section 13 that discusses the SVG compatibility

    // We need to prevent the numbers from being in an exponential toString form, since the CSS transform does not support that
    // 20 is the largest guaranteed number of digits according to https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toFixed
    // See https://github.com/phetsims/dot/issues/36

    // the inner part of a CSS3 transform, but remember to add the browser-specific parts!
    // NOTE: the toFixed calls are inlined for performance reasons
    return `matrix(${this.entries[0].toFixed(20)},${this.entries[1].toFixed(20)},${this.entries[3].toFixed(20)},${this.entries[4].toFixed(20)},${this.entries[6].toFixed(20)},${this.entries[7].toFixed(20)})`; // eslint-disable-line bad-sim-text
  }

  get cssTransform() {
    return this.getCSSTransform();
  }

  /**
   * Returns the CSS-like SVG matrix form for this transformation matrix.
   */
  getSVGTransform() {
    // SVG transform presentation attribute. See http://www.w3.org/TR/SVG/coords.html#TransformAttribute
    switch (this.type) {
      case Matrix3Type.IDENTITY:
        return '';
      case Matrix3Type.TRANSLATION_2D:
        return `translate(${js_toSVGNumber(this.entries[6])},${js_toSVGNumber(this.entries[7])})`;
      case Matrix3Type.SCALING:
        return `scale(${js_toSVGNumber(this.entries[0])}${this.entries[0] === this.entries[4] ? '' : `,${js_toSVGNumber(this.entries[4])}`})`;
      default:
        return `matrix(${js_toSVGNumber(this.entries[0])},${js_toSVGNumber(this.entries[1])},${js_toSVGNumber(this.entries[3])},${js_toSVGNumber(this.entries[4])},${js_toSVGNumber(this.entries[6])},${js_toSVGNumber(this.entries[7])})`;
    }
  }
  get svgTransform() {
    return this.getSVGTransform();
  }

  /**
   * Returns a parameter object suitable for use with jQuery's .css()
   */
  getCSSTransformStyles() {
    const transformCSS = this.getCSSTransform();

    // notes on triggering hardware acceleration: http://creativejs.com/2011/12/day-2-gpu-accelerate-your-dom-elements/
    return {
      // force iOS hardware acceleration
      '-webkit-perspective': '1000',
      '-webkit-backface-visibility': 'hidden',
      '-webkit-transform': `${transformCSS} translateZ(0)`,
      // trigger hardware acceleration if possible
      '-moz-transform': `${transformCSS} translateZ(0)`,
      // trigger hardware acceleration if possible
      '-ms-transform': transformCSS,
      '-o-transform': transformCSS,
      transform: transformCSS,
      'transform-origin': 'top left',
      // at the origin of the component. consider 0px 0px instead. Critical, since otherwise this defaults to 50% 50%!!! see https://developer.mozilla.org/en-US/docs/CSS/transform-origin
      '-ms-transform-origin': 'top left' // TODO: do we need other platform-specific transform-origin styles?
    };
  }

  get cssTransformStyles() {
    return this.getCSSTransformStyles();
  }

  /**
   * Returns exact equality with another matrix
   */
  equals(matrix) {
    return this.m00() === matrix.m00() && this.m01() === matrix.m01() && this.m02() === matrix.m02() && this.m10() === matrix.m10() && this.m11() === matrix.m11() && this.m12() === matrix.m12() && this.m20() === matrix.m20() && this.m21() === matrix.m21() && this.m22() === matrix.m22();
  }

  /**
   * Returns equality within a margin of error with another matrix
   */
  equalsEpsilon(matrix, epsilon) {
    return Math.abs(this.m00() - matrix.m00()) < epsilon && Math.abs(this.m01() - matrix.m01()) < epsilon && Math.abs(this.m02() - matrix.m02()) < epsilon && Math.abs(this.m10() - matrix.m10()) < epsilon && Math.abs(this.m11() - matrix.m11()) < epsilon && Math.abs(this.m12() - matrix.m12()) < epsilon && Math.abs(this.m20() - matrix.m20()) < epsilon && Math.abs(this.m21() - matrix.m21()) < epsilon && Math.abs(this.m22() - matrix.m22()) < epsilon;
  }

  /*---------------------------------------------------------------------------*
   * Immutable operations (returns a new matrix)
   *----------------------------------------------------------------------------*/

  /**
   * Returns a copy of this matrix
   */
  copy() {
    return m3(this.m00(), this.m01(), this.m02(), this.m10(), this.m11(), this.m12(), this.m20(), this.m21(), this.m22(), this.type);
  }

  /**
   * Returns a new matrix, defined by this matrix plus the provided matrix
   */
  plus(matrix) {
    return m3(this.m00() + matrix.m00(), this.m01() + matrix.m01(), this.m02() + matrix.m02(), this.m10() + matrix.m10(), this.m11() + matrix.m11(), this.m12() + matrix.m12(), this.m20() + matrix.m20(), this.m21() + matrix.m21(), this.m22() + matrix.m22());
  }

  /**
   * Returns a new matrix, defined by this matrix plus the provided matrix
   */
  minus(matrix) {
    return m3(this.m00() - matrix.m00(), this.m01() - matrix.m01(), this.m02() - matrix.m02(), this.m10() - matrix.m10(), this.m11() - matrix.m11(), this.m12() - matrix.m12(), this.m20() - matrix.m20(), this.m21() - matrix.m21(), this.m22() - matrix.m22());
  }

  /**
   * Returns a transposed copy of this matrix
   */
  transposed() {
    return m3(this.m00(), this.m10(), this.m20(), this.m01(), this.m11(), this.m21(), this.m02(), this.m12(), this.m22(), this.type === Matrix3Type.IDENTITY || this.type === Matrix3Type.SCALING ? this.type : undefined);
  }

  /**
   * Returns a negated copy of this matrix
   */
  negated() {
    return m3(-this.m00(), -this.m01(), -this.m02(), -this.m10(), -this.m11(), -this.m12(), -this.m20(), -this.m21(), -this.m22());
  }

  /**
   * Returns an inverted copy of this matrix
   */
  inverted() {
    let det;
    switch (this.type) {
      case Matrix3Type.IDENTITY:
        return this;
      case Matrix3Type.TRANSLATION_2D:
        return m3(1, 0, -this.m02(), 0, 1, -this.m12(), 0, 0, 1, Matrix3Type.TRANSLATION_2D);
      case Matrix3Type.SCALING:
        return m3(1 / this.m00(), 0, 0, 0, 1 / this.m11(), 0, 0, 0, 1 / this.m22(), Matrix3Type.SCALING);
      case Matrix3Type.AFFINE:
        det = this.getDeterminant();
        if (det !== 0) {
          return m3((-this.m12() * this.m21() + this.m11() * this.m22()) / det, (this.m02() * this.m21() - this.m01() * this.m22()) / det, (-this.m02() * this.m11() + this.m01() * this.m12()) / det, (this.m12() * this.m20() - this.m10() * this.m22()) / det, (-this.m02() * this.m20() + this.m00() * this.m22()) / det, (this.m02() * this.m10() - this.m00() * this.m12()) / det, 0, 0, 1, Matrix3Type.AFFINE);
        } else {
          throw new Error('Matrix could not be inverted, determinant === 0');
        }
      case Matrix3Type.OTHER:
        det = this.getDeterminant();
        if (det !== 0) {
          return m3((-this.m12() * this.m21() + this.m11() * this.m22()) / det, (this.m02() * this.m21() - this.m01() * this.m22()) / det, (-this.m02() * this.m11() + this.m01() * this.m12()) / det, (this.m12() * this.m20() - this.m10() * this.m22()) / det, (-this.m02() * this.m20() + this.m00() * this.m22()) / det, (this.m02() * this.m10() - this.m00() * this.m12()) / det, (-this.m11() * this.m20() + this.m10() * this.m21()) / det, (this.m01() * this.m20() - this.m00() * this.m21()) / det, (-this.m01() * this.m10() + this.m00() * this.m11()) / det, Matrix3Type.OTHER);
        } else {
          throw new Error('Matrix could not be inverted, determinant === 0');
        }
      default:
        throw new Error(`Matrix3.inverted with unknown type: ${this.type}`);
    }
  }

  /**
   * Returns a matrix, defined by the multiplication of this * matrix.
   *
   * @param matrix
   * @returns - NOTE: this may be the same matrix!
   */
  timesMatrix(matrix) {
    // I * M === M * I === M (the identity)
    if (this.type === Matrix3Type.IDENTITY || matrix.type === Matrix3Type.IDENTITY) {
      return this.type === Matrix3Type.IDENTITY ? matrix : this;
    }
    if (this.type === matrix.type) {
      // currently two matrices of the same type will result in the same result type
      if (this.type === Matrix3Type.TRANSLATION_2D) {
        // faster combination of translations
        return m3(1, 0, this.m02() + matrix.m02(), 0, 1, this.m12() + matrix.m12(), 0, 0, 1, Matrix3Type.TRANSLATION_2D);
      } else if (this.type === Matrix3Type.SCALING) {
        // faster combination of scaling
        return m3(this.m00() * matrix.m00(), 0, 0, 0, this.m11() * matrix.m11(), 0, 0, 0, 1, Matrix3Type.SCALING);
      }
    }
    if (this.type !== Matrix3Type.OTHER && matrix.type !== Matrix3Type.OTHER) {
      // currently two matrices that are anything but "other" are technically affine, and the result will be affine

      // affine case
      return m3(this.m00() * matrix.m00() + this.m01() * matrix.m10(), this.m00() * matrix.m01() + this.m01() * matrix.m11(), this.m00() * matrix.m02() + this.m01() * matrix.m12() + this.m02(), this.m10() * matrix.m00() + this.m11() * matrix.m10(), this.m10() * matrix.m01() + this.m11() * matrix.m11(), this.m10() * matrix.m02() + this.m11() * matrix.m12() + this.m12(), 0, 0, 1, Matrix3Type.AFFINE);
    }

    // general case
    return m3(this.m00() * matrix.m00() + this.m01() * matrix.m10() + this.m02() * matrix.m20(), this.m00() * matrix.m01() + this.m01() * matrix.m11() + this.m02() * matrix.m21(), this.m00() * matrix.m02() + this.m01() * matrix.m12() + this.m02() * matrix.m22(), this.m10() * matrix.m00() + this.m11() * matrix.m10() + this.m12() * matrix.m20(), this.m10() * matrix.m01() + this.m11() * matrix.m11() + this.m12() * matrix.m21(), this.m10() * matrix.m02() + this.m11() * matrix.m12() + this.m12() * matrix.m22(), this.m20() * matrix.m00() + this.m21() * matrix.m10() + this.m22() * matrix.m20(), this.m20() * matrix.m01() + this.m21() * matrix.m11() + this.m22() * matrix.m21(), this.m20() * matrix.m02() + this.m21() * matrix.m12() + this.m22() * matrix.m22());
  }

  /*---------------------------------------------------------------------------*
   * Immutable operations (returns new form of a parameter)
   *----------------------------------------------------------------------------*/

  /**
   * Returns the multiplication of this matrix times the provided vector (treating this matrix as homogeneous, so that
   * it is the technical multiplication of (x,y,1)).
   */
  timesVector2(vector2) {
    const x = this.m00() * vector2.x + this.m01() * vector2.y + this.m02();
    const y = this.m10() * vector2.x + this.m11() * vector2.y + this.m12();
    return new Vector2(x, y);
  }

  /**
   * Returns the multiplication of this matrix times the provided vector
   */
  timesVector3(vector3) {
    const x = this.m00() * vector3.x + this.m01() * vector3.y + this.m02() * vector3.z;
    const y = this.m10() * vector3.x + this.m11() * vector3.y + this.m12() * vector3.z;
    const z = this.m20() * vector3.x + this.m21() * vector3.y + this.m22() * vector3.z;
    return new Vector3(x, y, z);
  }

  /**
   * Returns the multiplication of the transpose of this matrix times the provided vector (assuming the 2x2 quadrant)
   */
  timesTransposeVector2(vector2) {
    const x = this.m00() * vector2.x + this.m10() * vector2.y;
    const y = this.m01() * vector2.x + this.m11() * vector2.y;
    return new Vector2(x, y);
  }

  /**
   * TODO: this operation seems to not work for transformDelta2, should be vetted
   */
  timesRelativeVector2(vector2) {
    const x = this.m00() * vector2.x + this.m01() * vector2.y;
    const y = this.m10() * vector2.y + this.m11() * vector2.y;
    return new Vector2(x, y);
  }

  /*---------------------------------------------------------------------------*
   * Mutable operations (changes this matrix)
   *----------------------------------------------------------------------------*/

  /**
   * Sets the entire state of the matrix, in row-major order.
   *
   * NOTE: Every mutable method goes through rowMajor
   */
  rowMajor(v00, v01, v02, v10, v11, v12, v20, v21, v22, type) {
    this.entries[0] = v00;
    this.entries[1] = v10;
    this.entries[2] = v20;
    this.entries[3] = v01;
    this.entries[4] = v11;
    this.entries[5] = v21;
    this.entries[6] = v02;
    this.entries[7] = v12;
    this.entries[8] = v22;

    // TODO: consider performance of the affine check here
    this.type = type === undefined ? v20 === 0 && v21 === 0 && v22 === 1 ? Matrix3Type.AFFINE : Matrix3Type.OTHER : type;
    return this;
  }

  /**
   * Sets this matrix to be a copy of another matrix.
   */
  set(matrix) {
    return this.rowMajor(matrix.m00(), matrix.m01(), matrix.m02(), matrix.m10(), matrix.m11(), matrix.m12(), matrix.m20(), matrix.m21(), matrix.m22(), matrix.type);
  }

  /**
   * Sets this matrix to be a copy of the column-major data stored in an array (e.g. WebGL).
   */
  setArray(array) {
    return this.rowMajor(array[0], array[3], array[6], array[1], array[4], array[7], array[2], array[5], array[8]);
  }

  /**
   * Sets the individual 0,0 component of this matrix.
   */
  set00(value) {
    this.entries[0] = value;
    return this;
  }

  /**
   * Sets the individual 0,1 component of this matrix.
   */
  set01(value) {
    this.entries[3] = value;
    return this;
  }

  /**
   * Sets the individual 0,2 component of this matrix.
   */
  set02(value) {
    this.entries[6] = value;
    return this;
  }

  /**
   * Sets the individual 1,0 component of this matrix.
   */
  set10(value) {
    this.entries[1] = value;
    return this;
  }

  /**
   * Sets the individual 1,1 component of this matrix.
   */
  set11(value) {
    this.entries[4] = value;
    return this;
  }

  /**
   * Sets the individual 1,2 component of this matrix.
   */
  set12(value) {
    this.entries[7] = value;
    return this;
  }

  /**
   * Sets the individual 2,0 component of this matrix.
   */
  set20(value) {
    this.entries[2] = value;
    return this;
  }

  /**
   * Sets the individual 2,1 component of this matrix.
   */
  set21(value) {
    this.entries[5] = value;
    return this;
  }

  /**
   * Sets the individual 2,2 component of this matrix.
   */
  set22(value) {
    this.entries[8] = value;
    return this;
  }

  /**
   * Makes this matrix effectively immutable to the normal methods (except direct setters?)
   */
  makeImmutable() {
    if (assert) {
      this.rowMajor = () => {
        throw new Error('Cannot modify immutable matrix');
      };
    }
    return this;
  }

  /**
   * Sets the entire state of the matrix, in column-major order.
   */
  columnMajor(v00, v10, v20, v01, v11, v21, v02, v12, v22, type) {
    return this.rowMajor(v00, v01, v02, v10, v11, v12, v20, v21, v22, type);
  }

  /**
   * Sets this matrix to itself plus the given matrix.
   */
  add(matrix) {
    return this.rowMajor(this.m00() + matrix.m00(), this.m01() + matrix.m01(), this.m02() + matrix.m02(), this.m10() + matrix.m10(), this.m11() + matrix.m11(), this.m12() + matrix.m12(), this.m20() + matrix.m20(), this.m21() + matrix.m21(), this.m22() + matrix.m22());
  }

  /**
   * Sets this matrix to itself minus the given matrix.
   */
  subtract(m) {
    return this.rowMajor(this.m00() - m.m00(), this.m01() - m.m01(), this.m02() - m.m02(), this.m10() - m.m10(), this.m11() - m.m11(), this.m12() - m.m12(), this.m20() - m.m20(), this.m21() - m.m21(), this.m22() - m.m22());
  }

  /**
   * Sets this matrix to its own transpose.
   */
  transpose() {
    return this.rowMajor(this.m00(), this.m10(), this.m20(), this.m01(), this.m11(), this.m21(), this.m02(), this.m12(), this.m22(), this.type === Matrix3Type.IDENTITY || this.type === Matrix3Type.SCALING ? this.type : undefined);
  }

  /**
   * Sets this matrix to its own negation.
   */
  negate() {
    return this.rowMajor(-this.m00(), -this.m01(), -this.m02(), -this.m10(), -this.m11(), -this.m12(), -this.m20(), -this.m21(), -this.m22());
  }

  /**
   * Sets this matrix to its own inverse.
   */
  invert() {
    let det;
    switch (this.type) {
      case Matrix3Type.IDENTITY:
        return this;
      case Matrix3Type.TRANSLATION_2D:
        return this.rowMajor(1, 0, -this.m02(), 0, 1, -this.m12(), 0, 0, 1, Matrix3Type.TRANSLATION_2D);
      case Matrix3Type.SCALING:
        return this.rowMajor(1 / this.m00(), 0, 0, 0, 1 / this.m11(), 0, 0, 0, 1 / this.m22(), Matrix3Type.SCALING);
      case Matrix3Type.AFFINE:
        det = this.getDeterminant();
        if (det !== 0) {
          return this.rowMajor((-this.m12() * this.m21() + this.m11() * this.m22()) / det, (this.m02() * this.m21() - this.m01() * this.m22()) / det, (-this.m02() * this.m11() + this.m01() * this.m12()) / det, (this.m12() * this.m20() - this.m10() * this.m22()) / det, (-this.m02() * this.m20() + this.m00() * this.m22()) / det, (this.m02() * this.m10() - this.m00() * this.m12()) / det, 0, 0, 1, Matrix3Type.AFFINE);
        } else {
          throw new Error('Matrix could not be inverted, determinant === 0');
        }
      case Matrix3Type.OTHER:
        det = this.getDeterminant();
        if (det !== 0) {
          return this.rowMajor((-this.m12() * this.m21() + this.m11() * this.m22()) / det, (this.m02() * this.m21() - this.m01() * this.m22()) / det, (-this.m02() * this.m11() + this.m01() * this.m12()) / det, (this.m12() * this.m20() - this.m10() * this.m22()) / det, (-this.m02() * this.m20() + this.m00() * this.m22()) / det, (this.m02() * this.m10() - this.m00() * this.m12()) / det, (-this.m11() * this.m20() + this.m10() * this.m21()) / det, (this.m01() * this.m20() - this.m00() * this.m21()) / det, (-this.m01() * this.m10() + this.m00() * this.m11()) / det, Matrix3Type.OTHER);
        } else {
          throw new Error('Matrix could not be inverted, determinant === 0');
        }
      default:
        throw new Error(`Matrix3.inverted with unknown type: ${this.type}`);
    }
  }

  /**
   * Sets this matrix to the value of itself times the provided matrix
   */
  multiplyMatrix(matrix) {
    // M * I === M (the identity)
    if (matrix.type === Matrix3Type.IDENTITY) {
      // no change needed
      return this;
    }

    // I * M === M (the identity)
    if (this.type === Matrix3Type.IDENTITY) {
      // copy the other matrix to us
      return this.set(matrix);
    }
    if (this.type === matrix.type) {
      // currently two matrices of the same type will result in the same result type
      if (this.type === Matrix3Type.TRANSLATION_2D) {
        // faster combination of translations
        return this.rowMajor(1, 0, this.m02() + matrix.m02(), 0, 1, this.m12() + matrix.m12(), 0, 0, 1, Matrix3Type.TRANSLATION_2D);
      } else if (this.type === Matrix3Type.SCALING) {
        // faster combination of scaling
        return this.rowMajor(this.m00() * matrix.m00(), 0, 0, 0, this.m11() * matrix.m11(), 0, 0, 0, 1, Matrix3Type.SCALING);
      }
    }
    if (this.type !== Matrix3Type.OTHER && matrix.type !== Matrix3Type.OTHER) {
      // currently two matrices that are anything but "other" are technically affine, and the result will be affine

      // affine case
      return this.rowMajor(this.m00() * matrix.m00() + this.m01() * matrix.m10(), this.m00() * matrix.m01() + this.m01() * matrix.m11(), this.m00() * matrix.m02() + this.m01() * matrix.m12() + this.m02(), this.m10() * matrix.m00() + this.m11() * matrix.m10(), this.m10() * matrix.m01() + this.m11() * matrix.m11(), this.m10() * matrix.m02() + this.m11() * matrix.m12() + this.m12(), 0, 0, 1, Matrix3Type.AFFINE);
    }

    // general case
    return this.rowMajor(this.m00() * matrix.m00() + this.m01() * matrix.m10() + this.m02() * matrix.m20(), this.m00() * matrix.m01() + this.m01() * matrix.m11() + this.m02() * matrix.m21(), this.m00() * matrix.m02() + this.m01() * matrix.m12() + this.m02() * matrix.m22(), this.m10() * matrix.m00() + this.m11() * matrix.m10() + this.m12() * matrix.m20(), this.m10() * matrix.m01() + this.m11() * matrix.m11() + this.m12() * matrix.m21(), this.m10() * matrix.m02() + this.m11() * matrix.m12() + this.m12() * matrix.m22(), this.m20() * matrix.m00() + this.m21() * matrix.m10() + this.m22() * matrix.m20(), this.m20() * matrix.m01() + this.m21() * matrix.m11() + this.m22() * matrix.m21(), this.m20() * matrix.m02() + this.m21() * matrix.m12() + this.m22() * matrix.m22());
  }

  /**
   * Mutates this matrix, equivalent to (translation * this).
   */
  prependTranslation(x, y) {
    this.set02(this.m02() + x);
    this.set12(this.m12() + y);
    if (this.type === Matrix3Type.IDENTITY || this.type === Matrix3Type.TRANSLATION_2D) {
      this.type = Matrix3Type.TRANSLATION_2D;
    } else if (this.type === Matrix3Type.OTHER) {
      this.type = Matrix3Type.OTHER;
    } else {
      this.type = Matrix3Type.AFFINE;
    }
    return this; // for chaining
  }

  /**
   * Sets this matrix to the 3x3 identity matrix.
   */
  setToIdentity() {
    return this.rowMajor(1, 0, 0, 0, 1, 0, 0, 0, 1, Matrix3Type.IDENTITY);
  }

  /**
   * Sets this matrix to the affine translation matrix.
   */
  setToTranslation(x, y) {
    return this.rowMajor(1, 0, x, 0, 1, y, 0, 0, 1, Matrix3Type.TRANSLATION_2D);
  }

  /**
   * Sets this matrix to the affine scaling matrix.
   */
  setToScale(x, y) {
    // allow using one parameter to scale everything
    y = y === undefined ? x : y;
    return this.rowMajor(x, 0, 0, 0, y, 0, 0, 0, 1, Matrix3Type.SCALING);
  }

  /**
   * Sets this matrix to an affine matrix with the specified row-major values.
   */
  setToAffine(m00, m01, m02, m10, m11, m12) {
    return this.rowMajor(m00, m01, m02, m10, m11, m12, 0, 0, 1, Matrix3Type.AFFINE);
  }

  /**
   * Sets the matrix to a rotation defined by a rotation of the specified angle around the given unit axis.
   *
   * @param axis - normalized
   * @param angle - in radians
   */
  setToRotationAxisAngle(axis, angle) {
    let c = Math.cos(angle);
    let s = Math.sin(angle);

    // Handle cases close to 0, since we want Math.PI/2 rotations (and the like) to be exact
    if (Math.abs(c) < 1e-15) {
      c = 0;
    }
    if (Math.abs(s) < 1e-15) {
      s = 0;
    }
    const C = 1 - c;
    return this.rowMajor(axis.x * axis.x * C + c, axis.x * axis.y * C - axis.z * s, axis.x * axis.z * C + axis.y * s, axis.y * axis.x * C + axis.z * s, axis.y * axis.y * C + c, axis.y * axis.z * C - axis.x * s, axis.z * axis.x * C - axis.y * s, axis.z * axis.y * C + axis.x * s, axis.z * axis.z * C + c, Matrix3Type.OTHER);
  }

  /**
   * Sets this matrix to a rotation around the x axis (in the yz plane).
   *
   * @param angle - in radians
   */
  setToRotationX(angle) {
    let c = Math.cos(angle);
    let s = Math.sin(angle);

    // Handle cases close to 0, since we want Math.PI/2 rotations (and the like) to be exact
    if (Math.abs(c) < 1e-15) {
      c = 0;
    }
    if (Math.abs(s) < 1e-15) {
      s = 0;
    }
    return this.rowMajor(1, 0, 0, 0, c, -s, 0, s, c, Matrix3Type.OTHER);
  }

  /**
   * Sets this matrix to a rotation around the y axis (in the xz plane).
   *
   * @param angle - in radians
   */
  setToRotationY(angle) {
    let c = Math.cos(angle);
    let s = Math.sin(angle);

    // Handle cases close to 0, since we want Math.PI/2 rotations (and the like) to be exact
    if (Math.abs(c) < 1e-15) {
      c = 0;
    }
    if (Math.abs(s) < 1e-15) {
      s = 0;
    }
    return this.rowMajor(c, 0, s, 0, 1, 0, -s, 0, c, Matrix3Type.OTHER);
  }

  /**
   * Sets this matrix to a rotation around the z axis (in the xy plane).
   *
   * @param angle - in radians
   */
  setToRotationZ(angle) {
    let c = Math.cos(angle);
    let s = Math.sin(angle);

    // Handle cases close to 0, since we want Math.PI/2 rotations (and the like) to be exact
    if (Math.abs(c) < 1e-15) {
      c = 0;
    }
    if (Math.abs(s) < 1e-15) {
      s = 0;
    }
    return this.rowMajor(c, -s, 0, s, c, 0, 0, 0, 1, Matrix3Type.AFFINE);
  }

  /**
   * Sets this matrix to the combined translation+rotation (where the rotation logically would happen first, THEN it
   * would be translated).
   *
   * @param x
   * @param y
   * @param angle - in radians
   */
  setToTranslationRotation(x, y, angle) {
    let c = Math.cos(angle);
    let s = Math.sin(angle);

    // Handle cases close to 0, since we want Math.PI/2 rotations (and the like) to be exact
    if (Math.abs(c) < 1e-15) {
      c = 0;
    }
    if (Math.abs(s) < 1e-15) {
      s = 0;
    }
    return this.rowMajor(c, -s, x, s, c, y, 0, 0, 1, Matrix3Type.AFFINE);
  }

  /**
   * Sets this matrix to the combined translation+rotation (where the rotation logically would happen first, THEN it
   * would be translated).
   *
   * @param translation
   * @param angle - in radians
   */
  setToTranslationRotationPoint(translation, angle) {
    return this.setToTranslationRotation(translation.x, translation.y, angle);
  }

  /**
   * Sets this matrix to the values contained in an SVGMatrix.
   */
  setToSVGMatrix(svgMatrix) {
    return this.rowMajor(svgMatrix.a, svgMatrix.c, svgMatrix.e, svgMatrix.b, svgMatrix.d, svgMatrix.f, 0, 0, 1, Matrix3Type.AFFINE);
  }

  /**
   * Sets this matrix to a rotation matrix that rotates A to B (Vector3 instances), by rotating about the axis
   * A.cross( B ) -- Shortest path. ideally should be unit vectors.
   */
  setRotationAToB(a, b) {
    // see http://graphics.cs.brown.edu/~jfh/papers/Moller-EBA-1999/paper.pdf for information on this implementation
    const start = a;
    const end = b;
    const epsilon = 0.0001;
    let v = start.cross(end);
    const e = start.dot(end);
    const f = e < 0 ? -e : e;

    // if "from" and "to" vectors are nearly parallel
    if (f > 1.0 - epsilon) {
      let x = new Vector3(start.x > 0.0 ? start.x : -start.x, start.y > 0.0 ? start.y : -start.y, start.z > 0.0 ? start.z : -start.z);
      if (x.x < x.y) {
        if (x.x < x.z) {
          x = Vector3.X_UNIT;
        } else {
          x = Vector3.Z_UNIT;
        }
      } else {
        if (x.y < x.z) {
          x = Vector3.Y_UNIT;
        } else {
          x = Vector3.Z_UNIT;
        }
      }
      const u = x.minus(start);
      v = x.minus(end);
      const c1 = 2.0 / u.dot(u);
      const c2 = 2.0 / v.dot(v);
      const c3 = c1 * c2 * u.dot(v);
      return this.rowMajor(-c1 * u.x * u.x - c2 * v.x * v.x + c3 * v.x * u.x + 1, -c1 * u.x * u.y - c2 * v.x * v.y + c3 * v.x * u.y, -c1 * u.x * u.z - c2 * v.x * v.z + c3 * v.x * u.z, -c1 * u.y * u.x - c2 * v.y * v.x + c3 * v.y * u.x, -c1 * u.y * u.y - c2 * v.y * v.y + c3 * v.y * u.y + 1, -c1 * u.y * u.z - c2 * v.y * v.z + c3 * v.y * u.z, -c1 * u.z * u.x - c2 * v.z * v.x + c3 * v.z * u.x, -c1 * u.z * u.y - c2 * v.z * v.y + c3 * v.z * u.y, -c1 * u.z * u.z - c2 * v.z * v.z + c3 * v.z * u.z + 1);
    } else {
      // the most common case, unless "start"="end", or "start"=-"end"
      const h = 1.0 / (1.0 + e);
      const hvx = h * v.x;
      const hvz = h * v.z;
      const hvxy = hvx * v.y;
      const hvxz = hvx * v.z;
      const hvyz = hvz * v.y;
      return this.rowMajor(e + hvx * v.x, hvxy - v.z, hvxz + v.y, hvxy + v.z, e + h * v.y * v.y, hvyz - v.x, hvxz - v.y, hvyz + v.x, e + hvz * v.z);
    }
  }

  /*---------------------------------------------------------------------------*
   * Mutable operations (changes the parameter)
   *----------------------------------------------------------------------------*/

  /**
   * Sets the vector to the result of (matrix * vector), as a homogeneous multiplication.
   *
   * @returns - The vector that was mutated
   */
  multiplyVector2(vector2) {
    return vector2.setXY(this.m00() * vector2.x + this.m01() * vector2.y + this.m02(), this.m10() * vector2.x + this.m11() * vector2.y + this.m12());
  }

  /**
   * Sets the vector to the result of (matrix * vector).
   *
   * @returns - The vector that was mutated
   */
  multiplyVector3(vector3) {
    return vector3.setXYZ(this.m00() * vector3.x + this.m01() * vector3.y + this.m02() * vector3.z, this.m10() * vector3.x + this.m11() * vector3.y + this.m12() * vector3.z, this.m20() * vector3.x + this.m21() * vector3.y + this.m22() * vector3.z);
  }

  /**
   * Sets the vector to the result of (transpose(matrix) * vector), ignoring the translation parameters.
   *
   * @returns - The vector that was mutated
   */
  multiplyTransposeVector2(v) {
    return v.setXY(this.m00() * v.x + this.m10() * v.y, this.m01() * v.x + this.m11() * v.y);
  }

  /**
   * Sets the vector to the result of (matrix * vector - matrix * zero). Since this is a homogeneous operation, it is
   * equivalent to the multiplication of (x,y,0).
   *
   * @returns - The vector that was mutated
   */
  multiplyRelativeVector2(v) {
    return v.setXY(this.m00() * v.x + this.m01() * v.y, this.m10() * v.y + this.m11() * v.y);
  }

  /**
   * Sets the transform of a Canvas 2D rendering context to the affine part of this matrix
   */
  canvasSetTransform(context) {
    context.setTransform(
    // inlined array entries
    this.entries[0], this.entries[1], this.entries[3], this.entries[4], this.entries[6], this.entries[7]);
  }

  /**
   * Appends to the affine part of this matrix to the Canvas 2D rendering context
   */
  canvasAppendTransform(context) {
    if (this.type !== Matrix3Type.IDENTITY) {
      context.transform(
      // inlined array entries
      this.entries[0], this.entries[1], this.entries[3], this.entries[4], this.entries[6], this.entries[7]);
    }
  }

  /**
   * Copies the entries of this matrix over to an arbitrary array (typed or normal).
   */
  copyToArray(array) {
    array[0] = this.m00();
    array[1] = this.m10();
    array[2] = this.m20();
    array[3] = this.m01();
    array[4] = this.m11();
    array[5] = this.m21();
    array[6] = this.m02();
    array[7] = this.m12();
    array[8] = this.m22();
    return array;
  }
  freeToPool() {
    Matrix3.pool.freeToPool(this);
  }
  static pool = new Pool(Matrix3, {
    initialize: Matrix3.prototype.rowMajor,
    useDefaultConstruction: true,
    maxSize: 300
  });

  /**
   * Returns an identity matrix.
   */
  static identity() {
    return fromPool().setToIdentity();
  }

  /**
   * Returns a translation matrix.
   */
  static translation(x, y) {
    return fromPool().setToTranslation(x, y);
  }

  /**
   * Returns a translation matrix computed from a vector.
   */
  static translationFromVector(vector) {
    return Matrix3.translation(vector.x, vector.y);
  }

  /**
   * Returns a matrix that scales things in each dimension.
   */
  static scaling(x, y) {
    return fromPool().setToScale(x, y);
  }

  /**
   * Returns a matrix that scales things in each dimension.
   */
  static scale(x, y) {
    return Matrix3.scaling(x, y);
  }

  /**
   * Returns an affine matrix with the given parameters.
   */
  static affine(m00, m01, m02, m10, m11, m12) {
    return fromPool().setToAffine(m00, m01, m02, m10, m11, m12);
  }

  /**
   * Creates a new matrix with all entries determined in row-major order.
   */
  static rowMajor(v00, v01, v02, v10, v11, v12, v20, v21, v22, type) {
    return fromPool().rowMajor(v00, v01, v02, v10, v11, v12, v20, v21, v22, type);
  }

  /**
   * Returns a matrix rotation defined by a rotation of the specified angle around the given unit axis.
   *
   * @param axis - normalized
   * @param angle - in radians
   */
  static rotationAxisAngle(axis, angle) {
    return fromPool().setToRotationAxisAngle(axis, angle);
  }

  /**
   * Returns a matrix that rotates around the x axis (in the yz plane).
   *
   * @param angle - in radians
   */
  static rotationX(angle) {
    return fromPool().setToRotationX(angle);
  }

  /**
   * Returns a matrix that rotates around the y axis (in the xz plane).
   *
   * @param angle - in radians
   */
  static rotationY(angle) {
    return fromPool().setToRotationY(angle);
  }

  /**
   * Returns a matrix that rotates around the z axis (in the xy plane).
   *
   * @param angle - in radians
   */
  static rotationZ(angle) {
    return fromPool().setToRotationZ(angle);
  }

  /**
   * Returns a combined 2d translation + rotation (with the rotation effectively applied first).
   *
   * @param angle - in radians
   */
  static translationRotation(x, y, angle) {
    return fromPool().setToTranslationRotation(x, y, angle);
  }

  /**
   * Standard 2d rotation matrix for a given angle.
   *
   * @param angle - in radians
   */
  static rotation2(angle) {
    return fromPool().setToRotationZ(angle);
  }

  /**
   * Returns a matrix which will be a 2d rotation around a given x,y point.
   *
   * @param angle - in radians
   * @param x
   * @param y
   */
  static rotationAround(angle, x, y) {
    return Matrix3.translation(x, y).timesMatrix(Matrix3.rotation2(angle)).timesMatrix(Matrix3.translation(-x, -y));
  }

  /**
   * Returns a matrix which will be a 2d rotation around a given 2d point.
   *
   * @param angle - in radians
   * @param point
   */
  static rotationAroundPoint(angle, point) {
    return Matrix3.rotationAround(angle, point.x, point.y);
  }

  /**
   * Returns a matrix equivalent to a given SVGMatrix.
   */
  static fromSVGMatrix(svgMatrix) {
    return fromPool().setToSVGMatrix(svgMatrix);
  }

  /**
   * Returns a rotation matrix that rotates A to B, by rotating about the axis A.cross( B ) -- Shortest path. ideally
   * should be unit vectors.
   */
  static rotateAToB(a, b) {
    return fromPool().setRotationAToB(a, b);
  }

  /**
   * Shortcut for translation times a matrix (without allocating a translation matrix), see scenery#119
   */
  static translationTimesMatrix(x, y, matrix) {
    let type;
    if (matrix.type === Matrix3Type.IDENTITY || matrix.type === Matrix3Type.TRANSLATION_2D) {
      return m3(1, 0, matrix.m02() + x, 0, 1, matrix.m12() + y, 0, 0, 1, Matrix3Type.TRANSLATION_2D);
    } else if (matrix.type === Matrix3Type.OTHER) {
      type = Matrix3Type.OTHER;
    } else {
      type = Matrix3Type.AFFINE;
    }
    return m3(matrix.m00(), matrix.m01(), matrix.m02() + x, matrix.m10(), matrix.m11(), matrix.m12() + y, matrix.m20(), matrix.m21(), matrix.m22(), type);
  }

  /**
   * Serialize to an Object that can be handled by PhET-iO
   */
  static toStateObject(matrix3) {
    return {
      entries: matrix3.entries,
      type: matrix3.type.name
    };
  }

  /**
   * Convert back from a serialized Object to a Matrix3
   */
  static fromStateObject(stateObject) {
    const matrix = Matrix3.identity();
    matrix.entries = stateObject.entries;
    matrix.type = Matrix3Type.enumeration.getValue(stateObject.type);
    return matrix;
  }
}
js_dot.register('Matrix3', Matrix3);
const m3 = Matrix3.pool.create.bind(Matrix3.pool);
js_dot.register('m3', m3);
const fromPool = Matrix3.pool.fetch.bind(Matrix3.pool);
Matrix3.IDENTITY = Matrix3.identity().makeImmutable();
Matrix3.X_REFLECTION = m3(-1, 0, 0, 0, 1, 0, 0, 0, 1, Matrix3Type.AFFINE).makeImmutable();
Matrix3.Y_REFLECTION = m3(1, 0, 0, 0, -1, 0, 0, 0, 1, Matrix3Type.AFFINE).makeImmutable();
Matrix3.Matrix3IO = new IOType('Matrix3IO', {
  valueType: Matrix3,
  documentation: 'A 3x3 matrix often used for holding transform data.',
  toStateObject: matrix3 => Matrix3.toStateObject(matrix3),
  fromStateObject: Matrix3.fromStateObject,
  stateSchema: {
    entries: types_ArrayIO(types_NumberIO),
    type: types_EnumerationIO(Matrix3Type)
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/MatrixOps3.js
// Copyright 2015-2020, University of Colorado Boulder

/**
 * Fast 3x3 matrix computations at the lower level, including an SVD implementation that is fully stable.
 * Overall, it uses a heavily mutable style, passing in the object where the result(s) will be stored.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



/*
 * Matrices are stored as flat typed arrays with row-major indices. For example, for a 3x3:
 * [0] [1] [2]
 * [3] [4] [5]
 * [6] [7] [8]
 *
 * NOTE: We assume the typed arrays are AT LEAST as long as necessary (but could be longer). This allows us to use
 * an array as big as the largest one we'll need.
 */

// constants
const SQRT_HALF = Math.sqrt(0.5);
const MatrixOps3 = {
  // use typed arrays if possible
  Array: js_dot.FastArray,
  /*---------------------------------------------------------------------------*
   * 3x3 matrix math
   *----------------------------------------------------------------------------*/

  /*
   * From 0-indexed row and column indices, returns the index into the flat array
   *
   * @param {number} row
   * @param {number} col
   */
  index3(row, col) {
    assert && assert(row >= 0 && row < 3);
    assert && assert(col >= 0 && col < 3);
    return 3 * row + col;
  },
  /*
   * Copies one matrix into another
   *
   * @param {FastMath.Array} matrix - [input] 3x3 Matrix
   * @param {FastMath.Array} result - [output] 3x3 Matrix
   */
  set3(matrix, result) {
    assert && assert(matrix.length >= 9);
    assert && assert(result.length >= 9);
    result[0] = matrix[0];
    result[1] = matrix[1];
    result[2] = matrix[2];
    result[3] = matrix[3];
    result[4] = matrix[4];
    result[5] = matrix[5];
    result[6] = matrix[6];
    result[7] = matrix[7];
    result[8] = matrix[8];
  },
  /*
   * Writes the transpose of the input matrix into the result matrix (in-place modification is OK)
   *
   * @param {FastMath.Array} matrix - [input] 3x3 Matrix
   * @param {FastMath.Array} result - [output] 3x3 Matrix
   */
  transpose3(matrix, result) {
    assert && assert(matrix.length >= 9);
    assert && assert(result.length >= 9);
    const m1 = matrix[3];
    const m2 = matrix[6];
    const m3 = matrix[1];
    const m5 = matrix[7];
    const m6 = matrix[2];
    const m7 = matrix[5];
    result[0] = matrix[0];
    result[1] = m1;
    result[2] = m2;
    result[3] = m3;
    result[4] = matrix[4];
    result[5] = m5;
    result[6] = m6;
    result[7] = m7;
    result[8] = matrix[8];
  },
  /*
   * The determinant of a 3x3 matrix
   *
   * @param {FastMath.Array} matrix - [input] 3x3 Matrix
   * @returns {number} - The determinant. 0 indicates a singular (non-invertible) matrix.
   */
  det3(matrix) {
    assert && assert(matrix.length >= 9);
    return matrix[0] * matrix[4] * matrix[8] + matrix[1] * matrix[5] * matrix[6] + matrix[2] * matrix[3] * matrix[7] - matrix[2] * matrix[4] * matrix[6] - matrix[1] * matrix[3] * matrix[8] - matrix[0] * matrix[5] * matrix[7];
  },
  /*
   * Writes the matrix multiplication ( left * right ) into result. (in-place modification is OK)
   *
   * @param {FastMath.Array} left - [input] 3x3 Matrix
   * @param {FastMath.Array} right - [input] 3x3 Matrix
   * @param {FastMath.Array} result - [output] 3x3 Matrix
   */
  mult3(left, right, result) {
    assert && assert(left.length >= 9);
    assert && assert(right.length >= 9);
    assert && assert(result.length >= 9);
    const m0 = left[0] * right[0] + left[1] * right[3] + left[2] * right[6];
    const m1 = left[0] * right[1] + left[1] * right[4] + left[2] * right[7];
    const m2 = left[0] * right[2] + left[1] * right[5] + left[2] * right[8];
    const m3 = left[3] * right[0] + left[4] * right[3] + left[5] * right[6];
    const m4 = left[3] * right[1] + left[4] * right[4] + left[5] * right[7];
    const m5 = left[3] * right[2] + left[4] * right[5] + left[5] * right[8];
    const m6 = left[6] * right[0] + left[7] * right[3] + left[8] * right[6];
    const m7 = left[6] * right[1] + left[7] * right[4] + left[8] * right[7];
    const m8 = left[6] * right[2] + left[7] * right[5] + left[8] * right[8];
    result[0] = m0;
    result[1] = m1;
    result[2] = m2;
    result[3] = m3;
    result[4] = m4;
    result[5] = m5;
    result[6] = m6;
    result[7] = m7;
    result[8] = m8;
  },
  /*
   * Writes the matrix multiplication ( transpose( left ) * right ) into result. (in-place modification is OK)
   *
   * @param {FastMath.Array} left - [input] 3x3 Matrix
   * @param {FastMath.Array} right - [input] 3x3 Matrix
   * @param {FastMath.Array} result - [output] 3x3 Matrix
   */
  mult3LeftTranspose(left, right, result) {
    assert && assert(left.length >= 9);
    assert && assert(right.length >= 9);
    assert && assert(result.length >= 9);
    const m0 = left[0] * right[0] + left[3] * right[3] + left[6] * right[6];
    const m1 = left[0] * right[1] + left[3] * right[4] + left[6] * right[7];
    const m2 = left[0] * right[2] + left[3] * right[5] + left[6] * right[8];
    const m3 = left[1] * right[0] + left[4] * right[3] + left[7] * right[6];
    const m4 = left[1] * right[1] + left[4] * right[4] + left[7] * right[7];
    const m5 = left[1] * right[2] + left[4] * right[5] + left[7] * right[8];
    const m6 = left[2] * right[0] + left[5] * right[3] + left[8] * right[6];
    const m7 = left[2] * right[1] + left[5] * right[4] + left[8] * right[7];
    const m8 = left[2] * right[2] + left[5] * right[5] + left[8] * right[8];
    result[0] = m0;
    result[1] = m1;
    result[2] = m2;
    result[3] = m3;
    result[4] = m4;
    result[5] = m5;
    result[6] = m6;
    result[7] = m7;
    result[8] = m8;
  },
  /*
   * Writes the matrix multiplication ( left * transpose( right ) ) into result. (in-place modification is OK)
   *
   * @param {FastMath.Array} left - [input] 3x3 Matrix
   * @param {FastMath.Array} right - [input] 3x3 Matrix
   * @param {FastMath.Array} result - [output] 3x3 Matrix
   */
  mult3RightTranspose(left, right, result) {
    assert && assert(left.length >= 9);
    assert && assert(right.length >= 9);
    assert && assert(result.length >= 9);
    const m0 = left[0] * right[0] + left[1] * right[1] + left[2] * right[2];
    const m1 = left[0] * right[3] + left[1] * right[4] + left[2] * right[5];
    const m2 = left[0] * right[6] + left[1] * right[7] + left[2] * right[8];
    const m3 = left[3] * right[0] + left[4] * right[1] + left[5] * right[2];
    const m4 = left[3] * right[3] + left[4] * right[4] + left[5] * right[5];
    const m5 = left[3] * right[6] + left[4] * right[7] + left[5] * right[8];
    const m6 = left[6] * right[0] + left[7] * right[1] + left[8] * right[2];
    const m7 = left[6] * right[3] + left[7] * right[4] + left[8] * right[5];
    const m8 = left[6] * right[6] + left[7] * right[7] + left[8] * right[8];
    result[0] = m0;
    result[1] = m1;
    result[2] = m2;
    result[3] = m3;
    result[4] = m4;
    result[5] = m5;
    result[6] = m6;
    result[7] = m7;
    result[8] = m8;
  },
  /*
   * Writes the matrix multiplication ( transpose( left ) * transpose( right ) ) into result.
   * (in-place modification is OK)
   * NOTE: This is equivalent to transpose( right * left ).
   *
   * @param {FastMath.Array} left - [input] 3x3 Matrix
   * @param {FastMath.Array} right - [input] 3x3 Matrix
   * @param {FastMath.Array} result - [output] 3x3 Matrix
   */
  mult3BothTranspose(left, right, result) {
    assert && assert(left.length >= 9);
    assert && assert(right.length >= 9);
    assert && assert(result.length >= 9);
    const m0 = left[0] * right[0] + left[3] * right[1] + left[6] * right[2];
    const m1 = left[0] * right[3] + left[3] * right[4] + left[6] * right[5];
    const m2 = left[0] * right[6] + left[3] * right[7] + left[6] * right[8];
    const m3 = left[1] * right[0] + left[4] * right[1] + left[7] * right[2];
    const m4 = left[1] * right[3] + left[4] * right[4] + left[7] * right[5];
    const m5 = left[1] * right[6] + left[4] * right[7] + left[7] * right[8];
    const m6 = left[2] * right[0] + left[5] * right[1] + left[8] * right[2];
    const m7 = left[2] * right[3] + left[5] * right[4] + left[8] * right[5];
    const m8 = left[2] * right[6] + left[5] * right[7] + left[8] * right[8];
    result[0] = m0;
    result[1] = m1;
    result[2] = m2;
    result[3] = m3;
    result[4] = m4;
    result[5] = m5;
    result[6] = m6;
    result[7] = m7;
    result[8] = m8;
  },
  /*
   * Writes the product ( matrix * vector ) into result. (in-place modification is OK)
   *
   * @param {FastMath.Array} matrix - [input] 3x3 Matrix
   * @param {Vector3} vector - [input]
   * @param {Vector3} result - [output]
   */
  mult3Vector3(matrix, vector, result) {
    assert && assert(matrix.length >= 9);
    const x = matrix[0] * vector.x + matrix[1] * vector.y + matrix[2] * vector.z;
    const y = matrix[3] * vector.x + matrix[4] * vector.y + matrix[5] * vector.z;
    const z = matrix[6] * vector.x + matrix[7] * vector.y + matrix[8] * vector.z;
    result.x = x;
    result.y = y;
    result.z = z;
  },
  /*
   * Swaps two columns in a matrix, negating one of them to maintain the sign of the determinant.
   *
   * @param {FastMath.Array} matrix - [input] 3x3 Matrix
   * @param {number} idx0 - In the range [0,2]
   * @param {number} idx1 - In the range [0,2]
   */
  swapNegateColumn(matrix, idx0, idx1) {
    assert && assert(matrix.length >= 9);
    const tmp0 = matrix[idx0];
    const tmp1 = matrix[idx0 + 3];
    const tmp2 = matrix[idx0 + 6];
    matrix[idx0] = matrix[idx1];
    matrix[idx0 + 3] = matrix[idx1 + 3];
    matrix[idx0 + 6] = matrix[idx1 + 6];
    matrix[idx1] = -tmp0;
    matrix[idx1 + 3] = -tmp1;
    matrix[idx1 + 6] = -tmp2;
  },
  /*
   * Sets the result matrix to the identity.
   *
   * @param {FastMath.Array} result - [output] 3x3 Matrix
   */
  setIdentity3(result) {
    result[0] = result[4] = result[8] = 1; // diagonal
    result[1] = result[2] = result[3] = result[5] = result[6] = result[7] = 0; // non-diagonal
  },

  /*
   * Sets the result matrix to the Givens rotation (performs a rotation between two components). Instead of an angle,
   * the 'cos' and 'sin' values are passed in directly since we skip the trigonometry almost everywhere we can.
   *
   * See http://en.wikipedia.org/wiki/Givens_rotation (note that we use the other sign convention for the sin)
   *
   * @param {FastMath.Array} result - [output] 3x3 Matrix
   * @param {number} cos - [input] The cosine of the Givens rotation angle
   * @param {number} sin - [input] The sine of the Givens rotation angle
   * @param {number} idx0 - [input] The smaller row/column index
   * @param {number} idx1 - [input] The larger row/column index
   */
  setGivens3(result, cos, sin, idx0, idx1) {
    assert && assert(idx0 < idx1);
    this.setIdentity3(result);
    result[this.index3(idx0, idx0)] = cos;
    result[this.index3(idx1, idx1)] = cos;
    result[this.index3(idx0, idx1)] = sin;
    result[this.index3(idx1, idx0)] = -sin;
  },
  /*
   * Efficiently pre-multiples the matrix in-place by the specified Givens rotation (matrix <= rotation * matrix).
   * Equivalent to using setGivens3 and mult3.
   *
   * @param {FastMath.Array} result - [input AND output] 3x3 Matrix
   * @param {number} cos - [input] The cosine of the Givens rotation angle
   * @param {number} sin - [input] The sine of the Givens rotation angle
   * @param {number} idx0 - [input] The smaller row/column index
   * @param {number} idx1 - [input] The larger row/column index
   */
  preMult3Givens(matrix, cos, sin, idx0, idx1) {
    const baseA = idx0 * 3;
    const baseB = idx1 * 3;
    // lexicographically in column-major order for "affine" section
    const a = cos * matrix[baseA + 0] + sin * matrix[baseB + 0];
    const b = cos * matrix[baseB + 0] - sin * matrix[baseA + 0];
    const c = cos * matrix[baseA + 1] + sin * matrix[baseB + 1];
    const d = cos * matrix[baseB + 1] - sin * matrix[baseA + 1];
    const e = cos * matrix[baseA + 2] + sin * matrix[baseB + 2];
    const f = cos * matrix[baseB + 2] - sin * matrix[baseA + 2];
    matrix[baseA + 0] = a;
    matrix[baseB + 0] = b;
    matrix[baseA + 1] = c;
    matrix[baseB + 1] = d;
    matrix[baseA + 2] = e;
    matrix[baseB + 2] = f;
  },
  /*
   * Efficiently post-multiples the matrix in-place by the transpose of the specified Givens rotation
   * (matrix <= matrix * rotation^T).
   * Equivalent to using setGivens3 and mult3RightTranspose.
   *
   * @param {FastMath.Array} result - [input AND output] 3x3 Matrix
   * @param {number} cos - [input] The cosine of the Givens rotation angle
   * @param {number} sin - [input] The sine of the Givens rotation angle
   * @param {number} idx0 - [input] The smaller row/column index
   * @param {number} idx1 - [input] The larger row/column index
   */
  postMult3Givens(matrix, cos, sin, idx0, idx1) {
    // lexicographically in row-major order for the "transposed affine" section
    const a = cos * matrix[idx0 + 0] + sin * matrix[idx1 + 0];
    const b = cos * matrix[idx1 + 0] - sin * matrix[idx0 + 0];
    const c = cos * matrix[idx0 + 3] + sin * matrix[idx1 + 3];
    const d = cos * matrix[idx1 + 3] - sin * matrix[idx0 + 3];
    const e = cos * matrix[idx0 + 6] + sin * matrix[idx1 + 6];
    const f = cos * matrix[idx1 + 6] - sin * matrix[idx0 + 6];
    matrix[idx0 + 0] = a;
    matrix[idx1 + 0] = b;
    matrix[idx0 + 3] = c;
    matrix[idx1 + 3] = d;
    matrix[idx0 + 6] = e;
    matrix[idx1 + 6] = f;
  },
  /*
   * Zeros out the [idx0,idx1] and [idx1,idx0] entries of the matrix mS by applying a Givens rotation as part of the
   * Jacobi iteration. In addition, the Givens rotation is prepended to mQ so we can track the accumulated rotations
   * applied (this is how we get V in the SVD).
   *
   * @param {FastMath.Array} mS - [input AND output] Symmetric 3x3 Matrix
   * @param {FastMath.Array} mQ - [input AND output] Unitary 3x3 Matrix
   * @param {number} idx0 - [input] The smaller row/column index
   * @param {number} idx1 - [input] The larger row/column index
   */
  applyJacobi3(mS, mQ, idx0, idx1) {
    // submatrix entries for idx0,idx1
    const a11 = mS[3 * idx0 + idx0];
    const a12 = mS[3 * idx0 + idx1]; // we assume mS is symmetric, so we don't need a21
    const a22 = mS[3 * idx1 + idx1];

    // Approximate givens angle, see https://graphics.cs.wisc.edu/Papers/2011/MSTTS11/SVD_TR1690.pdf (section 2.3)
    // "Computing the Singular Value Decomposition of 3x3 matrices with minimal branching and elementary floating point operations"
    // Aleka McAdams, Andrew Selle, Rasmus Tamstorf, Joseph Teran, Eftychios Sifakis
    const lhs = a12 * a12;
    let rhs = a11 - a22;
    rhs = rhs * rhs;
    const useAngle = lhs < rhs;
    const w = 1 / Math.sqrt(lhs + rhs);
    // NOTE: exact Givens angle is 0.5 * Math.atan( 2 * a12 / ( a11 - a22 ) ), but clamped to withing +-Math.PI / 4
    const cos = useAngle ? w * (a11 - a22) : SQRT_HALF;
    const sin = useAngle ? w * a12 : SQRT_HALF;

    // S' = Q * S * transpose( Q )
    this.preMult3Givens(mS, cos, sin, idx0, idx1);
    this.postMult3Givens(mS, cos, sin, idx0, idx1);

    // Q' = Q * mQ
    this.preMult3Givens(mQ, cos, sin, idx0, idx1);
  },
  /*
   * The Jacobi method, which in turn zeros out all the non-diagonal entries repeatedly until mS converges into
   * a diagonal matrix. We track the applied Givens rotations in mQ, so that when given mS and mQ=identity, we will
   * maintain the value mQ * mS * mQ^T
   *
   * @param {FastMath.Array} mS - [input AND output] Symmetric 3x3 Matrix
   * @param {FastMath.Array} mQ - [input AND output] Unitary 3x3 Matrix
   * @param {number} n - [input] The number of iterations to run
   */
  jacobiIteration3(mS, mQ, n) {
    // for 3x3, we eliminate non-diagonal entries iteratively
    for (let i = 0; i < n; i++) {
      this.applyJacobi3(mS, mQ, 0, 1);
      this.applyJacobi3(mS, mQ, 0, 2);
      this.applyJacobi3(mS, mQ, 1, 2);
    }
  },
  /*
   * One step in computing the QR decomposition. Zeros out the (row,col) entry in 'r', while maintaining the
   * value of (q * r). We will end up with an orthogonal Q and upper-triangular R (or in the SVD case,
   * R will be diagonal)
   *
   * @param {FastMath.Array} q - [input AND ouput] 3x3 Matrix
   * @param {FastMath.Array} r - [input AND ouput] 3x3 Matrix
   * @param {number} row - [input] The row of the entry to zero out
   * @param {number} col - [input] The column of the entry to zero out
   */
  qrAnnihilate3(q, r, row, col) {
    assert && assert(row > col); // only in the lower-triangular area

    const epsilon = 0.0000000001;
    let cos;
    let sin;
    const diagonalValue = r[this.index3(col, col)];
    const targetValue = r[this.index3(row, col)];
    const diagonalSquared = diagonalValue * diagonalValue;
    const targetSquared = targetValue * targetValue;

    // handle the case where both (row,col) and (col,col) are very small (would cause instabilities)
    if (diagonalSquared + targetSquared < epsilon) {
      cos = diagonalValue > 0 ? 1 : 0;
      sin = 0;
    } else {
      const rsqr = 1 / Math.sqrt(diagonalSquared + targetSquared);
      cos = rsqr * diagonalValue;
      sin = rsqr * targetValue;
    }
    this.preMult3Givens(r, cos, sin, col, row);
    this.postMult3Givens(q, cos, sin, col, row);
  },
  /*
   * 3x3 Singular Value Decomposition, handling singular cases.
   * Based on https://graphics.cs.wisc.edu/Papers/2011/MSTTS11/SVD_TR1690.pdf
   * "Computing the Singular Value Decomposition of 3x3 matrices with minimal branching and elementary floating point operations"
   * Aleka McAdams, Andrew Selle, Rasmus Tamstorf, Joseph Teran, Eftychios Sifakis
   *
   * @param {FastMath.Array} a - [input] 3x3 Matrix that we want the SVD of.
   * @param {number} jacobiIterationCount - [input] How many Jacobi iterations to run (larger is more accurate to a point)
   * @param {FastMath.Array} resultU - [output] 3x3 U matrix (unitary)
   * @param {FastMath.Array} resultSigma - [output] 3x3 diagonal matrix of singular values
   * @param {FastMath.Array} resultV - [output] 3x3 V matrix (unitary)
   */
  svd3(a, jacobiIterationCount, resultU, resultSigma, resultV) {
    // shorthands
    const q = resultU;
    const v = resultV;
    const r = resultSigma;

    // for now, use 'r' as our S == transpose( A ) * A, so we don't have to use scratch matrices
    this.mult3LeftTranspose(a, a, r);
    // we'll accumulate into 'q' == transpose( V ) during the Jacobi iteration
    this.setIdentity3(q);

    // Jacobi iteration turns Q into V^T and R into Sigma^2 (we'll ditch R since the QR decomposition will be beter)
    this.jacobiIteration3(r, q, jacobiIterationCount);
    // final determination of V
    this.transpose3(q, v); // done with this 'q' until we reuse the scratch matrix later below for the QR decomposition

    this.mult3(a, v, r); // R = AV

    // Sort columns of R and V based on singular values (needed for the QR step, and useful anyways).
    // Their product will remain unchanged.
    let mag0 = r[0] * r[0] + r[3] * r[3] + r[6] * r[6]; // column vector magnitudes
    let mag1 = r[1] * r[1] + r[4] * r[4] + r[7] * r[7];
    let mag2 = r[2] * r[2] + r[5] * r[5] + r[8] * r[8];
    let tmpMag;
    if (mag0 < mag1) {
      // swap magnitudes
      tmpMag = mag0;
      mag0 = mag1;
      mag1 = tmpMag;
      this.swapNegateColumn(r, 0, 1);
      this.swapNegateColumn(v, 0, 1);
    }
    if (mag0 < mag2) {
      // swap magnitudes
      tmpMag = mag0;
      mag0 = mag2;
      mag2 = tmpMag;
      this.swapNegateColumn(r, 0, 2);
      this.swapNegateColumn(v, 0, 2);
    }
    if (mag1 < mag2) {
      this.swapNegateColumn(r, 1, 2);
      this.swapNegateColumn(v, 1, 2);
    }

    // QR decomposition
    this.setIdentity3(q); // reusing Q now for the QR
    // Zero out all three strictly lower-triangular values. Should turn the matrix diagonal
    this.qrAnnihilate3(q, r, 1, 0);
    this.qrAnnihilate3(q, r, 2, 0);
    this.qrAnnihilate3(q, r, 2, 1);

    // checks for a singular U value, we'll add in the needed 1 entries to make sure our U is orthogonal
    const bigEpsilon = 0.001; // they really should be around 1
    if (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] < bigEpsilon) {
      q[0] = 1;
    }
    if (q[3] * q[3] + q[4] * q[4] + q[5] * q[5] < bigEpsilon) {
      q[4] = 1;
    }
    if (q[6] * q[6] + q[7] * q[7] + q[8] * q[8] < bigEpsilon) {
      q[8] = 1;
    }
  },
  /*---------------------------------------------------------------------------*
   * 3xN matrix math
   *----------------------------------------------------------------------------*/

  /*
   * Sets the 3xN result matrix to be made out of column vectors
   *
   * @param {Array.<Vector3>} columnVectors - [input] List of 3D column vectors
   * @param {FastMath.Array} result - [output] 3xN Matrix, where N is the number of column vectors
   */
  setVectors3(columnVectors, result) {
    const m = 3;
    const n = columnVectors.length;
    assert && assert(result.length >= m * n, 'Array length check');
    for (let i = 0; i < n; i++) {
      const vector = columnVectors[i];
      result[i] = vector.x;
      result[i + n] = vector.y;
      result[i + 2 * n] = vector.z;
    }
  },
  /*
   * Retrieves column vector values from a 3xN matrix.
   *
   * @param {number} m - [input] The number of rows in the matrix (sanity check, should always be 3)
   * @param {number} n - [input] The number of columns in the matrix
   * @param {FastMath.Array} matrix - [input] 3xN Matrix
   * @param {number} columnIndex - [input] 3xN Matrix
   * @param {Vector3} result - [output] Vector to store the x,y,z
   */
  getColumnVector3(m, n, matrix, columnIndex, result) {
    assert && assert(m === 3 && columnIndex < n);
    result.x = matrix[columnIndex];
    result.y = matrix[columnIndex + n];
    result.z = matrix[columnIndex + 2 * n];
  },
  /*---------------------------------------------------------------------------*
   * Arbitrary dimension matrix math
   *----------------------------------------------------------------------------*/

  /*
   * From 0-indexed row and column indices, returns the index into the flat array
   *
   * @param {number} m - Number of rows in the matrix
   * @param {number} n - Number of columns in the matrix
   * @param {number} row
   * @param {number} col
   */
  index(m, n, row, col) {
    return n * row + col;
  },
  /*
   * Writes the transpose of the matrix into the result.
   *
   * @param {number} m - Number of rows in the original matrix
   * @param {number} n - Number of columns in the original matrix
   * @param {FastMath.Array} matrix - [input] MxN Matrix
   * @param {FastMath.Array} result - [output] NxM Matrix
   */
  transpose(m, n, matrix, result) {
    assert && assert(matrix.length >= m * n);
    assert && assert(result.length >= n * m);
    assert && assert(matrix !== result, 'In-place modification not implemented yet');
    for (let row = 0; row < m; row++) {
      for (let col = 0; col < n; col++) {
        result[m * col + row] = matrix[n * row + col];
      }
    }
  },
  /*
   * Writes the matrix multiplication of ( left * right ) into result
   *
   * @param {number} m - Number of rows in the left matrix
   * @param {number} n - Number of columns in the left matrix, number of rows in the right matrix
   * @param {number} p - Number of columns in the right matrix
   * @param {FastMath.Array} left - [input] MxN Matrix
   * @param {FastMath.Array} right - [input] NxP Matrix
   * @param {FastMath.Array} result - [output] MxP Matrix
   */
  mult(m, n, p, left, right, result) {
    assert && assert(left.length >= m * n);
    assert && assert(right.length >= n * p);
    assert && assert(result.length >= m * p);
    assert && assert(left !== result && right !== result, 'In-place modification not implemented yet');
    for (let row = 0; row < m; row++) {
      for (let col = 0; col < p; col++) {
        let x = 0;
        for (let k = 0; k < n; k++) {
          x += left[this.index(m, n, row, k)] * right[this.index(n, p, k, col)];
        }
        result[this.index(m, p, row, col)] = x;
      }
    }
  },
  /*
   * Writes the matrix multiplication of ( left * transpose( right ) ) into result
   *
   * @param {number} m - Number of rows in the left matrix
   * @param {number} n - Number of columns in the left matrix, number of columns in the right matrix
   * @param {number} p - Number of rows in the right matrix
   * @param {FastMath.Array} left - [input] MxN Matrix
   * @param {FastMath.Array} right - [input] PxN Matrix
   * @param {FastMath.Array} result - [output] MxP Matrix
   */
  multRightTranspose(m, n, p, left, right, result) {
    assert && assert(left.length >= m * n);
    assert && assert(right.length >= n * p);
    assert && assert(result.length >= m * p);
    assert && assert(left !== result && right !== result, 'In-place modification not implemented yet');
    for (let row = 0; row < m; row++) {
      for (let col = 0; col < p; col++) {
        let x = 0;
        for (let k = 0; k < n; k++) {
          x += left[this.index(m, n, row, k)] * right[this.index(p, n, col, k)];
        }
        result[this.index(m, p, row, col)] = x;
      }
    }
  },
  /*
   * Writes the matrix into the result, permuting the columns.
   *
   * @param {number} m - Number of rows in the original matrix
   * @param {number} n - Number of columns in the original matrix
   * @param {FastMath.Array} matrix - [input] MxN Matrix
   * @param {Permutation} permutation - [input] Permutation
   * @param {FastMath.Array} result - [output] MxN Matrix
   */
  permuteColumns(m, n, matrix, permutation, result) {
    assert && assert(matrix !== result, 'In-place modification not implemented yet');
    assert && assert(matrix.length >= m * n);
    assert && assert(result.length >= m * n);
    for (let col = 0; col < n; col++) {
      const permutedColumnIndex = permutation.indices[col];
      for (let row = 0; row < m; row++) {
        result[this.index(m, n, row, col)] = matrix[this.index(m, n, row, permutedColumnIndex)];
      }
    }
  }
};
js_dot.register('MatrixOps3', MatrixOps3);
/* harmony default export */ const js_MatrixOps3 = ((/* unused pure expression or super */ null && (MatrixOps3)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Permutation.js
// Copyright 2013-2023, University of Colorado Boulder

/**
 * An immutable permutation that can permute an array
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



class Permutation {
  /**
   * Creates a permutation that will rearrange a list so that newList[i] = oldList[permutation[i]]
   */
  constructor(indices) {
    this.indices = indices;
  }
  size() {
    return this.indices.length;
  }

  /**
   * Applies the permutation, returning either a new array or number (whatever was provided).
   */
  apply(arrayOrInt) {
    if (typeof arrayOrInt === 'number') {
      // @ts-expect-error
      return this.indices[arrayOrInt];
    } else {
      if (arrayOrInt.length !== this.size()) {
        throw new Error(`Permutation length ${this.size()} not equal to list length ${arrayOrInt.length}`);
      }

      // permute it as an array
      const result = new Array(arrayOrInt.length);
      for (let i = 0; i < arrayOrInt.length; i++) {
        result[i] = arrayOrInt[this.indices[i]];
      }
      // @ts-expect-error
      return result;
    }
  }

  /**
   * Creates a new permutation that is the inverse of this.
   */
  inverted() {
    const newPermutation = new Array(this.size());
    for (let i = 0; i < this.size(); i++) {
      newPermutation[this.indices[i]] = i;
    }
    return new Permutation(newPermutation);
  }
  withIndicesPermuted(indices) {
    const result = [];
    Permutation.forEachPermutation(indices, integers => {
      const oldIndices = this.indices;
      const newPermutation = oldIndices.slice(0);
      for (let i = 0; i < indices.length; i++) {
        newPermutation[indices[i]] = oldIndices[integers[i]];
      }
      result.push(new Permutation(newPermutation));
    });
    return result;
  }
  toString() {
    return `P[${this.indices.join(', ')}]`;
  }
  equals(permutation) {
    return this.indices.length === permutation.indices.length && _.isEqual(this.indices, permutation.indices);
  }

  /**
   * Creates an identity permutation of a given size.
   */
  static identity(size) {
    assert && assert(size >= 0);
    const indices = new Array(size);
    for (let i = 0; i < size; i++) {
      indices[i] = i;
    }
    return new Permutation(indices);
  }

  /**
   * Lists all permutations that have a given size
   */
  static permutations(size) {
    const result = [];
    Permutation.forEachPermutation(js_Utils.rangeInclusive(0, size - 1), integers => {
      result.push(new Permutation(integers.slice()));
    });
    return result;
  }

  /**
   * Calls a callback on every single possible permutation of the given Array
   *
   * @param array
   * @param callback - Called on each permuted version of the array possible
   */
  static forEachPermutation(array, callback) {
    recursiveForEachPermutation(array, [], callback);
  }
  static permutationsOf(array) {
    const results = [];
    Permutation.forEachPermutation(array, result => {
      results.push(result.slice());
    });
    return results;
  }
}
js_dot.register('Permutation', Permutation);

/**
 * Call our function with each permutation of the provided list PREFIXED by prefix, in lexicographic order
 *
 * @param array   List to generate permutations of
 * @param prefix   Elements that should be inserted at the front of each list before each call
 * @param callback Function to call
 */
function recursiveForEachPermutation(array, prefix, callback) {
  if (array.length === 0) {
    callback(prefix);
  } else {
    for (let i = 0; i < array.length; i++) {
      const element = array[i];

      // remove the element from the array
      const nextArray = array.slice(0);
      nextArray.splice(i, 1);

      // add it into the prefix
      const nextPrefix = prefix.slice(0);
      nextPrefix.push(element);
      recursiveForEachPermutation(nextArray, nextPrefix, callback);
    }
  }
}
/* harmony default export */ const js_Permutation = ((/* unused pure expression or super */ null && (Permutation)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Plane3.js
// Copyright 2014-2022, University of Colorado Boulder

/**
 * A mathematical plane in 3 dimensions determined by a normal vector to the plane and the distance to the closest
 * point on the plane to the origin
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



class Plane3 {
  /**
   * @param normal - A normal vector (perpendicular) to the plane
   * @param distance - The signed distance to the plane from the origin, so that normal.times( distance )
   *                            will be a point on the plane.
   */
  constructor(normal, distance) {
    this.normal = normal;
    this.distance = distance;
    assert && assert(Math.abs(normal.magnitude - 1) < 0.01, 'the normal vector must be a unit vector');
  }
  intersectWithRay(ray) {
    return ray.pointAtDistance(ray.distanceToPlane(this));
  }

  /**
   * Returns a new plane that passes through three points $(\vec{a},\vec{b},\vec{c})$
   * The normal of the plane points along $\vec{c-a} \times \vec{b-a}$
   * Passing three collinear points will return null
   *
   * @param a - first point
   * @param b - second point
   * @param c - third point
   */
  static fromTriangle(a, b, c) {
    const normal = c.minus(a).cross(b.minus(a));
    if (normal.magnitude === 0) {
      return null;
    }
    normal.normalize();
    return new Plane3(normal, normal.dot(a));
  }
  static XY = new Plane3(new Vector3(0, 0, 1), 0);
  static XZ = new Plane3(new Vector3(0, 1, 0), 0);
  static YZ = new Plane3(new Vector3(1, 0, 0), 0);
}
js_dot.register('Plane3', Plane3);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IzIiwiZG90IiwiUGxhbmUzIiwiY29uc3RydWN0b3IiLCJub3JtYWwiLCJkaXN0YW5jZSIsImFzc2VydCIsIk1hdGgiLCJhYnMiLCJtYWduaXR1ZGUiLCJpbnRlcnNlY3RXaXRoUmF5IiwicmF5IiwicG9pbnRBdERpc3RhbmNlIiwiZGlzdGFuY2VUb1BsYW5lIiwiZnJvbVRyaWFuZ2xlIiwiYSIsImIiLCJjIiwibWludXMiLCJjcm9zcyIsIm5vcm1hbGl6ZSIsIlhZIiwiWFoiLCJZWiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGxhbmUzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIEEgbWF0aGVtYXRpY2FsIHBsYW5lIGluIDMgZGltZW5zaW9ucyBkZXRlcm1pbmVkIGJ5IGEgbm9ybWFsIHZlY3RvciB0byB0aGUgcGxhbmUgYW5kIHRoZSBkaXN0YW5jZSB0byB0aGUgY2xvc2VzdFxuICogcG9pbnQgb24gdGhlIHBsYW5lIHRvIHRoZSBvcmlnaW5cbiAqXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XG4gKi9cblxuaW1wb3J0IFJheTMgZnJvbSAnLi9SYXkzLmpzJztcbmltcG9ydCBWZWN0b3IzIGZyb20gJy4vVmVjdG9yMy5qcyc7XG5pbXBvcnQgZG90IGZyb20gJy4vZG90LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxhbmUzIHtcblxuICBwdWJsaWMgbm9ybWFsOiBWZWN0b3IzO1xuICBwdWJsaWMgZGlzdGFuY2U6IG51bWJlcjtcblxuICAvKipcbiAgICogQHBhcmFtIG5vcm1hbCAtIEEgbm9ybWFsIHZlY3RvciAocGVycGVuZGljdWxhcikgdG8gdGhlIHBsYW5lXG4gICAqIEBwYXJhbSBkaXN0YW5jZSAtIFRoZSBzaWduZWQgZGlzdGFuY2UgdG8gdGhlIHBsYW5lIGZyb20gdGhlIG9yaWdpbiwgc28gdGhhdCBub3JtYWwudGltZXMoIGRpc3RhbmNlIClcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBhIHBvaW50IG9uIHRoZSBwbGFuZS5cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggbm9ybWFsOiBWZWN0b3IzLCBkaXN0YW5jZTogbnVtYmVyICkge1xuICAgIHRoaXMubm9ybWFsID0gbm9ybWFsO1xuICAgIHRoaXMuZGlzdGFuY2UgPSBkaXN0YW5jZTtcblxuICAgIGFzc2VydCAmJiBhc3NlcnQoIE1hdGguYWJzKCBub3JtYWwubWFnbml0dWRlIC0gMSApIDwgMC4wMSwgJ3RoZSBub3JtYWwgdmVjdG9yIG11c3QgYmUgYSB1bml0IHZlY3RvcicgKTtcbiAgfVxuXG4gIHB1YmxpYyBpbnRlcnNlY3RXaXRoUmF5KCByYXk6IFJheTMgKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIHJheS5wb2ludEF0RGlzdGFuY2UoIHJheS5kaXN0YW5jZVRvUGxhbmUoIHRoaXMgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgcGxhbmUgdGhhdCBwYXNzZXMgdGhyb3VnaCB0aHJlZSBwb2ludHMgJChcXHZlY3thfSxcXHZlY3tifSxcXHZlY3tjfSkkXG4gICAqIFRoZSBub3JtYWwgb2YgdGhlIHBsYW5lIHBvaW50cyBhbG9uZyAkXFx2ZWN7Yy1hfSBcXHRpbWVzIFxcdmVje2ItYX0kXG4gICAqIFBhc3NpbmcgdGhyZWUgY29sbGluZWFyIHBvaW50cyB3aWxsIHJldHVybiBudWxsXG4gICAqXG4gICAqIEBwYXJhbSBhIC0gZmlyc3QgcG9pbnRcbiAgICogQHBhcmFtIGIgLSBzZWNvbmQgcG9pbnRcbiAgICogQHBhcmFtIGMgLSB0aGlyZCBwb2ludFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tVHJpYW5nbGUoIGE6IFZlY3RvcjMsIGI6IFZlY3RvcjMsIGM6IFZlY3RvcjMgKTogUGxhbmUzIHwgbnVsbCB7XG4gICAgY29uc3Qgbm9ybWFsID0gKCBjLm1pbnVzKCBhICkgKS5jcm9zcyggYi5taW51cyggYSApICk7XG4gICAgaWYgKCBub3JtYWwubWFnbml0dWRlID09PSAwICkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIG5vcm1hbC5ub3JtYWxpemUoKTtcblxuICAgIHJldHVybiBuZXcgUGxhbmUzKCBub3JtYWwsIG5vcm1hbC5kb3QoIGEgKSApO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBYWSA9IG5ldyBQbGFuZTMoIG5ldyBWZWN0b3IzKCAwLCAwLCAxICksIDAgKTtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBYWiA9IG5ldyBQbGFuZTMoIG5ldyBWZWN0b3IzKCAwLCAxLCAwICksIDAgKTtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBZWiA9IG5ldyBQbGFuZTMoIG5ldyBWZWN0b3IzKCAxLCAwLCAwICksIDAgKTtcbn1cblxuZG90LnJlZ2lzdGVyKCAnUGxhbmUzJywgUGxhbmUzICk7XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxPQUFPLE1BQU0sY0FBYztBQUNsQyxPQUFPQyxHQUFHLE1BQU0sVUFBVTtBQUUxQixlQUFlLE1BQU1DLE1BQU0sQ0FBQztFQUsxQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ1NDLFdBQVdBLENBQUVDLE1BQWUsRUFBRUMsUUFBZ0IsRUFBRztJQUN0RCxJQUFJLENBQUNELE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNDLFFBQVEsR0FBR0EsUUFBUTtJQUV4QkMsTUFBTSxJQUFJQSxNQUFNLENBQUVDLElBQUksQ0FBQ0MsR0FBRyxDQUFFSixNQUFNLENBQUNLLFNBQVMsR0FBRyxDQUFDLENBQUUsR0FBRyxJQUFJLEVBQUUseUNBQXlDLENBQUU7RUFDeEc7RUFFT0MsZ0JBQWdCQSxDQUFFQyxHQUFTLEVBQVk7SUFDNUMsT0FBT0EsR0FBRyxDQUFDQyxlQUFlLENBQUVELEdBQUcsQ0FBQ0UsZUFBZSxDQUFFLElBQUksQ0FBRSxDQUFFO0VBQzNEOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFLE9BQWNDLFlBQVlBLENBQUVDLENBQVUsRUFBRUMsQ0FBVSxFQUFFQyxDQUFVLEVBQWtCO0lBQzlFLE1BQU1iLE1BQU0sR0FBS2EsQ0FBQyxDQUFDQyxLQUFLLENBQUVILENBQUMsQ0FBRSxDQUFHSSxLQUFLLENBQUVILENBQUMsQ0FBQ0UsS0FBSyxDQUFFSCxDQUFDLENBQUUsQ0FBRTtJQUNyRCxJQUFLWCxNQUFNLENBQUNLLFNBQVMsS0FBSyxDQUFDLEVBQUc7TUFDNUIsT0FBTyxJQUFJO0lBQ2I7SUFDQUwsTUFBTSxDQUFDZ0IsU0FBUyxFQUFFO0lBRWxCLE9BQU8sSUFBSWxCLE1BQU0sQ0FBRUUsTUFBTSxFQUFFQSxNQUFNLENBQUNILEdBQUcsQ0FBRWMsQ0FBQyxDQUFFLENBQUU7RUFDOUM7RUFFQSxPQUF1Qk0sRUFBRSxHQUFHLElBQUluQixNQUFNLENBQUUsSUFBSUYsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFLEVBQUUsQ0FBQyxDQUFFO0VBQ25FLE9BQXVCc0IsRUFBRSxHQUFHLElBQUlwQixNQUFNLENBQUUsSUFBSUYsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFLEVBQUUsQ0FBQyxDQUFFO0VBQ25FLE9BQXVCdUIsRUFBRSxHQUFHLElBQUlyQixNQUFNLENBQUUsSUFBSUYsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFLEVBQUUsQ0FBQyxDQUFFO0FBQ3JFO0FBRUFDLEdBQUcsQ0FBQ3VCLFFBQVEsQ0FBRSxRQUFRLEVBQUV0QixNQUFNLENBQUUifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Quaternion.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * Quaternion, see http://en.wikipedia.org/wiki/Quaternion
 *
 * TODO #95 convert from JME-style parametrization into classical mathematical description?
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */






class Quaternion {
  /**
   * Quaternion defines hypercomplex numbers of the form {x, y, z, w}
   * Quaternion are useful to represent rotation, the xyzw values of a Quaternion can be thought as rotation axis vector described by xyz and a rotation angle described by w.
   * @public
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} w
   */
  constructor(x, y, z, w) {
    this.setXYZW(x, y, z, w);
  }

  /**
   * Sets the x,y,z,w values of the quaternion
   * @public
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} w
   */
  setXYZW(x, y, z, w) {
    this.x = x !== undefined ? x : 0;
    this.y = y !== undefined ? y : 0;
    this.z = z !== undefined ? z : 0;
    this.w = w !== undefined ? w : 1;
  }

  /*---------------------------------------------------------------------------*
   * Immutables
   *----------------------------------------------------------------------------*/

  /**
   * Addition of this quaternion and another quaternion, returning a copy.
   * @public
   *
   * @param {Quaternion} quat
   * @returns {Quaternion}
   */
  plus(quat) {
    return new Quaternion(this.x + quat.x, this.y + quat.y, this.z + quat.z, this.w + quat.w);
  }

  /**
   * Multiplication of this quaternion by a scalar, returning a copy.
   * @public
   *
   * @param {number} s
   * @returns {Quaternion}
   */
  timesScalar(s) {
    return new Quaternion(this.x * s, this.y * s, this.z * s, this.w * s);
  }

  /**
   * Multiplication of this quaternion by another quaternion, returning a copy.
   * Multiplication is also known at the Hamilton Product (an extension of the cross product for vectors)
   * The product of two rotation quaternions will be equivalent to a rotation by the first quaternion followed by the second quaternion rotation,
   * @public
   *
   * @param {Quaternion} quat
   * @returns {Quaternion}
   */
  timesQuaternion(quat) {
    // TODO: note why this is the case? product noted everywhere is the other one mentioned!
    // mathematica-style
    //        return new Quaternion(
    //                this.x * quat.x - this.y * quat.y - this.z * quat.z - this.w * quat.w,
    //                this.x * quat.y + this.y * quat.x + this.z * quat.w - this.w * quat.z,
    //                this.x * quat.z - this.y * quat.w + this.z * quat.x + this.w * quat.y,
    //                this.x * quat.w + this.y * quat.z - this.z * quat.y + this.w * quat.x
    //        );

    // JME-style
    return new Quaternion(this.x * quat.w - this.z * quat.y + this.y * quat.z + this.w * quat.x, -this.x * quat.z + this.y * quat.w + this.z * quat.x + this.w * quat.y, this.x * quat.y - this.y * quat.x + this.z * quat.w + this.w * quat.z, -this.x * quat.x - this.y * quat.y - this.z * quat.z + this.w * quat.w);

    /*
     Mathematica!
     In[13]:= Quaternion[-0.0, -0.0024999974, 0.0, 0.9999969] ** Quaternion[-0.9864071, 0.0016701065, -0.0050373166, 0.16423558]
     Out[13]= Quaternion[-0.164231, 0.00750332, 0.00208069, -0.986391]
      In[17]:= Quaternion[-0.0024999974, 0.0, 0.9999969, 0] ** Quaternion[0.0016701065, -0.0050373166, 0.16423558, -0.9864071]
     Out[17]= Quaternion[-0.164239, -0.986391, 0.00125951, 0.00750332]
      JME contains the rearrangement of what is typically called {w,x,y,z}
     */
  }

  /**
   * Multiply this quaternion by a vector v, returning a new vector3
   * When a versor, a rotation quaternion, and a vector which lies in the plane of the versor are multiplied, the result is a new vector of the same length but turned by the angle of the versor.
   * @public
   *
   * @param {Vector3} v
   * @returns {Vector3}
   */
  timesVector3(v) {
    if (v.magnitude === 0) {
      return new Vector3(0, 0, 0);
    }

    // TODO: optimization?
    return new Vector3(this.w * this.w * v.x + 2 * this.y * this.w * v.z - 2 * this.z * this.w * v.y + this.x * this.x * v.x + 2 * this.y * this.x * v.y + 2 * this.z * this.x * v.z - this.z * this.z * v.x - this.y * this.y * v.x, 2 * this.x * this.y * v.x + this.y * this.y * v.y + 2 * this.z * this.y * v.z + 2 * this.w * this.z * v.x - this.z * this.z * v.y + this.w * this.w * v.y - 2 * this.x * this.w * v.z - this.x * this.x * v.y, 2 * this.x * this.z * v.x + 2 * this.y * this.z * v.y + this.z * this.z * v.z - 2 * this.w * this.y * v.x - this.y * this.y * v.z + 2 * this.w * this.x * v.y - this.x * this.x * v.z + this.w * this.w * v.z);
  }

  /**
   * The magnitude of this quaternion, i.e. $\sqrt{x^2+y^2+v^2+w^2}$,  returns a non negative number
   * @public
   *
   * @returns {number}
   */
  getMagnitude() {
    return Math.sqrt(this.magnitudeSquared);
  }
  get magnitude() {
    return this.getMagnitude();
  }

  /**
   * The square of the magnitude of this quaternion, returns a non negative number
   * @public
   *
   * @returns {number}
   */
  getMagnitudeSquared() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  get magnitudeSquared() {
    return this.getMagnitudeSquared();
  }

  /**
   * Normalizes this quaternion (rescales to where the magnitude is 1), returning a new quaternion
   * @public
   *
   * @returns {Quaternion}
   */
  normalized() {
    const magnitude = this.magnitude;
    assert && assert(magnitude !== 0, 'Cannot normalize a zero-magnitude quaternion');
    return this.timesScalar(1 / magnitude);
  }

  /**
   * Returns a new quaternion pointing in the opposite direction of this quaternion
   * @public
   *
   * @returns {Quaternion}
   */
  negated() {
    return new Quaternion(-this.x, -this.y, -this.z, -this.w);
  }

  /**
   * Convert a quaternion to a rotation matrix
   * This quaternion does not need to be of magnitude 1
   * @public
   *
   * @returns {Matrix3}
   */
  toRotationMatrix() {
    // see http://en.wikipedia.org/wiki/Rotation_matrix#Quaternion

    const norm = this.magnitudeSquared;
    const flip = norm === 1 ? 2 : norm > 0 ? 2 / norm : 0;
    const xx = this.x * this.x * flip;
    const xy = this.x * this.y * flip;
    const xz = this.x * this.z * flip;
    const xw = this.w * this.x * flip;
    const yy = this.y * this.y * flip;
    const yz = this.y * this.z * flip;
    const yw = this.w * this.y * flip;
    const zz = this.z * this.z * flip;
    const zw = this.w * this.z * flip;
    return Matrix3.pool.fetch().columnMajor(1 - (yy + zz), xy + zw, xz - yw, xy - zw, 1 - (xx + zz), yz + xw, xz + yw, yz - xw, 1 - (xx + yy));
  }

  /**
   * Function returns a quaternion given euler angles
   * @public
   *
   * @param {number} yaw - rotation about the z-axis
   * @param {number} roll - rotation about the  x-axis
   * @param {number} pitch - rotation about the y-axis
   * @returns {Quaternion}
   */
  static fromEulerAngles(yaw, roll, pitch) {
    const sinPitch = Math.sin(pitch * 0.5);
    const cosPitch = Math.cos(pitch * 0.5);
    const sinRoll = Math.sin(roll * 0.5);
    const cosRoll = Math.cos(roll * 0.5);
    const sinYaw = Math.sin(yaw * 0.5);
    const cosYaw = Math.cos(yaw * 0.5);
    const a = cosRoll * cosPitch;
    const b = sinRoll * sinPitch;
    const c = cosRoll * sinPitch;
    const d = sinRoll * cosPitch;
    return new Quaternion(a * sinYaw + b * cosYaw, d * cosYaw + c * sinYaw, c * cosYaw - d * sinYaw, a * cosYaw - b * sinYaw);
  }

  /**
   * Convert a rotation matrix to a quaternion,
   * returning a new Quaternion (of magnitude one)
   * @public
   *
   * @param {Matrix3} matrix
   * @returns {Quaternion}
   */
  static fromRotationMatrix(matrix) {
    const v00 = matrix.m00();
    const v01 = matrix.m01();
    const v02 = matrix.m02();
    const v10 = matrix.m10();
    const v11 = matrix.m11();
    const v12 = matrix.m12();
    const v20 = matrix.m20();
    const v21 = matrix.m21();
    const v22 = matrix.m22();

    // from graphics gems code
    const trace = v00 + v11 + v22;
    let sqt;

    // we protect the division by s by ensuring that s>=1
    if (trace >= 0) {
      sqt = Math.sqrt(trace + 1);
      return new Quaternion((v21 - v12) * 0.5 / sqt, (v02 - v20) * 0.5 / sqt, (v10 - v01) * 0.5 / sqt, 0.5 * sqt);
    } else if (v00 > v11 && v00 > v22) {
      sqt = Math.sqrt(1 + v00 - v11 - v22);
      return new Quaternion(sqt * 0.5, (v10 + v01) * 0.5 / sqt, (v02 + v20) * 0.5 / sqt, (v21 - v12) * 0.5 / sqt);
    } else if (v11 > v22) {
      sqt = Math.sqrt(1 + v11 - v00 - v22);
      return new Quaternion((v10 + v01) * 0.5 / sqt, sqt * 0.5, (v21 + v12) * 0.5 / sqt, (v02 - v20) * 0.5 / sqt);
    } else {
      sqt = Math.sqrt(1 + v22 - v00 - v11);
      return new Quaternion((v02 + v20) * 0.5 / sqt, (v21 + v12) * 0.5 / sqt, sqt * 0.5, (v10 - v01) * 0.5 / sqt);
    }
  }

  /**
   * Find a quaternion that transforms a unit vector A into a unit vector B. There
   * are technically multiple solutions, so this only picks one.
   * @public
   *
   * @param {Vector3} a - Unit vector A
   * @param {Vector3} b - Unit vector B
   * @returns {Quaternion} A quaternion s.t. Q * A = B
   */
  static getRotationQuaternion(a, b) {
    return Quaternion.fromRotationMatrix(Matrix3.rotateAToB(a, b));
  }

  /**
   * spherical linear interpolation - blending two quaternions with a scalar parameter (ranging from 0 to 1).
   * @public
   * @param {Quaternion} a
   * @param {Quaternion} b
   * @param {number} t - amount of change , between 0 and 1 - 0 is at a, 1 is at b
   * @returns {Quaternion}
   */
  static slerp(a, b, t) {
    // if they are identical, just return one of them
    if (a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w) {
      return a;
    }
    let dot = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
    if (dot < 0) {
      b = b.negated();
      dot = -dot;
    }

    // how much of each quaternion should be contributed
    let ratioA = 1 - t;
    let ratioB = t;

    // tweak them if necessary
    if (1 - dot > 0.1) {
      const theta = Math.acos(dot);
      const invSinTheta = 1 / Math.sin(theta);
      ratioA = Math.sin((1 - t) * theta) * invSinTheta;
      ratioB = Math.sin(t * theta) * invSinTheta;
    }
    return new Quaternion(ratioA * a.x + ratioB * b.x, ratioA * a.y + ratioB * b.y, ratioA * a.z + ratioB * b.z, ratioA * a.w + ratioB * b.w);
  }
}

// @public {boolean}
Quaternion.prototype.isQuaternion = true;
js_dot.register('Quaternion', Quaternion);
js_Poolable.mixInto(Quaternion, {
  initialize: Quaternion.prototype.setXYZW
});
/* harmony default export */ const js_Quaternion = ((/* unused pure expression or super */ null && (Quaternion)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Random.js
// Copyright 2015-2022, University of Colorado Boulder

/**
 * Random number generator with an optional seed.  It uses seedrandom.js, a monkey patch for Math, see
 * https://github.com/davidbau/seedrandom.
 *
 * If you are developing a PhET Simulation, you should probably use the global `DOT/dotRandom` because it
 * provides built-in support for phet-io seeding and a check that it isn't used before the seed has been set.
 *
 * @author John Blanco (PhET Interactive Simulations)
 * @author Aaron Davis (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Mohamed Safi
 */





class Random {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    options = js_merge({
      // {number|null} seed for the random number generator.  When seed is null, Math.random() is used.
      seed: null
    }, options);

    // @private {number|null} initialized via setSeed below
    this.seed = null;

    // If seed is provided, create a local random number generator without altering Math.random.
    // Math.seedrandom is provided by seedrandom.js, see https://github.com/davidbau/seedrandom.
    // @private {function:number|null} initialized via setSeed below
    this.seedrandom = null;
    this.setSeed(options.seed);

    // @public (read-only) - the number of times `nextDouble` is called
    this.numberOfCalls = 0;
    Random.allRandomInstances.add(this);
  }

  /**
   * Clears out this instance from all of the Random instances.
   * @public
   */
  dispose() {
    Random.allRandomInstances.delete(this);
  }

  /**
   * Gets the seed.
   * @public
   * @returns {number|null}
   */
  getSeed() {
    return this.seed;
  }

  /**
   * Returns the next pseudo-random boolean
   * @public
   * @returns {boolean}
   */
  nextBoolean() {
    return this.nextDouble() >= 0.5;
  }

  /**
   * Returns the next pseudo random number from this random number generator sequence.
   * The random number is an integer ranging from 0 to n-1.
   * @public
   * @param {number} n
   * @returns {number} - an integer
   */
  nextInt(n) {
    const value = this.nextDouble() * n;
    return Math.floor(value);
  }

  /**
   * Randomly select a random integer between min and max (inclusive).
   * @public
   * @param {number} min - must be an integer
   * @param {number} max - must be an integer
   * @returns {number} an integer between min and max, inclusive
   */
  nextIntBetween(min, max) {
    assert && assert(arguments.length === 2, 'nextIntBetween must have exactly 2 arguments');
    assert && assert(Number.isInteger(min), `min must be an integer: ${min}`);
    assert && assert(Number.isInteger(max), `max must be an integer: ${max}`);
    const range = max - min;
    return this.nextInt(range + 1) + min;
  }

  /**
   * Randomly select one element from the given array.
   * @public
   * @param {T[]} array - the array from which one element will be selected, must have at least one element
   * @returns {T} - the selected element from the array
   * @template T
   */
  sample(array) {
    assert && assert(array.length > 0, 'Array should have at least 1 item.');
    const index = this.nextIntBetween(0, array.length - 1);
    return array[index];
  }

  /**
   * Creates an array of shuffled values, using a version of the Fisher-Yates shuffle.  Adapted from lodash-2.4.1 by
   * Sam Reid on Aug 16, 2016, See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.
   * @public
   * @param {Array} array - the array which will be shuffled
   * @returns {Array} a new array with all the same elements in the passed-in array, in randomized order.
   */
  shuffle(array) {
    assert && assert(array, 'Array should exist');
    let index = -1;
    const result = new Array(array.length);
    _.forEach(array, value => {
      const rand = this.nextIntBetween(0, ++index);
      result[index] = result[rand];
      result[rand] = value;
    });
    return result;
  }

  /**
   * Returns the next pseudo random number from this random number generator sequence in the range [0, 1)
   * The distribution of the random numbers is uniformly distributed across the interval
   * @public
   * @returns {number} - the random number
   */
  nextDouble() {
    this.numberOfCalls++;
    return this.seedrandom();
  }

  /**
   * Randomly selects a double in the range [min,max).
   * @public
   * @param {number} min
   * @param {number} max
   * @returns {number}
   */
  nextDoubleBetween(min, max) {
    assert && assert(min < max, 'min must be < max');
    const value = min + this.nextDouble() * (max - min);
    assert && assert(value >= min && value < max, `value out of range: ${value}`);
    return value;
  }

  /**
   * Returns the next gaussian-distributed random number from this random number generator sequence.
   * The distribution of the random numbers is gaussian, with a mean = 0 and standard deviation = 1
   * @public
   * @returns {number}
   */
  nextGaussian() {
    return js_Utils.boxMullerTransform(0, 1, this);
  }

  /**
   * Gets the next random double in a Range.
   * For min < max, the return value is [min,max), between min (inclusive) and max (exclusive).
   * For min === max, the return value is min.
   * @public
   * @param {Range} range
   * @returns {number}
   */
  nextDoubleInRange(range) {
    assert && assert(range instanceof js_Range, 'invalid range');
    if (range.min < range.max) {
      return this.nextDoubleBetween(range.min, range.max);
    } else {
      // because random.nextDoubleBetween requires min < max
      return range.min;
    }
  }

  /**
   * @public
   * @param {number|null} seed - if null, Math.random will be used to create the seed.
   */
  setSeed(seed) {
    assert && assert(seed === null || typeof seed === 'number');
    if (typeof seed === 'number') {
      assert && assert(Math.seedrandom, 'cannot set seed with 3rd party library "Math.seedrandom".');
    } else {
      seed = Math.random(); // eslint-disable-line bad-sim-text
    }

    this.seed = seed;

    // If seed is provided, create a local random number generator without altering Math.random.
    // Math.seedrandom is provided by seedrandom.js, see https://github.com/davidbau/seedrandom.
    // @private {function:number|null}
    this.seedrandom = Math.seedrandom ? new Math.seedrandom(`${seed}`) : () => Math.random(); // eslint-disable-line bad-sim-text
  }

  /**
   * Choose a numeric index from the array of weights.  The array of weights does not need to be normalized.
   * See https://stackoverflow.com/questions/8877249/generate-random-integers-with-probabilities
   * See also ContinuousServer.weightedSampleTest which uses the same algorithm
   * @param {ReadonlyArray<number>} weights
   * @returns {number}
   * @public
   */
  sampleProbabilities(weights) {
    const totalWeight = _.sum(weights);
    const cutoffWeight = totalWeight * this.nextDouble();
    let cumulativeWeight = 0;
    for (let i = 0; i < weights.length; i++) {
      cumulativeWeight += weights[i];
      if (cumulativeWeight >= cutoffWeight) {
        return i;
      }
    }

    // The fallback is the last test
    assert && assert(!weights[weights.length - 1] === 0, 'if last weight is zero, should have selected something beforehand');
    return weights.length - 1;
  }
}
Random.allRandomInstances = new Set();
Random.isNormalized = array => {
  assert && assert(_.sum(array) === 1);
};
js_dot.register('Random', Random);
/* harmony default export */ const js_Random = ((/* unused pure expression or super */ null && (Random)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Ray2.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * 2-dimensional ray consisting of an origin point and a unit direction vector.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */


class Ray2 {
  /**
   * Constructs a2D ray using the supplied origin position and unit length direction vector
   *
   * @param position - the ray's point of origin
   * @param direction - the ray's unit direction vector
   */
  constructor(position, direction) {
    this.position = position;
    this.direction = direction;
    assert && assert(Math.abs(direction.magnitude - 1) < 0.01, 'the direction must be a unit vector');
  }

  /**
   * Returns a new Ray that has it origin shifted to a position given by an amount distance*this.direction.
   */
  shifted(distance) {
    return new Ray2(this.pointAtDistance(distance), this.direction);
  }

  /**
   * Returns a position that is a distance 'distance' along the ray.
   */
  pointAtDistance(distance) {
    return this.position.plus(this.direction.timesScalar(distance));
  }

  /**
   * Returns the attributes of this ray into a string
   */
  toString() {
    return `${this.position.toString()} => ${this.direction.toString()}`;
  }
}
js_dot.register('Ray2', Ray2);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3QiLCJSYXkyIiwiY29uc3RydWN0b3IiLCJwb3NpdGlvbiIsImRpcmVjdGlvbiIsImFzc2VydCIsIk1hdGgiLCJhYnMiLCJtYWduaXR1ZGUiLCJzaGlmdGVkIiwiZGlzdGFuY2UiLCJwb2ludEF0RGlzdGFuY2UiLCJwbHVzIiwidGltZXNTY2FsYXIiLCJ0b1N0cmluZyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmF5Mi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiAyLWRpbWVuc2lvbmFsIHJheSBjb25zaXN0aW5nIG9mIGFuIG9yaWdpbiBwb2ludCBhbmQgYSB1bml0IGRpcmVjdGlvbiB2ZWN0b3IuXG4gKlxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxuICovXG5cbmltcG9ydCBkb3QgZnJvbSAnLi9kb3QuanMnO1xuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi9WZWN0b3IyLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmF5MiB7XG5cbiAgcHVibGljIHBvc2l0aW9uOiBWZWN0b3IyO1xuICBwdWJsaWMgZGlyZWN0aW9uOiBWZWN0b3IyO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEyRCByYXkgdXNpbmcgdGhlIHN1cHBsaWVkIG9yaWdpbiBwb3NpdGlvbiBhbmQgdW5pdCBsZW5ndGggZGlyZWN0aW9uIHZlY3RvclxuICAgKlxuICAgKiBAcGFyYW0gcG9zaXRpb24gLSB0aGUgcmF5J3MgcG9pbnQgb2Ygb3JpZ2luXG4gICAqIEBwYXJhbSBkaXJlY3Rpb24gLSB0aGUgcmF5J3MgdW5pdCBkaXJlY3Rpb24gdmVjdG9yXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoIHBvc2l0aW9uOiBWZWN0b3IyLCBkaXJlY3Rpb246IFZlY3RvcjIgKSB7XG5cbiAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgdGhpcy5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG5cbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBNYXRoLmFicyggZGlyZWN0aW9uLm1hZ25pdHVkZSAtIDEgKSA8IDAuMDEsICd0aGUgZGlyZWN0aW9uIG11c3QgYmUgYSB1bml0IHZlY3RvcicgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IFJheSB0aGF0IGhhcyBpdCBvcmlnaW4gc2hpZnRlZCB0byBhIHBvc2l0aW9uIGdpdmVuIGJ5IGFuIGFtb3VudCBkaXN0YW5jZSp0aGlzLmRpcmVjdGlvbi5cbiAgICovXG4gIHB1YmxpYyBzaGlmdGVkKCBkaXN0YW5jZTogbnVtYmVyICk6IFJheTIge1xuICAgIHJldHVybiBuZXcgUmF5MiggdGhpcy5wb2ludEF0RGlzdGFuY2UoIGRpc3RhbmNlICksIHRoaXMuZGlyZWN0aW9uICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHBvc2l0aW9uIHRoYXQgaXMgYSBkaXN0YW5jZSAnZGlzdGFuY2UnIGFsb25nIHRoZSByYXkuXG4gICAqL1xuICBwdWJsaWMgcG9pbnRBdERpc3RhbmNlKCBkaXN0YW5jZTogbnVtYmVyICk6IFZlY3RvcjIge1xuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLnBsdXMoIHRoaXMuZGlyZWN0aW9uLnRpbWVzU2NhbGFyKCBkaXN0YW5jZSApICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYXR0cmlidXRlcyBvZiB0aGlzIHJheSBpbnRvIGEgc3RyaW5nXG4gICAqL1xuICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5wb3NpdGlvbi50b1N0cmluZygpfSA9PiAke3RoaXMuZGlyZWN0aW9uLnRvU3RyaW5nKCl9YDtcbiAgfVxufVxuXG5kb3QucmVnaXN0ZXIoICdSYXkyJywgUmF5MiApO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEdBQUcsTUFBTSxVQUFVO0FBRzFCLGVBQWUsTUFBTUMsSUFBSSxDQUFDO0VBS3hCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNTQyxXQUFXQSxDQUFFQyxRQUFpQixFQUFFQyxTQUFrQixFQUFHO0lBRTFELElBQUksQ0FBQ0QsUUFBUSxHQUFHQSxRQUFRO0lBQ3hCLElBQUksQ0FBQ0MsU0FBUyxHQUFHQSxTQUFTO0lBRTFCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUMsSUFBSSxDQUFDQyxHQUFHLENBQUVILFNBQVMsQ0FBQ0ksU0FBUyxHQUFHLENBQUMsQ0FBRSxHQUFHLElBQUksRUFBRSxxQ0FBcUMsQ0FBRTtFQUN2Rzs7RUFFQTtBQUNGO0FBQ0E7RUFDU0MsT0FBT0EsQ0FBRUMsUUFBZ0IsRUFBUztJQUN2QyxPQUFPLElBQUlULElBQUksQ0FBRSxJQUFJLENBQUNVLGVBQWUsQ0FBRUQsUUFBUSxDQUFFLEVBQUUsSUFBSSxDQUFDTixTQUFTLENBQUU7RUFDckU7O0VBRUE7QUFDRjtBQUNBO0VBQ1NPLGVBQWVBLENBQUVELFFBQWdCLEVBQVk7SUFDbEQsT0FBTyxJQUFJLENBQUNQLFFBQVEsQ0FBQ1MsSUFBSSxDQUFFLElBQUksQ0FBQ1IsU0FBUyxDQUFDUyxXQUFXLENBQUVILFFBQVEsQ0FBRSxDQUFFO0VBQ3JFOztFQUVBO0FBQ0Y7QUFDQTtFQUNTSSxRQUFRQSxDQUFBLEVBQVc7SUFDeEIsT0FBUSxHQUFFLElBQUksQ0FBQ1gsUUFBUSxDQUFDVyxRQUFRLEVBQUcsT0FBTSxJQUFJLENBQUNWLFNBQVMsQ0FBQ1UsUUFBUSxFQUFHLEVBQUM7RUFDdEU7QUFDRjtBQUVBZCxHQUFHLENBQUNlLFFBQVEsQ0FBRSxNQUFNLEVBQUVkLElBQUksQ0FBRSJ9
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Ray3.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * 3-dimensional ray consisting of an origin point and a unit direction vector.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */


class Ray3 {
  /**
   * Constructs a 3D ray using the supplied origin position and unit length direction vector
   *
   * @param position - the ray's point of origin
   * @param direction - the ray's unit direction vector
   */
  constructor(position, direction) {
    this.position = position;
    this.direction = direction;
    assert && assert(Math.abs(direction.magnitude - 1) < 0.01, 'the direction must be a unit vector');
  }

  /**
   * Returns a new Ray that has it origin shifted to a position given by an amount distance*this.direction.
   */
  shifted(distance) {
    return new Ray3(this.pointAtDistance(distance), this.direction);
  }

  /**
   * Returns a position that is a distance 'distance' along the ray.
   */
  pointAtDistance(distance) {
    return this.position.plus(this.direction.timesScalar(distance));
  }

  /**
   * Returns the distance of this ray to a plane
   */
  distanceToPlane(plane) {
    return (plane.distance - this.position.dot(plane.normal)) / this.direction.dot(plane.normal);
  }

  /**
   * Returns the attributes of this ray into a string
   */
  toString() {
    return `${this.position.toString()} => ${this.direction.toString()}`;
  }
}
js_dot.register('Ray3', Ray3);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3QiLCJSYXkzIiwiY29uc3RydWN0b3IiLCJwb3NpdGlvbiIsImRpcmVjdGlvbiIsImFzc2VydCIsIk1hdGgiLCJhYnMiLCJtYWduaXR1ZGUiLCJzaGlmdGVkIiwiZGlzdGFuY2UiLCJwb2ludEF0RGlzdGFuY2UiLCJwbHVzIiwidGltZXNTY2FsYXIiLCJkaXN0YW5jZVRvUGxhbmUiLCJwbGFuZSIsIm5vcm1hbCIsInRvU3RyaW5nIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSYXkzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIDMtZGltZW5zaW9uYWwgcmF5IGNvbnNpc3Rpbmcgb2YgYW4gb3JpZ2luIHBvaW50IGFuZCBhIHVuaXQgZGlyZWN0aW9uIHZlY3Rvci5cbiAqXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XG4gKi9cblxuaW1wb3J0IGRvdCBmcm9tICcuL2RvdC5qcyc7XG5pbXBvcnQgUGxhbmUzIGZyb20gJy4vUGxhbmUzLmpzJztcbmltcG9ydCBWZWN0b3IzIGZyb20gJy4vVmVjdG9yMy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJheTMge1xuXG4gIHB1YmxpYyBwb3NpdGlvbjogVmVjdG9yMztcbiAgcHVibGljIGRpcmVjdGlvbjogVmVjdG9yMztcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIDNEIHJheSB1c2luZyB0aGUgc3VwcGxpZWQgb3JpZ2luIHBvc2l0aW9uIGFuZCB1bml0IGxlbmd0aCBkaXJlY3Rpb24gdmVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSBwb3NpdGlvbiAtIHRoZSByYXkncyBwb2ludCBvZiBvcmlnaW5cbiAgICogQHBhcmFtIGRpcmVjdGlvbiAtIHRoZSByYXkncyB1bml0IGRpcmVjdGlvbiB2ZWN0b3JcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcG9zaXRpb246IFZlY3RvcjMsIGRpcmVjdGlvbjogVmVjdG9yMyApIHtcblxuICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICB0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcblxuICAgIGFzc2VydCAmJiBhc3NlcnQoIE1hdGguYWJzKCBkaXJlY3Rpb24ubWFnbml0dWRlIC0gMSApIDwgMC4wMSwgJ3RoZSBkaXJlY3Rpb24gbXVzdCBiZSBhIHVuaXQgdmVjdG9yJyApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgUmF5IHRoYXQgaGFzIGl0IG9yaWdpbiBzaGlmdGVkIHRvIGEgcG9zaXRpb24gZ2l2ZW4gYnkgYW4gYW1vdW50IGRpc3RhbmNlKnRoaXMuZGlyZWN0aW9uLlxuICAgKi9cbiAgcHVibGljIHNoaWZ0ZWQoIGRpc3RhbmNlOiBudW1iZXIgKTogUmF5MyB7XG4gICAgcmV0dXJuIG5ldyBSYXkzKCB0aGlzLnBvaW50QXREaXN0YW5jZSggZGlzdGFuY2UgKSwgdGhpcy5kaXJlY3Rpb24gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcG9zaXRpb24gdGhhdCBpcyBhIGRpc3RhbmNlICdkaXN0YW5jZScgYWxvbmcgdGhlIHJheS5cbiAgICovXG4gIHB1YmxpYyBwb2ludEF0RGlzdGFuY2UoIGRpc3RhbmNlOiBudW1iZXIgKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb24ucGx1cyggdGhpcy5kaXJlY3Rpb24udGltZXNTY2FsYXIoIGRpc3RhbmNlICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkaXN0YW5jZSBvZiB0aGlzIHJheSB0byBhIHBsYW5lXG4gICAqL1xuICBwdWJsaWMgZGlzdGFuY2VUb1BsYW5lKCBwbGFuZTogUGxhbmUzICk6IG51bWJlciB7XG4gICAgcmV0dXJuICggcGxhbmUuZGlzdGFuY2UgLSB0aGlzLnBvc2l0aW9uLmRvdCggcGxhbmUubm9ybWFsICkgKSAvIHRoaXMuZGlyZWN0aW9uLmRvdCggcGxhbmUubm9ybWFsICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYXR0cmlidXRlcyBvZiB0aGlzIHJheSBpbnRvIGEgc3RyaW5nXG4gICAqL1xuICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5wb3NpdGlvbi50b1N0cmluZygpfSA9PiAke3RoaXMuZGlyZWN0aW9uLnRvU3RyaW5nKCl9YDtcbiAgfVxufVxuXG5kb3QucmVnaXN0ZXIoICdSYXkzJywgUmF5MyApO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEdBQUcsTUFBTSxVQUFVO0FBSTFCLGVBQWUsTUFBTUMsSUFBSSxDQUFDO0VBS3hCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNTQyxXQUFXQSxDQUFFQyxRQUFpQixFQUFFQyxTQUFrQixFQUFHO0lBRTFELElBQUksQ0FBQ0QsUUFBUSxHQUFHQSxRQUFRO0lBQ3hCLElBQUksQ0FBQ0MsU0FBUyxHQUFHQSxTQUFTO0lBRTFCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUMsSUFBSSxDQUFDQyxHQUFHLENBQUVILFNBQVMsQ0FBQ0ksU0FBUyxHQUFHLENBQUMsQ0FBRSxHQUFHLElBQUksRUFBRSxxQ0FBcUMsQ0FBRTtFQUN2Rzs7RUFFQTtBQUNGO0FBQ0E7RUFDU0MsT0FBT0EsQ0FBRUMsUUFBZ0IsRUFBUztJQUN2QyxPQUFPLElBQUlULElBQUksQ0FBRSxJQUFJLENBQUNVLGVBQWUsQ0FBRUQsUUFBUSxDQUFFLEVBQUUsSUFBSSxDQUFDTixTQUFTLENBQUU7RUFDckU7O0VBRUE7QUFDRjtBQUNBO0VBQ1NPLGVBQWVBLENBQUVELFFBQWdCLEVBQVk7SUFDbEQsT0FBTyxJQUFJLENBQUNQLFFBQVEsQ0FBQ1MsSUFBSSxDQUFFLElBQUksQ0FBQ1IsU0FBUyxDQUFDUyxXQUFXLENBQUVILFFBQVEsQ0FBRSxDQUFFO0VBQ3JFOztFQUVBO0FBQ0Y7QUFDQTtFQUNTSSxlQUFlQSxDQUFFQyxLQUFhLEVBQVc7SUFDOUMsT0FBTyxDQUFFQSxLQUFLLENBQUNMLFFBQVEsR0FBRyxJQUFJLENBQUNQLFFBQVEsQ0FBQ0gsR0FBRyxDQUFFZSxLQUFLLENBQUNDLE1BQU0sQ0FBRSxJQUFLLElBQUksQ0FBQ1osU0FBUyxDQUFDSixHQUFHLENBQUVlLEtBQUssQ0FBQ0MsTUFBTSxDQUFFO0VBQ3BHOztFQUVBO0FBQ0Y7QUFDQTtFQUNTQyxRQUFRQSxDQUFBLEVBQVc7SUFDeEIsT0FBUSxHQUFFLElBQUksQ0FBQ2QsUUFBUSxDQUFDYyxRQUFRLEVBQUcsT0FBTSxJQUFJLENBQUNiLFNBQVMsQ0FBQ2EsUUFBUSxFQUFHLEVBQUM7RUFDdEU7QUFDRjtBQUVBakIsR0FBRyxDQUFDa0IsUUFBUSxDQUFFLE1BQU0sRUFBRWpCLElBQUksQ0FBRSJ9
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Rectangle.js
// Copyright 2013-2020, University of Colorado Boulder

/**
 * A 2D rectangle-shaped bounded area, with a convenience name and constructor. Totally functionally
 * equivalent to Bounds2, but with a different constructor.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */



class Rectangle extends Bounds2 {
  /**
   * @param {number} x
   * @param {number} y
   * @param {number} width
   * @param {number} height
   */
  constructor(x, y, width, height) {
    assert && assert(height !== undefined, 'Rectangle requires 4 parameters');
    super(x, y, x + width, y + height);
  }
}
js_dot.register('Rectangle', Rectangle);
/* harmony default export */ const js_Rectangle = ((/* unused pure expression or super */ null && (Rectangle)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiZG90IiwiUmVjdGFuZ2xlIiwiY29uc3RydWN0b3IiLCJ4IiwieSIsIndpZHRoIiwiaGVpZ2h0IiwiYXNzZXJ0IiwidW5kZWZpbmVkIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSZWN0YW5nbGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogQSAyRCByZWN0YW5nbGUtc2hhcGVkIGJvdW5kZWQgYXJlYSwgd2l0aCBhIGNvbnZlbmllbmNlIG5hbWUgYW5kIGNvbnN0cnVjdG9yLiBUb3RhbGx5IGZ1bmN0aW9uYWxseVxuICogZXF1aXZhbGVudCB0byBCb3VuZHMyLCBidXQgd2l0aCBhIGRpZmZlcmVudCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XG4gKi9cblxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi9Cb3VuZHMyLmpzJztcbmltcG9ydCBkb3QgZnJvbSAnLi9kb3QuanMnO1xuXG5jbGFzcyBSZWN0YW5nbGUgZXh0ZW5kcyBCb3VuZHMyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqL1xuICBjb25zdHJ1Y3RvciggeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBoZWlnaHQgIT09IHVuZGVmaW5lZCwgJ1JlY3RhbmdsZSByZXF1aXJlcyA0IHBhcmFtZXRlcnMnICk7XG4gICAgc3VwZXIoIHgsIHksIHggKyB3aWR0aCwgeSArIGhlaWdodCApO1xuICB9XG59XG5cbmRvdC5yZWdpc3RlciggJ1JlY3RhbmdsZScsIFJlY3RhbmdsZSApO1xuXG5leHBvcnQgZGVmYXVsdCBSZWN0YW5nbGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLGNBQWM7QUFDbEMsT0FBT0MsR0FBRyxNQUFNLFVBQVU7QUFFMUIsTUFBTUMsU0FBUyxTQUFTRixPQUFPLENBQUM7RUFDOUI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VHLFdBQVdBLENBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRztJQUNqQ0MsTUFBTSxJQUFJQSxNQUFNLENBQUVELE1BQU0sS0FBS0UsU0FBUyxFQUFFLGlDQUFpQyxDQUFFO0lBQzNFLEtBQUssQ0FBRUwsQ0FBQyxFQUFFQyxDQUFDLEVBQUVELENBQUMsR0FBR0UsS0FBSyxFQUFFRCxDQUFDLEdBQUdFLE1BQU0sQ0FBRTtFQUN0QztBQUNGO0FBRUFOLEdBQUcsQ0FBQ1MsUUFBUSxDQUFFLFdBQVcsRUFBRVIsU0FBUyxDQUFFO0FBRXRDLGVBQWVBLFNBQVMifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Sphere3.js
// Copyright 2014-2020, University of Colorado Boulder

/**
 * A sphere in 3 dimensions (NOT a 3-sphere).
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */


class Sphere3 {
  /**
   *
   * @param {Vector3} center  - The center of the sphere
   * @param {number} radius - The radius of the sphere
   */
  constructor(center, radius) {
    // @public {Vector3} - The location of the center of the sphere
    this.center = center;

    // @public {number} -  the radius of the sphere
    this.radius = radius;
    assert && assert(radius >= 0, 'the radius of a sphere should be positive');
  }

  /**
   * Determines if a ray (a half-line) intersects this sphere.
   * A successful intersection returns the result the closest intersection in the form { distance, hitPoint, normal, fromOutside },
   * distance: {number} distance to the intersection point
   * hitPoint: {Vector3} the intersection point
   * normal: {Vector3} the normal vector on the sphere at the point of intersection. (the normal vector points outwards the sphere by convention)
   * fromOutside: {boolean} is the ray half-line intersecting the sphere from the outside of a sphere or from the inside.
   *
   * Returns null if the ray misses the sphere
   *
   * @public
   * @param {Ray3} ray - The ray to intersect with the sphere
   * @param {number} epsilon - A small varying-point value to be used to handle intersections tangent to the sphere
   * @returns {{ distance: number, hitPoint: Vector3, normal, fromOutside: boolean }| null}
   */
  intersect(ray, epsilon) {
    const raydir = ray.direction;
    const pos = ray.position;
    const centerToRay = pos.minus(this.center);

    // basically, we can use the quadratic equation to solve for both possible hit points (both +- roots are the hit points)
    const tmp = raydir.dot(centerToRay);
    const centerToRayDistSq = centerToRay.magnitudeSquared;
    const det = 4 * tmp * tmp - 4 * (centerToRayDistSq - this.radius * this.radius);
    if (det < epsilon) {
      // ray misses sphere entirely
      return null;
    }
    const base = raydir.dot(this.center) - raydir.dot(pos);
    const sqt = Math.sqrt(det) / 2;

    // the "first" entry point distance into the sphere. if we are inside the sphere, it is behind us
    const ta = base - sqt;

    // the "second" entry point distance
    const tb = base + sqt;
    if (tb < epsilon) {
      // sphere is behind ray, so don't return an intersection
      return null;
    }
    const hitPositionB = ray.pointAtDistance(tb);
    const normalB = hitPositionB.minus(this.center).normalized();
    if (ta < epsilon) {
      // we are inside the sphere
      // in => out
      return {
        distance: tb,
        hitPoint: hitPositionB,
        normal: normalB.negated(),
        fromOutside: false
      };
    } else {
      // two possible hits
      const hitPositionA = ray.pointAtDistance(ta);
      const normalA = hitPositionA.minus(this.center).normalized();

      // close hit, we have out => in
      return {
        distance: ta,
        hitPoint: hitPositionA,
        normal: normalA,
        fromOutside: true
      };
    }
  }

  /**
   *
   * Returns the intersections of a ray with a sphere. There will be 0 or 2 intersections, with
   * the "proper" intersection first, if applicable (closest in front of the ray).
   * Note that this method makes the implicit assumptions that the ray's origin does not lie inside the sphere.
   *
   * @public
   * @param {Ray3} ray - The ray to intersect with the sphere
   * @param {number} epsilon - A small varying-point value to be used to handle intersections tangent to the sphere
   * @returns {Array.<{distance:number, hitPoint:Vector3, normal:Vector3, fromOutside:boolean }>| null} -  An array of intersection
   *                                                                         results like { distance, hitPoint, normal, fromOutside }.
   */
  intersections(ray, epsilon) {
    const raydir = ray.direction;
    const pos = ray.position;
    const centerToRay = pos.minus(this.center);

    // basically, we can use the quadratic equation to solve for both possible hit points (both +- roots are the hit points)
    const tmp = raydir.dot(centerToRay);
    const centerToRayDistSq = centerToRay.magnitudeSquared;
    const det = 4 * tmp * tmp - 4 * (centerToRayDistSq - this.radius * this.radius);
    if (det < epsilon) {
      // ray misses sphere entirely
      return [];
    }
    const base = raydir.dot(this.center) - raydir.dot(pos);
    const sqt = Math.sqrt(det) / 2;

    // the "first" entry point distance into the sphere. if we are inside the sphere, it is behind us
    const ta = base - sqt;

    // the "second" entry point distance
    const tb = base + sqt;
    if (tb < epsilon) {
      // sphere is behind ray, so don't return an intersection
      return [];
    }
    const hitPositionB = ray.pointAtDistance(tb);
    const normalB = hitPositionB.minus(this.center).normalized();
    const hitPositionA = ray.pointAtDistance(ta);
    const normalA = hitPositionA.minus(this.center).normalized();
    const resultB = {
      distance: tb,
      hitPoint: hitPositionB,
      normal: normalB.negated(),
      fromOutside: false
    };
    const resultA = {
      distance: ta,
      hitPoint: hitPositionA,
      normal: normalA,
      fromOutside: true
    };
    if (ta < epsilon) {
      // we are inside the sphere
      // in => out

      return [resultB, resultA];
    } else {
      // two possible hits

      // close hit, we have out => in
      return [resultA, resultB];
    }
  }
}
js_dot.register('Sphere3', Sphere3);
/* harmony default export */ const js_Sphere3 = ((/* unused pure expression or super */ null && (Sphere3)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Transform3.js
// Copyright 2013-2023, University of Colorado Boulder

/**
 * Forward and inverse transforms with 3x3 matrices. Methods starting with 'transform' will apply the transform from our
 * primary matrix, while methods starting with 'inverse' will apply the transform from the inverse of our matrix.
 *
 * Generally, this means transform.inverseThing( transform.transformThing( thing ) ).equals( thing ).
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */






const scratchMatrix = new Matrix3();
class Transform3 {
  /**
   * Creates a transform based around an initial matrix.
   * @public
   *
   * @param {Matrix3} [matrix]
   */
  constructor(matrix) {
    // @private {Matrix3} - The primary matrix used for the transform
    this.matrix = Matrix3.IDENTITY.copy();

    // @private {Matrix3} - The inverse of the primary matrix, computed lazily
    this.inverse = Matrix3.IDENTITY.copy();

    // @private {Matrix3} - The transpose of the primary matrix, computed lazily
    this.matrixTransposed = Matrix3.IDENTITY.copy();

    // @private {Matrix3} - The inverse of the transposed primary matrix, computed lazily
    this.inverseTransposed = Matrix3.IDENTITY.copy();

    // @private {boolean} - Whether this.inverse has been computed based on the latest primary matrix
    this.inverseValid = true;

    // @private {boolean} - Whether this.matrixTransposed has been computed based on the latest primary matrix
    this.transposeValid = true;

    // @private {boolean} - Whether this.inverseTransposed has been computed based on the latest primary matrix
    this.inverseTransposeValid = true;

    // @public {TinyEmitter}
    this.changeEmitter = new TinyEmitter();
    if (matrix) {
      this.setMatrix(matrix);
    }
  }

  /*---------------------------------------------------------------------------*
   * mutators
   *---------------------------------------------------------------------------*/

  /**
   * Sets the value of the primary matrix directly from a Matrix3. Does not change the Matrix3 instance.
   * @public
   *
   * @param {Matrix3} matrix
   */
  setMatrix(matrix) {
    // copy the matrix over to our matrix
    this.matrix.set(matrix);

    // set flags and notify
    this.invalidate();
  }

  /**
   * Validates the matrix or matrix arguments, overrideable by subclasses to refine the validation.
   * @param {Matrix} matrix
   * @protected
   */
  validateMatrix(matrix) {
    assert && assert(matrix instanceof Matrix3, 'matrix was incorrect type');
    assert && assert(matrix.isFinite(), 'matrix must be finite');
  }

  /**
   * This should be called after our internal matrix is changed. It marks the other dependent matrices as invalid,
   * and sends out notifications of the change.
   * @private
   */
  invalidate() {
    // sanity check
    assert && this.validateMatrix(this.matrix);

    // dependent matrices now invalid
    this.inverseValid = false;
    this.transposeValid = false;
    this.inverseTransposeValid = false;
    this.changeEmitter.emit();
  }

  /**
   * Modifies the primary matrix such that: this.matrix = matrix * this.matrix.
   * @public
   *
   * @param {Matrix3} matrix
   */
  prepend(matrix) {
    assert && this.validateMatrix(matrix);

    // In the absence of a prepend-multiply function in Matrix3, copy over to a scratch matrix instead
    // TODO: implement a prepend-multiply directly in Matrix3 for a performance increase
    scratchMatrix.set(this.matrix);
    this.matrix.set(matrix);
    this.matrix.multiplyMatrix(scratchMatrix);

    // set flags and notify
    this.invalidate();
  }

  /**
   * Optimized prepended translation such that: this.matrix = translation( x, y ) * this.matrix.
   * @public
   *
   * @param {number} x -  x-coordinate
   * @param {number} y -  y-coordinate
   */
  prependTranslation(x, y) {
    // See scenery#119 for more details on the need.

    assert && assert(typeof x === 'number' && typeof y === 'number' && isFinite(x) && isFinite(y), 'Attempted to prepend non-finite or non-number (x,y) to the transform');
    this.matrix.prependTranslation(x, y);

    // set flags and notify
    this.invalidate();
  }

  /**
   * Modifies the primary matrix such that: this.matrix = this.matrix * matrix
   * @public
   *
   * @param {Matrix3} matrix
   */
  append(matrix) {
    assert && this.validateMatrix(matrix);
    this.matrix.multiplyMatrix(matrix);

    // set flags and notify
    this.invalidate();
  }

  /**
   * Like prepend(), but prepends the other transform's matrix.
   * @public
   *
   * @param {Transform3} transform
   */
  prependTransform(transform) {
    this.prepend(transform.matrix);
  }

  /**
   * Like append(), but appends the other transform's matrix.
   * @public
   *
   * @param {Transform3} transform
   */
  appendTransform(transform) {
    this.append(transform.matrix);
  }

  /**
   * Sets the transform of a Canvas context to be equivalent to this transform.
   * @public
   *
   * @param {CanvasRenderingContext2D} context
   */
  applyToCanvasContext(context) {
    context.setTransform(this.matrix.m00(), this.matrix.m10(), this.matrix.m01(), this.matrix.m11(), this.matrix.m02(), this.matrix.m12());
  }

  /*---------------------------------------------------------------------------*
   * getters
   *---------------------------------------------------------------------------*/

  /**
   * Creates a copy of this transform.
   * @public
   *
   * @returns {Transform3}
   */
  copy() {
    const transform = new Transform3(this.matrix);
    transform.inverse = this.inverse;
    transform.matrixTransposed = this.matrixTransposed;
    transform.inverseTransposed = this.inverseTransposed;
    transform.inverseValid = this.inverseValid;
    transform.transposeValid = this.transposeValid;
    transform.inverseTransposeValid = this.inverseTransposeValid;
  }

  /**
   * Returns the primary matrix of this transform.
   * @public
   *
   * @returns {Matrix3}
   */
  getMatrix() {
    return this.matrix;
  }

  /**
   * Returns the inverse of the primary matrix of this transform.
   * @public
   *
   * @returns {Matrix3}
   */
  getInverse() {
    if (!this.inverseValid) {
      this.inverseValid = true;
      this.inverse.set(this.matrix);
      this.inverse.invert();
    }
    return this.inverse;
  }

  /**
   * Returns the transpose of the primary matrix of this transform.
   * @public
   *
   * @returns {Matrix3}
   */
  getMatrixTransposed() {
    if (!this.transposeValid) {
      this.transposeValid = true;
      this.matrixTransposed.set(this.matrix);
      this.matrixTransposed.transpose();
    }
    return this.matrixTransposed;
  }

  /**
   * Returns the inverse of the transpose of matrix of this transform.
   * @public
   *
   * @returns {Matrix3}
   */
  getInverseTransposed() {
    if (!this.inverseTransposeValid) {
      this.inverseTransposeValid = true;
      this.inverseTransposed.set(this.getInverse()); // triggers inverse to be valid
      this.inverseTransposed.transpose();
    }
    return this.inverseTransposed;
  }

  /**
   * Returns whether our primary matrix is known to be an identity matrix. If false is returned, it doesn't necessarily
   * mean our matrix isn't an identity matrix, just that it is unlikely in normal usage.
   * @public
   *
   * @returns {boolean}
   */
  isIdentity() {
    return this.matrix.isFastIdentity();
  }

  /**
   * Returns whether any components of our primary matrix are either infinite or NaN.
   * @public
   *
   * @returns {boolean}
   */
  isFinite() {
    return this.matrix.isFinite();
  }

  /*---------------------------------------------------------------------------*
   * forward transforms (for Vector2 or scalar)
   *---------------------------------------------------------------------------*/

  /**
   * Transforms a 2-dimensional vector like it is a point with a position (translation is applied).
   * @public
   *
   * For an affine matrix $M$, the result is the homogeneous multiplication $M\begin{bmatrix} x \\ y \\ 1 \end{bmatrix}$.
   *
   * @param {Vector2} v
   * @returns {Vector2}
   */
  transformPosition2(v) {
    return this.matrix.timesVector2(v);
  }

  /**
   * Transforms a 2-dimensional vector like position is irrelevant (translation is not applied).
   * @public
   *
   * For an affine matrix $\begin{bmatrix} a & b & c \\ d & e & f \\ 0 & 0 & 1 \end{bmatrix}$,
   * the result is $\begin{bmatrix} a & b & 0 \\ d & e & 0 \\ 0 & 0 & 1 \end{bmatrix} \begin{bmatrix} x \\ y \\ 1 \end{bmatrix}$.
   *
   * @param {Vector2} v
   * @returns {Vector2}
   */
  transformDelta2(v) {
    const m = this.getMatrix();
    // m . v - m . Vector2.ZERO
    return new Vector2(m.m00() * v.x + m.m01() * v.y, m.m10() * v.x + m.m11() * v.y);
  }

  /**
   * Transforms a 2-dimensional vector like it is a normal to a curve (so that the curve is transformed, and the new
   * normal to the curve at the transformed point is returned).
   * @public
   *
   * For an affine matrix $\begin{bmatrix} a & b & c \\ d & e & f \\ 0 & 0 & 1 \end{bmatrix}$,
   * the result is $\begin{bmatrix} a & e & 0 \\ d & b & 0 \\ 0 & 0 & 1 \end{bmatrix}^{-1} \begin{bmatrix} x \\ y \\ 1 \end{bmatrix}$.
   * This is essentially the transposed inverse with translation removed.
   *
   * @param {Vector2} v
   * @returns {Vector2}
   */
  transformNormal2(v) {
    return this.getInverse().timesTransposeVector2(v).normalize();
  }

  /**
   * Returns the resulting x-coordinate of the transformation of all vectors with the initial input x-coordinate. If
   * this is not well-defined (the x value depends on y), an assertion is thrown (and y is assumed to be 0).
   * @public
   *
   * @param {number} x
   * @returns {number}
   */
  transformX(x) {
    const m = this.getMatrix();
    assert && assert(!m.m01(), 'Transforming an X value with a rotation/shear is ill-defined');
    return m.m00() * x + m.m02();
  }

  /**
   * Returns the resulting y-coordinate of the transformation of all vectors with the initial input y-coordinate. If
   * this is not well-defined (the y value depends on x), an assertion is thrown (and x is assumed to be 0).
   * @public
   *
   * @param {number} y
   * @returns {number}
   */
  transformY(y) {
    const m = this.getMatrix();
    assert && assert(!m.m10(), 'Transforming a Y value with a rotation/shear is ill-defined');
    return m.m11() * y + m.m12();
  }

  /**
   * Returns the x-coordinate difference for two transformed vectors, which add the x-coordinate difference of the input
   * x (and same y values) beforehand.
   * @public
   *
   * @param {number} x
   * @returns {number}
   */
  transformDeltaX(x) {
    const m = this.getMatrix();
    // same as this.transformDelta2( new Vector2( x, 0 ) ).x;
    return m.m00() * x;
  }

  /**
   * Returns the y-coordinate difference for two transformed vectors, which add the y-coordinate difference of the input
   * y (and same x values) beforehand.
   * @public
   *
   * @param {number} y
   * @returns {number}
   */
  transformDeltaY(y) {
    const m = this.getMatrix();
    // same as this.transformDelta2( new Vector2( 0, y ) ).y;
    return m.m11() * y;
  }

  /**
   * Returns bounds (axis-aligned) that contains the transformed bounds rectangle.
   * @public
   *
   * NOTE: transform.inverseBounds2( transform.transformBounds2( bounds ) ) may be larger than the original box,
   * if it includes a rotation that isn't a multiple of $\pi/2$. This is because the returned bounds may expand in
   * area to cover ALL of the corners of the transformed bounding box.
   *
   * @param {Bounds2} bounds
   * @returns {Bounds2}
   */
  transformBounds2(bounds) {
    return bounds.transformed(this.matrix);
  }

  /**
   * Returns a transformed phet.kite.Shape.
   * @public
   *
   * @param {Shape} shape
   * @returns {Shape}
   */
  transformShape(shape) {
    return shape.transformed(this.matrix);
  }

  /**
   * Returns a transformed ray.
   * @public
   *
   * @param {Ray2} ray
   * @returns {Ray2}
   */
  transformRay2(ray) {
    return new Ray2(this.transformPosition2(ray.position), this.transformDelta2(ray.direction).normalized());
  }

  /*---------------------------------------------------------------------------*
   * inverse transforms (for Vector2 or scalar)
   *---------------------------------------------------------------------------*/

  /**
   * Transforms a 2-dimensional vector by the inverse of our transform like it is a point with a position (translation is applied).
   * @public
   *
   * For an affine matrix $M$, the result is the homogeneous multiplication $M^{-1}\begin{bmatrix} x \\ y \\ 1 \end{bmatrix}$.
   *
   * This is the inverse of transformPosition2().
   *
   * @param {Vector2} v
   * @returns {Vector2}
   */
  inversePosition2(v) {
    return this.getInverse().timesVector2(v);
  }

  /**
   * Transforms a 2-dimensional vector by the inverse of our transform like position is irrelevant (translation is not applied).
   * @public
   *
   * For an affine matrix $\begin{bmatrix} a & b & c \\ d & e & f \\ 0 & 0 & 1 \end{bmatrix}$,
   * the result is $\begin{bmatrix} a & b & 0 \\ d & e & 0 \\ 0 & 0 & 1 \end{bmatrix}^{-1} \begin{bmatrix} x \\ y \\ 1 \end{bmatrix}$.
   *
   * This is the inverse of transformDelta2().
   *
   * @param {Vector2} v
   * @returns {Vector2}
   */
  inverseDelta2(v) {
    const m = this.getInverse();
    // m . v - m . Vector2.ZERO
    return new Vector2(m.m00() * v.x + m.m01() * v.y, m.m10() * v.x + m.m11() * v.y);
  }

  /**
   * Transforms a 2-dimensional vector by the inverse of our transform like it is a normal to a curve (so that the
   * curve is transformed, and the new normal to the curve at the transformed point is returned).
   * @public
   *
   * For an affine matrix $\begin{bmatrix} a & b & c \\ d & e & f \\ 0 & 0 & 1 \end{bmatrix}$,
   * the result is $\begin{bmatrix} a & e & 0 \\ d & b & 0 \\ 0 & 0 & 1 \end{bmatrix} \begin{bmatrix} x \\ y \\ 1 \end{bmatrix}$.
   * This is essentially the transposed transform with translation removed.
   *
   * This is the inverse of transformNormal2().
   *
   * @param {Vector2} v
   * @returns {Vector2}
   */
  inverseNormal2(v) {
    return this.matrix.timesTransposeVector2(v).normalize();
  }

  /**
   * Returns the resulting x-coordinate of the inverse transformation of all vectors with the initial input x-coordinate. If
   * this is not well-defined (the x value depends on y), an assertion is thrown (and y is assumed to be 0).
   * @public
   *
   * This is the inverse of transformX().
   *
   * @param {number} x
   * @returns {number}
   */
  inverseX(x) {
    const m = this.getInverse();
    assert && assert(!m.m01(), 'Inverting an X value with a rotation/shear is ill-defined');
    return m.m00() * x + m.m02();
  }

  /**
   * Returns the resulting y-coordinate of the inverse transformation of all vectors with the initial input y-coordinate. If
   * this is not well-defined (the y value depends on x), an assertion is thrown (and x is assumed to be 0).
   * @public
   *
   * This is the inverse of transformY().
   *
   * @param {number} y
   * @returns {number}
   */
  inverseY(y) {
    const m = this.getInverse();
    assert && assert(!m.m10(), 'Inverting a Y value with a rotation/shear is ill-defined');
    return m.m11() * y + m.m12();
  }

  /**
   * Returns the x-coordinate difference for two inverse-transformed vectors, which add the x-coordinate difference of the input
   * x (and same y values) beforehand.
   * @public
   *
   * This is the inverse of transformDeltaX().
   *
   * @param {number} x
   * @returns {number}
   */
  inverseDeltaX(x) {
    const m = this.getInverse();
    assert && assert(!m.m01(), 'Inverting an X value with a rotation/shear is ill-defined');
    // same as this.inverseDelta2( new Vector2( x, 0 ) ).x;
    return m.m00() * x;
  }

  /**
   * Returns the y-coordinate difference for two inverse-transformed vectors, which add the y-coordinate difference of the input
   * y (and same x values) beforehand.
   * @public
   *
   * This is the inverse of transformDeltaY().
   *
   * @param {number} y
   * @returns {number}
   */
  inverseDeltaY(y) {
    const m = this.getInverse();
    assert && assert(!m.m10(), 'Inverting a Y value with a rotation/shear is ill-defined');
    // same as this.inverseDelta2( new Vector2( 0, y ) ).y;
    return m.m11() * y;
  }

  /**
   * Returns bounds (axis-aligned) that contains the inverse-transformed bounds rectangle.
   * @public
   *
   * NOTE: transform.inverseBounds2( transform.transformBounds2( bounds ) ) may be larger than the original box,
   * if it includes a rotation that isn't a multiple of $\pi/2$. This is because the returned bounds may expand in
   * area to cover ALL of the corners of the transformed bounding box.
   *
   * @param {Bounds2} bounds
   * @returns {Bounds2}
   */
  inverseBounds2(bounds) {
    return bounds.transformed(this.getInverse());
  }

  /**
   * Returns an inverse-transformed phet.kite.Shape.
   * @public
   *
   * This is the inverse of transformShape()
   *
   * @param {Shape} shape
   * @returns {Shape}
   */
  inverseShape(shape) {
    return shape.transformed(this.getInverse());
  }

  /**
   * Returns an inverse-transformed ray.
   * @public
   *
   * This is the inverse of transformRay2()
   *
   * @param {Ray2} ray
   * @returns {Ray2}
   */
  inverseRay2(ray) {
    return new Ray2(this.inversePosition2(ray.position), this.inverseDelta2(ray.direction).normalized());
  }
}
js_dot.register('Transform3', Transform3);
/* harmony default export */ const js_Transform3 = ((/* unused pure expression or super */ null && (Transform3)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/Transform4.js
// Copyright 2013-2022, University of Colorado Boulder

/**
 * Forward and inverse transforms with 4x4 matrices, allowing flexibility including affine and perspective transformations.
 *
 * Methods starting with 'transform' will apply the transform from our
 * primary matrix, while methods starting with 'inverse' will apply the transform from the inverse of our matrix.
 *
 * Generally, this means transform.inverseThing( transform.transformThing( thing ) ).equals( thing ).
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */






const Transform4_scratchMatrix = new js_Matrix4();

/**
 * check if the matrix is Finite and is of type Matrix4
 * @private
 * @param matrix
 * @returns {boolean}
 */
function checkMatrix(matrix) {
  return matrix instanceof js_Matrix4 && matrix.isFinite();
}
class Transform4 {
  /**
   * Creates a transform based around an initial matrix.
   * @public
   *
   * @param {Matrix4} matrix
   */
  constructor(matrix) {
    // @private {Matrix4} - The primary matrix used for the transform
    this.matrix = js_Matrix4.IDENTITY.copy();

    // @private {Matrix4} - The inverse of the primary matrix, computed lazily
    this.inverse = js_Matrix4.IDENTITY.copy();

    // @private {Matrix4} - The transpose of the primary matrix, computed lazily
    this.matrixTransposed = js_Matrix4.IDENTITY.copy();

    // @private {Matrix4} - The inverse of the transposed primary matrix, computed lazily
    this.inverseTransposed = js_Matrix4.IDENTITY.copy();

    // @private {boolean} - Whether this.inverse has been computed based on the latest primary matrix
    this.inverseValid = true;

    // @private {boolean} - Whether this.matrixTransposed has been computed based on the latest primary matrix
    this.transposeValid = true;

    // @private {boolean} - Whether this.inverseTransposed has been computed based on the latest primary matrix
    this.inverseTransposeValid = true;

    // @public {TinyEmitter}
    this.changeEmitter = new TinyEmitter();
    if (matrix) {
      this.setMatrix(matrix);
    }
  }

  /*---------------------------------------------------------------------------*
   * mutators
   *---------------------------------------------------------------------------*/

  /**
   * Sets the value of the primary matrix directly from a Matrix4. Does not change the Matrix4 instance of this
   * Transform4.
   * @public
   *
   * @param {Matrix4} matrix
   */
  setMatrix(matrix) {
    assert && assert(checkMatrix(matrix), 'Matrix has NaNs, non-finite values, or isn\'t a matrix!');

    // copy the matrix over to our matrix
    this.matrix.set(matrix);

    // set flags and notify
    this.invalidate();
  }

  /**
   * This should be called after our internal matrix is changed. It marks the other dependent matrices as invalid,
   * and sends out notifications of the change.
   * @private
   */
  invalidate() {
    // sanity check
    assert && assert(this.matrix.isFinite());

    // dependent matrices now invalid
    this.inverseValid = false;
    this.transposeValid = false;
    this.inverseTransposeValid = false;
    this.changeEmitter.emit();
  }

  /**
   * Modifies the primary matrix such that: this.matrix = matrix * this.matrix.
   * @public
   *
   * @param {Matrix4} matrix
   */
  prepend(matrix) {
    assert && assert(checkMatrix(matrix), 'Matrix has NaNs, non-finite values, or isn\'t a matrix!');

    // In the absence of a prepend-multiply function in Matrix4, copy over to a scratch matrix instead
    // TODO: implement a prepend-multiply directly in Matrix4 for a performance increase
    Transform4_scratchMatrix.set(this.matrix);
    this.matrix.set(matrix);
    this.matrix.multiplyMatrix(Transform4_scratchMatrix);

    // set flags and notify
    this.invalidate();
  }

  /**
   * Modifies the primary matrix such that: this.matrix = this.matrix * matrix
   * @public
   *
   * @param {Matrix4} matrix
   */
  append(matrix) {
    assert && assert(checkMatrix(matrix), 'Matrix has NaNs, non-finite values, or isn\'t a matrix!');
    this.matrix.multiplyMatrix(matrix);

    // set flags and notify
    this.invalidate();
  }

  /**
   * Like prepend(), but prepends the other transform's matrix.
   * @public
   *
   * @param {Transform4} transform
   */
  prependTransform(transform) {
    this.prepend(transform.matrix);
  }

  /**
   * Like append(), but appends the other transform's matrix.
   * @public
   *
   * @param {Transform4} transform
   */
  appendTransform(transform) {
    this.append(transform.matrix);
  }

  /**
   * Sets the transform of a Canvas context to be equivalent to the 2D affine part of this transform.
   * @public
   *
   * @param {CanvasRenderingContext2D} context
   */
  applyToCanvasContext(context) {
    context.setTransform(this.matrix.m00(), this.matrix.m10(), this.matrix.m01(), this.matrix.m11(), this.matrix.m03(), this.matrix.m13());
  }

  /*---------------------------------------------------------------------------*
   * getters
   *---------------------------------------------------------------------------*/

  /**
   * Creates a copy of this transform.
   * @public
   *
   * @returns {Transform4}
   */
  copy() {
    const transform = new Transform4(this.matrix);
    transform.inverse = this.inverse;
    transform.matrixTransposed = this.matrixTransposed;
    transform.inverseTransposed = this.inverseTransposed;
    transform.inverseValid = this.inverseValid;
    transform.transposeValid = this.transposeValid;
    transform.inverseTransposeValid = this.inverseTransposeValid;
  }

  /**
   * Returns the primary matrix of this transform.
   * @public
   *
   * @returns {Matrix4}
   */
  getMatrix() {
    return this.matrix;
  }

  /**
   * Returns the inverse of the primary matrix of this transform.
   * @public
   *
   * @returns {Matrix4}
   */
  getInverse() {
    if (!this.inverseValid) {
      this.inverseValid = true;
      this.inverse.set(this.matrix);
      this.inverse.invert();
    }
    return this.inverse;
  }

  /**
   * Returns the transpose of the primary matrix of this transform.
   * @public
   *
   * @returns {Matrix4}
   */
  getMatrixTransposed() {
    if (!this.transposeValid) {
      this.transposeValid = true;
      this.matrixTransposed.set(this.matrix);
      this.matrixTransposed.transpose();
    }
    return this.matrixTransposed;
  }

  /**
   * Returns the inverse of the transpose of matrix of this transform.
   * @public
   *
   * @returns {Matrix4}
   */
  getInverseTransposed() {
    if (!this.inverseTransposeValid) {
      this.inverseTransposeValid = true;
      this.inverseTransposed.set(this.getInverse()); // triggers inverse to be valid
      this.inverseTransposed.transpose();
    }
    return this.inverseTransposed;
  }

  /**
   * Returns whether our primary matrix is known to be an identity matrix. If false is returned, it doesn't necessarily
   * mean our matrix isn't an identity matrix, just that it is unlikely in normal usage.
   * @public
   *
   * @returns {boolean}
   */
  isIdentity() {
    return this.matrix.type === js_Matrix4.Types.IDENTITY;
  }

  /**
   * Returns whether any components of our primary matrix are either infinite or NaN.
   * @public
   *
   * @returns {boolean}
   */
  isFinite() {
    return this.matrix.isFinite();
  }

  /*---------------------------------------------------------------------------*
   * forward transforms (for Vector3 or scalar)
   *---------------------------------------------------------------------------*/

  /**
   * Transforms a 3-dimensional vector like it is a point with a position (translation is applied).
   * @public
   *
   * For an affine matrix $M$, the result is the homogeneous multiplication $M\begin{bmatrix} x \\ y \\ z \\ 1 \end{bmatrix}$.
   *
   * @param {Vector3} v
   * @returns {Vector3}
   */
  transformPosition3(v) {
    return this.matrix.timesVector3(v);
  }

  /**
   * Transforms a 3-dimensional vector like position is irrelevant (translation is not applied).
   * @public
   *
   * @param {Vector3} v
   * @returns {Vector3}
   */
  transformDelta3(v) {
    return this.matrix.timesRelativeVector3(v);
  }

  /**
   * Transforms a 3-dimensional vector like it is a normal to a surface (so that the surface is transformed, and the new
   * normal to the surface at the transformed point is returned).
   * @public
   *
   * @param {Vector3} v
   * @returns {Vector3}
   */
  transformNormal3(v) {
    return this.getInverse().timesTransposeVector3(v);
  }

  /**
   * Returns the x-coordinate difference for two transformed vectors, which add the x-coordinate difference of the input
   * x (and same y,z values) beforehand.
   * @public
   *
   * @param {number} x
   * @returns {number}
   */
  transformDeltaX(x) {
    return this.transformDelta3(new Vector3(x, 0, 0)).x;
  }

  /**
   * Returns the y-coordinate difference for two transformed vectors, which add the y-coordinate difference of the input
   * y (and same x,z values) beforehand.
   * @public
   *
   * @param {number} y
   * @returns {number}
   */
  transformDeltaY(y) {
    return this.transformDelta3(new Vector3(0, y, 0)).y;
  }

  /**
   * Returns the z-coordinate difference for two transformed vectors, which add the z-coordinate difference of the input
   * z (and same x,y values) beforehand.
   * @public
   *
   * @param {number} z
   * @returns {number}
   */
  transformDeltaZ(z) {
    return this.transformDelta3(new Vector3(0, 0, z)).z;
  }

  /**
   * Returns a transformed ray.
   * @public
   *
   * @param {Ray3} ray
   * @returns {Ray3}
   */
  transformRay(ray) {
    return new Ray3(this.transformPosition3(ray.position), this.transformPosition3(ray.position.plus(ray.direction)).minus(this.transformPosition3(ray.position)));
  }

  /*---------------------------------------------------------------------------*
   * inverse transforms (for Vector3 or scalar)
   *---------------------------------------------------------------------------*/

  /**
   * Transforms a 3-dimensional vector by the inverse of our transform like it is a point with a position (translation is applied).
   * @public
   *
   * For an affine matrix $M$, the result is the homogeneous multiplication $M^{-1}\begin{bmatrix} x \\ y \\ z \\ 1 \end{bmatrix}$.
   *
   * This is the inverse of transformPosition3().
   *
   * @param {Vector3} v
   * @returns {Vector3}
   */
  inversePosition3(v) {
    return this.getInverse().timesVector3(v);
  }

  /**
   * Transforms a 3-dimensional vector by the inverse of our transform like position is irrelevant (translation is not applied).
   * @public
   *
   * This is the inverse of transformDelta3().
   *
   * @param {Vector3} v
   * @returns {Vector3}
   */
  inverseDelta3(v) {
    // inverse actually has the translation rolled into the other coefficients, so we have to make this longer
    return this.inversePosition3(v).minus(this.inversePosition3(Vector3.ZERO));
  }

  /**
   * Transforms a 3-dimensional vector by the inverse of our transform like it is a normal to a curve (so that the
   * curve is transformed, and the new normal to the curve at the transformed point is returned).
   * @public
   *
   * This is the inverse of transformNormal3().
   *
   * @param {Vector3} v
   * @returns {Vector3}
   */
  inverseNormal3(v) {
    return this.matrix.timesTransposeVector3(v);
  }

  /**
   * Returns the x-coordinate difference for two inverse-transformed vectors, which add the x-coordinate difference of the input
   * x (and same y,z values) beforehand.
   * @public
   *
   * This is the inverse of transformDeltaX().
   *
   * @param {number} x
   * @returns {number}
   */
  inverseDeltaX(x) {
    return this.inverseDelta3(new Vector3(x, 0, 0)).x;
  }

  /**
   * Returns the y-coordinate difference for two inverse-transformed vectors, which add the y-coordinate difference of the input
   * y (and same x,z values) beforehand.
   * @public
   *
   * This is the inverse of transformDeltaY().
   *
   * @param {number} y
   * @returns {number}
   */
  inverseDeltaY(y) {
    return this.inverseDelta3(new Vector3(0, y, 0)).y;
  }

  /**
   * Returns the z-coordinate difference for two inverse-transformed vectors, which add the z-coordinate difference of the input
   * z (and same x,y values) beforehand.
   * @public
   *
   * This is the inverse of transformDeltaZ().
   *
   * @param {number} z
   * @returns {number}
   */
  inverseDeltaZ(z) {
    return this.inverseDelta3(new Vector3(0, 0, z)).z;
  }

  /**
   * Returns an inverse-transformed ray.
   * @public
   *
   * This is the inverse of transformRay()
   *
   * @param {Ray3} ray
   * @returns {Ray3}
   */
  inverseRay(ray) {
    return new Ray3(this.inversePosition3(ray.position), this.inversePosition3(ray.position.plus(ray.direction)).minus(this.inversePosition3(ray.position)));
  }
}
js_dot.register('Transform4', Transform4);
/* harmony default export */ const js_Transform4 = ((/* unused pure expression or super */ null && (Transform4)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/main.js
// Copyright 2013-2022, University of Colorado Boulder




































/* harmony default export */ const dot_js_main = ((/* unused pure expression or super */ null && (dot)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3QiXSwic291cmNlcyI6WyJtYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG5cbmltcG9ydCAnLi9CaW5QYWNrZXIuanMnO1xuaW1wb3J0ICcuL0JvdW5kczIuanMnO1xuaW1wb3J0ICcuL0JvdW5kczMuanMnO1xuaW1wb3J0ICcuL0NvbWJpbmF0aW9uLmpzJztcbmltcG9ydCAnLi9Db21wbGV0ZVBpZWNld2lzZUxpbmVhckZ1bmN0aW9uLmpzJztcbmltcG9ydCAnLi9Db21wbGV4LmpzJztcbmltcG9ydCAnLi9Db252ZXhIdWxsMi5qcyc7XG5pbXBvcnQgJy4vRGFtcGVkSGFybW9uaWMuanMnO1xuaW1wb3J0ICcuL0RlbGF1bmF5VHJpYW5ndWxhdGlvbi5qcyc7XG5pbXBvcnQgJy4vRGltZW5zaW9uMi5qcyc7XG5pbXBvcnQgZG90IGZyb20gJy4vZG90LmpzJztcbmltcG9ydCAnLi9FaWdlbnZhbHVlRGVjb21wb3NpdGlvbi5qcyc7XG5pbXBvcnQgJy4vTGluZWFyRnVuY3Rpb24uanMnO1xuaW1wb3J0ICcuL0xVRGVjb21wb3NpdGlvbi5qcyc7XG5pbXBvcnQgJy4vTWF0cml4LmpzJztcbmltcG9ydCAnLi9NYXRyaXgzLmpzJztcbmltcG9ydCAnLi9NYXRyaXg0LmpzJztcbmltcG9ydCAnLi9NYXRyaXhPcHMzLmpzJztcbmltcG9ydCAnLi9QZXJtdXRhdGlvbi5qcyc7XG5pbXBvcnQgJy4vUGxhbmUzLmpzJztcbmltcG9ydCAnLi9RUkRlY29tcG9zaXRpb24uanMnO1xuaW1wb3J0ICcuL1F1YXRlcm5pb24uanMnO1xuaW1wb3J0ICcuL1JhbmRvbS5qcyc7XG5pbXBvcnQgJy4vUmFuZ2UuanMnO1xuaW1wb3J0ICcuL1JheTIuanMnO1xuaW1wb3J0ICcuL1JheTMuanMnO1xuaW1wb3J0ICcuL1JlY3RhbmdsZS5qcyc7XG5pbXBvcnQgJy4vU2luZ3VsYXJWYWx1ZURlY29tcG9zaXRpb24uanMnO1xuaW1wb3J0ICcuL1NwaGVyZTMuanMnO1xuaW1wb3J0ICcuL1RyYW5zZm9ybTMuanMnO1xuaW1wb3J0ICcuL1RyYW5zZm9ybTQuanMnO1xuaW1wb3J0ICcuL1V0aWxzLmpzJztcbmltcG9ydCAnLi9WZWN0b3IyLmpzJztcbmltcG9ydCAnLi9WZWN0b3IzLmpzJztcbmltcG9ydCAnLi9WZWN0b3I0LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZG90OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBR0EsT0FBTyxnQkFBZ0I7QUFDdkIsT0FBTyxjQUFjO0FBQ3JCLE9BQU8sY0FBYztBQUNyQixPQUFPLGtCQUFrQjtBQUN6QixPQUFPLHNDQUFzQztBQUM3QyxPQUFPLGNBQWM7QUFDckIsT0FBTyxrQkFBa0I7QUFDekIsT0FBTyxxQkFBcUI7QUFDNUIsT0FBTyw0QkFBNEI7QUFDbkMsT0FBTyxpQkFBaUI7QUFDeEIsT0FBT0EsR0FBRyxNQUFNLFVBQVU7QUFDMUIsT0FBTyw4QkFBOEI7QUFDckMsT0FBTyxxQkFBcUI7QUFDNUIsT0FBTyxzQkFBc0I7QUFDN0IsT0FBTyxhQUFhO0FBQ3BCLE9BQU8sY0FBYztBQUNyQixPQUFPLGNBQWM7QUFDckIsT0FBTyxpQkFBaUI7QUFDeEIsT0FBTyxrQkFBa0I7QUFDekIsT0FBTyxhQUFhO0FBQ3BCLE9BQU8sc0JBQXNCO0FBQzdCLE9BQU8saUJBQWlCO0FBQ3hCLE9BQU8sYUFBYTtBQUNwQixPQUFPLFlBQVk7QUFDbkIsT0FBTyxXQUFXO0FBQ2xCLE9BQU8sV0FBVztBQUNsQixPQUFPLGdCQUFnQjtBQUN2QixPQUFPLGlDQUFpQztBQUN4QyxPQUFPLGNBQWM7QUFDckIsT0FBTyxpQkFBaUI7QUFDeEIsT0FBTyxpQkFBaUI7QUFDeEIsT0FBTyxZQUFZO0FBQ25CLE9BQU8sY0FBYztBQUNyQixPQUFPLGNBQWM7QUFDckIsT0FBTyxjQUFjO0FBRXJCLGVBQWVBLEdBQUcifQ==
;// CONCATENATED MODULE: ../chipper/dist/js/dot/js/dot-main.js
// Copyright 2016-2023, University of Colorado Boulder




if (!window.hasOwnProperty('_')) {
  throw new Error('Underscore/Lodash not found: _');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ3aW5kb3ciLCJoYXNPd25Qcm9wZXJ0eSIsIkVycm9yIl0sInNvdXJjZXMiOlsiZG90LW1haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbmltcG9ydCAnLi4vLi4vYXhvbi9qcy9tYWluLmpzJztcbmltcG9ydCAnLi4vLi4vcGhldC1jb3JlL2pzL21haW4uanMnO1xuaW1wb3J0ICcuL21haW4uanMnO1xuXG5pZiAoICF3aW5kb3cuaGFzT3duUHJvcGVydHkoICdfJyApICkge1xuICB0aHJvdyBuZXcgRXJyb3IoICdVbmRlcnNjb3JlL0xvZGFzaCBub3QgZm91bmQ6IF8nICk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE9BQU8sdUJBQXVCO0FBQzlCLE9BQU8sNEJBQTRCO0FBQ25DLE9BQU8sV0FBVztBQUVsQixJQUFLLENBQUNBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFFLEdBQUcsQ0FBRSxFQUFHO0VBQ25DLE1BQU0sSUFBSUMsS0FBSyxDQUFFLGdDQUFnQyxDQUFFO0FBQ3JEIn0=
})();

/******/ })()
;
}());